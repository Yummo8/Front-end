// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"2d1gD":[function(require,module,exports) {
"use strict";
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "0830235abadc7d27";
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            if (typeof document !== 'undefined') removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else if ('reload' in location) location.reload();
            else {
                // Web extension context
                var ext = typeof chrome === 'undefined' ? typeof browser === 'undefined' ? null : browser : chrome;
                if (ext && ext.runtime && ext.runtime.reload) ext.runtime.reload();
            }
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                }
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            if (typeof document !== 'undefined') {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>").concat(stack, "</pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>💡 ' + hint + '</div>';
            }).join(''), "\n        </div>\n        ").concat(diagnostic.documentation ? "<div>\uD83D\uDCDD <a style=\"color: violet\" href=\"".concat(diagnostic.documentation, "\" target=\"_blank\">Learn more</a></div>") : '', "\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') reloadCSS();
    else if (asset.type === 'js') {
        var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                var oldDeps = modules[asset.id][1];
                for(var dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    var id = oldDeps[dep];
                    var parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            var fn = new Function('require', 'module', 'exports', asset.output);
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id1) {
    var modules = bundle.modules;
    if (!modules) return;
    if (modules[id1]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        var deps = modules[id1][1];
        var orphans = [];
        for(var dep in deps){
            var parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id1];
        delete bundle.cache[id1]; // Now delete the orphans.
        orphans.forEach(function(id) {
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id1);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    var parents = getParents(module.bundle.root, id);
    var accepted = false;
    while(parents.length > 0){
        var v = parents.shift();
        var a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            var p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push.apply(parents, _toConsumableArray(p));
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"bxot6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LedgerConnector", ()=>LedgerConnector
);
var _abstractConnector = require("@web3-react/abstract-connector");
var _web3ProviderEngine = require("web3-provider-engine");
var _web3ProviderEngineDefault = parcelHelpers.interopDefault(_web3ProviderEngine);
var _src = require("@0x/subproviders/lib/src");
var _ledger = require("@0x/subproviders/lib/src/subproviders/ledger");
var _cacheJs = require("web3-provider-engine/subproviders/cache.js");
var _cacheJsDefault = parcelHelpers.interopDefault(_cacheJs);
var _rpcSubprovider = require("@0x/subproviders/lib/src/subproviders/rpc_subprovider");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
}
function _setPrototypeOf(o1, p1) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return _setPrototypeOf(o1, p1);
}
var LedgerConnector = /*#__PURE__*/ function(_AbstractConnector) {
    _inheritsLoose(LedgerConnector1, _AbstractConnector);
    function LedgerConnector1(_ref) {
        var _this;
        var chainId = _ref.chainId, url = _ref.url, pollingInterval = _ref.pollingInterval, requestTimeoutMs = _ref.requestTimeoutMs, accountFetchingConfigs = _ref.accountFetchingConfigs, baseDerivationPath = _ref.baseDerivationPath;
        _this = _AbstractConnector.call(this, {
            supportedChainIds: [
                chainId
            ]
        }) || this;
        _this.chainId = chainId;
        _this.url = url;
        _this.pollingInterval = pollingInterval;
        _this.requestTimeoutMs = requestTimeoutMs;
        _this.accountFetchingConfigs = accountFetchingConfigs;
        _this.baseDerivationPath = baseDerivationPath;
        return _this;
    }
    var _proto = LedgerConnector1.prototype;
    _proto.activate = function activate() {
        try {
            var _this3 = this;
            if (!_this3.provider) {
                var engine = new _web3ProviderEngineDefault.default({
                    pollingInterval: _this3.pollingInterval
                });
                engine.addProvider(new _ledger.LedgerSubprovider({
                    networkId: _this3.chainId,
                    ledgerEthereumClientFactoryAsync: _src.ledgerEthereumBrowserClientFactoryAsync,
                    accountFetchingConfigs: _this3.accountFetchingConfigs,
                    baseDerivationPath: _this3.baseDerivationPath
                }));
                engine.addProvider(new _cacheJsDefault.default());
                engine.addProvider(new _rpcSubprovider.RPCSubprovider(_this3.url, _this3.requestTimeoutMs));
                _this3.provider = engine;
            }
            _this3.provider.start();
            return Promise.resolve({
                provider: _this3.provider,
                chainId: _this3.chainId
            });
        } catch (e) {
            return Promise.reject(e);
        }
    };
    _proto.getProvider = function getProvider() {
        try {
            var _this5 = this;
            return Promise.resolve(_this5.provider);
        } catch (e) {
            return Promise.reject(e);
        }
    };
    _proto.getChainId = function getChainId() {
        try {
            var _this7 = this;
            return Promise.resolve(_this7.chainId);
        } catch (e) {
            return Promise.reject(e);
        }
    };
    _proto.getAccount = function getAccount() {
        try {
            var _this9 = this;
            return Promise.resolve(_this9.provider._providers[0].getAccountsAsync(1).then(function(accounts) {
                return accounts[0];
            }));
        } catch (e) {
            return Promise.reject(e);
        }
    };
    _proto.deactivate = function deactivate() {
        this.provider.stop();
    };
    return LedgerConnector1;
}(_abstractConnector.AbstractConnector);

},{"@web3-react/abstract-connector":"gkcsn","web3-provider-engine":"c7e64","@0x/subproviders/lib/src":"l0UZe","@0x/subproviders/lib/src/subproviders/ledger":"hQU6O","web3-provider-engine/subproviders/cache.js":"bd3wR","@0x/subproviders/lib/src/subproviders/rpc_subprovider":"e8a2e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkcsn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AbstractConnector", ()=>AbstractConnector
);
var _events = require("events");
var _types = require("@web3-react/types");
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var AbstractConnector = /*#__PURE__*/ function(_EventEmitter) {
    _inheritsLoose(AbstractConnector1, _EventEmitter);
    function AbstractConnector1(_temp) {
        var _this;
        var _ref = _temp === void 0 ? {} : _temp, supportedChainIds = _ref.supportedChainIds;
        _this = _EventEmitter.call(this) || this;
        _this.supportedChainIds = supportedChainIds;
        return _this;
    }
    var _proto = AbstractConnector1.prototype;
    _proto.emitUpdate = function emitUpdate(update) {
        console.log("Emitting '" + _types.ConnectorEvent.Update + "' with payload", update);
        this.emit(_types.ConnectorEvent.Update, update);
    };
    _proto.emitError = function emitError(error) {
        console.log("Emitting '" + _types.ConnectorEvent.Error + "' with payload", error);
        this.emit(_types.ConnectorEvent.Error, error);
    };
    _proto.emitDeactivate = function emitDeactivate() {
        console.log("Emitting '" + _types.ConnectorEvent.Deactivate + "'");
        this.emit(_types.ConnectorEvent.Deactivate);
    };
    return AbstractConnector1;
}(_events.EventEmitter);

},{"events":"1VQLm","@web3-react/types":"5JR8V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c7e64":[function(require,module,exports) {
const EventEmitter = require('events').EventEmitter;
const inherits = require('util').inherits;
const ethUtil = require('ethereumjs-util');
const EthBlockTracker = require('eth-block-tracker');
const map = require('async/map');
const eachSeries = require('async/eachSeries');
const Stoplight = require('./util/stoplight.js');
const cacheUtils = require('./util/rpc-cache-utils.js');
const createPayload = require('./util/create-payload.js');
const noop = function() {};
module.exports = Web3ProviderEngine;
inherits(Web3ProviderEngine, EventEmitter);
function Web3ProviderEngine(opts) {
    const self = this;
    EventEmitter.call(self);
    self.setMaxListeners(30);
    // parse options
    opts = opts || {};
    // block polling
    const directProvider = {
        sendAsync: self._handleAsync.bind(self)
    };
    const blockTrackerProvider = opts.blockTrackerProvider || directProvider;
    self._blockTracker = opts.blockTracker || new EthBlockTracker({
        provider: blockTrackerProvider,
        pollingInterval: opts.pollingInterval || 4000
    });
    // handle new block
    self._blockTracker.on('block', (jsonBlock)=>{
        const bufferBlock = toBufferBlock(jsonBlock);
        self._setCurrentBlock(bufferBlock);
    });
    // emit block events from the block tracker
    self._blockTracker.on('block', self.emit.bind(self, 'rawBlock'));
    self._blockTracker.on('sync', self.emit.bind(self, 'sync'));
    self._blockTracker.on('latest', self.emit.bind(self, 'latest'));
    // set initialization blocker
    self._ready = new Stoplight();
    // unblock initialization after first block
    self._blockTracker.once('block', ()=>{
        self._ready.go();
    });
    // local state
    self.currentBlock = null;
    self._providers = [];
}
// public
Web3ProviderEngine.prototype.start = function(cb = noop) {
    const self = this;
    // start block polling
    self._blockTracker.start().then(cb).catch(cb);
};
Web3ProviderEngine.prototype.stop = function() {
    const self = this;
    // stop block polling
    self._blockTracker.stop();
};
Web3ProviderEngine.prototype.addProvider = function(source) {
    const self = this;
    self._providers.push(source);
    source.setEngine(this);
};
Web3ProviderEngine.prototype.send = function(payload) {
    throw new Error('Web3ProviderEngine does not support synchronous requests.');
};
Web3ProviderEngine.prototype.sendAsync = function(payload, cb) {
    const self = this;
    self._ready.await(function() {
        if (Array.isArray(payload)) // handle batch
        map(payload, self._handleAsync.bind(self), cb);
        else // handle single
        self._handleAsync(payload, cb);
    });
};
// private
Web3ProviderEngine.prototype._handleAsync = function(payload, finished) {
    var self = this;
    var currentProvider = -1;
    var result = null;
    var error = null;
    var stack = [];
    next();
    function next(after) {
        currentProvider += 1;
        stack.unshift(after);
        // Bubbled down as far as we could go, and the request wasn't
        // handled. Return an error.
        if (currentProvider >= self._providers.length) end(new Error('Request for method "' + payload.method + '" not handled by any subprovider. Please check your subprovider configuration to ensure this method is handled.'));
        else try {
            var provider = self._providers[currentProvider];
            provider.handleRequest(payload, next, end);
        } catch (e) {
            end(e);
        }
    }
    function end(_error, _result) {
        error = _error;
        result = _result;
        eachSeries(stack, function(fn, callback) {
            if (fn) fn(error, result, callback);
            else callback();
        }, function() {
            // console.log('COMPLETED:', payload)
            // console.log('RESULT: ', result)
            var resultObj = {
                id: payload.id,
                jsonrpc: payload.jsonrpc,
                result: result
            };
            if (error != null) {
                resultObj.error = {
                    message: error.stack || error.message || error,
                    code: -32000
                };
                // respond with both error formats
                finished(error, resultObj);
            } else finished(null, resultObj);
        });
    }
};
//
// from remote-data
//
Web3ProviderEngine.prototype._setCurrentBlock = function(block) {
    const self = this;
    self.currentBlock = block;
    self.emit('block', block);
};
// util
function toBufferBlock(jsonBlock) {
    return {
        number: ethUtil.toBuffer(jsonBlock.number),
        hash: ethUtil.toBuffer(jsonBlock.hash),
        parentHash: ethUtil.toBuffer(jsonBlock.parentHash),
        nonce: ethUtil.toBuffer(jsonBlock.nonce),
        sha3Uncles: ethUtil.toBuffer(jsonBlock.sha3Uncles),
        logsBloom: ethUtil.toBuffer(jsonBlock.logsBloom),
        transactionsRoot: ethUtil.toBuffer(jsonBlock.transactionsRoot),
        stateRoot: ethUtil.toBuffer(jsonBlock.stateRoot),
        receiptsRoot: ethUtil.toBuffer(jsonBlock.receiptRoot || jsonBlock.receiptsRoot),
        miner: ethUtil.toBuffer(jsonBlock.miner),
        difficulty: ethUtil.toBuffer(jsonBlock.difficulty),
        totalDifficulty: ethUtil.toBuffer(jsonBlock.totalDifficulty),
        size: ethUtil.toBuffer(jsonBlock.size),
        extraData: ethUtil.toBuffer(jsonBlock.extraData),
        gasLimit: ethUtil.toBuffer(jsonBlock.gasLimit),
        gasUsed: ethUtil.toBuffer(jsonBlock.gasUsed),
        timestamp: ethUtil.toBuffer(jsonBlock.timestamp),
        transactions: jsonBlock.transactions
    };
}

},{"events":"1VQLm","util":"cxohQ","ethereumjs-util":"glktw","eth-block-tracker":"cdUAI","async/map":"9UnHp","async/eachSeries":"9RNoG","./util/stoplight.js":"a4Kqs","./util/rpc-cache-utils.js":"ihP89","./util/create-payload.js":"jlx5q"}],"glktw":[function(require,module,exports) {
'use strict';
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
var _require = require('ethereum-cryptography/keccak'), keccak224 = _require.keccak224, keccak384 = _require.keccak384, k256 = _require.keccak256, keccak512 = _require.keccak512;
var secp256k1 = require('./secp256k1-adapter');
var assert = require('assert');
var rlp = require('rlp');
var BN = require('bn.js');
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
Object.assign(exports, require('ethjs-util'));
/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */ exports.MAX_INTEGER = new BN('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */ exports.TWO_POW256 = new BN('10000000000000000000000000000000000000000000000000000000000000000', 16);
/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */ exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
exports.SHA3_NULL_S = exports.KECCAK256_NULL_S;
/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */ exports.KECCAK256_NULL = Buffer.from(exports.KECCAK256_NULL_S, 'hex');
exports.SHA3_NULL = exports.KECCAK256_NULL;
/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */ exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
exports.SHA3_RLP_ARRAY_S = exports.KECCAK256_RLP_ARRAY_S;
/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */ exports.KECCAK256_RLP_ARRAY = Buffer.from(exports.KECCAK256_RLP_ARRAY_S, 'hex');
exports.SHA3_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY;
/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */ exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
exports.SHA3_RLP_S = exports.KECCAK256_RLP_S;
/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */ exports.KECCAK256_RLP = Buffer.from(exports.KECCAK256_RLP_S, 'hex');
exports.SHA3_RLP = exports.KECCAK256_RLP;
/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */ exports.BN = BN;
/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */ exports.rlp = rlp;
/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */ exports.secp256k1 = secp256k1;
/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */ exports.zeros = function(bytes) {
    return Buffer.allocUnsafe(bytes).fill(0);
};
/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */ exports.zeroAddress = function() {
    var addressLength = 20;
    var zeroAddress = exports.zeros(addressLength);
    return exports.bufferToHex(zeroAddress);
};
/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */ exports.setLengthLeft = exports.setLength = function(msg, length, right) {
    var buf = exports.zeros(length);
    msg = exports.toBuffer(msg);
    if (right) {
        if (msg.length < length) {
            msg.copy(buf);
            return buf;
        }
        return msg.slice(0, length);
    } else {
        if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
        }
        return msg.slice(-length);
    }
};
/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */ exports.setLengthRight = function(msg, length) {
    return exports.setLength(msg, length, true);
};
/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */ exports.unpad = exports.stripZeros = function(a) {
    a = exports.stripHexPrefix(a);
    var first = a[0];
    while(a.length > 0 && first.toString() === '0'){
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */ exports.toBuffer = function(v) {
    if (!Buffer.isBuffer(v)) {
        if (Array.isArray(v)) v = Buffer.from(v);
        else if (typeof v === 'string') {
            if (exports.isHexString(v)) v = Buffer.from(exports.padToEven(exports.stripHexPrefix(v)), 'hex');
            else v = Buffer.from(v);
        } else if (typeof v === 'number') v = exports.intToBuffer(v);
        else if (v === null || v === undefined) v = Buffer.allocUnsafe(0);
        else if (BN.isBN(v)) v = v.toArrayLike(Buffer);
        else if (v.toArray) // converts a BN to a Buffer
        v = Buffer.from(v.toArray());
        else throw new Error('invalid type');
    }
    return v;
};
/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */ exports.bufferToInt = function(buf) {
    return new BN(exports.toBuffer(buf)).toNumber();
};
/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */ exports.bufferToHex = function(buf) {
    buf = exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
};
/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */ exports.fromSigned = function(num) {
    return new BN(num).fromTwos(256);
};
/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */ exports.toUnsigned = function(num) {
    return Buffer.from(num.toTwos(256).toArray());
};
/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */ exports.keccak = function(a, bits) {
    a = exports.toBuffer(a);
    if (!bits) bits = 256;
    switch(bits){
        case 224:
            return keccak224(a);
        case 256:
            return k256(a);
        case 384:
            return keccak384(a);
        case 512:
            return keccak512(a);
        default:
            throw new Error('Invald algorithm: keccak' + bits);
    }
};
/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */ exports.keccak256 = function(a) {
    return exports.keccak(a);
};
/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */ exports.sha3 = exports.keccak;
/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */ exports.sha256 = function(a) {
    a = exports.toBuffer(a);
    return createHash('sha256').update(a).digest();
};
/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */ exports.ripemd160 = function(a, padded) {
    a = exports.toBuffer(a);
    var hash = createHash('rmd160').update(a).digest();
    if (padded === true) return exports.setLength(hash, 32);
    else return hash;
};
/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */ exports.rlphash = function(a) {
    return exports.keccak(rlp.encode(a));
};
/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */ exports.isValidPrivate = function(privateKey) {
    return secp256k1.privateKeyVerify(privateKey);
};
/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */ exports.isValidPublic = function(publicKey, sanitize) {
    if (publicKey.length === 64) // Convert to SEC1 for secp256k1
    return secp256k1.publicKeyVerify(Buffer.concat([
        Buffer.from([
            4
        ]),
        publicKey
    ]));
    if (!sanitize) return false;
    return secp256k1.publicKeyVerify(publicKey);
};
/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */ exports.pubToAddress = exports.publicToAddress = function(pubKey, sanitize) {
    pubKey = exports.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) pubKey = secp256k1.publicKeyConvert(pubKey, false).slice(1);
    assert(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return exports.keccak(pubKey).slice(-20);
};
/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */ var privateToPublic = exports.privateToPublic = function(privateKey) {
    privateKey = exports.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return secp256k1.publicKeyCreate(privateKey, false).slice(1);
};
/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */ exports.importPublic = function(publicKey) {
    publicKey = exports.toBuffer(publicKey);
    if (publicKey.length !== 64) publicKey = secp256k1.publicKeyConvert(publicKey, false).slice(1);
    return publicKey;
};
/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */ exports.ecsign = function(msgHash, privateKey) {
    var sig = secp256k1.sign(msgHash, privateKey);
    var ret = {};
    ret.r = sig.signature.slice(0, 32);
    ret.s = sig.signature.slice(32, 64);
    ret.v = sig.recovery + 27;
    return ret;
};
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */ exports.hashPersonalMessage = function(message) {
    var prefix = exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
    return exports.keccak(Buffer.concat([
        prefix,
        message
    ]));
};
/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */ exports.ecrecover = function(msgHash, v, r, s) {
    var signature = Buffer.concat([
        exports.setLength(r, 32),
        exports.setLength(s, 32)
    ], 64);
    var recovery = v - 27;
    if (recovery !== 0 && recovery !== 1) throw new Error('Invalid signature v value');
    var senderPubKey = secp256k1.recover(msgHash, signature, recovery);
    return secp256k1.publicKeyConvert(senderPubKey, false).slice(1);
};
/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */ exports.toRpcSig = function(v, r, s) {
    // NOTE: with potential introduction of chainId this might need to be updated
    if (v !== 27 && v !== 28) throw new Error('Invalid recovery id');
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
    return exports.bufferToHex(Buffer.concat([
        exports.setLengthLeft(r, 32),
        exports.setLengthLeft(s, 32),
        exports.toBuffer(v - 27)
    ]));
};
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */ exports.fromRpcSig = function(sig) {
    sig = exports.toBuffer(sig);
    // NOTE: with potential introduction of chainId this might need to be updated
    if (sig.length !== 65) throw new Error('Invalid signature length');
    var v = sig[64];
    // support both versions of `eth_sign` responses
    if (v < 27) v += 27;
    return {
        v: v,
        r: sig.slice(0, 32),
        s: sig.slice(32, 64)
    };
};
/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */ exports.privateToAddress = function(privateKey) {
    return exports.publicToAddress(privateToPublic(privateKey));
};
/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */ exports.isValidAddress = function(address) {
    return /^0x[0-9a-fA-F]{40}$/.test(address);
};
/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */ exports.isZeroAddress = function(address) {
    var zeroAddress = exports.zeroAddress();
    return zeroAddress === exports.addHexPrefix(address);
};
/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */ exports.toChecksumAddress = function(address) {
    address = exports.stripHexPrefix(address).toLowerCase();
    var hash = exports.keccak(address).toString('hex');
    var ret = '0x';
    for(var i = 0; i < address.length; i++)if (parseInt(hash[i], 16) >= 8) ret += address[i].toUpperCase();
    else ret += address[i];
    return ret;
};
/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */ exports.isValidChecksumAddress = function(address) {
    return exports.isValidAddress(address) && exports.toChecksumAddress(address) === address;
};
/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */ exports.generateAddress = function(from, nonce) {
    from = exports.toBuffer(from);
    nonce = new BN(nonce);
    if (nonce.isZero()) // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
    else nonce = Buffer.from(nonce.toArray());
    // Only take the lower 160bits of the hash
    return exports.rlphash([
        from,
        nonce
    ]).slice(-20);
};
/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */ exports.isPrecompiled = function(address) {
    var a = exports.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};
/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */ exports.addHexPrefix = function(str) {
    if (typeof str !== 'string') return str;
    return exports.isHexPrefixed(str) ? str : '0x' + str;
};
/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */ exports.isValidSignature = function(v, r, s, homestead) {
    var SECP256K1_N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new BN('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    if (r.length !== 32 || s.length !== 32) return false;
    if (v !== 27 && v !== 28) return false;
    r = new BN(r);
    s = new BN(s);
    if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) return false;
    if (homestead === false && new BN(s).cmp(SECP256K1_N_DIV_2) === 1) return false;
    return true;
};
/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */ exports.baToJSON = function(ba) {
    if (Buffer.isBuffer(ba)) return '0x' + ba.toString('hex');
    else if (ba instanceof Array) {
        var array = [];
        for(var i = 0; i < ba.length; i++)array.push(exports.baToJSON(ba[i]));
        return array;
    }
};
/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */ exports.defineProperties = function(self, fields, data) {
    self.raw = [];
    self._fields = [];
    // attach the `toJSON`
    self.toJSON = function(label) {
        if (label) {
            var obj = {};
            self._fields.forEach(function(field) {
                obj[field] = '0x' + self[field].toString('hex');
            });
            return obj;
        }
        return exports.baToJSON(this.raw);
    };
    self.serialize = function serialize() {
        return rlp.encode(self.raw);
    };
    fields.forEach(function(field, i) {
        self._fields.push(field.name);
        function getter() {
            return self.raw[i];
        }
        function setter(v) {
            v = exports.toBuffer(v);
            if (v.toString('hex') === '00' && !field.allowZero) v = Buffer.allocUnsafe(0);
            if (field.allowLess && field.length) {
                v = exports.stripZeros(v);
                assert(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
            } else if (!(field.allowZero && v.length === 0) && field.length) assert(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
            self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
        });
        if (field.default) self[field.name] = field.default;
        // attach alias
        if (field.alias) Object.defineProperty(self, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
        });
    });
    // if the constuctor is passed data
    if (data) {
        if (typeof data === 'string') data = Buffer.from(exports.stripHexPrefix(data), 'hex');
        if (Buffer.isBuffer(data)) data = rlp.decode(data);
        if (Array.isArray(data)) {
            if (data.length > self._fields.length) throw new Error('wrong number of fields in data');
            // make sure all the items are buffers
            data.forEach(function(d, i) {
                self[self._fields[i]] = exports.toBuffer(d);
            });
        } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object') {
            var keys = Object.keys(data);
            fields.forEach(function(field) {
                if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
                if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
            });
        } else throw new Error('invalid data');
    }
};

},{"ethereum-cryptography/keccak":"hXmVZ","./secp256k1-adapter":"98MVl","assert":"f3tT4","rlp":"aCeli","bn.js":"VopIn","create-hash":"2WyL8","safe-buffer":"eW7r9","ethjs-util":"iVRAn"}],"98MVl":[function(require,module,exports) {
'use strict';
var Buffer = require("buffer").Buffer;
var secp256k1 = require('ethereum-cryptography/secp256k1');
var secp256k1v3 = require('./secp256k1-lib/index');
var der = require('./secp256k1-lib/der');
/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */ var privateKeyVerify = function privateKeyVerify(privateKey) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) return false;
    return secp256k1.privateKeyVerify(Uint8Array.from(privateKey));
};
/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */ var privateKeyExport = function privateKeyExport(privateKey, compressed) {
    // privateKeyExport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    if (privateKey.length !== 32) throw new RangeError('private key length is invalid');
    var publicKey = secp256k1v3.privateKeyExport(privateKey, compressed);
    return der.privateKeyExport(privateKey, publicKey, compressed);
};
/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var privateKeyImport = function privateKeyImport(privateKey) {
    // privateKeyImport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    privateKey = der.privateKeyImport(privateKey);
    if (privateKey !== null && privateKey.length === 32 && privateKeyVerify(privateKey)) return privateKey;
    throw new Error("couldn't import from DER format");
};
/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var privateKeyNegate = function privateKeyNegate(privateKey) {
    return Buffer.from(secp256k1.privateKeyNegate(Uint8Array.from(privateKey)));
};
/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var privateKeyModInverse = function privateKeyModInverse(privateKey) {
    if (privateKey.length !== 32) throw new Error('private key length is invalid');
    return Buffer.from(secp256k1v3.privateKeyModInverse(Uint8Array.from(privateKey)));
};
/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */ var privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
    return Buffer.from(secp256k1.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};
/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */ var privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
    return Buffer.from(secp256k1.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};
/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ var publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
    return Buffer.from(secp256k1.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};
/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ var publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
    return Buffer.from(secp256k1.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};
/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */ var publicKeyVerify = function publicKeyVerify(publicKey) {
    // secp256k1 v4 version throws when publicKey length is not 33 or 65
    if (publicKey.length !== 33 && publicKey.length !== 65) return false;
    return secp256k1.publicKeyVerify(Uint8Array.from(publicKey));
};
/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */ var publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
    return Buffer.from(secp256k1.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */ var publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
    return Buffer.from(secp256k1.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */ var publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
    var keys = [];
    publicKeys.forEach(function(publicKey) {
        keys.push(Uint8Array.from(publicKey));
    });
    return Buffer.from(secp256k1.publicKeyCombine(keys, compressed));
};
/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */ var signatureNormalize = function signatureNormalize(signature) {
    return Buffer.from(secp256k1.signatureNormalize(Uint8Array.from(signature)));
};
/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */ var signatureExport = function signatureExport(signature) {
    return Buffer.from(secp256k1.signatureExport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */ var signatureImport = function signatureImport(signature) {
    return Buffer.from(secp256k1.signatureImport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */ var signatureImportLax = function signatureImportLax(signature) {
    // signatureImportLax method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure that signature is greater than 0
    if (signature.length === 0) throw new RangeError('signature length is invalid');
    var sigObj = der.signatureImportLax(signature);
    if (sigObj === null) throw new Error("couldn't parse DER signature");
    return secp256k1v3.signatureImport(sigObj);
};
/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */ var sign = function sign(message1, privateKey1, options) {
    if (options === null) throw new TypeError('options should be an Object');
    var signOptions = void 0;
    if (options) {
        signOptions = {};
        if (options.data === null) throw new TypeError('options.data should be a Buffer');
        if (options.data) {
            // validate option.data length
            if (options.data.length !== 32) throw new RangeError('options.data length is invalid');
            signOptions.data = new Uint8Array(options.data);
        }
        if (options.noncefn === null) throw new TypeError('options.noncefn should be a Function');
        if (options.noncefn) //  convert option.noncefn function signature
        signOptions.noncefn = function(message, privateKey, algo, data, attempt) {
            var bufferAlgo = algo != null ? Buffer.from(algo) : null;
            var bufferData = data != null ? Buffer.from(data) : null;
            var buffer = Buffer.from('');
            if (options.noncefn) buffer = options.noncefn(Buffer.from(message), Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
            return Uint8Array.from(buffer);
        };
    }
    var sig = secp256k1.ecdsaSign(Uint8Array.from(message1), Uint8Array.from(privateKey1), signOptions);
    return {
        signature: Buffer.from(sig.signature),
        recovery: sig.recid
    };
};
/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */ var verify = function verify(message, signature, publicKey) {
    // note: secp256k1 v4 verify method has a different argument order
    return secp256k1.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};
/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */ var recover = function recover(message, signature, recid, compressed) {
    // note: secp256k1 v4 recover method has a different argument order
    return Buffer.from(secp256k1.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};
/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var ecdh = function ecdh(publicKey, privateKey) {
    // note: secp256k1 v3 doesn't allow optional parameter
    return Buffer.from(secp256k1.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};
/**
 * Compute an EC Diffie-Hellman secret and return public key as result
 * @method ecdhUnsafe
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ var ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
    // ecdhUnsafe method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure valid publicKey length
    if (publicKey.length !== 33 && publicKey.length !== 65) throw new RangeError('public key length is invalid');
    // ensure valid privateKey length
    if (privateKey.length !== 32) throw new RangeError('private key length is invalid');
    return Buffer.from(secp256k1v3.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};
module.exports = {
    privateKeyVerify: privateKeyVerify,
    privateKeyExport: privateKeyExport,
    privateKeyImport: privateKeyImport,
    privateKeyNegate: privateKeyNegate,
    privateKeyModInverse: privateKeyModInverse,
    privateKeyTweakAdd: privateKeyTweakAdd,
    privateKeyTweakMul: privateKeyTweakMul,
    publicKeyCreate: publicKeyCreate,
    publicKeyConvert: publicKeyConvert,
    publicKeyVerify: publicKeyVerify,
    publicKeyTweakAdd: publicKeyTweakAdd,
    publicKeyTweakMul: publicKeyTweakMul,
    publicKeyCombine: publicKeyCombine,
    signatureNormalize: signatureNormalize,
    signatureExport: signatureExport,
    signatureImport: signatureImport,
    signatureImportLax: signatureImportLax,
    sign: sign,
    verify: verify,
    recover: recover,
    ecdh: ecdh,
    ecdhUnsafe: ecdhUnsafe
};

},{"buffer":"fCgem","ethereum-cryptography/secp256k1":"fXFOP","./secp256k1-lib/index":"jNhjC","./secp256k1-lib/der":"22cnR"}],"jNhjC":[function(require,module,exports) {
'use strict';
var Buffer = require("buffer").Buffer;
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
var BN = require('bn.js');
var EC = require('elliptic').ec;
var ec = new EC('secp256k1');
var ecparams = ec.curve;
exports.privateKeyExport = function(privateKey, compressed) {
    var d = new BN(privateKey);
    if (d.ucmp(ecparams.n) >= 0) throw new Error('couldn\'t export to DER format');
    var point = ec.g.mul(d);
    return toPublicKey(point.getX(), point.getY(), compressed);
};
exports.privateKeyModInverse = function(privateKey) {
    var bn = new BN(privateKey);
    if (bn.ucmp(ecparams.n) >= 0 || bn.isZero()) throw new Error('private key range is invalid');
    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};
exports.signatureImport = function(sigObj) {
    var r = new BN(sigObj.r);
    if (r.ucmp(ecparams.n) >= 0) r = new BN(0);
    var s = new BN(sigObj.s);
    if (s.ucmp(ecparams.n) >= 0) s = new BN(0);
    return Buffer.concat([
        r.toArrayLike(Buffer, 'be', 32),
        s.toArrayLike(Buffer, 'be', 32)
    ]);
};
exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
    var point = ec.keyFromPublic(publicKey);
    var scalar = new BN(privateKey);
    if (scalar.ucmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error('scalar was invalid (zero or overflow)');
    var shared = point.pub.mul(scalar);
    return toPublicKey(shared.getX(), shared.getY(), compressed);
};
var toPublicKey = function toPublicKey(x, y, compressed) {
    var publicKey = void 0;
    if (compressed) {
        publicKey = Buffer.alloc(33);
        publicKey[0] = y.isOdd() ? 0x03 : 0x02;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
    } else {
        publicKey = Buffer.alloc(65);
        publicKey[0] = 0x04;
        x.toArrayLike(Buffer, 'be', 32).copy(publicKey, 1);
        y.toArrayLike(Buffer, 'be', 32).copy(publicKey, 33);
    }
    return publicKey;
};

},{"buffer":"fCgem","bn.js":"VopIn","elliptic":"1NKsH"}],"22cnR":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
    // begin
    0x30,
    0x81,
    0xd3,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0x85,
    0x30,
    0x81,
    0x82,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x21,
    0x02,
    0x79,
    0xbe,
    0x66,
    0x7e,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xce,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xce,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xba,
    0xae,
    0xdc,
    0xe6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5e,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x24,
    0x03,
    0x22,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
]);
var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
    // begin
    0x30,
    0x82,
    0x01,
    0x13,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0xa5,
    0x30,
    0x81,
    0xa2,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xce,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x41,
    0x04,
    0x79,
    0xbe,
    0x66,
    0x7e,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xce,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xce,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x48,
    0x3a,
    0xda,
    0x77,
    0x26,
    0xa3,
    0xc4,
    0x65,
    0x5d,
    0xa4,
    0xfb,
    0xfc,
    0x0e,
    0x11,
    0x08,
    0xa8,
    0xfd,
    0x17,
    0xb4,
    0x48,
    0xa6,
    0x85,
    0x54,
    0x19,
    0x9c,
    0x47,
    0xd0,
    0x8f,
    0xfb,
    0x10,
    0xd4,
    0xb8,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfe,
    0xba,
    0xae,
    0xdc,
    0xe6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5e,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x44,
    0x03,
    0x42,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
]);
exports.privateKeyExport = function(privateKey, publicKey, compressed) {
    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result;
};
exports.privateKeyImport = function(privateKey) {
    var length = privateKey.length;
    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 0x30) return null;
    index += 1;
    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 0x80)) return null;
    var lenb = privateKey[index] & 0x7f;
    index += 1;
    if (lenb < 1 || lenb > 2) return null;
    if (length < index + lenb) return null;
    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len) return null;
    // sequence element 0: version number (=1)
    if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) return null;
    index += 3;
    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) return null;
    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};
exports.signatureImportLax = function(signature) {
    var r = Buffer.alloc(32, 0);
    var s = Buffer.alloc(32, 0);
    var length = signature.length;
    var index = 0;
    // sequence tag byte
    if (signature[index++] !== 0x30) return null;
    // sequence length byte
    var lenbyte = signature[index++];
    if (lenbyte & 0x80) {
        index += lenbyte - 0x80;
        if (index > length) return null;
    }
    // sequence tag byte for r
    if (signature[index++] !== 0x02) return null;
    // length for r
    var rlen = signature[index++];
    if (rlen & 0x80) {
        lenbyte = rlen - 0x80;
        if (index + lenbyte > length) return null;
        for(; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);
        for(rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)rlen = (rlen << 8) + signature[index];
    }
    if (rlen > length - index) return null;
    var rindex = index;
    index += rlen;
    // sequence tag byte for s
    if (signature[index++] !== 0x02) return null;
    // length for s
    var slen = signature[index++];
    if (slen & 0x80) {
        lenbyte = slen - 0x80;
        if (index + lenbyte > length) return null;
        for(; lenbyte > 0 && signature[index] === 0x00; index += 1, lenbyte -= 1);
        for(slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)slen = (slen << 8) + signature[index];
    }
    if (slen > length - index) return null;
    var sindex = index;
    index += slen;
    // ignore leading zeros in r
    for(; rlen > 0 && signature[rindex] === 0x00; rlen -= 1, rindex += 1);
    // copy r value
    if (rlen > 32) return null;
    var rvalue = signature.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);
    // ignore leading zeros in s
    for(; slen > 0 && signature[sindex] === 0x00; slen -= 1, sindex += 1);
    // copy s value
    if (slen > 32) return null;
    var svalue = signature.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);
    return {
        r: r,
        s: s
    };
};

},{"buffer":"fCgem"}],"iVRAn":[function(require,module,exports) {
'use strict';
var Buffer = require("buffer").Buffer;
var isHexPrefixed = require('is-hex-prefixed');
var stripHexPrefix = require('strip-hex-prefix');
/**
 * Pads a `String` to have an even length
 * @param {String} value
 * @return {String} output
 */ function padToEven(value) {
    var a = value; // eslint-disable-line
    if (typeof a !== 'string') throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
    if (a.length % 2) a = '0' + a;
    return a;
}
/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */ function intToHex(i) {
    var hex = i.toString(16); // eslint-disable-line
    return '0x' + hex;
}
/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */ function intToBuffer(i) {
    var hex = intToHex(i);
    return new Buffer(padToEven(hex.slice(2)), 'hex');
}
/**
 * Get the binary size of a string
 * @param {String} str
 * @return {Number}
 */ function getBinarySize(str) {
    if (typeof str !== 'string') throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
    return Buffer.byteLength(str, 'utf8');
}
/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param {array} superset
 * @param {array} subset
 *
 * @returns {boolean}
 */ function arrayContainsArray(superset, subset, some) {
    if (Array.isArray(superset) !== true) throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
    if (Array.isArray(subset) !== true) throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
    return subset[Boolean(some) && 'some' || 'every'](function(value) {
        return superset.indexOf(value) >= 0;
    });
}
/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */ function toUtf8(hex) {
    var bufferValue = new Buffer(padToEven(stripHexPrefix(hex).replace(/^0+|0+$/g, '')), 'hex');
    return bufferValue.toString('utf8');
}
/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */ function toAscii(hex) {
    var str = ''; // eslint-disable-line
    var i = 0, l = hex.length; // eslint-disable-line
    if (hex.substring(0, 2) === '0x') i = 2;
    for(; i < l; i += 2){
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }
    return str;
}
/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */ function fromUtf8(stringValue) {
    var str = new Buffer(stringValue, 'utf8');
    return '0x' + padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
}
/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */ function fromAscii(stringValue) {
    var hex = ''; // eslint-disable-line
    for(var i = 0; i < stringValue.length; i++){
        // eslint-disable-line
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }
    return '0x' + hex;
}
/**
 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
 *
 * @method getKeys get specific key from inner object array of objects
 * @param {String} params
 * @param {String} key
 * @param {Boolean} allowEmpty
 * @returns {Array} output just a simple array of output keys
 */ function getKeys(params, key, allowEmpty) {
    if (!Array.isArray(params)) throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
    if (typeof key !== 'string') throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
    var result = []; // eslint-disable-line
    for(var i = 0; i < params.length; i++){
        // eslint-disable-line
        var value = params[i][key]; // eslint-disable-line
        if (allowEmpty && !value) value = '';
        else if (typeof value !== 'string') throw new Error('invalid abi');
        result.push(value);
    }
    return result;
}
/**
 * Is the string a hex string.
 *
 * @method check if string is hex string of specific length
 * @param {String} value
 * @param {Number} length
 * @returns {Boolean} output the string is a hex string
 */ function isHexString(value, length) {
    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
    if (length && value.length !== 2 + 2 * length) return false;
    return true;
}
module.exports = {
    arrayContainsArray: arrayContainsArray,
    intToBuffer: intToBuffer,
    getBinarySize: getBinarySize,
    isHexPrefixed: isHexPrefixed,
    stripHexPrefix: stripHexPrefix,
    padToEven: padToEven,
    intToHex: intToHex,
    fromAscii: fromAscii,
    fromUtf8: fromUtf8,
    toAscii: toAscii,
    toUtf8: toUtf8,
    getKeys: getKeys,
    isHexString: isHexString
};

},{"buffer":"fCgem","is-hex-prefixed":"1YjCl","strip-hex-prefix":"5tFR0"}],"cdUAI":[function(require,module,exports) {
// const EthQuery = require('ethjs-query')
const EthQuery = require('eth-query');
const EventEmitter = require('events');
const pify = require('pify');
const hexUtils = require('./hexUtils');
const incrementHexNumber = hexUtils.incrementHexNumber;
const sec = 1000;
const min = 60 * sec;
class RpcBlockTracker extends EventEmitter {
    constructor(opts = {}){
        super();
        if (!opts.provider) throw new Error('RpcBlockTracker - no provider specified.');
        this._provider = opts.provider;
        this._query = new EthQuery(opts.provider);
        // config
        this._pollingInterval = opts.pollingInterval || 4 * sec;
        this._syncingTimeout = opts.syncingTimeout || 1 * min;
        // state
        this._trackingBlock = null;
        this._trackingBlockTimestamp = null;
        this._currentBlock = null;
        this._isRunning = false;
        // bind methods for cleaner syntax later
        this._performSync = this._performSync.bind(this);
        this._handleNewBlockNotification = this._handleNewBlockNotification.bind(this);
    }
    getTrackingBlock() {
        return this._trackingBlock;
    }
    getCurrentBlock() {
        return this._currentBlock;
    }
    async awaitCurrentBlock() {
        // return if available
        if (this._currentBlock) return this._currentBlock;
        // wait for "sync" event
        await new Promise((resolve)=>this.once('latest', resolve)
        );
        // return newly set current block
        return this._currentBlock;
    }
    async start(opts = {}) {
        // abort if already started
        if (this._isRunning) return;
        this._isRunning = true;
        // if this._currentBlock
        if (opts.fromBlock) // use specified start point
        await this._setTrackingBlock(await this._fetchBlockByNumber(opts.fromBlock));
        else // or query for latest
        await this._setTrackingBlock(await this._fetchLatestBlock());
        if (this._provider.on) await this._initSubscription();
        else this._performSync().catch((err)=>{
            if (err) console.error(err);
        });
    }
    async stop() {
        this._isRunning = false;
        if (this._provider.on) await this._removeSubscription();
    }
    //
    // private
    //
    async _setTrackingBlock(newBlock) {
        if (this._trackingBlock && this._trackingBlock.hash === newBlock.hash) return;
        // check for large timestamp lapse
        const previous = this._trackingBlockTimestamp;
        const now = Date.now();
        // check for desynchronization (computer sleep or no internet)
        if (previous && now - previous > this._syncingTimeout) {
            this._trackingBlockTimestamp = null;
            await this._warpToLatest();
        } else {
            this._trackingBlock = newBlock;
            this._trackingBlockTimestamp = now;
            this.emit('block', newBlock);
        }
    }
    async _setCurrentBlock(newBlock) {
        if (this._currentBlock && this._currentBlock.hash === newBlock.hash) return;
        const oldBlock = this._currentBlock;
        this._currentBlock = newBlock;
        this.emit('latest', newBlock);
        this.emit('sync', {
            newBlock,
            oldBlock
        });
    }
    async _warpToLatest() {
        // set latest as tracking block
        await this._setTrackingBlock(await this._fetchLatestBlock());
    }
    async _pollForNextBlock() {
        setTimeout(()=>this._performSync()
        , this._pollingInterval);
    }
    async _performSync() {
        if (!this._isRunning) return;
        const trackingBlock = this.getTrackingBlock();
        if (!trackingBlock) throw new Error('RpcBlockTracker - tracking block is missing');
        const nextNumber = incrementHexNumber(trackingBlock.number);
        try {
            const newBlock = await this._fetchBlockByNumber(nextNumber);
            if (newBlock) {
                // set as new tracking block
                await this._setTrackingBlock(newBlock);
                // ask for next block
                this._performSync();
            } else {
                // set tracking block as current block
                await this._setCurrentBlock(trackingBlock);
                // setup poll for next block
                this._pollForNextBlock();
            }
        } catch (err) {
            // hotfix for https://github.com/ethereumjs/testrpc/issues/290
            if (err.message.includes('index out of range') || err.message.includes("Couldn't find block by reference")) {
                // set tracking block as current block
                await this._setCurrentBlock(trackingBlock);
                // setup poll for next block
                this._pollForNextBlock();
            } else {
                console.error(err);
                this._pollForNextBlock();
            }
        }
    }
    async _handleNewBlockNotification(err, notification) {
        if (notification.id != this._subscriptionId) return; // this notification isn't for us
        if (err) {
            this.emit('error', err);
            await this._removeSubscription();
        }
        await this._setTrackingBlock(await this._fetchBlockByNumber(notification.result.number));
    }
    async _initSubscription() {
        this._provider.on('data', this._handleNewBlockNotification);
        let result = await pify(this._provider.sendAsync || this._provider.send)({
            jsonrpc: '2.0',
            id: new Date().getTime(),
            method: 'eth_subscribe',
            params: [
                'newHeads'
            ]
        });
        this._subscriptionId = result.result;
    }
    async _removeSubscription() {
        if (!this._subscriptionId) throw new Error("Not subscribed.");
        this._provider.removeListener('data', this._handleNewBlockNotification);
        await pify(this._provider.sendAsync || this._provider.send)({
            jsonrpc: '2.0',
            id: new Date().getTime(),
            method: 'eth_unsubscribe',
            params: [
                this._subscriptionId
            ]
        });
        delete this._subscriptionId;
    }
    _fetchLatestBlock() {
        return pify(this._query.getBlockByNumber).call(this._query, 'latest', true);
    }
    _fetchBlockByNumber(hexNumber) {
        const cleanHex = hexUtils.formatHex(hexNumber);
        return pify(this._query.getBlockByNumber).call(this._query, cleanHex, true);
    }
}
module.exports = RpcBlockTracker // ├─ difficulty: 0x2892ddca
 // ├─ extraData: 0xd983010507846765746887676f312e372e348777696e646f7773
 // ├─ gasLimit: 0x47e7c4
 // ├─ gasUsed: 0x6384
 // ├─ hash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9
 // ├─ logsBloom: 0x
 // ├─ miner: 0x01711853335f857442ef6f349b2467c531731318
 // ├─ mixHash: 0xf0d9bec999600eec92e8e4da8fc1182e357468c9ed2f849aa17e0e900412b352
 // ├─ nonce: 0xd556d5a5504198e4
 // ├─ number: 0x72ac8
 // ├─ parentHash: 0xf5239c3ce1085194521435a5052494c02bbb1002b019684dcf368490ea6208e5
 // ├─ receiptsRoot: 0x78c6f8236094b392bcc43b47b0dc1ce93ecd2875bfb5e4e4c3431e5af698ff99
 // ├─ sha3Uncles: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347
 // ├─ size: 0x2ad
 // ├─ stateRoot: 0x0554f145c481df2fa02ecd2da17071672740c3aa948c896f1465e6772f741ac6
 // ├─ timestamp: 0x58955844
 // ├─ totalDifficulty: 0x751d0dfa03c1
 // ├─ transactions
 // │  └─ 0
 // │     ├─ blockHash: 0xf60903687b1559b9c80f2d935b4c4f468ad95c3076928c432ec34f2ef3d4eec9
 // │     ├─ blockNumber: 0x72ac8
 // │     ├─ from: 0x201354729f8d0f8b64e9a0c353c672c6a66b3857
 // │     ├─ gas: 0x15f90
 // │     ├─ gasPrice: 0x4a817c800
 // │     ├─ hash: 0xd5a15d7c2449150db4f74f42a6ca0702150a24c46c5b406a7e1b3e44908ef44d
 // │     ├─ input: 0xe1fa8e849bc10d87fb03c6b0603b05a3e29043c7e0b7c927119576a4bec457e96c7d7cde
 // │     ├─ nonce: 0x323e
 // │     ├─ to: 0xd10e3be2bc8f959bc8c41cf65f60de721cf89adf
 // │     ├─ transactionIndex: 0x0
 // │     ├─ value: 0x0
 // │     ├─ v: 0x29
 // │     ├─ r: 0xf35f8ab241e6bb3ccaffd21b268dbfc7fcb5df1c1fb83ee5306207e4a1a3e954
 // │     └─ s: 0x1610cdac2782c91065fd43584cd8974f7f3b4e6d46a2aafe7b101788285bf3f2
 // ├─ transactionsRoot: 0xb090c32d840dec1e9752719f21bbae4a73e58333aecb89bc3b8ed559fb2712a3
 // └─ uncles
;

},{"eth-query":"bSTFn","events":"1VQLm","pify":"5wzN4","./hexUtils":"8b2TQ"}],"bSTFn":[function(require,module,exports) {
const extend = require('xtend');
const createRandomId = require('json-rpc-random-id')();
module.exports = EthQuery;
function EthQuery(provider) {
    const self = this;
    self.currentProvider = provider;
}
//
// base queries
//
// default block
EthQuery.prototype.getBalance = generateFnWithDefaultBlockFor(2, 'eth_getBalance');
EthQuery.prototype.getCode = generateFnWithDefaultBlockFor(2, 'eth_getCode');
EthQuery.prototype.getTransactionCount = generateFnWithDefaultBlockFor(2, 'eth_getTransactionCount');
EthQuery.prototype.getStorageAt = generateFnWithDefaultBlockFor(3, 'eth_getStorageAt');
EthQuery.prototype.call = generateFnWithDefaultBlockFor(2, 'eth_call');
// standard
EthQuery.prototype.protocolVersion = generateFnFor('eth_protocolVersion');
EthQuery.prototype.syncing = generateFnFor('eth_syncing');
EthQuery.prototype.coinbase = generateFnFor('eth_coinbase');
EthQuery.prototype.mining = generateFnFor('eth_mining');
EthQuery.prototype.hashrate = generateFnFor('eth_hashrate');
EthQuery.prototype.gasPrice = generateFnFor('eth_gasPrice');
EthQuery.prototype.accounts = generateFnFor('eth_accounts');
EthQuery.prototype.blockNumber = generateFnFor('eth_blockNumber');
EthQuery.prototype.getBlockTransactionCountByHash = generateFnFor('eth_getBlockTransactionCountByHash');
EthQuery.prototype.getBlockTransactionCountByNumber = generateFnFor('eth_getBlockTransactionCountByNumber');
EthQuery.prototype.getUncleCountByBlockHash = generateFnFor('eth_getUncleCountByBlockHash');
EthQuery.prototype.getUncleCountByBlockNumber = generateFnFor('eth_getUncleCountByBlockNumber');
EthQuery.prototype.sign = generateFnFor('eth_sign');
EthQuery.prototype.sendTransaction = generateFnFor('eth_sendTransaction');
EthQuery.prototype.sendRawTransaction = generateFnFor('eth_sendRawTransaction');
EthQuery.prototype.estimateGas = generateFnFor('eth_estimateGas');
EthQuery.prototype.getBlockByHash = generateFnFor('eth_getBlockByHash');
EthQuery.prototype.getBlockByNumber = generateFnFor('eth_getBlockByNumber');
EthQuery.prototype.getTransactionByHash = generateFnFor('eth_getTransactionByHash');
EthQuery.prototype.getTransactionByBlockHashAndIndex = generateFnFor('eth_getTransactionByBlockHashAndIndex');
EthQuery.prototype.getTransactionByBlockNumberAndIndex = generateFnFor('eth_getTransactionByBlockNumberAndIndex');
EthQuery.prototype.getTransactionReceipt = generateFnFor('eth_getTransactionReceipt');
EthQuery.prototype.getUncleByBlockHashAndIndex = generateFnFor('eth_getUncleByBlockHashAndIndex');
EthQuery.prototype.getUncleByBlockNumberAndIndex = generateFnFor('eth_getUncleByBlockNumberAndIndex');
EthQuery.prototype.getCompilers = generateFnFor('eth_getCompilers');
EthQuery.prototype.compileLLL = generateFnFor('eth_compileLLL');
EthQuery.prototype.compileSolidity = generateFnFor('eth_compileSolidity');
EthQuery.prototype.compileSerpent = generateFnFor('eth_compileSerpent');
EthQuery.prototype.newFilter = generateFnFor('eth_newFilter');
EthQuery.prototype.newBlockFilter = generateFnFor('eth_newBlockFilter');
EthQuery.prototype.newPendingTransactionFilter = generateFnFor('eth_newPendingTransactionFilter');
EthQuery.prototype.uninstallFilter = generateFnFor('eth_uninstallFilter');
EthQuery.prototype.getFilterChanges = generateFnFor('eth_getFilterChanges');
EthQuery.prototype.getFilterLogs = generateFnFor('eth_getFilterLogs');
EthQuery.prototype.getLogs = generateFnFor('eth_getLogs');
EthQuery.prototype.getWork = generateFnFor('eth_getWork');
EthQuery.prototype.submitWork = generateFnFor('eth_submitWork');
EthQuery.prototype.submitHashrate = generateFnFor('eth_submitHashrate');
// network level
EthQuery.prototype.sendAsync = function(opts, cb) {
    const self = this;
    self.currentProvider.sendAsync(createPayload(opts), function(err, response) {
        if (!err && response.error) err = new Error('EthQuery - RPC Error - ' + response.error.message);
        if (err) return cb(err);
        cb(null, response.result);
    });
};
// util
function generateFnFor(methodName) {
    return function() {
        const self = this;
        var args = [].slice.call(arguments);
        var cb = args.pop();
        self.sendAsync({
            method: methodName,
            params: args
        }, cb);
    };
}
function generateFnWithDefaultBlockFor(argCount, methodName) {
    return function() {
        const self = this;
        var args = [].slice.call(arguments);
        var cb = args.pop();
        // set optional default block param
        if (args.length < argCount) args.push('latest');
        self.sendAsync({
            method: methodName,
            params: args
        }, cb);
    };
}
function createPayload(data) {
    return extend({
        // defaults
        id: createRandomId(),
        jsonrpc: '2.0',
        params: []
    }, data);
}

},{"xtend":"93zjj","json-rpc-random-id":"hXPgU"}],"hXPgU":[function(require,module,exports) {
module.exports = IdIterator;
function IdIterator(opts) {
    opts = opts || {};
    var max = opts.max || Number.MAX_SAFE_INTEGER;
    var idCounter = typeof opts.start !== 'undefined' ? opts.start : Math.floor(Math.random() * max);
    return function createRandomId() {
        idCounter = idCounter % max;
        return idCounter++;
    };
}

},{}],"5wzN4":[function(require,module,exports) {
'use strict';
var processFn = function(fn, P, opts) {
    return function() {
        var that = this;
        var args = new Array(arguments.length);
        for(var i1 = 0; i1 < arguments.length; i1++)args[i1] = arguments[i1];
        return new P(function(resolve, reject) {
            args.push(function(err, result) {
                if (err) reject(err);
                else if (opts.multiArgs) {
                    var results = new Array(arguments.length - 1);
                    for(var i = 1; i < arguments.length; i++)results[i - 1] = arguments[i];
                    resolve(results);
                } else resolve(result);
            });
            fn.apply(that, args);
        });
    };
};
var pify = module.exports = function(obj, P, opts) {
    if (typeof P !== 'function') {
        opts = P;
        P = Promise;
    }
    opts = opts || {};
    opts.exclude = opts.exclude || [
        /.+Sync$/
    ];
    var filter = function(key) {
        var match = function(pattern) {
            return typeof pattern === 'string' ? key === pattern : pattern.test(key);
        };
        return opts.include ? opts.include.some(match) : !opts.exclude.some(match);
    };
    var ret1 = typeof obj === 'function' ? function() {
        if (opts.excludeMain) return obj.apply(this, arguments);
        return processFn(obj, P, opts).apply(this, arguments);
    } : {};
    return Object.keys(obj).reduce(function(ret, key) {
        var x = obj[key];
        ret[key] = typeof x === 'function' && filter(key) ? processFn(x, P, opts) : x;
        return ret;
    }, ret1);
};
pify.all = pify;

},{}],"8b2TQ":[function(require,module,exports) {
'use strict';
const ethjsUtil = require('ethjs-util');
module.exports = {
    incrementHexNumber,
    formatHex
};
function incrementHexNumber(hexNum) {
    return formatHex(ethjsUtil.intToHex(parseInt(hexNum, 16) + 1));
}
function formatHex(hexNum) {
    let stripped = ethjsUtil.stripHexPrefix(hexNum);
    while(stripped[0] === '0')stripped = stripped.substr(1);
    return `0x${stripped}`;
}

},{"ethjs-util":"iVRAn"}],"9UnHp":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _doParallel = require('./internal/doParallel');
var _doParallel2 = _interopRequireDefault(_doParallel);
var _map = require('./internal/map');
var _map2 = _interopRequireDefault(_map);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Produces a new collection of values by mapping each value in `coll` through
 * the `iteratee` function. The `iteratee` is called with an item from `coll`
 * and a callback for when it has finished processing. Each of these callback
 * takes 2 arguments: an `error`, and the transformed item from `coll`. If
 * `iteratee` passes an error to its callback, the main `callback` (for the
 * `map` function) is immediately called with the error.
 *
 * Note, that since this function applies the `iteratee` to each item in
 * parallel, there is no guarantee that the `iteratee` functions will complete
 * in order. However, the results array will be in the same order as the
 * original `coll`.
 *
 * If `map` is passed an Object, the results will be an Array.  The results
 * will roughly be in the order of the original Objects' keys (but this can
 * vary across JavaScript engines).
 *
 * @name map
 * @static
 * @memberOf module:Collections
 * @method
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The iteratee should complete with the transformed item.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all `iteratee`
 * functions have finished, or an error occurs. Results is an Array of the
 * transformed items from the `coll`. Invoked with (err, results).
 * @example
 *
 * async.map(['file1','file2','file3'], fs.stat, function(err, results) {
 *     // results is now an array of stats for each file
 * });
 */ exports.default = (0, _doParallel2.default)(_map2.default);
module.exports = exports['default'];

},{"./internal/doParallel":"6f9BD","./internal/map":"9UMc7"}],"6f9BD":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = doParallel;
var _eachOf = require('../eachOf');
var _eachOf2 = _interopRequireDefault(_eachOf);
var _wrapAsync = require('./wrapAsync');
var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function doParallel(fn) {
    return function(obj, iteratee, callback) {
        return fn(_eachOf2.default, obj, (0, _wrapAsync2.default)(iteratee), callback);
    };
}
module.exports = exports['default'];

},{"../eachOf":"F06hp","./wrapAsync":"4DU5O"}],"F06hp":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = function(coll, iteratee, callback) {
    var eachOfImplementation = (0, _isArrayLike2.default)(coll) ? eachOfArrayLike : eachOfGeneric;
    eachOfImplementation(coll, (0, _wrapAsync2.default)(iteratee), callback);
};
var _isArrayLike = require('lodash/isArrayLike');
var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
var _breakLoop = require('./internal/breakLoop');
var _breakLoop2 = _interopRequireDefault(_breakLoop);
var _eachOfLimit = require('./eachOfLimit');
var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
var _doLimit = require('./internal/doLimit');
var _doLimit2 = _interopRequireDefault(_doLimit);
var _noop = require('lodash/noop');
var _noop2 = _interopRequireDefault(_noop);
var _once = require('./internal/once');
var _once2 = _interopRequireDefault(_once);
var _onlyOnce = require('./internal/onlyOnce');
var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
var _wrapAsync = require('./internal/wrapAsync');
var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
// eachOf implementation optimized for array-likes
function eachOfArrayLike(coll, iteratee, callback) {
    callback = (0, _once2.default)(callback || _noop2.default);
    var index = 0, completed = 0, length = coll.length;
    if (length === 0) callback(null);
    function iteratorCallback(err, value) {
        if (err) callback(err);
        else if (++completed === length || value === _breakLoop2.default) callback(null);
    }
    for(; index < length; index++)iteratee(coll[index], index, (0, _onlyOnce2.default)(iteratorCallback));
}
// a generic version of eachOf which can handle array, object, and iterator cases.
var eachOfGeneric = (0, _doLimit2.default)(_eachOfLimit2.default, Infinity);
/**
 * Like [`each`]{@link module:Collections.each}, except that it passes the key (or index) as the second argument
 * to the iteratee.
 *
 * @name eachOf
 * @static
 * @memberOf module:Collections
 * @method
 * @alias forEachOf
 * @category Collection
 * @see [async.each]{@link module:Collections.each}
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - A function to apply to each
 * item in `coll`.
 * The `key` is the item's key, or index in the case of an array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 * @example
 *
 * var obj = {dev: "/dev.json", test: "/test.json", prod: "/prod.json"};
 * var configs = {};
 *
 * async.forEachOf(obj, function (value, key, callback) {
 *     fs.readFile(__dirname + value, "utf8", function (err, data) {
 *         if (err) return callback(err);
 *         try {
 *             configs[key] = JSON.parse(data);
 *         } catch (e) {
 *             return callback(e);
 *         }
 *         callback();
 *     });
 * }, function (err) {
 *     if (err) console.error(err.message);
 *     // configs is now a map of JSON data
 *     doSomethingWith(configs);
 * });
 */ module.exports = exports['default'];

},{"lodash/isArrayLike":"gMCbp","./internal/breakLoop":"bacHv","./eachOfLimit":"jKHtv","./internal/doLimit":"6cIiJ","lodash/noop":"dSFAq","./internal/once":"4k5MO","./internal/onlyOnce":"b3vCq","./internal/wrapAsync":"4DU5O"}],"gMCbp":[function(require,module,exports) {
var isFunction = require('./isFunction'), isLength = require('./isLength');
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
module.exports = isArrayLike;

},{"./isFunction":"cfti6","./isLength":"hrTBx"}],"cfti6":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObject = require('./isObject');
/** `Object#toString` result references. */ var asyncTag = '[object AsyncFunction]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', proxyTag = '[object Proxy]';
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    if (!isObject(value)) return false;
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
}
module.exports = isFunction;

},{"./_baseGetTag":"lOnbo","./isObject":"cGhqJ"}],"lOnbo":[function(require,module,exports) {
var Symbol = require('./_Symbol'), getRawTag = require('./_getRawTag'), objectToString = require('./_objectToString');
/** `Object#toString` result references. */ var nullTag = '[object Null]', undefinedTag = '[object Undefined]';
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */ function baseGetTag(value) {
    if (value == null) return value === undefined ? undefinedTag : nullTag;
    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
}
module.exports = baseGetTag;

},{"./_Symbol":"7lsL9","./_getRawTag":"995sO","./_objectToString":"bmE3g"}],"7lsL9":[function(require,module,exports) {
var root = require('./_root');
/** Built-in value references. */ var Symbol = root.Symbol;
module.exports = Symbol;

},{"./_root":"dSYUs"}],"dSYUs":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
/** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
module.exports = root;

},{"./_freeGlobal":"kAk32"}],"kAk32":[function(require,module,exports) {
var global = arguments[3];
/** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
module.exports = freeGlobal;

},{}],"995sO":[function(require,module,exports) {
var Symbol = require('./_Symbol');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/** Built-in value references. */ var symToStringTag = Symbol ? Symbol.toStringTag : undefined;
/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */ function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
    try {
        value[symToStringTag] = undefined;
        var unmasked = true;
    } catch (e) {}
    var result = nativeObjectToString.call(value);
    if (unmasked) {
        if (isOwn) value[symToStringTag] = tag;
        else delete value[symToStringTag];
    }
    return result;
}
module.exports = getRawTag;

},{"./_Symbol":"7lsL9"}],"bmE3g":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var nativeObjectToString = objectProto.toString;
/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */ function objectToString(value) {
    return nativeObjectToString.call(value);
}
module.exports = objectToString;

},{}],"cGhqJ":[function(require,module,exports) {
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
}
module.exports = isObject;

},{}],"hrTBx":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
module.exports = isLength;

},{}],"bacHv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
// A temporary value used to identify if the loop should be broken.
// See #1064, #1293
exports.default = {};
module.exports = exports["default"];

},{}],"jKHtv":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eachOfLimit;
var _eachOfLimit2 = require('./internal/eachOfLimit');
var _eachOfLimit3 = _interopRequireDefault(_eachOfLimit2);
var _wrapAsync = require('./internal/wrapAsync');
var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a
 * time.
 *
 * @name eachOfLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.eachOf]{@link module:Collections.eachOf}
 * @alias forEachOfLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`. The `key` is the item's key, or index in the case of an
 * array.
 * Invoked with (item, key, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */ function eachOfLimit(coll, limit, iteratee, callback) {
    (0, _eachOfLimit3.default)(limit)(coll, (0, _wrapAsync2.default)(iteratee), callback);
}
module.exports = exports['default'];

},{"./internal/eachOfLimit":"gvREE","./internal/wrapAsync":"4DU5O"}],"gvREE":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _eachOfLimit;
var _noop = require('lodash/noop');
var _noop2 = _interopRequireDefault(_noop);
var _once = require('./once');
var _once2 = _interopRequireDefault(_once);
var _iterator = require('./iterator');
var _iterator2 = _interopRequireDefault(_iterator);
var _onlyOnce = require('./onlyOnce');
var _onlyOnce2 = _interopRequireDefault(_onlyOnce);
var _breakLoop = require('./breakLoop');
var _breakLoop2 = _interopRequireDefault(_breakLoop);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _eachOfLimit(limit) {
    return function(obj, iteratee, callback) {
        callback = (0, _once2.default)(callback || _noop2.default);
        if (limit <= 0 || !obj) return callback(null);
        var nextElem = (0, _iterator2.default)(obj);
        var done = false;
        var running = 0;
        var looping = false;
        function iterateeCallback(err, value) {
            running -= 1;
            if (err) {
                done = true;
                callback(err);
            } else if (value === _breakLoop2.default || done && running <= 0) {
                done = true;
                return callback(null);
            } else if (!looping) replenish();
        }
        function replenish() {
            looping = true;
            while(running < limit && !done){
                var elem = nextElem();
                if (elem === null) {
                    done = true;
                    if (running <= 0) callback(null);
                    return;
                }
                running += 1;
                iteratee(elem.value, elem.key, (0, _onlyOnce2.default)(iterateeCallback));
            }
            looping = false;
        }
        replenish();
    };
}
module.exports = exports['default'];

},{"lodash/noop":"dSFAq","./once":"4k5MO","./iterator":"aZrEg","./onlyOnce":"b3vCq","./breakLoop":"bacHv"}],"dSFAq":[function(require,module,exports) {
/**
 * This method returns `undefined`.
 *
 * @static
 * @memberOf _
 * @since 2.3.0
 * @category Util
 * @example
 *
 * _.times(2, _.noop);
 * // => [undefined, undefined]
 */ function noop() {
// No operation performed.
}
module.exports = noop;

},{}],"4k5MO":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = once;
function once(fn) {
    return function() {
        if (fn === null) return;
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}
module.exports = exports["default"];

},{}],"aZrEg":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = iterator;
var _isArrayLike = require('lodash/isArrayLike');
var _isArrayLike2 = _interopRequireDefault(_isArrayLike);
var _getIterator = require('./getIterator');
var _getIterator2 = _interopRequireDefault(_getIterator);
var _keys = require('lodash/keys');
var _keys2 = _interopRequireDefault(_keys);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function createArrayIterator(coll) {
    var i = -1;
    var len = coll.length;
    return function next() {
        return ++i < len ? {
            value: coll[i],
            key: i
        } : null;
    };
}
function createES2015Iterator(iterator1) {
    var i = -1;
    return function next() {
        var item = iterator1.next();
        if (item.done) return null;
        i++;
        return {
            value: item.value,
            key: i
        };
    };
}
function createObjectIterator(obj) {
    var okeys = (0, _keys2.default)(obj);
    var i = -1;
    var len = okeys.length;
    return function next() {
        var key = okeys[++i];
        return i < len ? {
            value: obj[key],
            key: key
        } : null;
    };
}
function iterator(coll) {
    if ((0, _isArrayLike2.default)(coll)) return createArrayIterator(coll);
    var iterator2 = (0, _getIterator2.default)(coll);
    return iterator2 ? createES2015Iterator(iterator2) : createObjectIterator(coll);
}
module.exports = exports['default'];

},{"lodash/isArrayLike":"gMCbp","./getIterator":"dRURU","lodash/keys":"6fHVw"}],"dRURU":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = function(coll) {
    return iteratorSymbol && coll[iteratorSymbol] && coll[iteratorSymbol]();
};
var iteratorSymbol = typeof Symbol === 'function' && Symbol.iterator;
module.exports = exports['default'];

},{}],"6fHVw":[function(require,module,exports) {
var arrayLikeKeys = require('./_arrayLikeKeys'), baseKeys = require('./_baseKeys'), isArrayLike = require('./isArrayLike');
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
module.exports = keys;

},{"./_arrayLikeKeys":"dquIQ","./_baseKeys":"c0eiI","./isArrayLike":"gMCbp"}],"dquIQ":[function(require,module,exports) {
var baseTimes = require('./_baseTimes'), isArguments = require('./isArguments'), isArray = require('./isArray'), isBuffer = require('./isBuffer'), isIndex = require('./_isIndex'), isTypedArray = require('./isTypedArray');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
    (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
    isIndex(key, length)))) result.push(key);
    return result;
}
module.exports = arrayLikeKeys;

},{"./_baseTimes":"odqYd","./isArguments":"8ReNj","./isArray":"dZaTH","./isBuffer":"cn85h","./_isIndex":"aJpx0","./isTypedArray":"6SVKk"}],"odqYd":[function(require,module,exports) {
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
module.exports = baseTimes;

},{}],"8ReNj":[function(require,module,exports) {
var baseIsArguments = require('./_baseIsArguments'), isObjectLike = require('./isObjectLike');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ var isArguments = baseIsArguments(function() {
    return arguments;
}()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
};
module.exports = isArguments;

},{"./_baseIsArguments":"gx70P","./isObjectLike":"3BLi4"}],"gx70P":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]';
/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */ function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
}
module.exports = baseIsArguments;

},{"./_baseGetTag":"lOnbo","./isObjectLike":"3BLi4"}],"3BLi4":[function(require,module,exports) {
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return value != null && typeof value == 'object';
}
module.exports = isObjectLike;

},{}],"dZaTH":[function(require,module,exports) {
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
module.exports = isArray;

},{}],"cn85h":[function(require,module,exports) {
var root = require('./_root'), stubFalse = require('./stubFalse');
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Built-in value references. */ var Buffer = moduleExports ? root.Buffer : undefined;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;
/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */ var isBuffer = nativeIsBuffer || stubFalse;
module.exports = isBuffer;

},{"./_root":"dSYUs","./stubFalse":"dx4uy"}],"dx4uy":[function(require,module,exports) {
/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */ function stubFalse() {
    return false;
}
module.exports = stubFalse;

},{}],"aJpx0":[function(require,module,exports) {
/** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
module.exports = isIndex;

},{}],"6SVKk":[function(require,module,exports) {
var baseIsTypedArray = require('./_baseIsTypedArray'), baseUnary = require('./_baseUnary'), nodeUtil = require('./_nodeUtil');
/* Node.js helper references. */ var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
module.exports = isTypedArray;

},{"./_baseIsTypedArray":"lGSsl","./_baseUnary":"eJXq4","./_nodeUtil":"5edNe"}],"lGSsl":[function(require,module,exports) {
var baseGetTag = require('./_baseGetTag'), isLength = require('./isLength'), isObjectLike = require('./isObjectLike');
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', boolTag = '[object Boolean]', dateTag = '[object Date]', errorTag = '[object Error]', funcTag = '[object Function]', mapTag = '[object Map]', numberTag = '[object Number]', objectTag = '[object Object]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', weakMapTag = '[object WeakMap]';
var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
/** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */ function baseIsTypedArray(value) {
    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}
module.exports = baseIsTypedArray;

},{"./_baseGetTag":"lOnbo","./isLength":"hrTBx","./isObjectLike":"3BLi4"}],"eJXq4":[function(require,module,exports) {
/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */ function baseUnary(func) {
    return function(value) {
        return func(value);
    };
}
module.exports = baseUnary;

},{}],"5edNe":[function(require,module,exports) {
var freeGlobal = require('./_freeGlobal');
/** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
/** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
/** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
/** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
/** Used to access faster Node.js helpers. */ var nodeUtil = function() {
    try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;
        if (types) return types;
        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
}();
module.exports = nodeUtil;

},{"./_freeGlobal":"kAk32"}],"c0eiI":[function(require,module,exports) {
var isPrototype = require('./_isPrototype'), nativeKeys = require('./_nativeKeys');
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
module.exports = baseKeys;

},{"./_isPrototype":"iG4eR","./_nativeKeys":"k97u2"}],"iG4eR":[function(require,module,exports) {
/** Used for built-in method references. */ var objectProto = Object.prototype;
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
module.exports = isPrototype;

},{}],"k97u2":[function(require,module,exports) {
var overArg = require('./_overArg');
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
module.exports = nativeKeys;

},{"./_overArg":"dpUvl"}],"dpUvl":[function(require,module,exports) {
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
module.exports = overArg;

},{}],"b3vCq":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = onlyOnce;
function onlyOnce(fn) {
    return function() {
        if (fn === null) throw new Error("Callback was already called.");
        var callFn = fn;
        fn = null;
        callFn.apply(this, arguments);
    };
}
module.exports = exports["default"];

},{}],"4DU5O":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isAsync = undefined;
var _asyncify = require('../asyncify');
var _asyncify2 = _interopRequireDefault(_asyncify);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var supportsSymbol = typeof Symbol === 'function';
function isAsync(fn) {
    return supportsSymbol && fn[Symbol.toStringTag] === 'AsyncFunction';
}
function wrapAsync(asyncFn) {
    return isAsync(asyncFn) ? (0, _asyncify2.default)(asyncFn) : asyncFn;
}
exports.default = wrapAsync;
exports.isAsync = isAsync;

},{"../asyncify":"4rVjb"}],"4rVjb":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = asyncify;
var _isObject = require('lodash/isObject');
var _isObject2 = _interopRequireDefault(_isObject);
var _initialParams = require('./internal/initialParams');
var _initialParams2 = _interopRequireDefault(_initialParams);
var _setImmediate = require('./internal/setImmediate');
var _setImmediate2 = _interopRequireDefault(_setImmediate);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * Take a sync function and make it async, passing its return value to a
 * callback. This is useful for plugging sync functions into a waterfall,
 * series, or other async functions. Any arguments passed to the generated
 * function will be passed to the wrapped function (except for the final
 * callback argument). Errors thrown will be passed to the callback.
 *
 * If the function passed to `asyncify` returns a Promise, that promises's
 * resolved/rejected state will be used to call the callback, rather than simply
 * the synchronous return value.
 *
 * This also means you can asyncify ES2017 `async` functions.
 *
 * @name asyncify
 * @static
 * @memberOf module:Utils
 * @method
 * @alias wrapSync
 * @category Util
 * @param {Function} func - The synchronous function, or Promise-returning
 * function to convert to an {@link AsyncFunction}.
 * @returns {AsyncFunction} An asynchronous wrapper of the `func`. To be
 * invoked with `(args..., callback)`.
 * @example
 *
 * // passing a regular synchronous function
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(JSON.parse),
 *     function (data, next) {
 *         // data is the result of parsing the text.
 *         // If there was a parsing error, it would have been caught.
 *     }
 * ], callback);
 *
 * // passing a function returning a promise
 * async.waterfall([
 *     async.apply(fs.readFile, filename, "utf8"),
 *     async.asyncify(function (contents) {
 *         return db.model.create(contents);
 *     }),
 *     function (model, next) {
 *         // `model` is the instantiated model object.
 *         // If there was an error, this function would be skipped.
 *     }
 * ], callback);
 *
 * // es2017 example, though `asyncify` is not needed if your JS environment
 * // supports async functions out of the box
 * var q = async.queue(async.asyncify(async function(file) {
 *     var intermediateStep = await processFile(file);
 *     return await somePromise(intermediateStep)
 * }));
 *
 * q.push(files);
 */ function asyncify(func) {
    return (0, _initialParams2.default)(function(args, callback) {
        var result;
        try {
            result = func.apply(this, args);
        } catch (e) {
            return callback(e);
        }
        // if result is Promise object
        if ((0, _isObject2.default)(result) && typeof result.then === 'function') result.then(function(value) {
            invokeCallback(callback, null, value);
        }, function(err) {
            invokeCallback(callback, err.message ? err : new Error(err));
        });
        else callback(null, result);
    });
}
function invokeCallback(callback, error, value) {
    try {
        callback(error, value);
    } catch (e) {
        (0, _setImmediate2.default)(rethrow, e);
    }
}
function rethrow(error) {
    throw error;
}
module.exports = exports['default'];

},{"lodash/isObject":"cGhqJ","./internal/initialParams":"kE3IC","./internal/setImmediate":"h0ehd"}],"kE3IC":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = function(fn) {
    return function() /*...args, callback*/ {
        var args = (0, _slice2.default)(arguments);
        var callback = args.pop();
        fn.call(this, args, callback);
    };
};
var _slice = require('./slice');
var _slice2 = _interopRequireDefault(_slice);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
module.exports = exports['default'];

},{"./slice":"eLn0r"}],"eLn0r":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = slice;
function slice(arrayLike, start) {
    start = start | 0;
    var newLen = Math.max(arrayLike.length - start, 0);
    var newArr = Array(newLen);
    for(var idx = 0; idx < newLen; idx++)newArr[idx] = arrayLike[start + idx];
    return newArr;
}
module.exports = exports["default"];

},{}],"h0ehd":[function(require,module,exports) {
'use strict';
var process = require("process");
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.hasNextTick = exports.hasSetImmediate = undefined;
exports.fallback = fallback;
exports.wrap = wrap;
var _slice = require('./slice');
var _slice2 = _interopRequireDefault(_slice);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
var hasSetImmediate = exports.hasSetImmediate = typeof setImmediate === 'function' && setImmediate;
var hasNextTick = exports.hasNextTick = typeof process === 'object' && typeof process.nextTick === 'function';
function fallback(fn) {
    setTimeout(fn, 0);
}
function wrap(defer) {
    return function(fn /*, ...args*/ ) {
        var args = (0, _slice2.default)(arguments, 1);
        defer(function() {
            fn.apply(null, args);
        });
    };
}
var _defer;
if (hasSetImmediate) _defer = setImmediate;
else if (hasNextTick) _defer = process.nextTick;
else _defer = fallback;
exports.default = wrap(_defer);

},{"process":"d5jf4","./slice":"eLn0r"}],"6cIiJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = doLimit;
function doLimit(fn, limit) {
    return function(iterable, iteratee, callback) {
        return fn(iterable, limit, iteratee, callback);
    };
}
module.exports = exports["default"];

},{}],"9UMc7":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _asyncMap;
var _noop = require('lodash/noop');
var _noop2 = _interopRequireDefault(_noop);
var _wrapAsync = require('./wrapAsync');
var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _asyncMap(eachfn, arr, iteratee, callback1) {
    callback1 = callback1 || _noop2.default;
    arr = arr || [];
    var results = [];
    var counter = 0;
    var _iteratee = (0, _wrapAsync2.default)(iteratee);
    eachfn(arr, function(value, _, callback) {
        var index = counter++;
        _iteratee(value, function(err, v) {
            results[index] = v;
            callback(err);
        });
    }, function(err) {
        callback1(err, results);
    });
}
module.exports = exports['default'];

},{"lodash/noop":"dSFAq","./wrapAsync":"4DU5O"}],"9RNoG":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _eachLimit = require('./eachLimit');
var _eachLimit2 = _interopRequireDefault(_eachLimit);
var _doLimit = require('./internal/doLimit');
var _doLimit2 = _interopRequireDefault(_doLimit);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.
 *
 * @name eachSeries
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachSeries
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {AsyncFunction} iteratee - An async function to apply to each
 * item in `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfSeries`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */ exports.default = (0, _doLimit2.default)(_eachLimit2.default, 1);
module.exports = exports['default'];

},{"./eachLimit":"8SWPg","./internal/doLimit":"6cIiJ"}],"8SWPg":[function(require,module,exports) {
'use strict';
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = eachLimit;
var _eachOfLimit = require('./internal/eachOfLimit');
var _eachOfLimit2 = _interopRequireDefault(_eachOfLimit);
var _withoutIndex = require('./internal/withoutIndex');
var _withoutIndex2 = _interopRequireDefault(_withoutIndex);
var _wrapAsync = require('./internal/wrapAsync');
var _wrapAsync2 = _interopRequireDefault(_wrapAsync);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
/**
 * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.
 *
 * @name eachLimit
 * @static
 * @memberOf module:Collections
 * @method
 * @see [async.each]{@link module:Collections.each}
 * @alias forEachLimit
 * @category Collection
 * @param {Array|Iterable|Object} coll - A collection to iterate over.
 * @param {number} limit - The maximum number of async operations at a time.
 * @param {AsyncFunction} iteratee - An async function to apply to each item in
 * `coll`.
 * The array index is not passed to the iteratee.
 * If you need the index, use `eachOfLimit`.
 * Invoked with (item, callback).
 * @param {Function} [callback] - A callback which is called when all
 * `iteratee` functions have finished, or an error occurs. Invoked with (err).
 */ function eachLimit(coll, limit, iteratee, callback) {
    (0, _eachOfLimit2.default)(limit)(coll, (0, _withoutIndex2.default)((0, _wrapAsync2.default)(iteratee)), callback);
}
module.exports = exports['default'];

},{"./internal/eachOfLimit":"gvREE","./internal/withoutIndex":"bavQJ","./internal/wrapAsync":"4DU5O"}],"bavQJ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = _withoutIndex;
function _withoutIndex(iteratee) {
    return function(value, index, callback) {
        return iteratee(value, callback);
    };
}
module.exports = exports["default"];

},{}],"a4Kqs":[function(require,module,exports) {
const EventEmitter = require('events').EventEmitter;
const inherits = require('util').inherits;
module.exports = Stoplight;
inherits(Stoplight, EventEmitter);
function Stoplight() {
    const self = this;
    EventEmitter.call(self);
    self.isLocked = true;
}
Stoplight.prototype.go = function() {
    const self = this;
    self.isLocked = false;
    self.emit('unlock');
};
Stoplight.prototype.stop = function() {
    const self = this;
    self.isLocked = true;
    self.emit('lock');
};
Stoplight.prototype.await = function(fn) {
    const self = this;
    if (self.isLocked) self.once('unlock', fn);
    else setTimeout(fn);
};

},{"events":"1VQLm","util":"cxohQ"}],"ihP89":[function(require,module,exports) {
const stringify = require('json-stable-stringify');
module.exports = {
    cacheIdentifierForPayload: cacheIdentifierForPayload,
    canCache: canCache,
    blockTagForPayload: blockTagForPayload,
    paramsWithoutBlockTag: paramsWithoutBlockTag,
    blockTagParamIndex: blockTagParamIndex,
    cacheTypeForPayload: cacheTypeForPayload
};
function cacheIdentifierForPayload(payload, opts = {}) {
    if (!canCache(payload)) return null;
    const { includeBlockRef  } = opts;
    const params = includeBlockRef ? payload.params : paramsWithoutBlockTag(payload);
    return payload.method + ':' + stringify(params);
}
function canCache(payload) {
    return cacheTypeForPayload(payload) !== 'never';
}
function blockTagForPayload(payload) {
    var index = blockTagParamIndex(payload);
    // Block tag param not passed.
    if (index >= payload.params.length) return null;
    return payload.params[index];
}
function paramsWithoutBlockTag(payload) {
    var index = blockTagParamIndex(payload);
    // Block tag param not passed.
    if (index >= payload.params.length) return payload.params;
    // eth_getBlockByNumber has the block tag first, then the optional includeTx? param
    if (payload.method === 'eth_getBlockByNumber') return payload.params.slice(1);
    return payload.params.slice(0, index);
}
function blockTagParamIndex(payload) {
    switch(payload.method){
        // blockTag is third param
        case 'eth_getStorageAt':
            return 2;
        // blockTag is second param
        case 'eth_getBalance':
        case 'eth_getCode':
        case 'eth_getTransactionCount':
        case 'eth_call':
        case 'eth_estimateGas':
            return 1;
        // blockTag is first param
        case 'eth_getBlockByNumber':
            return 0;
        // there is no blockTag
        default:
            return undefined;
    }
}
function cacheTypeForPayload(payload) {
    switch(payload.method){
        // cache permanently
        case 'web3_clientVersion':
        case 'web3_sha3':
        case 'eth_protocolVersion':
        case 'eth_getBlockTransactionCountByHash':
        case 'eth_getUncleCountByBlockHash':
        case 'eth_getCode':
        case 'eth_getBlockByHash':
        case 'eth_getTransactionByHash':
        case 'eth_getTransactionByBlockHashAndIndex':
        case 'eth_getTransactionReceipt':
        case 'eth_getUncleByBlockHashAndIndex':
        case 'eth_getCompilers':
        case 'eth_compileLLL':
        case 'eth_compileSolidity':
        case 'eth_compileSerpent':
        case 'shh_version':
            return 'perma';
        // cache until fork
        case 'eth_getBlockByNumber':
        case 'eth_getBlockTransactionCountByNumber':
        case 'eth_getUncleCountByBlockNumber':
        case 'eth_getTransactionByBlockNumberAndIndex':
        case 'eth_getUncleByBlockNumberAndIndex':
            return 'fork';
        // cache for block
        case 'eth_gasPrice':
        case 'eth_blockNumber':
        case 'eth_getBalance':
        case 'eth_getStorageAt':
        case 'eth_getTransactionCount':
        case 'eth_call':
        case 'eth_estimateGas':
        case 'eth_getFilterLogs':
        case 'eth_getLogs':
        case 'net_peerCount':
            return 'block';
        // never cache
        case 'net_version':
        case 'net_peerCount':
        case 'net_listening':
        case 'eth_syncing':
        case 'eth_sign':
        case 'eth_coinbase':
        case 'eth_mining':
        case 'eth_hashrate':
        case 'eth_accounts':
        case 'eth_sendTransaction':
        case 'eth_sendRawTransaction':
        case 'eth_newFilter':
        case 'eth_newBlockFilter':
        case 'eth_newPendingTransactionFilter':
        case 'eth_uninstallFilter':
        case 'eth_getFilterChanges':
        case 'eth_getWork':
        case 'eth_submitWork':
        case 'eth_submitHashrate':
        case 'db_putString':
        case 'db_getString':
        case 'db_putHex':
        case 'db_getHex':
        case 'shh_post':
        case 'shh_newIdentity':
        case 'shh_hasIdentity':
        case 'shh_newGroup':
        case 'shh_addToGroup':
        case 'shh_newFilter':
        case 'shh_uninstallFilter':
        case 'shh_getFilterChanges':
        case 'shh_getMessages':
            return 'never';
    }
}

},{"json-stable-stringify":"jRtVY"}],"jRtVY":[function(require,module,exports) {
var json = typeof JSON !== 'undefined' ? JSON : require('jsonify');
module.exports = function(obj, opts) {
    if (!opts) opts = {};
    if (typeof opts === 'function') opts = {
        cmp: opts
    };
    var space = opts.space || '';
    if (typeof space === 'number') space = Array(space + 1).join(' ');
    var cycles = typeof opts.cycles === 'boolean' ? opts.cycles : false;
    var replacer = opts.replacer || function(key, value) {
        return value;
    };
    var cmp = opts.cmp && function(f) {
        return function(node) {
            return function(a, b) {
                var aobj = {
                    key: a,
                    value: node[a]
                };
                var bobj = {
                    key: b,
                    value: node[b]
                };
                return f(aobj, bobj);
            };
        };
    }(opts.cmp);
    var seen = [];
    return function stringify(parent, key, node, level) {
        var indent = space ? '\n' + new Array(level + 1).join(space) : '';
        var colonSeparator = space ? ': ' : ':';
        if (node && node.toJSON && typeof node.toJSON === 'function') node = node.toJSON();
        node = replacer.call(parent, key, node);
        if (node === undefined) return;
        if (typeof node !== 'object' || node === null) return json.stringify(node);
        if (isArray(node)) {
            var out = [];
            for(var i = 0; i < node.length; i++){
                var item = stringify(node, i, node[i], level + 1) || json.stringify(null);
                out.push(indent + space + item);
            }
            return '[' + out.join(',') + indent + ']';
        } else {
            if (seen.indexOf(node) !== -1) {
                if (cycles) return json.stringify('__cycle__');
                throw new TypeError('Converting circular structure to JSON');
            } else seen.push(node);
            var keys = objectKeys(node).sort(cmp && cmp(node));
            var out = [];
            for(var i = 0; i < keys.length; i++){
                var key = keys[i];
                var value = stringify(node, key, node[key], level + 1);
                if (!value) continue;
                var keyValue = json.stringify(key) + colonSeparator + value;
                out.push(indent + space + keyValue);
            }
            seen.splice(seen.indexOf(node), 1);
            return '{' + out.join(',') + indent + '}';
        }
    }({
        '': obj
    }, '', obj, 0);
};
var isArray = Array.isArray || function(x) {
    return ({}).toString.call(x) === '[object Array]';
};
var objectKeys = Object.keys || function(obj) {
    var has = Object.prototype.hasOwnProperty || function() {
        return true;
    };
    var keys = [];
    for(var key in obj)if (has.call(obj, key)) keys.push(key);
    return keys;
};

},{"jsonify":"lnGXP"}],"lnGXP":[function(require,module,exports) {
exports.parse = require('./lib/parse');
exports.stringify = require('./lib/stringify');

},{"./lib/parse":"9J5Vx","./lib/stringify":"1G3Ym"}],"9J5Vx":[function(require,module,exports) {
var at, ch, escapee = {
    '"': '"',
    '\\': '\\',
    '/': '/',
    b: '\b',
    f: '\f',
    n: '\n',
    r: '\r',
    t: '\t'
}, text, error = function(m) {
    // Call error when something is wrong.
    throw {
        name: 'SyntaxError',
        message: m,
        at: at,
        text: text
    };
}, next = function(c) {
    // If a c parameter is provided, verify that it matches the current character.
    if (c && c !== ch) error("Expected '" + c + "' instead of '" + ch + "'");
    // Get the next character. When there are no more characters,
    // return the empty string.
    ch = text.charAt(at);
    at += 1;
    return ch;
}, number = function() {
    // Parse a number value.
    var number1, string1 = '';
    if (ch === '-') {
        string1 = '-';
        next('-');
    }
    while(ch >= '0' && ch <= '9'){
        string1 += ch;
        next();
    }
    if (ch === '.') {
        string1 += '.';
        while(next() && ch >= '0' && ch <= '9')string1 += ch;
    }
    if (ch === 'e' || ch === 'E') {
        string1 += ch;
        next();
        if (ch === '-' || ch === '+') {
            string1 += ch;
            next();
        }
        while(ch >= '0' && ch <= '9'){
            string1 += ch;
            next();
        }
    }
    number1 = +string1;
    if (!isFinite(number1)) error("Bad number");
    else return number1;
}, string = function() {
    // Parse a string value.
    var hex, i, string2 = '', uffff;
    // When parsing for string values, we must look for " and \ characters.
    if (ch === '"') while(next()){
        if (ch === '"') {
            next();
            return string2;
        } else if (ch === '\\') {
            next();
            if (ch === 'u') {
                uffff = 0;
                for(i = 0; i < 4; i += 1){
                    hex = parseInt(next(), 16);
                    if (!isFinite(hex)) break;
                    uffff = uffff * 16 + hex;
                }
                string2 += String.fromCharCode(uffff);
            } else if (typeof escapee[ch] === 'string') string2 += escapee[ch];
            else break;
        } else string2 += ch;
    }
    error("Bad string");
}, white = function() {
    // Skip whitespace.
    while(ch && ch <= ' ')next();
}, word = function() {
    // true, false, or null.
    switch(ch){
        case 't':
            next('t');
            next('r');
            next('u');
            next('e');
            return true;
        case 'f':
            next('f');
            next('a');
            next('l');
            next('s');
            next('e');
            return false;
        case 'n':
            next('n');
            next('u');
            next('l');
            next('l');
            return null;
    }
    error("Unexpected '" + ch + "'");
}, value, array = function() {
    // Parse an array value.
    var array1 = [];
    if (ch === '[') {
        next('[');
        white();
        if (ch === ']') {
            next(']');
            return array1; // empty array
        }
        while(ch){
            array1.push(value());
            white();
            if (ch === ']') {
                next(']');
                return array1;
            }
            next(',');
            white();
        }
    }
    error("Bad array");
}, object = function() {
    // Parse an object value.
    var key, object1 = {};
    if (ch === '{') {
        next('{');
        white();
        if (ch === '}') {
            next('}');
            return object1; // empty object
        }
        while(ch){
            key = string();
            white();
            next(':');
            if (Object.hasOwnProperty.call(object1, key)) error('Duplicate key "' + key + '"');
            object1[key] = value();
            white();
            if (ch === '}') {
                next('}');
                return object1;
            }
            next(',');
            white();
        }
    }
    error("Bad object");
};
value = function() {
    // Parse a JSON value. It could be an object, an array, a string, a number,
    // or a word.
    white();
    switch(ch){
        case '{':
            return object();
        case '[':
            return array();
        case '"':
            return string();
        case '-':
            return number();
        default:
            return ch >= '0' && ch <= '9' ? number() : word();
    }
};
// Return the json_parse function. It will have access to all of the above
// functions and variables.
module.exports = function(source, reviver) {
    var result;
    text = source;
    at = 0;
    ch = ' ';
    result = value();
    white();
    if (ch) error("Syntax error");
    // If there is a reviver function, we recursively walk the new structure,
    // passing each name/value pair to the reviver function for possible
    // transformation, starting with a temporary root object that holds the result
    // in an empty key. If there is not a reviver function, we simply return the
    // result.
    return typeof reviver === 'function' ? function walk(holder, key) {
        var k, v, value1 = holder[key];
        if (value1 && typeof value1 === 'object') {
            for(k in value1)if (Object.prototype.hasOwnProperty.call(value1, k)) {
                v = walk(value1, k);
                if (v !== undefined) value1[k] = v;
                else delete value1[k];
            }
        }
        return reviver.call(holder, key, value1);
    }({
        '': result
    }, '') : result;
};

},{}],"1G3Ym":[function(require,module,exports) {
var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g, gap, indent, meta = {
    '\b': '\\b',
    '\t': '\\t',
    '\n': '\\n',
    '\f': '\\f',
    '\r': '\\r',
    '"': '\\"',
    '\\': '\\\\'
}, rep;
function quote(string) {
    // If the string contains no control characters, no quote characters, and no
    // backslash characters, then we can safely slap some quotes around it.
    // Otherwise we must also replace the offending characters with safe escape
    // sequences.
    escapable.lastIndex = 0;
    return escapable.test(string) ? '"' + string.replace(escapable, function(a) {
        var c = meta[a];
        return typeof c === 'string' ? c : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    }) + '"' : '"' + string + '"';
}
function str(key, holder) {
    // Produce a string from holder[key].
    var i, k, v, length, mind = gap, partial, value = holder[key];
    // If the value has a toJSON method, call it to obtain a replacement value.
    if (value && typeof value === 'object' && typeof value.toJSON === 'function') value = value.toJSON(key);
    // If we were called with a replacer function, then call the replacer to
    // obtain a replacement value.
    if (typeof rep === 'function') value = rep.call(holder, key, value);
    // What happens next depends on the value's type.
    switch(typeof value){
        case 'string':
            return quote(value);
        case 'number':
            // JSON numbers must be finite. Encode non-finite numbers as null.
            return isFinite(value) ? String(value) : 'null';
        case 'boolean':
        case 'null':
            // If the value is a boolean or null, convert it to a string. Note:
            // typeof null does not produce 'null'. The case is included here in
            // the remote chance that this gets fixed someday.
            return String(value);
        case 'object':
            if (!value) return 'null';
            gap += indent;
            partial = [];
            // Array.isArray
            if (Object.prototype.toString.apply(value) === '[object Array]') {
                length = value.length;
                for(i = 0; i < length; i += 1)partial[i] = str(i, value) || 'null';
                // Join all of the elements together, separated with commas, and
                // wrap them in brackets.
                v = partial.length === 0 ? '[]' : gap ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }
            // If the replacer is an array, use it to select the members to be
            // stringified.
            if (rep && typeof rep === 'object') {
                length = rep.length;
                for(i = 0; i < length; i += 1){
                    k = rep[i];
                    if (typeof k === 'string') {
                        v = str(k, value);
                        if (v) partial.push(quote(k) + (gap ? ': ' : ':') + v);
                    }
                }
            } else {
                // Otherwise, iterate through all of the keys in the object.
                for(k in value)if (Object.prototype.hasOwnProperty.call(value, k)) {
                    v = str(k, value);
                    if (v) partial.push(quote(k) + (gap ? ': ' : ':') + v);
                }
            }
            // Join all of the member texts together, separated with commas,
            // and wrap them in braces.
            v = partial.length === 0 ? '{}' : gap ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
    }
}
module.exports = function(value, replacer, space) {
    var i;
    gap = '';
    indent = '';
    // If the space parameter is a number, make an indent string containing that
    // many spaces.
    if (typeof space === 'number') for(i = 0; i < space; i += 1)indent += ' ';
    else if (typeof space === 'string') indent = space;
    // If there is a replacer, it must be a function or an array.
    // Otherwise, throw an error.
    rep = replacer;
    if (replacer && typeof replacer !== 'function' && (typeof replacer !== 'object' || typeof replacer.length !== 'number')) throw new Error('JSON.stringify');
    // Make a fake root object containing our value under the key of ''.
    // Return the result of stringifying the value.
    return str('', {
        '': value
    });
};

},{}],"jlx5q":[function(require,module,exports) {
const getRandomId = require('./random-id.js');
const extend = require('xtend');
module.exports = createPayload;
function createPayload(data) {
    return extend({
        // defaults
        id: getRandomId(),
        jsonrpc: '2.0',
        params: []
    }, data);
}

},{"./random-id.js":"kGyDw","xtend":"93zjj"}],"kGyDw":[function(require,module,exports) {
// gotta keep it within MAX_SAFE_INTEGER
const extraDigits = 3;
module.exports = createRandomId;
function createRandomId() {
    // 13 time digits
    var datePart = new Date().getTime() * Math.pow(10, extraDigits);
    // 3 random digits
    var extraPart = Math.floor(Math.random() * Math.pow(10, extraDigits));
    // 16 digits
    return datePart + extraPart;
}

},{}],"l0UZe":[function(require,module,exports) {
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var hw_app_eth_1 = require("@ledgerhq/hw-app-eth");
var hw_transport_u2f_1 = require("@ledgerhq/hw-transport-u2f");
exports.Web3ProviderEngine = require("web3-provider-engine");
/**
 * A factory method for creating a LedgerEthereumClient usable in a browser context.
 * @return LedgerEthereumClient A browser client for the LedgerSubprovider
 */ function ledgerEthereumBrowserClientFactoryAsync() {
    return __awaiter(this, void 0, void 0, function() {
        var ledgerConnection, ledgerEthClient;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        hw_transport_u2f_1.default.create()
                    ];
                case 1:
                    ledgerConnection = _a.sent();
                    ledgerEthClient = new hw_app_eth_1.default(ledgerConnection);
                    return [
                        2 /*return*/ ,
                        ledgerEthClient
                    ];
            }
        });
    });
}
exports.ledgerEthereumBrowserClientFactoryAsync = ledgerEthereumBrowserClientFactoryAsync;
var subprovider_utils_1 = require("./utils/subprovider_utils");
exports.prependSubprovider = subprovider_utils_1.prependSubprovider;
var empty_wallet_subprovider_1 = require("./subproviders/empty_wallet_subprovider");
exports.EmptyWalletSubprovider = empty_wallet_subprovider_1.EmptyWalletSubprovider;
var fake_gas_estimate_subprovider_1 = require("./subproviders/fake_gas_estimate_subprovider");
exports.FakeGasEstimateSubprovider = fake_gas_estimate_subprovider_1.FakeGasEstimateSubprovider;
var signer_1 = require("./subproviders/signer");
exports.SignerSubprovider = signer_1.SignerSubprovider;
var redundant_subprovider_1 = require("./subproviders/redundant_subprovider");
exports.RedundantSubprovider = redundant_subprovider_1.RedundantSubprovider;
var ledger_1 = require("./subproviders/ledger");
exports.LedgerSubprovider = ledger_1.LedgerSubprovider;
var rpc_subprovider_1 = require("./subproviders/rpc_subprovider");
exports.RPCSubprovider = rpc_subprovider_1.RPCSubprovider;
var ganache_1 = require("./subproviders/ganache");
exports.GanacheSubprovider = ganache_1.GanacheSubprovider;
var subprovider_1 = require("./subproviders/subprovider");
exports.Subprovider = subprovider_1.Subprovider;
var nonce_tracker_1 = require("./subproviders/nonce_tracker");
exports.NonceTrackerSubprovider = nonce_tracker_1.NonceTrackerSubprovider;
var private_key_wallet_1 = require("./subproviders/private_key_wallet");
exports.PrivateKeyWalletSubprovider = private_key_wallet_1.PrivateKeyWalletSubprovider;
var mnemonic_wallet_1 = require("./subproviders/mnemonic_wallet");
exports.MnemonicWalletSubprovider = mnemonic_wallet_1.MnemonicWalletSubprovider;
var metamask_subprovider_1 = require("./subproviders/metamask_subprovider");
exports.MetamaskSubprovider = metamask_subprovider_1.MetamaskSubprovider;
var trezor_1 = require("./subproviders/trezor");
exports.TrezorSubprovider = trezor_1.TrezorSubprovider;
var types_1 = require("./types");
exports.NonceSubproviderErrors = types_1.NonceSubproviderErrors;

},{"@ledgerhq/hw-app-eth":"5fmSd","@ledgerhq/hw-transport-u2f":"4MyDX","web3-provider-engine":"c7e64","./utils/subprovider_utils":"gPJYu","./subproviders/empty_wallet_subprovider":"eFRli","./subproviders/fake_gas_estimate_subprovider":"19Iyw","./subproviders/signer":"4NY4d","./subproviders/redundant_subprovider":"lZYSa","./subproviders/ledger":"hQU6O","./subproviders/rpc_subprovider":"e8a2e","./subproviders/ganache":"3hWn3","./subproviders/subprovider":"4dgUK","./subproviders/nonce_tracker":"jWfjn","./subproviders/private_key_wallet":"bdUwy","./subproviders/mnemonic_wallet":"jFKzA","./subproviders/metamask_subprovider":"gQ1ok","./subproviders/trezor":"isfi2","./types":"cdJML"}],"5fmSd":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}(); /********************************************************************************
edger Node JS API
c) 2016-2017 Ledger
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *  Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
ou may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *  Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
either express or implied.
ee the License for the specific language governing permissions and
limitations under the License.

// FIXME drop:
var _utils = require("./utils");
var _errors = require("@ledgerhq/errors");
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var remapTransactionRelatedErrors = function remapTransactionRelatedErrors(e) {
    if (e && e.statusCode === 0x6a80) return new _errors.EthAppPleaseEnableContractData("Please enable Contract data on the Ethereum app Settings");
    return e;
};
/**
 * Ethereum API
 *
 * @example
 * import Eth from "@ledgerhq/hw-app-eth";
 * const eth = new Eth(transport)
 */ var Eth = function() {
    function Eth1(transport) {
        var scrambleKey = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "w0w";
        _classCallCheck(this, Eth1);
        this.transport = transport;
        transport.decorateAppAPIMethods(this, [
            "getAddress",
            "provideERC20TokenInformation",
            "signTransaction",
            "signPersonalMessage",
            "getAppConfiguration"
        ], scrambleKey);
    }
    /**
   * get Ethereum address for a given BIP 32 path.
   * @param path a path in BIP 32 format
   * @option boolDisplay optionally enable or not the display
   * @option boolChaincode optionally enable or not the chaincode request
   * @return an object with a publicKey, address and (optionally) chainCode
   * @example
   * eth.getAddress("44'/60'/0'/0/0").then(o => o.address)
   */ _createClass(Eth1, [
        {
            key: "getAddress",
            value: function getAddress(path, boolDisplay, boolChaincode) {
                var paths = (0, _utils.splitPath)(path);
                var buffer = new Buffer(1 + paths.length * 4);
                buffer[0] = paths.length;
                paths.forEach(function(element, index) {
                    buffer.writeUInt32BE(element, 1 + 4 * index);
                });
                return this.transport.send(0xe0, 0x02, boolDisplay ? 0x01 : 0x00, boolChaincode ? 0x01 : 0x00, buffer).then(function(response) {
                    var result = {};
                    var publicKeyLength = response[0];
                    var addressLength = response[1 + publicKeyLength];
                    result.publicKey = response.slice(1, 1 + publicKeyLength).toString("hex");
                    result.address = "0x" + response.slice(1 + publicKeyLength + 1, 1 + publicKeyLength + 1 + addressLength).toString("ascii");
                    if (boolChaincode) result.chainCode = response.slice(1 + publicKeyLength + 1 + addressLength, 1 + publicKeyLength + 1 + addressLength + 32).toString("hex");
                    return result;
                });
            }
        },
        {
            key: "provideERC20TokenInformation",
            value: function provideERC20TokenInformation(_ref) {
                var data = _ref.data;
                return this.transport.send(0xe0, 0x0a, 0x00, 0x00, data).then(function() {
                    return true;
                }, function(e) {
                    if (e && e.statusCode === 0x6d00) // this case happen for older version of ETH app, since older app version had the ERC20 data hardcoded, it's fine to assume it worked.
                    // we return a flag to know if the call was effective or not
                    return false;
                    throw e;
                });
            }
        },
        {
            key: "signTransaction",
            value: function signTransaction(path, rawTxHex) {
                var _this = this;
                var paths = (0, _utils.splitPath)(path);
                var offset = 0;
                var rawTx = new Buffer(rawTxHex, "hex");
                var toSend = [];
                var response = void 0;
                var _loop = function _loop() {
                    var maxChunkSize = offset === 0 ? 149 - paths.length * 4 : 150;
                    var chunkSize = offset + maxChunkSize > rawTx.length ? rawTx.length - offset : maxChunkSize;
                    var buffer = new Buffer(offset === 0 ? 1 + paths.length * 4 + chunkSize : chunkSize);
                    if (offset === 0) {
                        buffer[0] = paths.length;
                        paths.forEach(function(element, index) {
                            buffer.writeUInt32BE(element, 1 + 4 * index);
                        });
                        rawTx.copy(buffer, 1 + 4 * paths.length, offset, offset + chunkSize);
                    } else rawTx.copy(buffer, 0, offset, offset + chunkSize);
                    toSend.push(buffer);
                    offset += chunkSize;
                };
                while(offset !== rawTx.length)_loop();
                return (0, _utils.foreach)(toSend, function(data, i) {
                    return _this.transport.send(0xe0, 0x04, i === 0 ? 0x00 : 0x80, 0x00, data).then(function(apduResponse) {
                        response = apduResponse;
                    });
                }).then(function() {
                    var v = response.slice(0, 1).toString("hex");
                    var r = response.slice(1, 33).toString("hex");
                    var s = response.slice(33, 65).toString("hex");
                    return {
                        v: v,
                        r: r,
                        s: s
                    };
                }, function(e) {
                    throw remapTransactionRelatedErrors(e);
                });
            }
        },
        {
            key: "getAppConfiguration",
            value: function getAppConfiguration() {
                return this.transport.send(0xe0, 0x06, 0x00, 0x00).then(function(response) {
                    var result = {};
                    result.arbitraryDataEnabled = response[0] & 0x01;
                    result.version = "" + response[1] + "." + response[2] + "." + response[3];
                    return result;
                });
            }
        },
        {
            key: "signPersonalMessage",
            value: function signPersonalMessage(path, messageHex) {
                var _this2 = this;
                var paths = (0, _utils.splitPath)(path);
                var offset = 0;
                var message = new Buffer(messageHex, "hex");
                var toSend = [];
                var response = void 0;
                var _loop2 = function _loop2() {
                    var maxChunkSize = offset === 0 ? 149 - paths.length * 4 - 4 : 150;
                    var chunkSize = offset + maxChunkSize > message.length ? message.length - offset : maxChunkSize;
                    var buffer = new Buffer(offset === 0 ? 1 + paths.length * 4 + 4 + chunkSize : chunkSize);
                    if (offset === 0) {
                        buffer[0] = paths.length;
                        paths.forEach(function(element, index) {
                            buffer.writeUInt32BE(element, 1 + 4 * index);
                        });
                        buffer.writeUInt32BE(message.length, 1 + 4 * paths.length);
                        message.copy(buffer, 1 + 4 * paths.length + 4, offset, offset + chunkSize);
                    } else message.copy(buffer, 0, offset, offset + chunkSize);
                    toSend.push(buffer);
                    offset += chunkSize;
                };
                while(offset !== message.length)_loop2();
                return (0, _utils.foreach)(toSend, function(data, i) {
                    return _this2.transport.send(0xe0, 0x08, i === 0 ? 0x00 : 0x80, 0x00, data).then(function(apduResponse) {
                        response = apduResponse;
                    });
                }).then(function() {
                    var v = response[0];
                    var r = response.slice(1, 33).toString("hex");
                    var s = response.slice(33, 65).toString("hex");
                    return {
                        v: v,
                        r: r,
                        s: s
                    };
                });
            }
        }
    ]);
    return Eth1;
}();
exports.default = Eth;

},{"buffer":"fCgem","./utils":"9LQTN","@ledgerhq/errors":"coT44"}],"9LQTN":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.defer = defer;
exports.splitPath = splitPath;
exports.eachSeries = eachSeries;
exports.foreach = foreach;
exports.doIf = doIf;
exports.asyncWhile = asyncWhile;
function defer() {
    var resolve = void 0, reject = void 0;
    var promise = new Promise(function(success, failure) {
        resolve = success;
        reject = failure;
    });
    if (!resolve || !reject) throw "defer() error"; // this never happens and is just to make flow happy
    return {
        promise: promise,
        resolve: resolve,
        reject: reject
    };
}
// TODO use bip32-path library
/********************************************************************************
 *   Ledger Node JS API
 *   (c) 2016-2017 Ledger
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ********************************************************************************/ function splitPath(path) {
    var result = [];
    var components = path.split("/");
    components.forEach(function(element) {
        var number = parseInt(element, 10);
        if (isNaN(number)) return; // FIXME shouldn't it throws instead?
        if (element.length > 1 && element[element.length - 1] === "'") number += 0x80000000;
        result.push(number);
    });
    return result;
}
// TODO use async await
function eachSeries(arr, fun) {
    return arr.reduce(function(p, e) {
        return p.then(function() {
            return fun(e);
        });
    }, Promise.resolve());
}
function foreach(arr, callback) {
    function iterate(index, array, result) {
        if (index >= array.length) return result;
        else return callback(array[index], index).then(function(res) {
            result.push(res);
            return iterate(index + 1, array, result);
        });
    }
    return Promise.resolve().then(function() {
        return iterate(0, arr, []);
    });
}
function doIf(condition, callback) {
    return Promise.resolve().then(function() {
        if (condition) return callback();
    });
}
function asyncWhile(predicate, callback) {
    function iterate(result) {
        if (!predicate()) return result;
        else return callback().then(function(res) {
            result.push(res);
            return iterate(result);
        });
    }
    return Promise.resolve([]).then(iterate);
}

},{}],"coT44":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.StatusCodes = exports.DBNotReset = exports.DBWrongPassword = exports.NoDBPathGiven = exports.FirmwareOrAppUpdateRequired = exports.LedgerAPI5xx = exports.LedgerAPI4xx = exports.GenuineCheckFailed = exports.PairingFailed = exports.SyncError = exports.FeeTooHigh = exports.FeeRequired = exports.FeeNotLoaded = exports.CantScanQRCode = exports.ETHAddressNonEIP = exports.WrongAppForCurrency = exports.WrongDeviceForAccount = exports.WebsocketConnectionFailed = exports.WebsocketConnectionError = exports.DeviceShouldStayInApp = exports.TransportWebUSBGestureRequired = exports.TransportInterfaceNotAvailable = exports.TransportOpenUserCancelled = exports.UserRefusedOnDevice = exports.UserRefusedAllowManager = exports.UserRefusedFirmwareUpdate = exports.UserRefusedAddress = exports.UserRefusedDeviceNameChange = exports.UpdateYourApp = exports.UnavailableTezosOriginatedAccountSend = exports.UnavailableTezosOriginatedAccountReceive = exports.RecipientRequired = exports.MCUNotGenuineToDashboard = exports.UnexpectedBootloader = exports.TimeoutTagged = exports.RecommendUndelegation = exports.RecommendSubAccountsToEmpty = exports.PasswordIncorrectError = exports.PasswordsDontMatchError = exports.GasLessThanEstimate = exports.NotSupportedLegacyAddress = exports.NotEnoughGas = exports.NoAccessToCamera = exports.NotEnoughBalanceBecauseDestinationNotCreated = exports.NotEnoughSpendableBalance = exports.NotEnoughBalanceInParentAccount = exports.NotEnoughBalanceToDelegate = exports.NotEnoughBalance = exports.NoAddressesFound = exports.NetworkDown = exports.ManagerUninstallBTCDep = exports.ManagerNotEnoughSpaceError = exports.ManagerFirmwareNotEnoughSpaceError = exports.ManagerDeviceLockedError = exports.ManagerAppDepUninstallRequired = exports.ManagerAppDepInstallRequired = exports.ManagerAppRelyOnBTCError = exports.ManagerAppAlreadyInstalledError = exports.LedgerAPINotAvailable = exports.LedgerAPIErrorWithMessage = exports.LedgerAPIError = exports.UnknownMCU = exports.LatestMCUInstalledError = exports.InvalidAddressBecauseDestinationIsAlsoSource = exports.InvalidAddress = exports.InvalidXRPTag = exports.HardResetFail = exports.FeeEstimationFailed = exports.EthAppPleaseEnableContractData = exports.EnpointConfigError = exports.DisconnectedDeviceDuringOperation = exports.DisconnectedDevice = exports.DeviceSocketNoBulkStatus = exports.DeviceSocketFail = exports.DeviceNameInvalid = exports.DeviceHalted = exports.DeviceInOSUExpected = exports.DeviceOnDashboardUnexpected = exports.DeviceOnDashboardExpected = exports.DeviceNotGenuineError = exports.DeviceGenuineSocketEarlyClose = exports.DeviceAppVerifyNotSupported = exports.CurrencyNotSupported = exports.CashAddrNotSupported = exports.CantOpenDevice = exports.BtcUnmatchedApp = exports.BluetoothRequired = exports.AmountRequired = exports.AccountNotSupported = exports.AccountNameRequiredError = exports.addCustomErrorDeserializer = exports.createCustomErrorClass = exports.deserializeError = exports.serializeError = undefined;
exports.TransportError = TransportError;
exports.getAltStatusMessage = getAltStatusMessage;
exports.TransportStatusError = TransportStatusError;
var _helpers = require("./helpers");
exports.serializeError = _helpers.serializeError;
exports.deserializeError = _helpers.deserializeError;
exports.createCustomErrorClass = _helpers.createCustomErrorClass;
exports.addCustomErrorDeserializer = _helpers.addCustomErrorDeserializer;
var AccountNameRequiredError = exports.AccountNameRequiredError = (0, _helpers.createCustomErrorClass)("AccountNameRequired");
var AccountNotSupported = exports.AccountNotSupported = (0, _helpers.createCustomErrorClass)("AccountNotSupported");
var AmountRequired = exports.AmountRequired = (0, _helpers.createCustomErrorClass)("AmountRequired");
var BluetoothRequired = exports.BluetoothRequired = (0, _helpers.createCustomErrorClass)("BluetoothRequired");
var BtcUnmatchedApp = exports.BtcUnmatchedApp = (0, _helpers.createCustomErrorClass)("BtcUnmatchedApp");
var CantOpenDevice = exports.CantOpenDevice = (0, _helpers.createCustomErrorClass)("CantOpenDevice");
var CashAddrNotSupported = exports.CashAddrNotSupported = (0, _helpers.createCustomErrorClass)("CashAddrNotSupported");
var CurrencyNotSupported = exports.CurrencyNotSupported = (0, _helpers.createCustomErrorClass)("CurrencyNotSupported");
var DeviceAppVerifyNotSupported = exports.DeviceAppVerifyNotSupported = (0, _helpers.createCustomErrorClass)("DeviceAppVerifyNotSupported");
var DeviceGenuineSocketEarlyClose = exports.DeviceGenuineSocketEarlyClose = (0, _helpers.createCustomErrorClass)("DeviceGenuineSocketEarlyClose");
var DeviceNotGenuineError = exports.DeviceNotGenuineError = (0, _helpers.createCustomErrorClass)("DeviceNotGenuine");
var DeviceOnDashboardExpected = exports.DeviceOnDashboardExpected = (0, _helpers.createCustomErrorClass)("DeviceOnDashboardExpected");
var DeviceOnDashboardUnexpected = exports.DeviceOnDashboardUnexpected = (0, _helpers.createCustomErrorClass)("DeviceOnDashboardUnexpected");
var DeviceInOSUExpected = exports.DeviceInOSUExpected = (0, _helpers.createCustomErrorClass)("DeviceInOSUExpected");
var DeviceHalted = exports.DeviceHalted = (0, _helpers.createCustomErrorClass)("DeviceHalted");
var DeviceNameInvalid = exports.DeviceNameInvalid = (0, _helpers.createCustomErrorClass)("DeviceNameInvalid");
var DeviceSocketFail = exports.DeviceSocketFail = (0, _helpers.createCustomErrorClass)("DeviceSocketFail");
var DeviceSocketNoBulkStatus = exports.DeviceSocketNoBulkStatus = (0, _helpers.createCustomErrorClass)("DeviceSocketNoBulkStatus");
var DisconnectedDevice = exports.DisconnectedDevice = (0, _helpers.createCustomErrorClass)("DisconnectedDevice");
var DisconnectedDeviceDuringOperation = exports.DisconnectedDeviceDuringOperation = (0, _helpers.createCustomErrorClass)("DisconnectedDeviceDuringOperation");
var EnpointConfigError = exports.EnpointConfigError = (0, _helpers.createCustomErrorClass)("EnpointConfig");
var EthAppPleaseEnableContractData = exports.EthAppPleaseEnableContractData = (0, _helpers.createCustomErrorClass)("EthAppPleaseEnableContractData");
var FeeEstimationFailed = exports.FeeEstimationFailed = (0, _helpers.createCustomErrorClass)("FeeEstimationFailed");
var HardResetFail = exports.HardResetFail = (0, _helpers.createCustomErrorClass)("HardResetFail");
var InvalidXRPTag = exports.InvalidXRPTag = (0, _helpers.createCustomErrorClass)("InvalidXRPTag");
var InvalidAddress = exports.InvalidAddress = (0, _helpers.createCustomErrorClass)("InvalidAddress");
var InvalidAddressBecauseDestinationIsAlsoSource = exports.InvalidAddressBecauseDestinationIsAlsoSource = (0, _helpers.createCustomErrorClass)("InvalidAddressBecauseDestinationIsAlsoSource");
var LatestMCUInstalledError = exports.LatestMCUInstalledError = (0, _helpers.createCustomErrorClass)("LatestMCUInstalledError");
var UnknownMCU = exports.UnknownMCU = (0, _helpers.createCustomErrorClass)("UnknownMCU");
var LedgerAPIError = exports.LedgerAPIError = (0, _helpers.createCustomErrorClass)("LedgerAPIError");
var LedgerAPIErrorWithMessage = exports.LedgerAPIErrorWithMessage = (0, _helpers.createCustomErrorClass)("LedgerAPIErrorWithMessage");
var LedgerAPINotAvailable = exports.LedgerAPINotAvailable = (0, _helpers.createCustomErrorClass)("LedgerAPINotAvailable");
var ManagerAppAlreadyInstalledError = exports.ManagerAppAlreadyInstalledError = (0, _helpers.createCustomErrorClass)("ManagerAppAlreadyInstalled");
var ManagerAppRelyOnBTCError = exports.ManagerAppRelyOnBTCError = (0, _helpers.createCustomErrorClass)("ManagerAppRelyOnBTC");
var ManagerAppDepInstallRequired = exports.ManagerAppDepInstallRequired = (0, _helpers.createCustomErrorClass)("ManagerAppDepInstallRequired");
var ManagerAppDepUninstallRequired = exports.ManagerAppDepUninstallRequired = (0, _helpers.createCustomErrorClass)("ManagerAppDepUninstallRequired");
var ManagerDeviceLockedError = exports.ManagerDeviceLockedError = (0, _helpers.createCustomErrorClass)("ManagerDeviceLocked");
var ManagerFirmwareNotEnoughSpaceError = exports.ManagerFirmwareNotEnoughSpaceError = (0, _helpers.createCustomErrorClass)("ManagerFirmwareNotEnoughSpace");
var ManagerNotEnoughSpaceError = exports.ManagerNotEnoughSpaceError = (0, _helpers.createCustomErrorClass)("ManagerNotEnoughSpace");
var ManagerUninstallBTCDep = exports.ManagerUninstallBTCDep = (0, _helpers.createCustomErrorClass)("ManagerUninstallBTCDep");
var NetworkDown = exports.NetworkDown = (0, _helpers.createCustomErrorClass)("NetworkDown");
var NoAddressesFound = exports.NoAddressesFound = (0, _helpers.createCustomErrorClass)("NoAddressesFound");
var NotEnoughBalance = exports.NotEnoughBalance = (0, _helpers.createCustomErrorClass)("NotEnoughBalance");
var NotEnoughBalanceToDelegate = exports.NotEnoughBalanceToDelegate = (0, _helpers.createCustomErrorClass)("NotEnoughBalanceToDelegate");
var NotEnoughBalanceInParentAccount = exports.NotEnoughBalanceInParentAccount = (0, _helpers.createCustomErrorClass)("NotEnoughBalanceInParentAccount");
var NotEnoughSpendableBalance = exports.NotEnoughSpendableBalance = (0, _helpers.createCustomErrorClass)("NotEnoughSpendableBalance");
var NotEnoughBalanceBecauseDestinationNotCreated = exports.NotEnoughBalanceBecauseDestinationNotCreated = (0, _helpers.createCustomErrorClass)("NotEnoughBalanceBecauseDestinationNotCreated");
var NoAccessToCamera = exports.NoAccessToCamera = (0, _helpers.createCustomErrorClass)("NoAccessToCamera");
var NotEnoughGas = exports.NotEnoughGas = (0, _helpers.createCustomErrorClass)("NotEnoughGas");
var NotSupportedLegacyAddress = exports.NotSupportedLegacyAddress = (0, _helpers.createCustomErrorClass)("NotSupportedLegacyAddress");
var GasLessThanEstimate = exports.GasLessThanEstimate = (0, _helpers.createCustomErrorClass)("GasLessThanEstimate");
var PasswordsDontMatchError = exports.PasswordsDontMatchError = (0, _helpers.createCustomErrorClass)("PasswordsDontMatch");
var PasswordIncorrectError = exports.PasswordIncorrectError = (0, _helpers.createCustomErrorClass)("PasswordIncorrect");
var RecommendSubAccountsToEmpty = exports.RecommendSubAccountsToEmpty = (0, _helpers.createCustomErrorClass)("RecommendSubAccountsToEmpty");
var RecommendUndelegation = exports.RecommendUndelegation = (0, _helpers.createCustomErrorClass)("RecommendUndelegation");
var TimeoutTagged = exports.TimeoutTagged = (0, _helpers.createCustomErrorClass)("TimeoutTagged");
var UnexpectedBootloader = exports.UnexpectedBootloader = (0, _helpers.createCustomErrorClass)("UnexpectedBootloader");
var MCUNotGenuineToDashboard = exports.MCUNotGenuineToDashboard = (0, _helpers.createCustomErrorClass)("MCUNotGenuineToDashboard");
var RecipientRequired = exports.RecipientRequired = (0, _helpers.createCustomErrorClass)("RecipientRequired");
var UnavailableTezosOriginatedAccountReceive = exports.UnavailableTezosOriginatedAccountReceive = (0, _helpers.createCustomErrorClass)("UnavailableTezosOriginatedAccountReceive");
var UnavailableTezosOriginatedAccountSend = exports.UnavailableTezosOriginatedAccountSend = (0, _helpers.createCustomErrorClass)("UnavailableTezosOriginatedAccountSend");
var UpdateYourApp = exports.UpdateYourApp = (0, _helpers.createCustomErrorClass)("UpdateYourApp");
var UserRefusedDeviceNameChange = exports.UserRefusedDeviceNameChange = (0, _helpers.createCustomErrorClass)("UserRefusedDeviceNameChange");
var UserRefusedAddress = exports.UserRefusedAddress = (0, _helpers.createCustomErrorClass)("UserRefusedAddress");
var UserRefusedFirmwareUpdate = exports.UserRefusedFirmwareUpdate = (0, _helpers.createCustomErrorClass)("UserRefusedFirmwareUpdate");
var UserRefusedAllowManager = exports.UserRefusedAllowManager = (0, _helpers.createCustomErrorClass)("UserRefusedAllowManager");
var UserRefusedOnDevice = exports.UserRefusedOnDevice = (0, _helpers.createCustomErrorClass)("UserRefusedOnDevice"); // TODO rename because it's just for transaction refusal
var TransportOpenUserCancelled = exports.TransportOpenUserCancelled = (0, _helpers.createCustomErrorClass)("TransportOpenUserCancelled");
var TransportInterfaceNotAvailable = exports.TransportInterfaceNotAvailable = (0, _helpers.createCustomErrorClass)("TransportInterfaceNotAvailable");
var TransportWebUSBGestureRequired = exports.TransportWebUSBGestureRequired = (0, _helpers.createCustomErrorClass)("TransportWebUSBGestureRequired");
var DeviceShouldStayInApp = exports.DeviceShouldStayInApp = (0, _helpers.createCustomErrorClass)("DeviceShouldStayInApp");
var WebsocketConnectionError = exports.WebsocketConnectionError = (0, _helpers.createCustomErrorClass)("WebsocketConnectionError");
var WebsocketConnectionFailed = exports.WebsocketConnectionFailed = (0, _helpers.createCustomErrorClass)("WebsocketConnectionFailed");
var WrongDeviceForAccount = exports.WrongDeviceForAccount = (0, _helpers.createCustomErrorClass)("WrongDeviceForAccount");
var WrongAppForCurrency = exports.WrongAppForCurrency = (0, _helpers.createCustomErrorClass)("WrongAppForCurrency");
var ETHAddressNonEIP = exports.ETHAddressNonEIP = (0, _helpers.createCustomErrorClass)("ETHAddressNonEIP");
var CantScanQRCode = exports.CantScanQRCode = (0, _helpers.createCustomErrorClass)("CantScanQRCode");
var FeeNotLoaded = exports.FeeNotLoaded = (0, _helpers.createCustomErrorClass)("FeeNotLoaded");
var FeeRequired = exports.FeeRequired = (0, _helpers.createCustomErrorClass)("FeeRequired");
var FeeTooHigh = exports.FeeTooHigh = (0, _helpers.createCustomErrorClass)("FeeTooHigh");
var SyncError = exports.SyncError = (0, _helpers.createCustomErrorClass)("SyncError");
var PairingFailed = exports.PairingFailed = (0, _helpers.createCustomErrorClass)("PairingFailed");
var GenuineCheckFailed = exports.GenuineCheckFailed = (0, _helpers.createCustomErrorClass)("GenuineCheckFailed");
var LedgerAPI4xx = exports.LedgerAPI4xx = (0, _helpers.createCustomErrorClass)("LedgerAPI4xx");
var LedgerAPI5xx = exports.LedgerAPI5xx = (0, _helpers.createCustomErrorClass)("LedgerAPI5xx");
var FirmwareOrAppUpdateRequired = exports.FirmwareOrAppUpdateRequired = (0, _helpers.createCustomErrorClass)("FirmwareOrAppUpdateRequired");
// db stuff, no need to translate
var NoDBPathGiven = exports.NoDBPathGiven = (0, _helpers.createCustomErrorClass)("NoDBPathGiven");
var DBWrongPassword = exports.DBWrongPassword = (0, _helpers.createCustomErrorClass)("DBWrongPassword");
var DBNotReset = exports.DBNotReset = (0, _helpers.createCustomErrorClass)("DBNotReset");
/**
 * TransportError is used for any generic transport errors.
 * e.g. Error thrown when data received by exchanges are incorrect or if exchanged failed to communicate with the device for various reason.
 */ function TransportError(message, id) {
    this.name = "TransportError";
    this.message = message;
    this.stack = new Error().stack;
    this.id = id;
}
//$FlowFixMe
TransportError.prototype = new Error();
(0, _helpers.addCustomErrorDeserializer)("TransportError", function(e) {
    return new TransportError(e.message, e.id);
});
var StatusCodes = exports.StatusCodes = {
    PIN_REMAINING_ATTEMPTS: 0x63c0,
    INCORRECT_LENGTH: 0x6700,
    COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 0x6981,
    SECURITY_STATUS_NOT_SATISFIED: 0x6982,
    CONDITIONS_OF_USE_NOT_SATISFIED: 0x6985,
    INCORRECT_DATA: 0x6a80,
    NOT_ENOUGH_MEMORY_SPACE: 0x6a84,
    REFERENCED_DATA_NOT_FOUND: 0x6a88,
    FILE_ALREADY_EXISTS: 0x6a89,
    INCORRECT_P1_P2: 0x6b00,
    INS_NOT_SUPPORTED: 0x6d00,
    CLA_NOT_SUPPORTED: 0x6e00,
    TECHNICAL_PROBLEM: 0x6f00,
    OK: 0x9000,
    MEMORY_PROBLEM: 0x9240,
    NO_EF_SELECTED: 0x9400,
    INVALID_OFFSET: 0x9402,
    FILE_NOT_FOUND: 0x9404,
    INCONSISTENT_FILE: 0x9408,
    ALGORITHM_NOT_SUPPORTED: 0x9484,
    INVALID_KCV: 0x9485,
    CODE_NOT_INITIALIZED: 0x9802,
    ACCESS_CONDITION_NOT_FULFILLED: 0x9804,
    CONTRADICTION_SECRET_CODE_STATUS: 0x9808,
    CONTRADICTION_INVALIDATION: 0x9810,
    CODE_BLOCKED: 0x9840,
    MAX_VALUE_REACHED: 0x9850,
    GP_AUTH_FAILED: 0x6300,
    LICENSING: 0x6f42,
    HALTED: 0x6faa
};
function getAltStatusMessage(code) {
    switch(code){
        // improve text of most common errors
        case 0x6700:
            return "Incorrect length";
        case 0x6982:
            return "Security not satisfied (dongle locked or have invalid access rights)";
        case 0x6985:
            return "Condition of use not satisfied (denied by the user?)";
        case 0x6a80:
            return "Invalid data received";
        case 0x6b00:
            return "Invalid parameter received";
    }
    if (0x6f00 <= code && code <= 0x6fff) return "Internal error, please report";
}
/**
 * Error thrown when a device returned a non success status.
 * the error.statusCode is one of the `StatusCodes` exported by this library.
 */ function TransportStatusError(statusCode) {
    this.name = "TransportStatusError";
    var statusText = Object.keys(StatusCodes).find(function(k) {
        return StatusCodes[k] === statusCode;
    }) || "UNKNOWN_ERROR";
    var smsg = getAltStatusMessage(statusCode) || statusText;
    var statusCodeStr = statusCode.toString(16);
    this.message = "Ledger device: " + smsg + " (0x" + statusCodeStr + ")";
    this.stack = new Error().stack;
    this.statusCode = statusCode;
    this.statusText = statusText;
}
//$FlowFixMe
TransportStatusError.prototype = new Error();
(0, _helpers.addCustomErrorDeserializer)("TransportStatusError", function(e) {
    return new TransportStatusError(e.statusCode);
});

},{"./helpers":"65z6v"}],"65z6v":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};
/* eslint-disable no-continue */ /* eslint-disable no-param-reassign */ /* eslint-disable no-prototype-builtins */ var errorClasses = {};
var deserializers = {};
var addCustomErrorDeserializer = exports.addCustomErrorDeserializer = function addCustomErrorDeserializer(name, deserializer) {
    deserializers[name] = deserializer;
};
var createCustomErrorClass = exports.createCustomErrorClass = function createCustomErrorClass(name) {
    var C = function CustomError(message, fields) {
        Object.assign(this, fields);
        this.name = name;
        this.message = message || name;
        this.stack = new Error().stack;
    };
    // $FlowFixMe
    C.prototype = new Error();
    errorClasses[name] = C;
    // $FlowFixMe we can't easily type a subset of Error for now...
    return C;
};
// inspired from https://github.com/programble/errio/blob/master/index.js
var deserializeError = exports.deserializeError = function deserializeError1(object) {
    if ((typeof object === "undefined" ? "undefined" : _typeof(object)) === "object" && object) {
        try {
            // $FlowFixMe FIXME HACK
            var msg = JSON.parse(object.message);
            if (msg.message && msg.name) object = msg;
        } catch (e) {
        // nothing
        }
        var error = void 0;
        if (typeof object.name === "string") {
            var _object = object, name = _object.name;
            var des = deserializers[name];
            if (des) error = des(object);
            else {
                var _constructor = name === "Error" ? Error : errorClasses[name];
                if (!_constructor) {
                    console.warn("deserializing an unknown class '" + name + "'");
                    _constructor = createCustomErrorClass(name);
                }
                error = Object.create(_constructor.prototype);
                try {
                    for(var prop in object)if (object.hasOwnProperty(prop)) error[prop] = object[prop];
                } catch (e) {
                // sometimes setting a property can fail (e.g. .name)
                }
            }
        } else error = new Error(object.message);
        if (!error.stack && Error.captureStackTrace) Error.captureStackTrace(error, deserializeError1);
        return error;
    }
    return new Error(String(object));
};
// inspired from https://github.com/sindresorhus/serialize-error/blob/master/index.js
var serializeError = exports.serializeError = function serializeError(value) {
    if (!value) return value;
    if ((typeof value === "undefined" ? "undefined" : _typeof(value)) === "object") return destroyCircular(value, []);
    if (typeof value === "function") return "[Function: " + (value.name || "anonymous") + "]";
    return value;
};
// https://www.npmjs.com/package/destroy-circular
function destroyCircular(from, seen) {
    var to = {};
    seen.push(from);
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;
    try {
        for(var _iterator = Object.keys(from)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
            var key = _step.value;
            var value = from[key];
            if (typeof value === "function") continue;
            if (!value || (typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") {
                to[key] = value;
                continue;
            }
            if (seen.indexOf(from[key]) === -1) {
                to[key] = destroyCircular(from[key], seen.slice(0));
                continue;
            }
            to[key] = "[Circular]";
        }
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally{
        try {
            if (!_iteratorNormalCompletion && _iterator.return) _iterator.return();
        } finally{
            if (_didIteratorError) throw _iteratorError;
        }
    }
    if (typeof from.name === "string") to.name = from.name;
    if (typeof from.message === "string") to.message = from.message;
    if (typeof from.stack === "string") to.stack = from.stack;
    return to;
}

},{}],"4MyDX":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _promise = require("babel-runtime/core-js/promise");
var _promise2 = _interopRequireDefault(_promise);
var _typeof2 = require("babel-runtime/helpers/typeof");
var _typeof3 = _interopRequireDefault(_typeof2);
var _getPrototypeOf = require("babel-runtime/core-js/object/get-prototype-of");
var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);
var _regenerator = require("babel-runtime/regenerator");
var _regenerator2 = _interopRequireDefault(_regenerator);
var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");
var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);
var _classCallCheck2 = require("babel-runtime/helpers/classCallCheck");
var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
var _possibleConstructorReturn2 = require("babel-runtime/helpers/possibleConstructorReturn");
var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
var _createClass2 = require("babel-runtime/helpers/createClass");
var _createClass3 = _interopRequireDefault(_createClass2);
var _inherits2 = require("babel-runtime/helpers/inherits");
var _inherits3 = _interopRequireDefault(_inherits2);
var _u2fApi = require("u2f-api");
var _hwTransport = require("@ledgerhq/hw-transport");
var _hwTransport2 = _interopRequireDefault(_hwTransport);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function wrapU2FTransportError(originalError, message, id) {
    var err = new _hwTransport.TransportError(message, id);
    // $FlowFixMe
    err.originalError = originalError;
    return err;
}
function wrapApdu(apdu, key) {
    var result = Buffer.alloc(apdu.length);
    for(var i = 0; i < apdu.length; i++)result[i] = apdu[i] ^ key[i % key.length];
    return result;
}
// Convert from normal to web-safe, strip trailing "="s
var webSafe64 = function webSafe64(base64) {
    return base64.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
};
// Convert from web-safe to normal, add trailing "="s
var normal64 = function normal64(base64) {
    return base64.replace(/-/g, "+").replace(/_/g, "/") + "==".substring(0, 3 * base64.length % 4);
};
function attemptExchange(apdu, timeoutMillis, debug, scrambleKey) {
    var keyHandle = wrapApdu(apdu, scrambleKey);
    var challenge = Buffer.from("0000000000000000000000000000000000000000000000000000000000000000", "hex");
    var signRequest = {
        version: "U2F_V2",
        keyHandle: webSafe64(keyHandle.toString("base64")),
        challenge: webSafe64(challenge.toString("base64")),
        appId: location.origin
    };
    if (debug) debug("=> " + apdu.toString("hex"));
    return (0, _u2fApi.sign)(signRequest, timeoutMillis / 1000).then(function(response) {
        var signatureData = response.signatureData;
        if (typeof signatureData === "string") {
            var data = Buffer.from(normal64(signatureData), "base64");
            var result = data.slice(5);
            if (debug) debug("<= " + result.toString("hex"));
            return result;
        } else throw response;
    });
}
var transportInstances = [];
function emitDisconnect() {
    transportInstances.forEach(function(t) {
        return t.emit("disconnect");
    });
    transportInstances = [];
}
function isTimeoutU2FError(u2fError) {
    return u2fError.metaData.code === 5;
}
/**
 * U2F web Transport implementation
 * @example
 * import TransportU2F from "@ledgerhq/hw-transport-u2f";
 * ...
 * TransportU2F.create().then(transport => ...)
 */ var TransportU2F = function(_Transport) {
    (0, _inherits3.default)(TransportU2F1, _Transport);
    (0, _createClass3.default)(TransportU2F1, null, [
        {
            key: "open",
            /**
     * static function to create a new Transport from a connected Ledger device discoverable via U2F (browser support)
     */ value: function() {
                var _ref = (0, _asyncToGenerator3.default)(/*#__PURE__*/ _regenerator2.default.mark(function _callee(_) {
                    var _openTimeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5000;
                    return _regenerator2.default.wrap(function _callee$(_context) {
                        while(true)switch(_context.prev = _context.next){
                            case 0:
                                return _context.abrupt("return", new TransportU2F1());
                            case 1:
                            case "end":
                                return _context.stop();
                        }
                    }, _callee, this);
                }));
                function open(_x) {
                    return _ref.apply(this, arguments);
                }
                return open;
            }()
        }
    ]);
    function TransportU2F1() {
        (0, _classCallCheck3.default)(this, TransportU2F1);
        var _this = (0, _possibleConstructorReturn3.default)(this, (TransportU2F1.__proto__ || (0, _getPrototypeOf2.default)(TransportU2F1)).call(this));
        transportInstances.push(_this);
        return _this;
    }
    (0, _createClass3.default)(TransportU2F1, [
        {
            key: "exchange",
            value: function() {
                var _ref2 = (0, _asyncToGenerator3.default)(/*#__PURE__*/ _regenerator2.default.mark(function _callee2(apdu) {
                    var isU2FError;
                    return _regenerator2.default.wrap(function _callee2$(_context2) {
                        while(true)switch(_context2.prev = _context2.next){
                            case 0:
                                _context2.prev = 0;
                                _context2.next = 3;
                                return attemptExchange(apdu, this.exchangeTimeout, this.debug, this.scrambleKey);
                            case 3:
                                return _context2.abrupt("return", _context2.sent);
                            case 6:
                                _context2.prev = 6;
                                _context2.t0 = _context2["catch"](0);
                                isU2FError = (0, _typeof3.default)(_context2.t0.metaData) === "object";
                                if (!isU2FError) {
                                    _context2.next = 14;
                                    break;
                                }
                                if (isTimeoutU2FError(_context2.t0)) emitDisconnect();
                                // the wrapping make error more usable and "printable" to the end user.
                                throw wrapU2FTransportError(_context2.t0, "Failed to sign with Ledger device: U2F " + _context2.t0.metaData.type, "U2F_" + _context2.t0.metaData.code);
                            case 14:
                                throw _context2.t0;
                            case 15:
                            case "end":
                                return _context2.stop();
                        }
                    }, _callee2, this, [
                        [
                            0,
                            6
                        ]
                    ]);
                }));
                function exchange(_x3) {
                    return _ref2.apply(this, arguments);
                }
                return exchange;
            }()
        },
        {
            key: "setScrambleKey",
            value: function setScrambleKey(scrambleKey) {
                this.scrambleKey = Buffer.from(scrambleKey, "ascii");
            }
        },
        {
            key: "close",
            value: function close() {
                var i = transportInstances.indexOf(this);
                if (i === -1) throw new Error("invalid transport instance");
                transportInstances.splice(i, 1);
                return _promise2.default.resolve();
            }
        }
    ]);
    return TransportU2F1;
}(_hwTransport2.default);
TransportU2F.isSupported = _u2fApi.isSupported;
TransportU2F.list = function() {
    return (0, _u2fApi.isSupported)().then(function(supported) {
        return supported ? [
            null
        ] : [];
    });
};
TransportU2F.listen = function(observer) {
    var unsubscribed = false;
    (0, _u2fApi.isSupported)().then(function(supported) {
        if (unsubscribed) return;
        if (supported) {
            observer.next({
                type: "add",
                descriptor: null
            });
            observer.complete();
        } else observer.error(new _hwTransport.TransportError("U2F browser support is needed for Ledger. Please use Chrome, Opera or Firefox with a U2F extension. Also make sure you're on an HTTPS connection", "U2FNotSupported"));
    });
    return {
        unsubscribe: function unsubscribe() {
            unsubscribed = true;
        }
    };
};
exports.default = TransportU2F;

},{"buffer":"fCgem","babel-runtime/core-js/promise":"hnoRb","babel-runtime/helpers/typeof":"ajQiN","babel-runtime/core-js/object/get-prototype-of":"L1RuL","babel-runtime/regenerator":"e8soy","babel-runtime/helpers/asyncToGenerator":"iOCm9","babel-runtime/helpers/classCallCheck":"2Tl5U","babel-runtime/helpers/possibleConstructorReturn":"hBlDS","babel-runtime/helpers/createClass":"iHxnU","babel-runtime/helpers/inherits":"jucoh","u2f-api":"dEoBw","@ledgerhq/hw-transport":"ckx2n"}],"hnoRb":[function(require,module,exports) {
module.exports = {
    "default": require("core-js/library/fn/promise"),
    __esModule: true
};

},{"core-js/library/fn/promise":"jWuFL"}],"jWuFL":[function(require,module,exports) {
require('../modules/es6.object.to-string');
require('../modules/es6.string.iterator');
require('../modules/web.dom.iterable');
require('../modules/es6.promise');
require('../modules/es7.promise.finally');
require('../modules/es7.promise.try');
module.exports = require('../modules/_core').Promise;

},{"../modules/es6.object.to-string":"2gbKX","../modules/es6.string.iterator":"bWOBz","../modules/web.dom.iterable":"je6vK","../modules/es6.promise":"gQYCC","../modules/es7.promise.finally":"4AzU0","../modules/es7.promise.try":"aAGbC","../modules/_core":"hthrp"}],"2gbKX":[function(require,module,exports) {

},{}],"bWOBz":[function(require,module,exports) {
'use strict';
var $at = require('./_string-at')(true);
// 21.1.3.27 String.prototype[@@iterator]()
require('./_iter-define')(String, 'String', function(iterated) {
    this._t = String(iterated); // target
    this._i = 0; // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function() {
    var O = this._t;
    var index = this._i;
    var point;
    if (index >= O.length) return {
        value: undefined,
        done: true
    };
    point = $at(O, index);
    this._i += point.length;
    return {
        value: point,
        done: false
    };
});

},{"./_string-at":"73zdY","./_iter-define":"6bLGG"}],"73zdY":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var defined = require('./_defined');
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING) {
    return function(that, pos) {
        var s = String(defined(that));
        var i = toInteger(pos);
        var l = s.length;
        var a, b;
        if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
        a = s.charCodeAt(i);
        return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
    };
};

},{"./_to-integer":"9aNgx","./_defined":"doqrk"}],"9aNgx":[function(require,module,exports) {
// 7.1.4 ToInteger
var ceil = Math.ceil;
var floor = Math.floor;
module.exports = function(it) {
    return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

},{}],"doqrk":[function(require,module,exports) {
// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it) {
    if (it == undefined) throw TypeError("Can't call method on  " + it);
    return it;
};

},{}],"6bLGG":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var $export = require('./_export');
var redefine = require('./_redefine');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var $iterCreate = require('./_iter-create');
var setToStringTag = require('./_set-to-string-tag');
var getPrototypeOf = require('./_object-gpo');
var ITERATOR = require('./_wks')('iterator');
var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
var FF_ITERATOR = '@@iterator';
var KEYS = 'keys';
var VALUES = 'values';
var returnThis = function() {
    return this;
};
module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
    $iterCreate(Constructor, NAME, next);
    var getMethod = function(kind) {
        if (!BUGGY && kind in proto) return proto[kind];
        switch(kind){
            case KEYS:
                return function keys() {
                    return new Constructor(this, kind);
                };
            case VALUES:
                return function values() {
                    return new Constructor(this, kind);
                };
        }
        return function entries() {
            return new Constructor(this, kind);
        };
    };
    var TAG = NAME + ' Iterator';
    var DEF_VALUES = DEFAULT == VALUES;
    var VALUES_BUG = false;
    var proto = Base.prototype;
    var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
    var $default = $native || getMethod(DEFAULT);
    var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
    var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
    var methods, key, IteratorPrototype;
    // Fix native
    if ($anyNative) {
        IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
        if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
            // Set @@toStringTag to native iterators
            setToStringTag(IteratorPrototype, TAG, true);
            // fix for some old engines
            if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);
        }
    }
    // fix Array#{values, @@iterator}.name in V8 / FF
    if (DEF_VALUES && $native && $native.name !== VALUES) {
        VALUES_BUG = true;
        $default = function values() {
            return $native.call(this);
        };
    }
    // Define iterator
    if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) hide(proto, ITERATOR, $default);
    // Plug for library
    Iterators[NAME] = $default;
    Iterators[TAG] = returnThis;
    if (DEFAULT) {
        methods = {
            values: DEF_VALUES ? $default : getMethod(VALUES),
            keys: IS_SET ? $default : getMethod(KEYS),
            entries: $entries
        };
        if (FORCED) {
            for(key in methods)if (!(key in proto)) redefine(proto, key, methods[key]);
        } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
    }
    return methods;
};

},{"./_library":"3hH9R","./_export":"gwTsq","./_redefine":"897HI","./_hide":"gmT3z","./_iterators":"kW7q9","./_iter-create":"9iSlF","./_set-to-string-tag":"ioYhC","./_object-gpo":"4cqbc","./_wks":"9hJYz"}],"3hH9R":[function(require,module,exports) {
module.exports = true;

},{}],"gwTsq":[function(require,module,exports) {
var global = require('./_global');
var core = require('./_core');
var ctx = require('./_ctx');
var hide = require('./_hide');
var has = require('./_has');
var PROTOTYPE = 'prototype';
var $export = function(type, name, source) {
    var IS_FORCED = type & $export.F;
    var IS_GLOBAL = type & $export.G;
    var IS_STATIC = type & $export.S;
    var IS_PROTO = type & $export.P;
    var IS_BIND = type & $export.B;
    var IS_WRAP = type & $export.W;
    var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});
    var expProto = exports[PROTOTYPE];
    var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];
    var key, own, out;
    if (IS_GLOBAL) source = name;
    for(key in source){
        // contains in native
        own = !IS_FORCED && target && target[key] !== undefined;
        if (own && has(exports, key)) continue;
        // export native or passed
        out = own ? target[key] : source[key];
        // prevent global pollution for namespaces
        exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key] : IS_BIND && own ? ctx(out, global) : IS_WRAP && target[key] == out ? function(C) {
            var F = function(a, b, c) {
                if (this instanceof C) {
                    switch(arguments.length){
                        case 0:
                            return new C();
                        case 1:
                            return new C(a);
                        case 2:
                            return new C(a, b);
                    }
                    return new C(a, b, c);
                }
                return C.apply(this, arguments);
            };
            F[PROTOTYPE] = C[PROTOTYPE];
            return F;
        // make static versions for prototype methods
        }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
        // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
        if (IS_PROTO) {
            (exports.virtual || (exports.virtual = {}))[key] = out;
            // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
            if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
        }
    }
};
// type bitmap
$export.F = 1; // forced
$export.G = 2; // global
$export.S = 4; // static
$export.P = 8; // proto
$export.B = 16; // bind
$export.W = 32; // wrap
$export.U = 64; // safe
$export.R = 128; // real proto method for `library`
module.exports = $export;

},{"./_global":"3Oj2u","./_core":"hthrp","./_ctx":"7rPfq","./_hide":"gmT3z","./_has":"e6RUY"}],"3Oj2u":[function(require,module,exports) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

},{}],"hthrp":[function(require,module,exports) {
var core = module.exports = {
    version: '2.6.12'
};
if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

},{}],"7rPfq":[function(require,module,exports) {
// optional / simple context binding
var aFunction = require('./_a-function');
module.exports = function(fn, that, length) {
    aFunction(fn);
    if (that === undefined) return fn;
    switch(length){
        case 1:
            return function(a) {
                return fn.call(that, a);
            };
        case 2:
            return function(a, b) {
                return fn.call(that, a, b);
            };
        case 3:
            return function(a, b, c) {
                return fn.call(that, a, b, c);
            };
    }
    return function() {
        return fn.apply(that, arguments);
    };
};

},{"./_a-function":"c3Iin"}],"c3Iin":[function(require,module,exports) {
module.exports = function(it) {
    if (typeof it != 'function') throw TypeError(it + ' is not a function!');
    return it;
};

},{}],"gmT3z":[function(require,module,exports) {
var dP = require('./_object-dp');
var createDesc = require('./_property-desc');
module.exports = require('./_descriptors') ? function(object, key, value) {
    return dP.f(object, key, createDesc(1, value));
} : function(object, key, value) {
    object[key] = value;
    return object;
};

},{"./_object-dp":"7oxIl","./_property-desc":"dmVmZ","./_descriptors":"jxsfR"}],"7oxIl":[function(require,module,exports) {
var anObject = require('./_an-object');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var toPrimitive = require('./_to-primitive');
var dP = Object.defineProperty;
exports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {
    anObject(O);
    P = toPrimitive(P, true);
    anObject(Attributes);
    if (IE8_DOM_DEFINE) try {
        return dP(O, P, Attributes);
    } catch (e) {}
    if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
    if ('value' in Attributes) O[P] = Attributes.value;
    return O;
};

},{"./_an-object":"7CErr","./_ie8-dom-define":"8kkSV","./_to-primitive":"kAQVK","./_descriptors":"jxsfR"}],"7CErr":[function(require,module,exports) {
var isObject = require('./_is-object');
module.exports = function(it) {
    if (!isObject(it)) throw TypeError(it + ' is not an object!');
    return it;
};

},{"./_is-object":"6EXcp"}],"6EXcp":[function(require,module,exports) {
module.exports = function(it) {
    return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"8kkSV":[function(require,module,exports) {
module.exports = !require('./_descriptors') && !require('./_fails')(function() {
    return Object.defineProperty(require('./_dom-create')('div'), 'a', {
        get: function() {
            return 7;
        }
    }).a != 7;
});

},{"./_descriptors":"jxsfR","./_fails":"lCl2A","./_dom-create":"ibxgc"}],"jxsfR":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('./_fails')(function() {
    return Object.defineProperty({}, 'a', {
        get: function() {
            return 7;
        }
    }).a != 7;
});

},{"./_fails":"lCl2A"}],"lCl2A":[function(require,module,exports) {
module.exports = function(exec) {
    try {
        return !!exec();
    } catch (e) {
        return true;
    }
};

},{}],"ibxgc":[function(require,module,exports) {
var isObject = require('./_is-object');
var document = require('./_global').document;
// typeof document.createElement is 'object' in old IE
var is = isObject(document) && isObject(document.createElement);
module.exports = function(it) {
    return is ? document.createElement(it) : {};
};

},{"./_is-object":"6EXcp","./_global":"3Oj2u"}],"kAQVK":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('./_is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S) {
    if (!isObject(it)) return it;
    var fn, val;
    if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
    if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
    throw TypeError("Can't convert object to primitive value");
};

},{"./_is-object":"6EXcp"}],"dmVmZ":[function(require,module,exports) {
module.exports = function(bitmap, value) {
    return {
        enumerable: !(bitmap & 1),
        configurable: !(bitmap & 2),
        writable: !(bitmap & 4),
        value: value
    };
};

},{}],"e6RUY":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key) {
    return hasOwnProperty.call(it, key);
};

},{}],"897HI":[function(require,module,exports) {
module.exports = require('./_hide');

},{"./_hide":"gmT3z"}],"kW7q9":[function(require,module,exports) {
module.exports = {};

},{}],"9iSlF":[function(require,module,exports) {
'use strict';
var create = require('./_object-create');
var descriptor = require('./_property-desc');
var setToStringTag = require('./_set-to-string-tag');
var IteratorPrototype = {};
// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
require('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function() {
    return this;
});
module.exports = function(Constructor, NAME, next) {
    Constructor.prototype = create(IteratorPrototype, {
        next: descriptor(1, next)
    });
    setToStringTag(Constructor, NAME + ' Iterator');
};

},{"./_object-create":"9T5lC","./_property-desc":"dmVmZ","./_set-to-string-tag":"ioYhC","./_hide":"gmT3z","./_wks":"9hJYz"}],"9T5lC":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('./_an-object');
var dPs = require('./_object-dps');
var enumBugKeys = require('./_enum-bug-keys');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var Empty = function() {};
var PROTOTYPE = 'prototype';
// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function() {
    // Thrash, waste and sodomy: IE GC bug
    var iframe = require('./_dom-create')('iframe');
    var i = enumBugKeys.length;
    var lt = '<';
    var gt = '>';
    var iframeDocument;
    iframe.style.display = 'none';
    require('./_html').appendChild(iframe);
    iframe.src = 'javascript:'; // eslint-disable-line no-script-url
    // createDict = iframe.contentWindow.Object;
    // html.removeChild(iframe);
    iframeDocument = iframe.contentWindow.document;
    iframeDocument.open();
    iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
    iframeDocument.close();
    createDict = iframeDocument.F;
    while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
    return createDict();
};
module.exports = Object.create || function create(O, Properties) {
    var result;
    if (O !== null) {
        Empty[PROTOTYPE] = anObject(O);
        result = new Empty();
        Empty[PROTOTYPE] = null;
        // add "__proto__" for Object.getPrototypeOf polyfill
        result[IE_PROTO] = O;
    } else result = createDict();
    return Properties === undefined ? result : dPs(result, Properties);
};

},{"./_an-object":"7CErr","./_object-dps":"4ujfv","./_enum-bug-keys":"jUdvY","./_shared-key":"f9A1D","./_dom-create":"ibxgc","./_html":"7Oh7V"}],"4ujfv":[function(require,module,exports) {
var dP = require('./_object-dp');
var anObject = require('./_an-object');
var getKeys = require('./_object-keys');
module.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {
    anObject(O);
    var keys = getKeys(Properties);
    var length = keys.length;
    var i = 0;
    var P;
    while(length > i)dP.f(O, P = keys[i++], Properties[P]);
    return O;
};

},{"./_object-dp":"7oxIl","./_an-object":"7CErr","./_object-keys":"49Ud8","./_descriptors":"jxsfR"}],"49Ud8":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys = require('./_object-keys-internal');
var enumBugKeys = require('./_enum-bug-keys');
module.exports = Object.keys || function keys(O) {
    return $keys(O, enumBugKeys);
};

},{"./_object-keys-internal":"2rNY7","./_enum-bug-keys":"jUdvY"}],"2rNY7":[function(require,module,exports) {
var has = require('./_has');
var toIObject = require('./_to-iobject');
var arrayIndexOf = require('./_array-includes')(false);
var IE_PROTO = require('./_shared-key')('IE_PROTO');
module.exports = function(object, names) {
    var O = toIObject(object);
    var i = 0;
    var result = [];
    var key;
    for(key in O)if (key != IE_PROTO) has(O, key) && result.push(key);
    // Don't enum bug & hidden keys
    while(names.length > i)if (has(O, key = names[i++])) ~arrayIndexOf(result, key) || result.push(key);
    return result;
};

},{"./_has":"e6RUY","./_to-iobject":"2srcq","./_array-includes":"eZrld","./_shared-key":"f9A1D"}],"2srcq":[function(require,module,exports) {
// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = require('./_iobject');
var defined = require('./_defined');
module.exports = function(it) {
    return IObject(defined(it));
};

},{"./_iobject":"4yBC7","./_defined":"doqrk"}],"4yBC7":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = require('./_cof');
// eslint-disable-next-line no-prototype-builtins
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it) {
    return cof(it) == 'String' ? it.split('') : Object(it);
};

},{"./_cof":"5KK9s"}],"5KK9s":[function(require,module,exports) {
var toString = {}.toString;
module.exports = function(it) {
    return toString.call(it).slice(8, -1);
};

},{}],"eZrld":[function(require,module,exports) {
// false -> Array#indexOf
// true  -> Array#includes
var toIObject = require('./_to-iobject');
var toLength = require('./_to-length');
var toAbsoluteIndex = require('./_to-absolute-index');
module.exports = function(IS_INCLUDES) {
    return function($this, el, fromIndex) {
        var O = toIObject($this);
        var length = toLength(O.length);
        var index = toAbsoluteIndex(fromIndex, length);
        var value;
        // Array#includes uses SameValueZero equality algorithm
        // eslint-disable-next-line no-self-compare
        if (IS_INCLUDES && el != el) while(length > index){
            value = O[index++];
            // eslint-disable-next-line no-self-compare
            if (value != value) return true;
        // Array#indexOf ignores holes, Array#includes - not
        }
        else for(; length > index; index++)if (IS_INCLUDES || index in O) {
            if (O[index] === el) return IS_INCLUDES || index || 0;
        }
        return !IS_INCLUDES && -1;
    };
};

},{"./_to-iobject":"2srcq","./_to-length":"hojM5","./_to-absolute-index":"2OyuF"}],"hojM5":[function(require,module,exports) {
// 7.1.15 ToLength
var toInteger = require('./_to-integer');
var min = Math.min;
module.exports = function(it) {
    return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"./_to-integer":"9aNgx"}],"2OyuF":[function(require,module,exports) {
var toInteger = require('./_to-integer');
var max = Math.max;
var min = Math.min;
module.exports = function(index, length) {
    index = toInteger(index);
    return index < 0 ? max(index + length, 0) : min(index, length);
};

},{"./_to-integer":"9aNgx"}],"f9A1D":[function(require,module,exports) {
var shared = require('./_shared')('keys');
var uid = require('./_uid');
module.exports = function(key) {
    return shared[key] || (shared[key] = uid(key));
};

},{"./_shared":"faluf","./_uid":"iIUz7"}],"faluf":[function(require,module,exports) {
var core = require('./_core');
var global = require('./_global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || (global[SHARED] = {});
(module.exports = function(key, value) {
    return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
    version: core.version,
    mode: require('./_library') ? 'pure' : 'global',
    copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
});

},{"./_core":"hthrp","./_global":"3Oj2u","./_library":"3hH9R"}],"iIUz7":[function(require,module,exports) {
var id = 0;
var px = Math.random();
module.exports = function(key) {
    return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

},{}],"jUdvY":[function(require,module,exports) {
// IE 8- don't enum bug keys
module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

},{}],"7Oh7V":[function(require,module,exports) {
var document = require('./_global').document;
module.exports = document && document.documentElement;

},{"./_global":"3Oj2u"}],"ioYhC":[function(require,module,exports) {
var def = require('./_object-dp').f;
var has = require('./_has');
var TAG = require('./_wks')('toStringTag');
module.exports = function(it, tag, stat) {
    if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, {
        configurable: true,
        value: tag
    });
};

},{"./_object-dp":"7oxIl","./_has":"e6RUY","./_wks":"9hJYz"}],"9hJYz":[function(require,module,exports) {
var store = require('./_shared')('wks');
var uid = require('./_uid');
var Symbol = require('./_global').Symbol;
var USE_SYMBOL = typeof Symbol == 'function';
var $exports = module.exports = function(name) {
    return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};
$exports.store = store;

},{"./_shared":"faluf","./_uid":"iIUz7","./_global":"3Oj2u"}],"4cqbc":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('./_has');
var toObject = require('./_to-object');
var IE_PROTO = require('./_shared-key')('IE_PROTO');
var ObjectProto = Object.prototype;
module.exports = Object.getPrototypeOf || function(O) {
    O = toObject(O);
    if (has(O, IE_PROTO)) return O[IE_PROTO];
    if (typeof O.constructor == 'function' && O instanceof O.constructor) return O.constructor.prototype;
    return O instanceof Object ? ObjectProto : null;
};

},{"./_has":"e6RUY","./_to-object":"b3Y3Z","./_shared-key":"f9A1D"}],"b3Y3Z":[function(require,module,exports) {
// 7.1.13 ToObject(argument)
var defined = require('./_defined');
module.exports = function(it) {
    return Object(defined(it));
};

},{"./_defined":"doqrk"}],"je6vK":[function(require,module,exports) {
require('./es6.array.iterator');
var global = require('./_global');
var hide = require('./_hide');
var Iterators = require('./_iterators');
var TO_STRING_TAG = require('./_wks')('toStringTag');
var DOMIterables = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(',');
for(var i = 0; i < DOMIterables.length; i++){
    var NAME = DOMIterables[i];
    var Collection = global[NAME];
    var proto = Collection && Collection.prototype;
    if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
    Iterators[NAME] = Iterators.Array;
}

},{"./es6.array.iterator":"fv4l9","./_global":"3Oj2u","./_hide":"gmT3z","./_iterators":"kW7q9","./_wks":"9hJYz"}],"fv4l9":[function(require,module,exports) {
'use strict';
var addToUnscopables = require('./_add-to-unscopables');
var step = require('./_iter-step');
var Iterators = require('./_iterators');
var toIObject = require('./_to-iobject');
// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = require('./_iter-define')(Array, 'Array', function(iterated, kind) {
    this._t = toIObject(iterated); // target
    this._i = 0; // next index
    this._k = kind; // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function() {
    var O = this._t;
    var kind = this._k;
    var index = this._i++;
    if (!O || index >= O.length) {
        this._t = undefined;
        return step(1);
    }
    if (kind == 'keys') return step(0, index);
    if (kind == 'values') return step(0, O[index]);
    return step(0, [
        index,
        O[index]
    ]);
}, 'values');
// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"./_add-to-unscopables":"2gVWp","./_iter-step":"jOFR4","./_iterators":"kW7q9","./_to-iobject":"2srcq","./_iter-define":"6bLGG"}],"2gVWp":[function(require,module,exports) {
module.exports = function() {};

},{}],"jOFR4":[function(require,module,exports) {
module.exports = function(done, value) {
    return {
        value: value,
        done: !!done
    };
};

},{}],"gQYCC":[function(require,module,exports) {
'use strict';
var LIBRARY = require('./_library');
var global = require('./_global');
var ctx = require('./_ctx');
var classof = require('./_classof');
var $export = require('./_export');
var isObject = require('./_is-object');
var aFunction = require('./_a-function');
var anInstance = require('./_an-instance');
var forOf = require('./_for-of');
var speciesConstructor = require('./_species-constructor');
var task = require('./_task').set;
var microtask = require('./_microtask')();
var newPromiseCapabilityModule = require('./_new-promise-capability');
var perform = require('./_perform');
var userAgent = require('./_user-agent');
var promiseResolve = require('./_promise-resolve');
var PROMISE = 'Promise';
var TypeError = global.TypeError;
var process = global.process;
var versions = process && process.versions;
var v8 = versions && versions.v8 || '';
var $Promise = global[PROMISE];
var isNode = classof(process) == 'process';
var empty = function() {};
var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;
var newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;
var USE_NATIVE = !!function() {
    try {
        // correct subclassing with @@species support
        var promise = $Promise.resolve(1);
        var FakePromise = (promise.constructor = {})[require('./_wks')('species')] = function(exec) {
            exec(empty, empty);
        };
        // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
        return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise && v8.indexOf('6.6') !== 0 && userAgent.indexOf('Chrome/66') === -1;
    } catch (e) {}
}();
// helpers
var isThenable = function(it) {
    var then;
    return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var notify = function(promise, isReject) {
    if (promise._n) return;
    promise._n = true;
    var chain = promise._c;
    microtask(function() {
        var value = promise._v;
        var ok = promise._s == 1;
        var i = 0;
        var run = function(reaction) {
            var handler = ok ? reaction.ok : reaction.fail;
            var resolve = reaction.resolve;
            var reject = reaction.reject;
            var domain = reaction.domain;
            var result, then, exited;
            try {
                if (handler) {
                    if (!ok) {
                        if (promise._h == 2) onHandleUnhandled(promise);
                        promise._h = 1;
                    }
                    if (handler === true) result = value;
                    else {
                        if (domain) domain.enter();
                        result = handler(value); // may throw
                        if (domain) {
                            domain.exit();
                            exited = true;
                        }
                    }
                    if (result === reaction.promise) reject(TypeError('Promise-chain cycle'));
                    else if (then = isThenable(result)) then.call(result, resolve, reject);
                    else resolve(result);
                } else reject(value);
            } catch (e) {
                if (domain && !exited) domain.exit();
                reject(e);
            }
        };
        while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
        promise._c = [];
        promise._n = false;
        if (isReject && !promise._h) onUnhandled(promise);
    });
};
var onUnhandled = function(promise) {
    task.call(global, function() {
        var value = promise._v;
        var unhandled = isUnhandled(promise);
        var result, handler, console;
        if (unhandled) {
            result = perform(function() {
                if (isNode) process.emit('unhandledRejection', value, promise);
                else if (handler = global.onunhandledrejection) handler({
                    promise: promise,
                    reason: value
                });
                else if ((console = global.console) && console.error) console.error('Unhandled promise rejection', value);
            });
            // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
            promise._h = isNode || isUnhandled(promise) ? 2 : 1;
        }
        promise._a = undefined;
        if (unhandled && result.e) throw result.v;
    });
};
var isUnhandled = function(promise) {
    return promise._h !== 1 && (promise._a || promise._c).length === 0;
};
var onHandleUnhandled = function(promise) {
    task.call(global, function() {
        var handler;
        if (isNode) process.emit('rejectionHandled', promise);
        else if (handler = global.onrejectionhandled) handler({
            promise: promise,
            reason: promise._v
        });
    });
};
var $reject = function(value) {
    var promise = this;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    promise._v = value;
    promise._s = 2;
    if (!promise._a) promise._a = promise._c.slice();
    notify(promise, true);
};
var $resolve = function(value) {
    var promise = this;
    var then;
    if (promise._d) return;
    promise._d = true;
    promise = promise._w || promise; // unwrap
    try {
        if (promise === value) throw TypeError("Promise can't be resolved itself");
        if (then = isThenable(value)) microtask(function() {
            var wrapper = {
                _w: promise,
                _d: false
            }; // wrap
            try {
                then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
            } catch (e) {
                $reject.call(wrapper, e);
            }
        });
        else {
            promise._v = value;
            promise._s = 1;
            notify(promise, false);
        }
    } catch (e) {
        $reject.call({
            _w: promise,
            _d: false
        }, e); // wrap
    }
};
// constructor polyfill
if (!USE_NATIVE) {
    // 25.4.3.1 Promise(executor)
    $Promise = function Promise(executor) {
        anInstance(this, $Promise, PROMISE, '_h');
        aFunction(executor);
        Internal.call(this);
        try {
            executor(ctx($resolve, this, 1), ctx($reject, this, 1));
        } catch (err) {
            $reject.call(this, err);
        }
    };
    // eslint-disable-next-line no-unused-vars
    Internal = function Promise(executor) {
        this._c = []; // <- awaiting reactions
        this._a = undefined; // <- checked in isUnhandled reactions
        this._s = 0; // <- state
        this._d = false; // <- done
        this._v = undefined; // <- value
        this._h = 0; // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
        this._n = false; // <- notify
    };
    Internal.prototype = require('./_redefine-all')($Promise.prototype, {
        // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
        then: function then(onFulfilled, onRejected) {
            var reaction = newPromiseCapability(speciesConstructor(this, $Promise));
            reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
            reaction.fail = typeof onRejected == 'function' && onRejected;
            reaction.domain = isNode ? process.domain : undefined;
            this._c.push(reaction);
            if (this._a) this._a.push(reaction);
            if (this._s) notify(this, false);
            return reaction.promise;
        },
        // 25.4.5.1 Promise.prototype.catch(onRejected)
        'catch': function(onRejected) {
            return this.then(undefined, onRejected);
        }
    });
    OwnPromiseCapability = function() {
        var promise = new Internal();
        this.promise = promise;
        this.resolve = ctx($resolve, promise, 1);
        this.reject = ctx($reject, promise, 1);
    };
    newPromiseCapabilityModule.f = newPromiseCapability = function(C) {
        return C === $Promise || C === Wrapper ? new OwnPromiseCapability(C) : newGenericPromiseCapability(C);
    };
}
$export($export.G + $export.W + $export.F * !USE_NATIVE, {
    Promise: $Promise
});
require('./_set-to-string-tag')($Promise, PROMISE);
require('./_set-species')(PROMISE);
Wrapper = require('./_core')[PROMISE];
// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
    // 25.4.4.5 Promise.reject(r)
    reject: function reject(r) {
        var capability = newPromiseCapability(this);
        var $$reject = capability.reject;
        $$reject(r);
        return capability.promise;
    }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
    // 25.4.4.6 Promise.resolve(x)
    resolve: function resolve(x) {
        return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);
    }
});
$export($export.S + $export.F * !(USE_NATIVE && require('./_iter-detect')(function(iter) {
    $Promise.all(iter)['catch'](empty);
})), PROMISE, {
    // 25.4.4.1 Promise.all(iterable)
    all: function all(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var resolve = capability.resolve;
        var reject = capability.reject;
        var result = perform(function() {
            var values = [];
            var index = 0;
            var remaining = 1;
            forOf(iterable, false, function(promise) {
                var $index = index++;
                var alreadyCalled = false;
                values.push(undefined);
                remaining++;
                C.resolve(promise).then(function(value) {
                    if (alreadyCalled) return;
                    alreadyCalled = true;
                    values[$index] = value;
                    --remaining || resolve(values);
                }, reject);
            });
            --remaining || resolve(values);
        });
        if (result.e) reject(result.v);
        return capability.promise;
    },
    // 25.4.4.4 Promise.race(iterable)
    race: function race(iterable) {
        var C = this;
        var capability = newPromiseCapability(C);
        var reject = capability.reject;
        var result = perform(function() {
            forOf(iterable, false, function(promise) {
                C.resolve(promise).then(capability.resolve, reject);
            });
        });
        if (result.e) reject(result.v);
        return capability.promise;
    }
});

},{"./_library":"3hH9R","./_global":"3Oj2u","./_ctx":"7rPfq","./_classof":"7IR9U","./_export":"gwTsq","./_is-object":"6EXcp","./_a-function":"c3Iin","./_an-instance":"9PRqg","./_for-of":"1R3pL","./_species-constructor":"bIngS","./_task":"aEEi3","./_microtask":"kPRSt","./_new-promise-capability":"FkVLs","./_perform":"cdPft","./_user-agent":"j6R8o","./_promise-resolve":"l4fy2","./_wks":"9hJYz","./_redefine-all":"b0a8e","./_set-to-string-tag":"ioYhC","./_set-species":"jhxUv","./_core":"hthrp","./_iter-detect":"a23r8"}],"7IR9U":[function(require,module,exports) {
// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = require('./_cof');
var TAG = require('./_wks')('toStringTag');
// ES3 wrong here
var ARG = cof(function() {
    return arguments;
}()) == 'Arguments';
// fallback for IE11 Script Access Denied error
var tryGet = function(it, key) {
    try {
        return it[key];
    } catch (e) {}
};
module.exports = function(it) {
    var O, T, B;
    return it === undefined ? 'Undefined' : it === null ? 'Null' : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T : ARG ? cof(O) : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

},{"./_cof":"5KK9s","./_wks":"9hJYz"}],"9PRqg":[function(require,module,exports) {
module.exports = function(it, Constructor, name, forbiddenField) {
    if (!(it instanceof Constructor) || forbiddenField !== undefined && forbiddenField in it) throw TypeError(name + ': incorrect invocation!');
    return it;
};

},{}],"1R3pL":[function(require,module,exports) {
var ctx = require('./_ctx');
var call = require('./_iter-call');
var isArrayIter = require('./_is-array-iter');
var anObject = require('./_an-object');
var toLength = require('./_to-length');
var getIterFn = require('./core.get-iterator-method');
var BREAK = {};
var RETURN = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR) {
    var iterFn = ITERATOR ? function() {
        return iterable;
    } : getIterFn(iterable);
    var f = ctx(fn, that, entries ? 2 : 1);
    var index = 0;
    var length, step, iterator, result;
    if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
    // fast case for arrays with default iterator
    if (isArrayIter(iterFn)) for(length = toLength(iterable.length); length > index; index++){
        result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
        if (result === BREAK || result === RETURN) return result;
    }
    else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done;){
        result = call(iterator, f, step.value, entries);
        if (result === BREAK || result === RETURN) return result;
    }
};
exports.BREAK = BREAK;
exports.RETURN = RETURN;

},{"./_ctx":"7rPfq","./_iter-call":"cn8aC","./_is-array-iter":"1ZMB9","./_an-object":"7CErr","./_to-length":"hojM5","./core.get-iterator-method":"ail0e"}],"cn8aC":[function(require,module,exports) {
// call something on iterator step with safe closing on error
var anObject = require('./_an-object');
module.exports = function(iterator, fn, value, entries) {
    try {
        return entries ? fn(anObject(value)[0], value[1]) : fn(value);
    // 7.4.6 IteratorClose(iterator, completion)
    } catch (e) {
        var ret = iterator['return'];
        if (ret !== undefined) anObject(ret.call(iterator));
        throw e;
    }
};

},{"./_an-object":"7CErr"}],"1ZMB9":[function(require,module,exports) {
// check on default Array iterator
var Iterators = require('./_iterators');
var ITERATOR = require('./_wks')('iterator');
var ArrayProto = Array.prototype;
module.exports = function(it) {
    return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

},{"./_iterators":"kW7q9","./_wks":"9hJYz"}],"ail0e":[function(require,module,exports) {
var classof = require('./_classof');
var ITERATOR = require('./_wks')('iterator');
var Iterators = require('./_iterators');
module.exports = require('./_core').getIteratorMethod = function(it) {
    if (it != undefined) return it[ITERATOR] || it['@@iterator'] || Iterators[classof(it)];
};

},{"./_classof":"7IR9U","./_wks":"9hJYz","./_iterators":"kW7q9","./_core":"hthrp"}],"bIngS":[function(require,module,exports) {
// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject = require('./_an-object');
var aFunction = require('./_a-function');
var SPECIES = require('./_wks')('species');
module.exports = function(O, D) {
    var C = anObject(O).constructor;
    var S;
    return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

},{"./_an-object":"7CErr","./_a-function":"c3Iin","./_wks":"9hJYz"}],"aEEi3":[function(require,module,exports) {
var ctx = require('./_ctx');
var invoke = require('./_invoke');
var html = require('./_html');
var cel = require('./_dom-create');
var global = require('./_global');
var process = global.process;
var setTask = global.setImmediate;
var clearTask = global.clearImmediate;
var MessageChannel = global.MessageChannel;
var Dispatch = global.Dispatch;
var counter = 0;
var queue = {};
var ONREADYSTATECHANGE = 'onreadystatechange';
var defer, channel, port;
var run = function() {
    var id = +this;
    // eslint-disable-next-line no-prototype-builtins
    if (queue.hasOwnProperty(id)) {
        var fn = queue[id];
        delete queue[id];
        fn();
    }
};
var listener = function(event) {
    run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if (!setTask || !clearTask) {
    setTask = function setImmediate(fn) {
        var args = [];
        var i = 1;
        while(arguments.length > i)args.push(arguments[i++]);
        queue[++counter] = function() {
            // eslint-disable-next-line no-new-func
            invoke(typeof fn == 'function' ? fn : Function(fn), args);
        };
        defer(counter);
        return counter;
    };
    clearTask = function clearImmediate(id) {
        delete queue[id];
    };
    // Node.js 0.8-
    if (require('./_cof')(process) == 'process') defer = function(id) {
        process.nextTick(ctx(run, id, 1));
    };
    else if (Dispatch && Dispatch.now) defer = function(id) {
        Dispatch.now(ctx(run, id, 1));
    };
    else if (MessageChannel) {
        channel = new MessageChannel();
        port = channel.port2;
        channel.port1.onmessage = listener;
        defer = ctx(port.postMessage, port, 1);
    // Browsers with postMessage, skip WebWorkers
    // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
    } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {
        defer = function(id) {
            global.postMessage(id + '', '*');
        };
        global.addEventListener('message', listener, false);
    // IE8-
    } else if (ONREADYSTATECHANGE in cel('script')) defer = function(id) {
        html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function() {
            html.removeChild(this);
            run.call(id);
        };
    };
    else defer = function(id) {
        setTimeout(ctx(run, id, 1), 0);
    };
}
module.exports = {
    set: setTask,
    clear: clearTask
};

},{"./_ctx":"7rPfq","./_invoke":"b3H5l","./_html":"7Oh7V","./_dom-create":"ibxgc","./_global":"3Oj2u","./_cof":"5KK9s"}],"b3H5l":[function(require,module,exports) {
// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that) {
    var un = that === undefined;
    switch(args.length){
        case 0:
            return un ? fn() : fn.call(that);
        case 1:
            return un ? fn(args[0]) : fn.call(that, args[0]);
        case 2:
            return un ? fn(args[0], args[1]) : fn.call(that, args[0], args[1]);
        case 3:
            return un ? fn(args[0], args[1], args[2]) : fn.call(that, args[0], args[1], args[2]);
        case 4:
            return un ? fn(args[0], args[1], args[2], args[3]) : fn.call(that, args[0], args[1], args[2], args[3]);
    }
    return fn.apply(that, args);
};

},{}],"kPRSt":[function(require,module,exports) {
var global = require('./_global');
var macrotask = require('./_task').set;
var Observer = global.MutationObserver || global.WebKitMutationObserver;
var process = global.process;
var Promise = global.Promise;
var isNode = require('./_cof')(process) == 'process';
module.exports = function() {
    var head, last, notify;
    var flush = function() {
        var parent, fn;
        if (isNode && (parent = process.domain)) parent.exit();
        while(head){
            fn = head.fn;
            head = head.next;
            try {
                fn();
            } catch (e) {
                if (head) notify();
                else last = undefined;
                throw e;
            }
        }
        last = undefined;
        if (parent) parent.enter();
    };
    // Node.js
    if (isNode) notify = function() {
        process.nextTick(flush);
    };
    else if (Observer && !(global.navigator && global.navigator.standalone)) {
        var toggle = true;
        var node = document.createTextNode('');
        new Observer(flush).observe(node, {
            characterData: true
        }); // eslint-disable-line no-new
        notify = function() {
            node.data = toggle = !toggle;
        };
    // environments with maybe non-completely correct, but existent Promise
    } else if (Promise && Promise.resolve) {
        // Promise.resolve without an argument throws an error in LG WebOS 2
        var promise = Promise.resolve(undefined);
        notify = function() {
            promise.then(flush);
        };
    // for other environments - macrotask based on:
    // - setImmediate
    // - MessageChannel
    // - window.postMessag
    // - onreadystatechange
    // - setTimeout
    } else notify = function() {
        // strange IE + webpack dev server bug - use .call(global)
        macrotask.call(global, flush);
    };
    return function(fn) {
        var task = {
            fn: fn,
            next: undefined
        };
        if (last) last.next = task;
        if (!head) {
            head = task;
            notify();
        }
        last = task;
    };
};

},{"./_global":"3Oj2u","./_task":"aEEi3","./_cof":"5KK9s"}],"FkVLs":[function(require,module,exports) {
'use strict';
// 25.4.1.5 NewPromiseCapability(C)
var aFunction = require('./_a-function');
function PromiseCapability(C) {
    var resolve, reject;
    this.promise = new C(function($$resolve, $$reject) {
        if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
        resolve = $$resolve;
        reject = $$reject;
    });
    this.resolve = aFunction(resolve);
    this.reject = aFunction(reject);
}
module.exports.f = function(C) {
    return new PromiseCapability(C);
};

},{"./_a-function":"c3Iin"}],"cdPft":[function(require,module,exports) {
module.exports = function(exec) {
    try {
        return {
            e: false,
            v: exec()
        };
    } catch (e) {
        return {
            e: true,
            v: e
        };
    }
};

},{}],"j6R8o":[function(require,module,exports) {
var global = require('./_global');
var navigator = global.navigator;
module.exports = navigator && navigator.userAgent || '';

},{"./_global":"3Oj2u"}],"l4fy2":[function(require,module,exports) {
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var newPromiseCapability = require('./_new-promise-capability');
module.exports = function(C, x) {
    anObject(C);
    if (isObject(x) && x.constructor === C) return x;
    var promiseCapability = newPromiseCapability.f(C);
    var resolve = promiseCapability.resolve;
    resolve(x);
    return promiseCapability.promise;
};

},{"./_an-object":"7CErr","./_is-object":"6EXcp","./_new-promise-capability":"FkVLs"}],"b0a8e":[function(require,module,exports) {
var hide = require('./_hide');
module.exports = function(target, src, safe) {
    for(var key in src)if (safe && target[key]) target[key] = src[key];
    else hide(target, key, src[key]);
    return target;
};

},{"./_hide":"gmT3z"}],"jhxUv":[function(require,module,exports) {
'use strict';
var global = require('./_global');
var core = require('./_core');
var dP = require('./_object-dp');
var DESCRIPTORS = require('./_descriptors');
var SPECIES = require('./_wks')('species');
module.exports = function(KEY) {
    var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
    if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {
        configurable: true,
        get: function() {
            return this;
        }
    });
};

},{"./_global":"3Oj2u","./_core":"hthrp","./_object-dp":"7oxIl","./_descriptors":"jxsfR","./_wks":"9hJYz"}],"a23r8":[function(require,module,exports) {
var ITERATOR = require('./_wks')('iterator');
var SAFE_CLOSING = false;
try {
    var riter = [
        7
    ][ITERATOR]();
    riter['return'] = function() {
        SAFE_CLOSING = true;
    };
    // eslint-disable-next-line no-throw-literal
    Array.from(riter, function() {
        throw 2;
    });
} catch (e) {}
module.exports = function(exec, skipClosing) {
    if (!skipClosing && !SAFE_CLOSING) return false;
    var safe = false;
    try {
        var arr = [
            7
        ];
        var iter = arr[ITERATOR]();
        iter.next = function() {
            return {
                done: safe = true
            };
        };
        arr[ITERATOR] = function() {
            return iter;
        };
        exec(arr);
    } catch (e) {}
    return safe;
};

},{"./_wks":"9hJYz"}],"4AzU0":[function(require,module,exports) {
// https://github.com/tc39/proposal-promise-finally
'use strict';
var $export = require('./_export');
var core = require('./_core');
var global = require('./_global');
var speciesConstructor = require('./_species-constructor');
var promiseResolve = require('./_promise-resolve');
$export($export.P + $export.R, 'Promise', {
    'finally': function(onFinally) {
        var C = speciesConstructor(this, core.Promise || global.Promise);
        var isFunction = typeof onFinally == 'function';
        return this.then(isFunction ? function(x) {
            return promiseResolve(C, onFinally()).then(function() {
                return x;
            });
        } : onFinally, isFunction ? function(e) {
            return promiseResolve(C, onFinally()).then(function() {
                throw e;
            });
        } : onFinally);
    }
});

},{"./_export":"gwTsq","./_core":"hthrp","./_global":"3Oj2u","./_species-constructor":"bIngS","./_promise-resolve":"l4fy2"}],"aAGbC":[function(require,module,exports) {
'use strict';
// https://github.com/tc39/proposal-promise-try
var $export = require('./_export');
var newPromiseCapability = require('./_new-promise-capability');
var perform = require('./_perform');
$export($export.S, 'Promise', {
    'try': function(callbackfn) {
        var promiseCapability = newPromiseCapability.f(this);
        var result = perform(callbackfn);
        (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
        return promiseCapability.promise;
    }
});

},{"./_export":"gwTsq","./_new-promise-capability":"FkVLs","./_perform":"cdPft"}],"ajQiN":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _iterator = require("../core-js/symbol/iterator");
var _iterator2 = _interopRequireDefault(_iterator);
var _symbol = require("../core-js/symbol");
var _symbol2 = _interopRequireDefault(_symbol);
var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj;
};
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function(obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function(obj) {
    return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

},{"../core-js/symbol/iterator":"d9aHN","../core-js/symbol":"d2H9Q"}],"d9aHN":[function(require,module,exports) {
module.exports = {
    "default": require("core-js/library/fn/symbol/iterator"),
    __esModule: true
};

},{"core-js/library/fn/symbol/iterator":"e0Slp"}],"e0Slp":[function(require,module,exports) {
require('../../modules/es6.string.iterator');
require('../../modules/web.dom.iterable');
module.exports = require('../../modules/_wks-ext').f('iterator');

},{"../../modules/es6.string.iterator":"bWOBz","../../modules/web.dom.iterable":"je6vK","../../modules/_wks-ext":"71cvE"}],"71cvE":[function(require,module,exports) {
exports.f = require('./_wks');

},{"./_wks":"9hJYz"}],"d2H9Q":[function(require,module,exports) {
module.exports = {
    "default": require("core-js/library/fn/symbol"),
    __esModule: true
};

},{"core-js/library/fn/symbol":"03nEp"}],"03nEp":[function(require,module,exports) {
require('../../modules/es6.symbol');
require('../../modules/es6.object.to-string');
require('../../modules/es7.symbol.async-iterator');
require('../../modules/es7.symbol.observable');
module.exports = require('../../modules/_core').Symbol;

},{"../../modules/es6.symbol":"6eSfG","../../modules/es6.object.to-string":"2gbKX","../../modules/es7.symbol.async-iterator":"abx5g","../../modules/es7.symbol.observable":"axyaQ","../../modules/_core":"hthrp"}],"6eSfG":[function(require,module,exports) {
'use strict';
// ECMAScript 6 symbols shim
var global = require('./_global');
var has = require('./_has');
var DESCRIPTORS = require('./_descriptors');
var $export = require('./_export');
var redefine = require('./_redefine');
var META = require('./_meta').KEY;
var $fails = require('./_fails');
var shared = require('./_shared');
var setToStringTag = require('./_set-to-string-tag');
var uid = require('./_uid');
var wks = require('./_wks');
var wksExt = require('./_wks-ext');
var wksDefine = require('./_wks-define');
var enumKeys = require('./_enum-keys');
var isArray = require('./_is-array');
var anObject = require('./_an-object');
var isObject = require('./_is-object');
var toObject = require('./_to-object');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var createDesc = require('./_property-desc');
var _create = require('./_object-create');
var gOPNExt = require('./_object-gopn-ext');
var $GOPD = require('./_object-gopd');
var $GOPS = require('./_object-gops');
var $DP = require('./_object-dp');
var $keys = require('./_object-keys');
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function' && !!$GOPS.f;
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function() {
    return _create(dP({}, 'a', {
        get: function() {
            return dP(this, 'a', {
                value: 7
            }).a;
        }
    })).a != 7;
}) ? function(it, key, D) {
    var protoDesc = gOPD(ObjectProto, key);
    if (protoDesc) delete ObjectProto[key];
    dP(it, key, D);
    if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;
var wrap = function(tag) {
    var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
    sym._k = tag;
    return sym;
};
var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it) {
    return typeof it == 'symbol';
} : function(it) {
    return it instanceof $Symbol;
};
var $defineProperty = function defineProperty(it, key, D) {
    if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
    anObject(it);
    key = toPrimitive(key, true);
    anObject(D);
    if (has(AllSymbols, key)) {
        if (!D.enumerable) {
            if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
            it[HIDDEN][key] = true;
        } else {
            if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
            D = _create(D, {
                enumerable: createDesc(0, false)
            });
        }
        return setSymbolDesc(it, key, D);
    }
    return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
    anObject(it);
    var keys = enumKeys(P = toIObject(P));
    var i = 0;
    var l = keys.length;
    var key;
    while(l > i)$defineProperty(it, key = keys[i++], P[key]);
    return it;
};
var $create = function create(it, P) {
    return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
    var E = isEnum.call(this, key = toPrimitive(key, true));
    if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
    return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
    it = toIObject(it);
    key = toPrimitive(key, true);
    if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
    var D = gOPD(it, key);
    if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
    return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
    var names = gOPN(toIObject(it));
    var result = [];
    var i = 0;
    var key;
    while(names.length > i)if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
    return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
    var IS_OP = it === ObjectProto;
    var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
    var result = [];
    var i = 0;
    var key;
    while(names.length > i)if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
    return result;
};
// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
    $Symbol = function Symbol() {
        if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
        var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
        var $set = function(value) {
            if (this === ObjectProto) $set.call(OPSymbols, value);
            if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
            setSymbolDesc(this, tag, createDesc(1, value));
        };
        if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, {
            configurable: true,
            set: $set
        });
        return wrap(tag);
    };
    redefine($Symbol[PROTOTYPE], 'toString', function toString() {
        return this._k;
    });
    $GOPD.f = $getOwnPropertyDescriptor;
    $DP.f = $defineProperty;
    require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;
    require('./_object-pie').f = $propertyIsEnumerable;
    $GOPS.f = $getOwnPropertySymbols;
    if (DESCRIPTORS && !require('./_library')) redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
    wksExt.f = function(name) {
        return wrap(wks(name));
    };
}
$export($export.G + $export.W + $export.F * !USE_NATIVE, {
    Symbol: $Symbol
});
for(var es6Symbols = // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);
for(var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;)wksDefine(wellKnownSymbols[k++]);
$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
    // 19.4.2.1 Symbol.for(key)
    'for': function(key) {
        return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
    },
    // 19.4.2.5 Symbol.keyFor(sym)
    keyFor: function keyFor(sym) {
        if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
        for(var key in SymbolRegistry)if (SymbolRegistry[key] === sym) return key;
    },
    useSetter: function() {
        setter = true;
    },
    useSimple: function() {
        setter = false;
    }
});
$export($export.S + $export.F * !USE_NATIVE, 'Object', {
    // 19.1.2.2 Object.create(O [, Properties])
    create: $create,
    // 19.1.2.4 Object.defineProperty(O, P, Attributes)
    defineProperty: $defineProperty,
    // 19.1.2.3 Object.defineProperties(O, Properties)
    defineProperties: $defineProperties,
    // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
    getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
    // 19.1.2.7 Object.getOwnPropertyNames(O)
    getOwnPropertyNames: $getOwnPropertyNames,
    // 19.1.2.8 Object.getOwnPropertySymbols(O)
    getOwnPropertySymbols: $getOwnPropertySymbols
});
// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
// https://bugs.chromium.org/p/v8/issues/detail?id=3443
var FAILS_ON_PRIMITIVES = $fails(function() {
    $GOPS.f(1);
});
$export($export.S + $export.F * FAILS_ON_PRIMITIVES, 'Object', {
    getOwnPropertySymbols: function getOwnPropertySymbols(it) {
        return $GOPS.f(toObject(it));
    }
});
// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function() {
    var S = $Symbol();
    // MS Edge converts symbol values to JSON as {}
    // WebKit converts symbol values to JSON as null
    // V8 throws on boxed symbols
    return _stringify([
        S
    ]) != '[null]' || _stringify({
        a: S
    }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
    stringify: function stringify(it) {
        var args = [
            it
        ];
        var i = 1;
        var replacer, $replacer;
        while(arguments.length > i)args.push(arguments[i++]);
        $replacer = replacer = args[1];
        if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
        if (!isArray(replacer)) replacer = function(key, value) {
            if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
            if (!isSymbol(value)) return value;
        };
        args[1] = replacer;
        return _stringify.apply($JSON, args);
    }
});
// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

},{"./_global":"3Oj2u","./_has":"e6RUY","./_descriptors":"jxsfR","./_export":"gwTsq","./_redefine":"897HI","./_meta":"1nukG","./_fails":"lCl2A","./_shared":"faluf","./_set-to-string-tag":"ioYhC","./_uid":"iIUz7","./_wks":"9hJYz","./_wks-ext":"71cvE","./_wks-define":"6Mos0","./_enum-keys":"6xZ1p","./_is-array":"9Sg6F","./_an-object":"7CErr","./_is-object":"6EXcp","./_to-object":"b3Y3Z","./_to-iobject":"2srcq","./_to-primitive":"kAQVK","./_property-desc":"dmVmZ","./_object-create":"9T5lC","./_object-gopn-ext":"5pMma","./_object-gopd":"lLOyH","./_object-gops":"jMWtb","./_object-dp":"7oxIl","./_object-keys":"49Ud8","./_object-gopn":"6i7Xy","./_object-pie":"iRQjx","./_library":"3hH9R","./_hide":"gmT3z"}],"1nukG":[function(require,module,exports) {
var META = require('./_uid')('meta');
var isObject = require('./_is-object');
var has = require('./_has');
var setDesc = require('./_object-dp').f;
var id = 0;
var isExtensible = Object.isExtensible || function() {
    return true;
};
var FREEZE = !require('./_fails')(function() {
    return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it) {
    setDesc(it, META, {
        value: {
            i: 'O' + ++id,
            w: {} // weak collections IDs
        }
    });
};
var fastKey = function(it, create) {
    // return primitive with prefix
    if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
    if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return 'F';
        // not necessary to add metadata
        if (!create) return 'E';
        // add missing metadata
        setMeta(it);
    // return object ID
    }
    return it[META].i;
};
var getWeak = function(it, create) {
    if (!has(it, META)) {
        // can't set metadata to uncaught frozen object
        if (!isExtensible(it)) return true;
        // not necessary to add metadata
        if (!create) return false;
        // add missing metadata
        setMeta(it);
    // return hash weak collections IDs
    }
    return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it) {
    if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
    return it;
};
var meta = module.exports = {
    KEY: META,
    NEED: false,
    fastKey: fastKey,
    getWeak: getWeak,
    onFreeze: onFreeze
};

},{"./_uid":"iIUz7","./_is-object":"6EXcp","./_has":"e6RUY","./_object-dp":"7oxIl","./_fails":"lCl2A"}],"6Mos0":[function(require,module,exports) {
var global = require('./_global');
var core = require('./_core');
var LIBRARY = require('./_library');
var wksExt = require('./_wks-ext');
var defineProperty = require('./_object-dp').f;
module.exports = function(name) {
    var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
    if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, {
        value: wksExt.f(name)
    });
};

},{"./_global":"3Oj2u","./_core":"hthrp","./_library":"3hH9R","./_wks-ext":"71cvE","./_object-dp":"7oxIl"}],"6xZ1p":[function(require,module,exports) {
// all enumerable object keys, includes symbols
var getKeys = require('./_object-keys');
var gOPS = require('./_object-gops');
var pIE = require('./_object-pie');
module.exports = function(it) {
    var result = getKeys(it);
    var getSymbols = gOPS.f;
    if (getSymbols) {
        var symbols = getSymbols(it);
        var isEnum = pIE.f;
        var i = 0;
        var key;
        while(symbols.length > i)if (isEnum.call(it, key = symbols[i++])) result.push(key);
    }
    return result;
};

},{"./_object-keys":"49Ud8","./_object-gops":"jMWtb","./_object-pie":"iRQjx"}],"jMWtb":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"iRQjx":[function(require,module,exports) {
exports.f = ({}).propertyIsEnumerable;

},{}],"9Sg6F":[function(require,module,exports) {
// 7.2.2 IsArray(argument)
var cof = require('./_cof');
module.exports = Array.isArray || function isArray(arg) {
    return cof(arg) == 'Array';
};

},{"./_cof":"5KK9s"}],"5pMma":[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = require('./_to-iobject');
var gOPN = require('./_object-gopn').f;
var toString = {}.toString;
var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
var getWindowNames = function(it) {
    try {
        return gOPN(it);
    } catch (e) {
        return windowNames.slice();
    }
};
module.exports.f = function getOwnPropertyNames(it) {
    return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};

},{"./_to-iobject":"2srcq","./_object-gopn":"6i7Xy"}],"6i7Xy":[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = require('./_object-keys-internal');
var hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');
exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
    return $keys(O, hiddenKeys);
};

},{"./_object-keys-internal":"2rNY7","./_enum-bug-keys":"jUdvY"}],"lLOyH":[function(require,module,exports) {
var pIE = require('./_object-pie');
var createDesc = require('./_property-desc');
var toIObject = require('./_to-iobject');
var toPrimitive = require('./_to-primitive');
var has = require('./_has');
var IE8_DOM_DEFINE = require('./_ie8-dom-define');
var gOPD = Object.getOwnPropertyDescriptor;
exports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {
    O = toIObject(O);
    P = toPrimitive(P, true);
    if (IE8_DOM_DEFINE) try {
        return gOPD(O, P);
    } catch (e) {}
    if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};

},{"./_object-pie":"iRQjx","./_property-desc":"dmVmZ","./_to-iobject":"2srcq","./_to-primitive":"kAQVK","./_has":"e6RUY","./_ie8-dom-define":"8kkSV","./_descriptors":"jxsfR"}],"abx5g":[function(require,module,exports) {
require('./_wks-define')('asyncIterator');

},{"./_wks-define":"6Mos0"}],"axyaQ":[function(require,module,exports) {
require('./_wks-define')('observable');

},{"./_wks-define":"6Mos0"}],"L1RuL":[function(require,module,exports) {
module.exports = {
    "default": require("core-js/library/fn/object/get-prototype-of"),
    __esModule: true
};

},{"core-js/library/fn/object/get-prototype-of":"7DcCJ"}],"7DcCJ":[function(require,module,exports) {
require('../../modules/es6.object.get-prototype-of');
module.exports = require('../../modules/_core').Object.getPrototypeOf;

},{"../../modules/es6.object.get-prototype-of":"186qa","../../modules/_core":"hthrp"}],"186qa":[function(require,module,exports) {
// 19.1.2.9 Object.getPrototypeOf(O)
var toObject = require('./_to-object');
var $getPrototypeOf = require('./_object-gpo');
require('./_object-sap')('getPrototypeOf', function() {
    return function getPrototypeOf(it) {
        return $getPrototypeOf(toObject(it));
    };
});

},{"./_to-object":"b3Y3Z","./_object-gpo":"4cqbc","./_object-sap":"kaGG7"}],"kaGG7":[function(require,module,exports) {
// most Object methods by ES6 should accept primitives
var $export = require('./_export');
var core = require('./_core');
var fails = require('./_fails');
module.exports = function(KEY, exec) {
    var fn = (core.Object || {})[KEY] || Object[KEY];
    var exp = {};
    exp[KEY] = exec(fn);
    $export($export.S + $export.F * fails(function() {
        fn(1);
    }), 'Object', exp);
};

},{"./_export":"gwTsq","./_core":"hthrp","./_fails":"lCl2A"}],"e8soy":[function(require,module,exports) {
module.exports = require("regenerator-runtime");

},{"regenerator-runtime":"27tfn"}],"27tfn":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ // This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = function() {
    return this;
}() || Function("return this")();
// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime && Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;
// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;
// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;
module.exports = require("./runtime");
if (hadRuntime) // Restore the original runtime.
g.regeneratorRuntime = oldRuntime;
else // Remove the global property added by runtime.js.
try {
    delete g.regeneratorRuntime;
} catch (e) {
    g.regeneratorRuntime = undefined;
}

},{"./runtime":"6dpa2"}],"6dpa2":[function(require,module,exports) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ !function(global) {
    var Op = Object.prototype;
    var hasOwn = Op.hasOwnProperty;
    var undefined; // More compressible than void 0.
    var $Symbol = typeof Symbol === "function" ? Symbol : {};
    var iteratorSymbol = $Symbol.iterator || "@@iterator";
    var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
    var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    var inModule = true;
    var runtime = global.regeneratorRuntime;
    if (runtime) {
        if (inModule) // If regeneratorRuntime is defined globally and we're in a module,
        // make the exports object identical to regeneratorRuntime.
        module.exports = runtime;
        // Don't bother evaluating the rest of this file if the runtime was
        // already defined globally.
        return;
    }
    // Define the runtime globally (as expected by generated code) as either
    // module.exports (if we're in a module) or a new, empty object.
    runtime = global.regeneratorRuntime = inModule ? module.exports : {};
    function wrap(innerFn, outerFn, self, tryLocsList) {
        // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
        var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
        var generator = Object.create(protoGenerator.prototype);
        var context = new Context(tryLocsList || []);
        // The ._invoke method unifies the implementations of the .next,
        // .throw, and .return methods.
        generator._invoke = makeInvokeMethod(innerFn, self, context);
        return generator;
    }
    runtime.wrap = wrap;
    // Try/catch helper to minimize deoptimizations. Returns a completion
    // record like context.tryEntries[i].completion. This interface could
    // have been (and was previously) designed to take a closure to be
    // invoked without arguments, but in all the cases we care about we
    // already have an existing method we want to call, so there's no need
    // to create a new function object. We can even get away with assuming
    // the method takes exactly one argument, since that happens to be true
    // in every case, so we don't have to touch the arguments object. The
    // only additional allocation required is the completion record, which
    // has a stable shape and so hopefully should be cheap to allocate.
    function tryCatch(fn, obj, arg) {
        try {
            return {
                type: "normal",
                arg: fn.call(obj, arg)
            };
        } catch (err) {
            return {
                type: "throw",
                arg: err
            };
        }
    }
    var GenStateSuspendedStart = "suspendedStart";
    var GenStateSuspendedYield = "suspendedYield";
    var GenStateExecuting = "executing";
    var GenStateCompleted = "completed";
    // Returning this object from the innerFn has the same effect as
    // breaking out of the dispatch switch statement.
    var ContinueSentinel = {};
    // Dummy constructor functions that we use as the .constructor and
    // .constructor.prototype properties for functions that return Generator
    // objects. For full spec compliance, you may wish to configure your
    // minifier not to mangle the names of these two functions.
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    // This is a polyfill for %IteratorPrototype% for environments that
    // don't natively support it.
    var IteratorPrototype = {};
    IteratorPrototype[iteratorSymbol] = function() {
        return this;
    };
    var getProto = Object.getPrototypeOf;
    var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    if (NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
    GeneratorFunctionPrototype.constructor = GeneratorFunction;
    GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";
    // Helper for defining the .next, .throw, and .return methods of the
    // Iterator interface in terms of a single ._invoke method.
    function defineIteratorMethods(prototype) {
        [
            "next",
            "throw",
            "return"
        ].forEach(function(method) {
            prototype[method] = function(arg) {
                return this._invoke(method, arg);
            };
        });
    }
    runtime.isGeneratorFunction = function(genFun) {
        var ctor = typeof genFun === "function" && genFun.constructor;
        return ctor ? ctor === GeneratorFunction || // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
    };
    runtime.mark = function(genFun) {
        if (Object.setPrototypeOf) Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
        else {
            genFun.__proto__ = GeneratorFunctionPrototype;
            if (!(toStringTagSymbol in genFun)) genFun[toStringTagSymbol] = "GeneratorFunction";
        }
        genFun.prototype = Object.create(Gp);
        return genFun;
    };
    // Within the body of any async function, `await x` is transformed to
    // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
    // `hasOwn.call(value, "__await")` to determine if the yielded value is
    // meant to be awaited.
    runtime.awrap = function(arg) {
        return {
            __await: arg
        };
    };
    function AsyncIterator(generator) {
        function invoke(method, arg, resolve, reject) {
            var record = tryCatch(generator[method], generator, arg);
            if (record.type === "throw") reject(record.arg);
            else {
                var result = record.arg;
                var value1 = result.value;
                if (value1 && typeof value1 === "object" && hasOwn.call(value1, "__await")) return Promise.resolve(value1.__await).then(function(value) {
                    invoke("next", value, resolve, reject);
                }, function(err) {
                    invoke("throw", err, resolve, reject);
                });
                return Promise.resolve(value1).then(function(unwrapped) {
                    // When a yielded Promise is resolved, its final value becomes
                    // the .value of the Promise<{value,done}> result for the
                    // current iteration. If the Promise is rejected, however, the
                    // result for this iteration will be rejected with the same
                    // reason. Note that rejections of yielded Promises are not
                    // thrown back into the generator function, as is the case
                    // when an awaited Promise is rejected. This difference in
                    // behavior between yield and await is important, because it
                    // allows the consumer to decide what to do with the yielded
                    // rejection (swallow it and continue, manually .throw it back
                    // into the generator, abandon iteration, whatever). With
                    // await, by contrast, there is no opportunity to examine the
                    // rejection reason outside the generator function, so the
                    // only option is to throw it from the await expression, and
                    // let the generator function handle the exception.
                    result.value = unwrapped;
                    resolve(result);
                }, reject);
            }
        }
        var previousPromise;
        function enqueue(method, arg) {
            function callInvokeWithMethodAndArg() {
                return new Promise(function(resolve, reject) {
                    invoke(method, arg, resolve, reject);
                });
            }
            return previousPromise = // If enqueue has been called before, then we want to wait until
            // all previous Promises have been resolved before calling invoke,
            // so that results are always delivered in the correct order. If
            // enqueue has not been called before, then it is important to
            // call invoke immediately, without waiting on a callback to fire,
            // so that the async generator function has the opportunity to do
            // any necessary setup in a predictable way. This predictability
            // is why the Promise constructor synchronously invokes its
            // executor callback, and why async functions synchronously
            // execute code before the first await. Since we implement simple
            // async functions in terms of async generators, it is especially
            // important to get this right, even though it requires care.
            previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, // Avoid propagating failures to Promises returned by later
            // invocations of the iterator.
            callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
        // Define the unified helper method that is used to implement .next,
        // .throw, and .return (see defineIteratorMethods).
        this._invoke = enqueue;
    }
    defineIteratorMethods(AsyncIterator.prototype);
    AsyncIterator.prototype[asyncIteratorSymbol] = function() {
        return this;
    };
    runtime.AsyncIterator = AsyncIterator;
    // Note that simple async functions are implemented on top of
    // AsyncIterator objects; they just return a Promise for the value of
    // the final result produced by the iterator.
    runtime.async = function(innerFn, outerFn, self, tryLocsList) {
        var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));
        return runtime.isGeneratorFunction(outerFn) ? iter // If outerFn is a generator, return the full iterator.
         : iter.next().then(function(result) {
            return result.done ? result.value : iter.next();
        });
    };
    function makeInvokeMethod(innerFn, self, context) {
        var state = GenStateSuspendedStart;
        return function invoke(method, arg) {
            if (state === GenStateExecuting) throw new Error("Generator is already running");
            if (state === GenStateCompleted) {
                if (method === "throw") throw arg;
                // Be forgiving, per 25.3.3.3.3 of the spec:
                // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
                return doneResult();
            }
            context.method = method;
            context.arg = arg;
            while(true){
                var delegate = context.delegate;
                if (delegate) {
                    var delegateResult = maybeInvokeDelegate(delegate, context);
                    if (delegateResult) {
                        if (delegateResult === ContinueSentinel) continue;
                        return delegateResult;
                    }
                }
                if (context.method === "next") // Setting context._sent for legacy support of Babel's
                // function.sent implementation.
                context.sent = context._sent = context.arg;
                else if (context.method === "throw") {
                    if (state === GenStateSuspendedStart) {
                        state = GenStateCompleted;
                        throw context.arg;
                    }
                    context.dispatchException(context.arg);
                } else if (context.method === "return") context.abrupt("return", context.arg);
                state = GenStateExecuting;
                var record = tryCatch(innerFn, self, context);
                if (record.type === "normal") {
                    // If an exception is thrown from innerFn, we leave state ===
                    // GenStateExecuting and loop back for another invocation.
                    state = context.done ? GenStateCompleted : GenStateSuspendedYield;
                    if (record.arg === ContinueSentinel) continue;
                    return {
                        value: record.arg,
                        done: context.done
                    };
                } else if (record.type === "throw") {
                    state = GenStateCompleted;
                    // Dispatch the exception by looping back around to the
                    // context.dispatchException(context.arg) call above.
                    context.method = "throw";
                    context.arg = record.arg;
                }
            }
        };
    }
    // Call delegate.iterator[context.method](context.arg) and handle the
    // result, either by returning a { value, done } result from the
    // delegate iterator, or by modifying context.method and context.arg,
    // setting context.delegate to null, and returning the ContinueSentinel.
    function maybeInvokeDelegate(delegate, context) {
        var method = delegate.iterator[context.method];
        if (method === undefined) {
            // A .throw or .return when the delegate iterator has no .throw
            // method always terminates the yield* loop.
            context.delegate = null;
            if (context.method === "throw") {
                if (delegate.iterator.return) {
                    // If the delegate iterator has a return method, give it a
                    // chance to clean up.
                    context.method = "return";
                    context.arg = undefined;
                    maybeInvokeDelegate(delegate, context);
                    if (context.method === "throw") // If maybeInvokeDelegate(context) changed context.method from
                    // "return" to "throw", let that override the TypeError below.
                    return ContinueSentinel;
                }
                context.method = "throw";
                context.arg = new TypeError("The iterator does not provide a 'throw' method");
            }
            return ContinueSentinel;
        }
        var record = tryCatch(method, delegate.iterator, context.arg);
        if (record.type === "throw") {
            context.method = "throw";
            context.arg = record.arg;
            context.delegate = null;
            return ContinueSentinel;
        }
        var info = record.arg;
        if (!info) {
            context.method = "throw";
            context.arg = new TypeError("iterator result is not an object");
            context.delegate = null;
            return ContinueSentinel;
        }
        if (info.done) {
            // Assign the result of the finished delegate to the temporary
            // variable specified by delegate.resultName (see delegateYield).
            context[delegate.resultName] = info.value;
            // Resume execution at the desired location (see delegateYield).
            context.next = delegate.nextLoc;
            // If context.method was "throw" but the delegate handled the
            // exception, let the outer generator proceed normally. If
            // context.method was "next", forget context.arg since it has been
            // "consumed" by the delegate iterator. If context.method was
            // "return", allow the original .return call to continue in the
            // outer generator.
            if (context.method !== "return") {
                context.method = "next";
                context.arg = undefined;
            }
        } else // Re-yield the result returned by the delegate method.
        return info;
        // The delegate iterator is finished, so forget it and continue with
        // the outer generator.
        context.delegate = null;
        return ContinueSentinel;
    }
    // Define Generator.prototype.{next,throw,return} in terms of the
    // unified ._invoke helper method.
    defineIteratorMethods(Gp);
    Gp[toStringTagSymbol] = "Generator";
    // A Generator should always return itself as the iterator object when the
    // @@iterator function is called on it. Some browsers' implementations of the
    // iterator prototype chain incorrectly implement this, causing the Generator
    // object to not be returned from this call. This ensures that doesn't happen.
    // See https://github.com/facebook/regenerator/issues/274 for more details.
    Gp[iteratorSymbol] = function() {
        return this;
    };
    Gp.toString = function() {
        return "[object Generator]";
    };
    function pushTryEntry(locs) {
        var entry = {
            tryLoc: locs[0]
        };
        if (1 in locs) entry.catchLoc = locs[1];
        if (2 in locs) {
            entry.finallyLoc = locs[2];
            entry.afterLoc = locs[3];
        }
        this.tryEntries.push(entry);
    }
    function resetTryEntry(entry) {
        var record = entry.completion || {};
        record.type = "normal";
        delete record.arg;
        entry.completion = record;
    }
    function Context(tryLocsList) {
        // The root entry object (effectively a try statement without a catch
        // or a finally block) gives us a place to store values thrown from
        // locations where there is no enclosing try statement.
        this.tryEntries = [
            {
                tryLoc: "root"
            }
        ];
        tryLocsList.forEach(pushTryEntry, this);
        this.reset(true);
    }
    runtime.keys = function(object) {
        var keys = [];
        for(var key1 in object)keys.push(key1);
        keys.reverse();
        // Rather than returning an object with a next method, we keep
        // things simple and return the next function itself.
        return function next() {
            while(keys.length){
                var key = keys.pop();
                if (key in object) {
                    next.value = key;
                    next.done = false;
                    return next;
                }
            }
            // To avoid creating an additional object, we just hang the .value
            // and .done properties off the next function object itself. This
            // also ensures that the minifier will not anonymize the function.
            next.done = true;
            return next;
        };
    };
    function values(iterable) {
        if (iterable) {
            var iteratorMethod = iterable[iteratorSymbol];
            if (iteratorMethod) return iteratorMethod.call(iterable);
            if (typeof iterable.next === "function") return iterable;
            if (!isNaN(iterable.length)) {
                var i = -1, next1 = function next() {
                    while(++i < iterable.length)if (hasOwn.call(iterable, i)) {
                        next.value = iterable[i];
                        next.done = false;
                        return next;
                    }
                    next.value = undefined;
                    next.done = true;
                    return next;
                };
                return next1.next = next1;
            }
        }
        // Return an iterator with no values.
        return {
            next: doneResult
        };
    }
    runtime.values = values;
    function doneResult() {
        return {
            value: undefined,
            done: true
        };
    }
    Context.prototype = {
        constructor: Context,
        reset: function(skipTempReset) {
            this.prev = 0;
            this.next = 0;
            // Resetting context._sent for legacy support of Babel's
            // function.sent implementation.
            this.sent = this._sent = undefined;
            this.done = false;
            this.delegate = null;
            this.method = "next";
            this.arg = undefined;
            this.tryEntries.forEach(resetTryEntry);
            if (!skipTempReset) {
                for(var name in this)// Not sure about the optimal order of these conditions:
                if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) this[name] = undefined;
            }
        },
        stop: function() {
            this.done = true;
            var rootEntry = this.tryEntries[0];
            var rootRecord = rootEntry.completion;
            if (rootRecord.type === "throw") throw rootRecord.arg;
            return this.rval;
        },
        dispatchException: function(exception) {
            if (this.done) throw exception;
            var context = this;
            function handle(loc, caught) {
                record.type = "throw";
                record.arg = exception;
                context.next = loc;
                if (caught) {
                    // If the dispatched exception was caught by a catch block,
                    // then let that catch block handle the exception normally.
                    context.method = "next";
                    context.arg = undefined;
                }
                return !!caught;
            }
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                var record = entry.completion;
                if (entry.tryLoc === "root") // Exception thrown outside of any try block that could handle
                // it, so set the completion value of the entire function to
                // throw the exception.
                return handle("end");
                if (entry.tryLoc <= this.prev) {
                    var hasCatch = hasOwn.call(entry, "catchLoc");
                    var hasFinally = hasOwn.call(entry, "finallyLoc");
                    if (hasCatch && hasFinally) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                        else if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else if (hasCatch) {
                        if (this.prev < entry.catchLoc) return handle(entry.catchLoc, true);
                    } else if (hasFinally) {
                        if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
                    } else throw new Error("try statement without catch or finally");
                }
            }
        },
        abrupt: function(type, arg) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
                    var finallyEntry = entry;
                    break;
                }
            }
            if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) // Ignore the finally entry if control is not jumping to a
            // location outside the try/catch block.
            finallyEntry = null;
            var record = finallyEntry ? finallyEntry.completion : {};
            record.type = type;
            record.arg = arg;
            if (finallyEntry) {
                this.method = "next";
                this.next = finallyEntry.finallyLoc;
                return ContinueSentinel;
            }
            return this.complete(record);
        },
        complete: function(record, afterLoc) {
            if (record.type === "throw") throw record.arg;
            if (record.type === "break" || record.type === "continue") this.next = record.arg;
            else if (record.type === "return") {
                this.rval = this.arg = record.arg;
                this.method = "return";
                this.next = "end";
            } else if (record.type === "normal" && afterLoc) this.next = afterLoc;
            return ContinueSentinel;
        },
        finish: function(finallyLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.finallyLoc === finallyLoc) {
                    this.complete(entry.completion, entry.afterLoc);
                    resetTryEntry(entry);
                    return ContinueSentinel;
                }
            }
        },
        "catch": function(tryLoc) {
            for(var i = this.tryEntries.length - 1; i >= 0; --i){
                var entry = this.tryEntries[i];
                if (entry.tryLoc === tryLoc) {
                    var record = entry.completion;
                    if (record.type === "throw") {
                        var thrown = record.arg;
                        resetTryEntry(entry);
                    }
                    return thrown;
                }
            }
            // The context.catch method must only be called with a location
            // argument that corresponds to a known catch block.
            throw new Error("illegal catch attempt");
        },
        delegateYield: function(iterable, resultName, nextLoc) {
            this.delegate = {
                iterator: values(iterable),
                resultName: resultName,
                nextLoc: nextLoc
            };
            if (this.method === "next") // Deliberately forget the last sent value so that we don't
            // accidentally pass it on to the delegate.
            this.arg = undefined;
            return ContinueSentinel;
        }
    };
}(// In sloppy mode, unbound `this` refers to the global object, fallback to
// Function constructor if we're in global strict mode. That is sadly a form
// of indirect eval which violates Content Security Policy.
function() {
    return this;
}() || Function("return this")());

},{}],"iOCm9":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _promise = require("../core-js/promise");
var _promise2 = _interopRequireDefault(_promise);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = function(fn) {
    return function() {
        var gen = fn.apply(this, arguments);
        return new _promise2.default(function(resolve, reject) {
            function step(key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) resolve(value);
                else return _promise2.default.resolve(value).then(function(value) {
                    step("next", value);
                }, function(err) {
                    step("throw", err);
                });
            }
            return step("next");
        });
    };
};

},{"../core-js/promise":"hnoRb"}],"2Tl5U":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
exports.default = function(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
};

},{}],"hBlDS":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _typeof2 = require("../helpers/typeof");
var _typeof3 = _interopRequireDefault(_typeof2);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = function(self, call) {
    if (!self) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

},{"../helpers/typeof":"ajQiN"}],"iHxnU":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _defineProperty = require("../core-js/object/define-property");
var _defineProperty2 = _interopRequireDefault(_defineProperty);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            (0, _defineProperty2.default)(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();

},{"../core-js/object/define-property":"hCAJM"}],"hCAJM":[function(require,module,exports) {
module.exports = {
    "default": require("core-js/library/fn/object/define-property"),
    __esModule: true
};

},{"core-js/library/fn/object/define-property":"dS73v"}],"dS73v":[function(require,module,exports) {
require('../../modules/es6.object.define-property');
var $Object = require('../../modules/_core').Object;
module.exports = function defineProperty(it, key, desc) {
    return $Object.defineProperty(it, key, desc);
};

},{"../../modules/es6.object.define-property":"fS8KV","../../modules/_core":"hthrp"}],"fS8KV":[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !require('./_descriptors'), 'Object', {
    defineProperty: require('./_object-dp').f
});

},{"./_export":"gwTsq","./_descriptors":"jxsfR","./_object-dp":"7oxIl"}],"jucoh":[function(require,module,exports) {
"use strict";
exports.__esModule = true;
var _setPrototypeOf = require("../core-js/object/set-prototype-of");
var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
var _create = require("../core-js/object/create");
var _create2 = _interopRequireDefault(_create);
var _typeof2 = require("../helpers/typeof");
var _typeof3 = _interopRequireDefault(_typeof2);
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
exports.default = function(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
    subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
        }
    });
    if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

},{"../core-js/object/set-prototype-of":"jVpTW","../core-js/object/create":"3Caax","../helpers/typeof":"ajQiN"}],"jVpTW":[function(require,module,exports) {
module.exports = {
    "default": require("core-js/library/fn/object/set-prototype-of"),
    __esModule: true
};

},{"core-js/library/fn/object/set-prototype-of":"aRGeQ"}],"aRGeQ":[function(require,module,exports) {
require('../../modules/es6.object.set-prototype-of');
module.exports = require('../../modules/_core').Object.setPrototypeOf;

},{"../../modules/es6.object.set-prototype-of":"d1FqT","../../modules/_core":"hthrp"}],"d1FqT":[function(require,module,exports) {
// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = require('./_export');
$export($export.S, 'Object', {
    setPrototypeOf: require('./_set-proto').set
});

},{"./_export":"gwTsq","./_set-proto":"21bXT"}],"21bXT":[function(require,module,exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */ var isObject = require('./_is-object');
var anObject = require('./_an-object');
var check = function(O, proto) {
    anObject(O);
    if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
    set: Object.setPrototypeOf || ('__proto__' in {} ? function(test, buggy, set) {
        try {
            set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);
            set(test, []);
            buggy = !(test instanceof Array);
        } catch (e) {
            buggy = true;
        }
        return function setPrototypeOf(O, proto) {
            check(O, proto);
            if (buggy) O.__proto__ = proto;
            else set(O, proto);
            return O;
        };
    }({}, false) : undefined),
    check: check
};

},{"./_is-object":"6EXcp","./_an-object":"7CErr","./_ctx":"7rPfq","./_object-gopd":"lLOyH"}],"3Caax":[function(require,module,exports) {
module.exports = {
    "default": require("core-js/library/fn/object/create"),
    __esModule: true
};

},{"core-js/library/fn/object/create":"jz7pU"}],"jz7pU":[function(require,module,exports) {
require('../../modules/es6.object.create');
var $Object = require('../../modules/_core').Object;
module.exports = function create(P, D) {
    return $Object.create(P, D);
};

},{"../../modules/es6.object.create":"3HqI5","../../modules/_core":"hthrp"}],"3HqI5":[function(require,module,exports) {
var $export = require('./_export');
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {
    create: require('./_object-create')
});

},{"./_export":"gwTsq","./_object-create":"9T5lC"}],"dEoBw":[function(require,module,exports) {
'use strict';
module.exports = require('./lib/u2f-api');

},{"./lib/u2f-api":"2i83F"}],"2i83F":[function(require,module,exports) {
'use strict';
var global = arguments[3];
module.exports = API;
var chromeApi = require('./google-u2f-api');
// Feature detection (yes really)
var isBrowser = typeof navigator !== 'undefined' && !!navigator.userAgent;
var isSafari = isBrowser && navigator.userAgent.match(/Safari\//) && !navigator.userAgent.match(/Chrome\//);
var isEDGE = isBrowser && navigator.userAgent.match(/Edge\/1[2345]/);
var _backend = null;
function getBackend(Promise) {
    if (!_backend) _backend = new Promise(function(resolve, reject) {
        function notSupported() {
            // Note; {native: true} means *not* using Google's hack
            resolve({
                u2f: null,
                native: true
            });
        }
        if (!isBrowser) return notSupported();
        if (isSafari) // Safari doesn't support U2F, and the Safari-FIDO-U2F
        // extension lacks full support (Multi-facet apps), so we
        // block it until proper support.
        return notSupported();
        var hasNativeSupport = typeof window.u2f !== 'undefined' && typeof window.u2f.sign === 'function';
        if (hasNativeSupport) resolve({
            u2f: window.u2f,
            native: true
        });
        if (isEDGE) // We don't want to check for Google's extension hack on EDGE
        // as it'll cause trouble (popups, etc)
        return notSupported();
        if (location.protocol === 'http:') // U2F isn't supported over http, only https
        return notSupported();
        if (typeof MessageChannel === 'undefined') // Unsupported browser, the chrome hack would throw
        return notSupported();
        // Test for google extension support
        chromeApi.isSupported(function(ok) {
            if (ok) resolve({
                u2f: chromeApi,
                native: false
            });
            else notSupported();
        });
    });
    return _backend;
}
function API(Promise) {
    return {
        isSupported: isSupported.bind(Promise),
        ensureSupport: ensureSupport.bind(Promise),
        register: register.bind(Promise),
        sign: sign.bind(Promise),
        ErrorCodes: API.ErrorCodes,
        ErrorNames: API.ErrorNames
    };
}
API.ErrorCodes = {
    CANCELLED: -1,
    OK: 0,
    OTHER_ERROR: 1,
    BAD_REQUEST: 2,
    CONFIGURATION_UNSUPPORTED: 3,
    DEVICE_INELIGIBLE: 4,
    TIMEOUT: 5
};
API.ErrorNames = {
    "-1": "CANCELLED",
    "0": "OK",
    "1": "OTHER_ERROR",
    "2": "BAD_REQUEST",
    "3": "CONFIGURATION_UNSUPPORTED",
    "4": "DEVICE_INELIGIBLE",
    "5": "TIMEOUT"
};
function makeError(msg, err) {
    var code = err != null ? err.errorCode : 1; // Default to OTHER_ERROR
    var type = API.ErrorNames['' + code];
    var error = new Error(msg);
    error.metaData = {
        type: type,
        code: code
    };
    return error;
}
function deferPromise(Promise, promise) {
    var ret = {};
    ret.promise = new Promise(function(resolve, reject) {
        ret.resolve = resolve;
        ret.reject = reject;
        promise.then(resolve, reject);
    });
    /**
	 * Reject request promise and disconnect port if 'disconnect' flag is true
	 * @param {string} msg
	 * @param {boolean} disconnect
	 */ ret.promise.cancel = function(msg, disconnect) {
        getBackend(Promise).then(function(backend) {
            if (disconnect && !backend.native) backend.u2f.disconnect();
            ret.reject(makeError(msg, {
                errorCode: -1
            }));
        });
    };
    return ret;
}
function defer(Promise, fun) {
    return deferPromise(Promise, new Promise(function(resolve, reject) {
        try {
            fun && fun(resolve, reject);
        } catch (err) {
            reject(err);
        }
    }));
}
function isSupported() {
    var Promise = this;
    return getBackend(Promise).then(function(backend) {
        return !!backend.u2f;
    });
}
function _ensureSupport(backend) {
    if (!backend.u2f) {
        if (location.protocol === 'http:') throw new Error("U2F isn't supported over http, only https");
        throw new Error("U2F not supported");
    }
}
function ensureSupport() {
    var Promise = this;
    return getBackend(Promise).then(_ensureSupport);
}
function register(registerRequests, signRequests /* = null */ , timeout) {
    var Promise = this;
    if (!Array.isArray(registerRequests)) registerRequests = [
        registerRequests
    ];
    if (typeof signRequests === 'number' && typeof timeout === 'undefined') {
        timeout = signRequests;
        signRequests = null;
    }
    if (!signRequests) signRequests = [];
    return deferPromise(Promise, getBackend(Promise).then(function(backend) {
        _ensureSupport(backend);
        var native = backend.native;
        var u2f = backend.u2f;
        return new Promise(function(resolve, reject) {
            function cbNative(response) {
                if (response.errorCode) reject(makeError("Registration failed", response));
                else {
                    delete response.errorCode;
                    resolve(response);
                }
            }
            function cbChrome(err, response) {
                if (err) reject(err);
                else if (response.errorCode) reject(makeError("Registration failed", response));
                else resolve(response);
            }
            if (native) {
                var appId = registerRequests[0].appId;
                u2f.register(appId, registerRequests, signRequests, cbNative, timeout);
            } else u2f.register(registerRequests, signRequests, cbChrome, timeout);
        });
    })).promise;
}
function sign(signRequests, timeout) {
    var Promise = this;
    if (!Array.isArray(signRequests)) signRequests = [
        signRequests
    ];
    return deferPromise(Promise, getBackend(Promise).then(function(backend) {
        _ensureSupport(backend);
        var native = backend.native;
        var u2f = backend.u2f;
        return new Promise(function(resolve, reject) {
            function cbNative(response) {
                if (response.errorCode) reject(makeError("Sign failed", response));
                else {
                    delete response.errorCode;
                    resolve(response);
                }
            }
            function cbChrome(err, response) {
                if (err) reject(err);
                else if (response.errorCode) reject(makeError("Sign failed", response));
                else resolve(response);
            }
            if (native) {
                var appId = signRequests[0].appId;
                var challenge = signRequests[0].challenge;
                u2f.sign(appId, challenge, signRequests, cbNative, timeout);
            } else u2f.sign(signRequests, cbChrome, timeout);
        });
    })).promise;
}
function makeDefault(func) {
    API[func] = function() {
        if (!global.Promise) // This is very unlikely to ever happen, since browsers
        // supporting U2F will most likely support Promises.
        throw new Error("The platform doesn't natively support promises");
        var args = [].slice.call(arguments);
        return API(global.Promise)[func].apply(null, args);
    };
}
// Provide default functions using the built-in Promise if available.
makeDefault('isSupported');
makeDefault('ensureSupport');
makeDefault('register');
makeDefault('sign');

},{"./google-u2f-api":"78CtN"}],"78CtN":[function(require,module,exports) {
// Copyright 2014 Google Inc. All rights reserved
//
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file or at
// https://developers.google.com/open-source/licenses/bsd
/**
 * @fileoverview The U2F api.
 */ 'use strict';
/** Namespace for the U2F api.
 * @type {Object}
 */ var u2f = u2f || {};
module.exports = u2f; // Adaptation for u2f-api package
/**
 * The U2F extension id
 * @type {string}
 * @const
 */ u2f.EXTENSION_ID = 'kmendfapggjehodndflmmgagdbamhnfd';
/**
 * Message types for messsages to/from the extension
 * @const
 * @enum {string}
 */ u2f.MessageTypes = {
    'U2F_REGISTER_REQUEST': 'u2f_register_request',
    'U2F_SIGN_REQUEST': 'u2f_sign_request',
    'U2F_REGISTER_RESPONSE': 'u2f_register_response',
    'U2F_SIGN_RESPONSE': 'u2f_sign_response'
};
/**
 * Response status codes
 * @const
 * @enum {number}
 */ u2f.ErrorCodes = {
    'OK': 0,
    'OTHER_ERROR': 1,
    'BAD_REQUEST': 2,
    'CONFIGURATION_UNSUPPORTED': 3,
    'DEVICE_INELIGIBLE': 4,
    'TIMEOUT': 5
};
/**
 * A message type for registration requests
 * @typedef {{
 *   type: u2f.MessageTypes,
 *   signRequests: Array.<u2f.SignRequest>,
 *   registerRequests: ?Array.<u2f.RegisterRequest>,
 *   timeoutSeconds: ?number,
 *   requestId: ?number
 * }}
 */ u2f.Request;
/**
 * A message for registration responses
 * @typedef {{
 *   type: u2f.MessageTypes,
 *   responseData: (u2f.Error | u2f.RegisterResponse | u2f.SignResponse),
 *   requestId: ?number
 * }}
 */ u2f.Response;
/**
 * An error object for responses
 * @typedef {{
 *   errorCode: u2f.ErrorCodes,
 *   errorMessage: ?string
 * }}
 */ u2f.Error;
/**
 * Data object for a single sign request.
 * @typedef {{
 *   version: string,
 *   challenge: string,
 *   keyHandle: string,
 *   appId: string
 * }}
 */ u2f.SignRequest;
/**
 * Data object for a sign response.
 * @typedef {{
 *   keyHandle: string,
 *   signatureData: string,
 *   clientData: string
 * }}
 */ u2f.SignResponse;
/**
 * Data object for a registration request.
 * @typedef {{
 *   version: string,
 *   challenge: string,
 *   appId: string
 * }}
 */ u2f.RegisterRequest;
/**
 * Data object for a registration response.
 * @typedef {{
 *   registrationData: string,
 *   clientData: string
 * }}
 */ u2f.RegisterResponse;
// Low level MessagePort API support
/**
 * Call MessagePort disconnect
 */ u2f.disconnect = function() {
    if (u2f.port_ && u2f.port_.port_) {
        u2f.port_.port_.disconnect();
        u2f.port_ = null;
    }
};
/**
 * Sets up a MessagePort to the U2F extension using the
 * available mechanisms.
 * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
 */ u2f.getMessagePort = function(callback) {
    if (typeof chrome != 'undefined' && chrome.runtime) {
        // The actual message here does not matter, but we need to get a reply
        // for the callback to run. Thus, send an empty signature request
        // in order to get a failure response.
        var msg = {
            type: u2f.MessageTypes.U2F_SIGN_REQUEST,
            signRequests: []
        };
        chrome.runtime.sendMessage(u2f.EXTENSION_ID, msg, function() {
            if (!chrome.runtime.lastError) // We are on a whitelisted origin and can talk directly
            // with the extension.
            u2f.getChromeRuntimePort_(callback);
            else // chrome.runtime was available, but we couldn't message
            // the extension directly, use iframe
            u2f.getIframePort_(callback);
        });
    } else // chrome.runtime was not available at all, which is normal
    // when this origin doesn't have access to any extensions.
    u2f.getIframePort_(callback);
};
/**
 * Connects directly to the extension via chrome.runtime.connect
 * @param {function(u2f.WrappedChromeRuntimePort_)} callback
 * @private
 */ u2f.getChromeRuntimePort_ = function(callback) {
    var port = chrome.runtime.connect(u2f.EXTENSION_ID, {
        'includeTlsChannelId': true
    });
    setTimeout(function() {
        callback(null, new u2f.WrappedChromeRuntimePort_(port));
    }, 0);
};
/**
 * A wrapper for chrome.runtime.Port that is compatible with MessagePort.
 * @param {Port} port
 * @constructor
 * @private
 */ u2f.WrappedChromeRuntimePort_ = function(port) {
    this.port_ = port;
};
/**
 * Posts a message on the underlying channel.
 * @param {Object} message
 */ u2f.WrappedChromeRuntimePort_.prototype.postMessage = function(message) {
    this.port_.postMessage(message);
};
/**
 * Emulates the HTML 5 addEventListener interface. Works only for the
 * onmessage event, which is hooked up to the chrome.runtime.Port.onMessage.
 * @param {string} eventName
 * @param {function({data: Object})} handler
 */ u2f.WrappedChromeRuntimePort_.prototype.addEventListener = function(eventName, handler) {
    var name = eventName.toLowerCase();
    if (name == 'message' || name == 'onmessage') this.port_.onMessage.addListener(function(message) {
        // Emulate a minimal MessageEvent object
        handler({
            'data': message
        });
    });
    else console.error('WrappedChromeRuntimePort only supports onMessage');
};
/**
 * Sets up an embedded trampoline iframe, sourced from the extension.
 * @param {function(MessagePort)} callback
 * @private
 */ u2f.getIframePort_ = function(callback) {
    // Create the iframe
    var iframeOrigin = 'chrome-extension://' + u2f.EXTENSION_ID;
    var iframe = document.createElement('iframe');
    iframe.src = iframeOrigin + '/u2f-comms.html';
    iframe.setAttribute('style', 'display:none');
    document.body.appendChild(iframe);
    var hasCalledBack = false;
    var channel = new MessageChannel();
    var ready = function(message) {
        if (message.data == 'ready') {
            channel.port1.removeEventListener('message', ready);
            if (!hasCalledBack) {
                hasCalledBack = true;
                callback(null, channel.port1);
            }
        } else console.error('First event on iframe port was not "ready"');
    };
    channel.port1.addEventListener('message', ready);
    channel.port1.start();
    iframe.addEventListener('load', function() {
        // Deliver the port to the iframe and initialize
        iframe.contentWindow.postMessage('init', iframeOrigin, [
            channel.port2
        ]);
    });
    // Give this 200ms to initialize, after that, we treat this method as failed
    setTimeout(function() {
        if (!hasCalledBack) {
            hasCalledBack = true;
            callback(new Error("IFrame extension not supported"));
        }
    }, 200);
};
// High-level JS API
/**
 * Default extension response timeout in seconds.
 * @const
 */ u2f.EXTENSION_TIMEOUT_SEC = 30;
/**
 * A singleton instance for a MessagePort to the extension.
 * @type {MessagePort|u2f.WrappedChromeRuntimePort_}
 * @private
 */ u2f.port_ = null;
/**
 * Callbacks waiting for a port
 * @type {Array.<function((MessagePort|u2f.WrappedChromeRuntimePort_))>}
 * @private
 */ u2f.waitingForPort_ = [];
/**
 * A counter for requestIds.
 * @type {number}
 * @private
 */ u2f.reqCounter_ = 0;
/**
 * A map from requestIds to client callbacks
 * @type {Object.<number,(function((u2f.Error|u2f.RegisterResponse))
 *                       |function((u2f.Error|u2f.SignResponse)))>}
 * @private
 */ u2f.callbackMap_ = {};
/**
 * Creates or retrieves the MessagePort singleton to use.
 * @param {function((MessagePort|u2f.WrappedChromeRuntimePort_))} callback
 * @private
 */ u2f.getPortSingleton_ = function(callback) {
    if (u2f.port_) callback(null, u2f.port_);
    else {
        if (u2f.waitingForPort_.length == 0) u2f.getMessagePort(function(err, port) {
            if (!err) {
                u2f.port_ = port;
                u2f.port_.addEventListener('message', u2f.responseHandler_);
            }
            // Careful, here be async callbacks. Maybe.
            while(u2f.waitingForPort_.length)u2f.waitingForPort_.shift()(err, port);
        });
        u2f.waitingForPort_.push(callback);
    }
};
/**
 * Handles response messages from the extension.
 * @param {MessageEvent.<u2f.Response>} message
 * @private
 */ u2f.responseHandler_ = function(message) {
    var response = message.data;
    var reqId = response['requestId'];
    if (!reqId || !u2f.callbackMap_[reqId]) {
        console.error('Unknown or missing requestId in response.');
        return;
    }
    var cb = u2f.callbackMap_[reqId];
    delete u2f.callbackMap_[reqId];
    cb(null, response['responseData']);
};
/**
 * Calls the callback with true or false as first and only argument
 * @param {Function} callback
 */ u2f.isSupported = function(callback) {
    u2f.getPortSingleton_(function(err, port) {
        callback(!err);
    });
};
/**
 * Dispatches an array of sign requests to available U2F tokens.
 * @param {Array.<u2f.SignRequest>} signRequests
 * @param {function((u2f.Error|u2f.SignResponse))} callback
 * @param {number=} opt_timeoutSeconds
 */ u2f.sign = function(signRequests, callback, opt_timeoutSeconds) {
    u2f.getPortSingleton_(function(err, port) {
        if (err) return callback(err);
        var reqId = ++u2f.reqCounter_;
        u2f.callbackMap_[reqId] = callback;
        var req = {
            type: u2f.MessageTypes.U2F_SIGN_REQUEST,
            signRequests: signRequests,
            timeoutSeconds: typeof opt_timeoutSeconds !== 'undefined' ? opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC,
            requestId: reqId
        };
        port.postMessage(req);
    });
};
/**
 * Dispatches register requests to available U2F tokens. An array of sign
 * requests identifies already registered tokens.
 * @param {Array.<u2f.RegisterRequest>} registerRequests
 * @param {Array.<u2f.SignRequest>} signRequests
 * @param {function((u2f.Error|u2f.RegisterResponse))} callback
 * @param {number=} opt_timeoutSeconds
 */ u2f.register = function(registerRequests, signRequests, callback, opt_timeoutSeconds) {
    u2f.getPortSingleton_(function(err, port) {
        if (err) return callback(err);
        var reqId = ++u2f.reqCounter_;
        u2f.callbackMap_[reqId] = callback;
        var req = {
            type: u2f.MessageTypes.U2F_REGISTER_REQUEST,
            signRequests: signRequests,
            registerRequests: registerRequests,
            timeoutSeconds: typeof opt_timeoutSeconds !== 'undefined' ? opt_timeoutSeconds : u2f.EXTENSION_TIMEOUT_SEC,
            requestId: reqId
        };
        port.postMessage(req);
    });
};

},{}],"ckx2n":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getAltStatusMessage = exports.StatusCodes = exports.TransportStatusError = exports.TransportError = undefined;
var _createClass = function() {
    function defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    return function(Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);
        if (staticProps) defineProperties(Constructor, staticProps);
        return Constructor;
    };
}();
var _events2 = require("events");
var _events3 = _interopRequireDefault(_events2);
var _errors = require("@ledgerhq/errors");
function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
        default: obj
    };
}
function _toConsumableArray(arr) {
    if (Array.isArray(arr)) {
        for(var i = 0, arr2 = Array(arr.length); i < arr.length; i++)arr2[i] = arr[i];
        return arr2;
    } else return Array.from(arr);
}
function _asyncToGenerator(fn) {
    return function() {
        var gen = fn.apply(this, arguments);
        return new Promise(function(resolve, reject) {
            function step(key, arg) {
                try {
                    var info = gen[key](arg);
                    var value = info.value;
                } catch (error) {
                    reject(error);
                    return;
                }
                if (info.done) resolve(value);
                else return Promise.resolve(value).then(function(value) {
                    step("next", value);
                }, function(err) {
                    step("throw", err);
                });
            }
            return step("next");
        });
    };
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
exports.TransportError = _errors.TransportError;
exports.TransportStatusError = _errors.TransportStatusError;
exports.StatusCodes = _errors.StatusCodes;
exports.getAltStatusMessage = _errors.getAltStatusMessage;
/**
 */ /**
 */ /**
 * type: add or remove event
 * descriptor: a parameter that can be passed to open(descriptor)
 * deviceModel: device info on the model (is it a nano s, nano x, ...)
 * device: transport specific device info
 */ /**
 */ /**
 * Transport defines the generic interface to share between node/u2f impl
 * A **Descriptor** is a parametric type that is up to be determined for the implementation.
 * it can be for instance an ID, an file path, a URL,...
 */ var Transport = function() {
    function Transport1() {
        var _this = this;
        _classCallCheck(this, Transport1);
        this.exchangeTimeout = 30000;
        this._events = new _events3.default();
        this.send = function() {
            var _ref = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee(cla, ins, p1, p2) {
                var data = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Buffer.alloc(0);
                var statusList = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [
                    _errors.StatusCodes.OK
                ];
                var response, sw;
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while(true)switch(_context.prev = _context.next){
                        case 0:
                            if (!(data.length >= 256)) {
                                _context.next = 2;
                                break;
                            }
                            throw new _errors.TransportError("data.length exceed 256 bytes limit. Got: " + data.length, "DataLengthTooBig");
                        case 2:
                            _context.next = 4;
                            return _this.exchange(Buffer.concat([
                                Buffer.from([
                                    cla,
                                    ins,
                                    p1,
                                    p2
                                ]),
                                Buffer.from([
                                    data.length
                                ]),
                                data
                            ]));
                        case 4:
                            response = _context.sent;
                            sw = response.readUInt16BE(response.length - 2);
                            if (statusList.some(function(s) {
                                return s === sw;
                            })) {
                                _context.next = 8;
                                break;
                            }
                            throw new _errors.TransportStatusError(sw);
                        case 8:
                            return _context.abrupt("return", response);
                        case 9:
                        case "end":
                            return _context.stop();
                    }
                }, _callee, _this);
            }));
            return function(_x, _x2, _x3, _x4) {
                return _ref.apply(this, arguments);
            };
        }();
        this.exchangeAtomicImpl = function() {
            var _ref2 = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee2(f) {
                var resolveBusy, busyPromise, res;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while(true)switch(_context2.prev = _context2.next){
                        case 0:
                            if (!_this.exchangeBusyPromise) {
                                _context2.next = 2;
                                break;
                            }
                            throw new _errors.TransportError("Transport race condition", "RaceCondition");
                        case 2:
                            resolveBusy = void 0;
                            busyPromise = new Promise(function(r) {
                                resolveBusy = r;
                            });
                            _this.exchangeBusyPromise = busyPromise;
                            _context2.prev = 5;
                            _context2.next = 8;
                            return f();
                        case 8:
                            res = _context2.sent;
                            return _context2.abrupt("return", res);
                        case 10:
                            _context2.prev = 10;
                            if (resolveBusy) resolveBusy();
                            _this.exchangeBusyPromise = null;
                            return _context2.finish(10);
                        case 14:
                        case "end":
                            return _context2.stop();
                    }
                }, _callee2, _this, [
                    [
                        5,
                        ,
                        10,
                        14
                    ]
                ]);
            }));
            return function(_x7) {
                return _ref2.apply(this, arguments);
            };
        }();
        this._appAPIlock = null;
    }
    /**
   * Statically check if a transport is supported on the user's platform/browser.
   */ /**
   * List once all available descriptors. For a better granularity, checkout `listen()`.
   * @return a promise of descriptors
   * @example
   * TransportFoo.list().then(descriptors => ...)
   */ /**
   * Listen all device events for a given Transport. The method takes an Obverver of DescriptorEvent and returns a Subscription (according to Observable paradigm https://github.com/tc39/proposal-observable )
   * a DescriptorEvent is a `{ descriptor, type }` object. type can be `"add"` or `"remove"` and descriptor is a value you can pass to `open(descriptor)`.
   * each listen() call will first emit all potential device already connected and then will emit events can come over times,
   * for instance if you plug a USB device after listen() or a bluetooth device become discoverable.
   * @param observer is an object with a next, error and complete function (compatible with observer pattern)
   * @return a Subscription object on which you can `.unsubscribe()` to stop listening descriptors.
   * @example
  const sub = TransportFoo.listen({
  next: e => {
    if (e.type==="add") {
      sub.unsubscribe();
      const transport = await TransportFoo.open(e.descriptor);
      ...
    }
  },
  error: error => {},
  complete: () => {}
  })
   */ /**
   * attempt to create a Transport instance with potentially a descriptor.
   * @param descriptor: the descriptor to open the transport with.
   * @param timeout: an optional timeout
   * @return a Promise of Transport instance
   * @example
  TransportFoo.open(descriptor).then(transport => ...)
   */ /**
   * low level api to communicate with the device
   * This method is for implementations to implement but should not be directly called.
   * Instead, the recommanded way is to use send() method
   * @param apdu the data to send
   * @return a Promise of response data
   */ /**
   * set the "scramble key" for the next exchanges with the device.
   * Each App can have a different scramble key and they internally will set it at instanciation.
   * @param key the scramble key
   */ /**
   * close the exchange with the device.
   * @return a Promise that ends when the transport is closed.
   */ _createClass(Transport1, [
        {
            key: "on",
            /**
     * Listen to an event on an instance of transport.
     * Transport implementation can have specific events. Here is the common events:
     * * `"disconnect"` : triggered if Transport is disconnected
     */ value: function on(eventName, cb) {
                this._events.on(eventName, cb);
            }
        },
        {
            key: "off",
            value: function off(eventName, cb) {
                this._events.removeListener(eventName, cb);
            }
        },
        {
            key: "emit",
            value: function emit(event) {
                var _events;
                for(var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++)args[_key - 1] = arguments[_key];
                (_events = this._events).emit.apply(_events, [
                    event
                ].concat(_toConsumableArray(args)));
            }
        },
        {
            key: "setDebugMode",
            value: function setDebugMode() {
                console.warn("setDebugMode is deprecated. use @ledgerhq/logs instead. No logs are emitted in this anymore.");
            }
        },
        {
            key: "setExchangeTimeout",
            value: function setExchangeTimeout(exchangeTimeout) {
                this.exchangeTimeout = exchangeTimeout;
            }
        },
        {
            key: "decorateAppAPIMethods",
            value: function decorateAppAPIMethods(self, methods, scrambleKey) {
                var _iteratorNormalCompletion = true;
                var _didIteratorError = false;
                var _iteratorError = undefined;
                try {
                    for(var _iterator = methods[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){
                        var methodName = _step.value;
                        self[methodName] = this.decorateAppAPIMethod(methodName, self[methodName], self, scrambleKey);
                    }
                } catch (err) {
                    _didIteratorError = true;
                    _iteratorError = err;
                } finally{
                    try {
                        if (!_iteratorNormalCompletion && _iterator.return) _iterator.return();
                    } finally{
                        if (_didIteratorError) throw _iteratorError;
                    }
                }
            }
        },
        {
            key: "decorateAppAPIMethod",
            value: function decorateAppAPIMethod(methodName, f, ctx, scrambleKey) {
                var _this2 = this;
                return function() {
                    var _ref3 = _asyncToGenerator(/*#__PURE__*/ regeneratorRuntime.mark(function _callee3() {
                        for(var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++)args[_key2] = arguments[_key2];
                        var _appAPIlock;
                        return regeneratorRuntime.wrap(function _callee3$(_context3) {
                            while(true)switch(_context3.prev = _context3.next){
                                case 0:
                                    _appAPIlock = _this2._appAPIlock;
                                    if (!_appAPIlock) {
                                        _context3.next = 3;
                                        break;
                                    }
                                    return _context3.abrupt("return", Promise.reject(new _errors.TransportError("Ledger Device is busy (lock " + _appAPIlock + ")", "TransportLocked")));
                                case 3:
                                    _context3.prev = 3;
                                    _this2._appAPIlock = methodName;
                                    _this2.setScrambleKey(scrambleKey);
                                    _context3.next = 8;
                                    return f.apply(ctx, args);
                                case 8:
                                    return _context3.abrupt("return", _context3.sent);
                                case 9:
                                    _context3.prev = 9;
                                    _this2._appAPIlock = null;
                                    return _context3.finish(9);
                                case 12:
                                case "end":
                                    return _context3.stop();
                            }
                        }, _callee3, _this2, [
                            [
                                3,
                                ,
                                9,
                                12
                            ]
                        ]);
                    }));
                    return function() {
                        return _ref3.apply(this, arguments);
                    };
                }();
            }
        }
    ], [
        {
            key: "create",
            /**
     * create() allows to open the first descriptor available or
     * throw if there is none or if timeout is reached.
     * This is a light helper, alternative to using listen() and open() (that you may need for any more advanced usecase)
     * @example
    TransportFoo.create().then(transport => ...)
     */ value: function create() {
                var _this3 = this;
                var openTimeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3000;
                var listenTimeout = arguments[1];
                return new Promise(function(resolve, reject) {
                    var found = false;
                    var sub = _this3.listen({
                        next: function next(e) {
                            found = true;
                            if (sub) sub.unsubscribe();
                            if (listenTimeoutId) clearTimeout(listenTimeoutId);
                            _this3.open(e.descriptor, openTimeout).then(resolve, reject);
                        },
                        error: function error(e) {
                            if (listenTimeoutId) clearTimeout(listenTimeoutId);
                            reject(e);
                        },
                        complete: function complete() {
                            if (listenTimeoutId) clearTimeout(listenTimeoutId);
                            if (!found) reject(new _errors.TransportError(_this3.ErrorMessage_NoDeviceFound, "NoDeviceFound"));
                        }
                    });
                    var listenTimeoutId = listenTimeout ? setTimeout(function() {
                        sub.unsubscribe();
                        reject(new _errors.TransportError(_this3.ErrorMessage_ListenTimeout, "ListenTimeout"));
                    }, listenTimeout) : null;
                });
            }
        }
    ]);
    return Transport1;
}();
Transport.ErrorMessage_ListenTimeout = "No Ledger device found (timeout)";
Transport.ErrorMessage_NoDeviceFound = "No Ledger device found";
exports.default = Transport;

},{"buffer":"fCgem","events":"1VQLm","@ledgerhq/errors":"coT44"}],"gPJYu":[function(require,module,exports) {
"use strict";
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = this && this.__spread || function() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Prepends a subprovider to a provider
 * @param provider    Given provider
 * @param subprovider Subprovider to prepend
 */ function prependSubprovider(provider, subprovider) {
    subprovider.setEngine(provider);
    // HACK: We use implementation details of provider engine here
    // https://github.com/MetaMask/provider-engine/blob/master/index.js#L68
    provider._providers = __spread([
        subprovider
    ], provider._providers);
}
exports.prependSubprovider = prependSubprovider;

},{}],"eFRli":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var subprovider_1 = require("./subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * It intercepts the `eth_accounts` JSON RPC requests and never returns any addresses when queried.
 */ var EmptyWalletSubprovider = /** @class */ function(_super) {
    __extends(EmptyWalletSubprovider1, _super);
    function EmptyWalletSubprovider1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:prefer-function-over-method async-suffix
    EmptyWalletSubprovider1.prototype.handleRequest = function(payload, next, end) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(payload.method){
                    case 'eth_accounts':
                        end(null, []);
                        return [
                            2 /*return*/ 
                        ];
                    default:
                        next();
                        return [
                            2 /*return*/ 
                        ];
                }
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    return EmptyWalletSubprovider1;
}(subprovider_1.Subprovider);
exports.EmptyWalletSubprovider = EmptyWalletSubprovider;

},{"./subprovider":"4dgUK"}],"4dgUK":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var utils_1 = require("@0x/utils");
/**
 * A altered version of the base class Subprovider found in [web3-provider-engine](https://github.com/MetaMask/provider-engine).
 * This one has an async/await `emitPayloadAsync` and also defined types.
 */ var Subprovider = /** @class */ function() {
    function Subprovider1() {}
    Subprovider1._createFinalPayload = function(payload) {
        var finalPayload = __assign({
            // defaults
            id: Subprovider1._getRandomId(),
            jsonrpc: '2.0',
            params: []
        }, payload);
        return finalPayload;
    };
    // Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js
    Subprovider1._getRandomId = function() {
        var extraDigits = 3;
        var baseTen = 10;
        // 13 time digits
        var datePart = new Date().getTime() * Math.pow(baseTen, extraDigits);
        // 3 random digits
        var extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits));
        // 16 digits
        return datePart + extraPart;
    };
    /**
     * Emits a JSON RPC payload that will then be handled by the ProviderEngine instance
     * this subprovider is a part of. The payload will cascade down the subprovider middleware
     * stack until finding the responsible entity for handling the request.
     * @param payload JSON RPC payload
     * @returns JSON RPC response payload
     */ Subprovider1.prototype.emitPayloadAsync = function(payload) {
        return __awaiter(this, void 0, void 0, function() {
            var finalPayload, response;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        finalPayload = Subprovider1._createFinalPayload(payload);
                        return [
                            4 /*yield*/ ,
                            utils_1.promisify(this.engine.sendAsync, this.engine)(finalPayload)
                        ];
                    case 1:
                        response = _a.sent();
                        return [
                            2 /*return*/ ,
                            response
                        ];
                }
            });
        });
    };
    /**
     * Set's the subprovider's engine to the ProviderEngine it is added to.
     * This is only called within the ProviderEngine source code, do not call
     * directly.
     * @param engine The ProviderEngine this subprovider is added to
     */ Subprovider1.prototype.setEngine = function(engine) {
        this.engine = engine;
    };
    return Subprovider1;
}();
exports.Subprovider = Subprovider;

},{"@0x/utils":"dgW7d"}],"dgW7d":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var promisify_1 = require("./promisify");
exports.promisify = promisify_1.promisify;
var address_utils_1 = require("./address_utils");
exports.addressUtils = address_utils_1.addressUtils;
var class_utils_1 = require("./class_utils");
exports.classUtils = class_utils_1.classUtils;
var delete_nested_property_1 = require("./delete_nested_property");
exports.deleteNestedProperty = delete_nested_property_1.deleteNestedProperty;
var interval_utils_1 = require("./interval_utils");
exports.intervalUtils = interval_utils_1.intervalUtils;
var provider_utils_1 = require("./provider_utils");
exports.providerUtils = provider_utils_1.providerUtils;
var configured_bignumber_1 = require("./configured_bignumber");
exports.BigNumber = configured_bignumber_1.BigNumber;
var abi_decoder_1 = require("./abi_decoder");
exports.AbiDecoder = abi_decoder_1.AbiDecoder;
var log_utils_1 = require("./log_utils");
exports.logUtils = log_utils_1.logUtils;
var abi_utils_1 = require("./abi_utils");
exports.abiUtils = abi_utils_1.abiUtils;
var constants_1 = require("./constants");
exports.NULL_BYTES = constants_1.NULL_BYTES;
var error_utils_1 = require("./error_utils");
exports.errorUtils = error_utils_1.errorUtils;
var fetch_async_1 = require("./fetch_async");
exports.fetchAsync = fetch_async_1.fetchAsync;
var sign_typed_data_utils_1 = require("./sign_typed_data_utils");
exports.signTypedDataUtils = sign_typed_data_utils_1.signTypedDataUtils;
exports.AbiEncoder = require("./abi_encoder");
var random_1 = require("./random");
exports.generatePseudoRandom256BitNumber = random_1.generatePseudoRandom256BitNumber;

},{"./promisify":"dClt1","./address_utils":"Dl2Nj","./class_utils":"2QYpm","./delete_nested_property":"kvIhg","./interval_utils":"3pfL9","./provider_utils":"gcR7E","./configured_bignumber":"TutUZ","./abi_decoder":"7YnMw","./log_utils":"d8EQP","./abi_utils":"8ADxj","./constants":"4dOex","./error_utils":"4voiD","./fetch_async":"g4gpI","./sign_typed_data_utils":"hew4t","./abi_encoder":"ijo3l","./random":"bVPz2"}],"dClt1":[function(require,module,exports) {
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = this && this.__spread || function() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
/**
 * Transforms callback-based function -- func(arg1, arg2 .. argN, callback) -- into an ES6-compatible Promise.
 * Promisify provides a default callback of the form (error, result) and rejects when `error` is not null. You can also
 * supply thisArg object as the second argument which will be passed to `apply`.
 */ // HACK: This can't be properly typed without variadic kinds https://github.com/Microsoft/TypeScript/issues/5453
function promisify(originalFn, thisArg) {
    var _this = this;
    var promisifiedFunction = function() {
        var callArgs = [];
        for(var _i = 0; _i < arguments.length; _i++)callArgs[_i] = arguments[_i];
        return __awaiter(_this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    new Promise(function(resolve, reject) {
                        var callback = function(err, data) {
                            err === null || err === undefined ? resolve(data) : reject(err);
                        };
                        originalFn.apply(thisArg, __spread(callArgs, [
                            callback
                        ]));
                    })
                ];
            });
        });
    };
    return promisifiedFunction;
}
exports.promisify = promisify;

},{}],"Dl2Nj":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereumjs_util_1 = require("ethereumjs-util");
var jsSHA3 = require("js-sha3");
var _ = require("lodash");
var random_1 = require("./random");
var BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;
var SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;
var ADDRESS_LENGTH = 40;
exports.addressUtils = {
    isChecksumAddress: function(address) {
        // Check each case
        var unprefixedAddress = address.replace('0x', '');
        var addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());
        for(var i = 0; i < ADDRESS_LENGTH; i++){
            // The nth letter should be uppercase if the nth digit of casemap is 1
            var hexBase = 16;
            var lowercaseRange = 7;
            if (parseInt(addressHash[i], hexBase) > lowercaseRange && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i] || parseInt(addressHash[i], hexBase) <= lowercaseRange && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i]) return false;
        }
        return true;
    },
    isAddress: function(address) {
        if (!BASIC_ADDRESS_REGEX.test(address)) // Check if it has the basic requirements of an address
        return false;
        else if (SAME_CASE_ADDRESS_REGEX.test(address)) // If it's all small caps or all all caps, return true
        return true;
        else {
            // Otherwise check each case
            var isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);
            return isValidChecksummedAddress;
        }
    },
    padZeros: function(address) {
        return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));
    },
    generatePseudoRandomAddress: function() {
        var randomBigNum = random_1.generatePseudoRandom256BitNumber();
        var randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());
        var addressLengthInBytes = 20;
        var randomAddress = "0x" + randomBuff.slice(0, addressLengthInBytes).toString('hex');
        return randomAddress;
    }
};

},{"ethereumjs-util":"glktw","js-sha3":"fwLyq","lodash":"3qBDj","./random":"bVPz2"}],"fwLyq":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
/**
 * [js-sha3]{@link https://github.com/emn178/js-sha3}
 *
 * @version 0.7.0
 * @author Chen, Yi-Cyuan [emn178@gmail.com]
 * @copyright Chen, Yi-Cyuan 2015-2017
 * @license MIT
 */ /*jslint bitwise: true */ (function() {
    var ERROR = 'input is invalid type';
    var WINDOW = typeof window === 'object';
    var root = WINDOW ? window : {};
    if (root.JS_SHA3_NO_WINDOW) WINDOW = false;
    var WEB_WORKER = !WINDOW && typeof self === 'object';
    var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;
    if (NODE_JS) root = global;
    else if (WEB_WORKER) root = self;
    var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && true && module.exports;
    var AMD = typeof define === 'function' && define.amd;
    var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';
    var HEX_CHARS = '0123456789abcdef'.split('');
    var SHAKE_PADDING = [
        31,
        7936,
        2031616,
        520093696
    ];
    var CSHAKE_PADDING = [
        4,
        1024,
        262144,
        67108864
    ];
    var KECCAK_PADDING = [
        1,
        256,
        65536,
        16777216
    ];
    var PADDING = [
        6,
        1536,
        393216,
        100663296
    ];
    var SHIFT = [
        0,
        8,
        16,
        24
    ];
    var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
    ];
    var BITS = [
        224,
        256,
        384,
        512
    ];
    var SHAKE_BITS = [
        128,
        256
    ];
    var OUTPUT_TYPES = [
        'hex',
        'buffer',
        'arrayBuffer',
        'array',
        'digest'
    ];
    var CSHAKE_BYTEPAD = {
        '128': 168,
        '256': 136
    };
    if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) Array.isArray = function(obj) {
        return Object.prototype.toString.call(obj) === '[object Array]';
    };
    if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) ArrayBuffer.isView = function(obj) {
        return typeof obj === 'object' && obj.buffer && obj.buffer.constructor === ArrayBuffer;
    };
    var createOutputMethod = function(bits, padding, outputType) {
        return function(message) {
            return new Keccak(bits, padding, bits).update(message)[outputType]();
        };
    };
    var createShakeOutputMethod = function(bits, padding, outputType) {
        return function(message, outputBits) {
            return new Keccak(bits, padding, outputBits).update(message)[outputType]();
        };
    };
    var createCshakeOutputMethod = function(bits, padding, outputType) {
        return function(message, outputBits, n, s) {
            return methods['cshake' + bits].update(message, outputBits, n, s)[outputType]();
        };
    };
    var createKmacOutputMethod = function(bits, padding, outputType) {
        return function(key, message, outputBits, s) {
            return methods['kmac' + bits].update(key, message, outputBits, s)[outputType]();
        };
    };
    var createOutputMethods = function(method, createMethod, bits, padding) {
        for(var i = 0; i < OUTPUT_TYPES.length; ++i){
            var type = OUTPUT_TYPES[i];
            method[type] = createMethod(bits, padding, type);
        }
        return method;
    };
    var createMethod1 = function(bits, padding) {
        var method = createOutputMethod(bits, padding, 'hex');
        method.create = function() {
            return new Keccak(bits, padding, bits);
        };
        method.update = function(message) {
            return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits, padding);
    };
    var createShakeMethod = function(bits, padding) {
        var method = createShakeOutputMethod(bits, padding, 'hex');
        method.create = function(outputBits) {
            return new Keccak(bits, padding, outputBits);
        };
        method.update = function(message, outputBits) {
            return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits, padding);
    };
    var createCshakeMethod = function(bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createCshakeOutputMethod(bits, padding, 'hex');
        method.create = function(outputBits, n, s) {
            if (!n && !s) return methods['shake' + bits].create(outputBits);
            else return new Keccak(bits, padding, outputBits).bytepad([
                n,
                s
            ], w);
        };
        method.update = function(message, outputBits, n, s) {
            return method.create(outputBits, n, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits, padding);
    };
    var createKmacMethod = function(bits, padding) {
        var w = CSHAKE_BYTEPAD[bits];
        var method = createKmacOutputMethod(bits, padding, 'hex');
        method.create = function(key, outputBits, s) {
            return new Kmac(bits, padding, outputBits).bytepad([
                'KMAC',
                s
            ], w).bytepad([
                key
            ], w);
        };
        method.update = function(key, message, outputBits, s) {
            return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits, padding);
    };
    var algorithms = [
        {
            name: 'keccak',
            padding: KECCAK_PADDING,
            bits: BITS,
            createMethod: createMethod1
        },
        {
            name: 'sha3',
            padding: PADDING,
            bits: BITS,
            createMethod: createMethod1
        },
        {
            name: 'shake',
            padding: SHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createShakeMethod
        },
        {
            name: 'cshake',
            padding: CSHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createCshakeMethod
        },
        {
            name: 'kmac',
            padding: CSHAKE_PADDING,
            bits: SHAKE_BITS,
            createMethod: createKmacMethod
        }
    ];
    var methods = {}, methodNames = [];
    for(var i1 = 0; i1 < algorithms.length; ++i1){
        var algorithm = algorithms[i1];
        var bits1 = algorithm.bits;
        for(var j = 0; j < bits1.length; ++j){
            var methodName = algorithm.name + '_' + bits1[j];
            methodNames.push(methodName);
            methods[methodName] = algorithm.createMethod(bits1[j], algorithm.padding);
            if (algorithm.name !== 'sha3') {
                var newMethodName = algorithm.name + bits1[j];
                methodNames.push(newMethodName);
                methods[newMethodName] = methods[methodName];
            }
        }
    }
    function Keccak(bits, padding, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for(var i = 0; i < 50; ++i)this.s[i] = 0;
    }
    Keccak.prototype.update = function(message) {
        if (this.finalized) return;
        var notString, type = typeof message;
        if (type !== 'string') {
            if (type === 'object') {
                if (message === null) throw ERROR;
                else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) message = new Uint8Array(message);
                else if (!Array.isArray(message)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) throw ERROR;
                }
            } else throw ERROR;
            notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i, code;
        while(index < length){
            if (this.reset) {
                this.reset = false;
                blocks[0] = this.block;
                for(i = 1; i < blockCount + 1; ++i)blocks[i] = 0;
            }
            if (notString) for(i = this.start; index < length && i < byteCount; ++index)blocks[i >> 2] |= message[index] << SHIFT[(i++) & 3];
            else for(i = this.start; index < length && i < byteCount; ++index){
                code = message.charCodeAt(index);
                if (code < 0x80) blocks[i >> 2] |= code << SHIFT[(i++) & 3];
                else if (code < 0x800) {
                    blocks[i >> 2] |= (0xc0 | code >> 6) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                } else if (code < 0xd800 || code >= 0xe000) {
                    blocks[i >> 2] |= (0xe0 | code >> 12) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                } else {
                    code = 0x10000 + ((code & 0x3ff) << 10 | message.charCodeAt(++index) & 0x3ff);
                    blocks[i >> 2] |= (0xf0 | code >> 18) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 12 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code >> 6 & 0x3f) << SHIFT[(i++) & 3];
                    blocks[i >> 2] |= (0x80 | code & 0x3f) << SHIFT[(i++) & 3];
                }
            }
            this.lastByteIndex = i;
            if (i >= byteCount) {
                this.start = i - byteCount;
                this.block = blocks[blockCount];
                for(i = 0; i < blockCount; ++i)s[i] ^= blocks[i];
                f(s);
                this.reset = true;
            } else this.start = i;
        }
        return this;
    };
    Keccak.prototype.encode = function(x, right) {
        var o = x & 255, n = 1;
        var bytes = [
            o
        ];
        x = x >> 8;
        o = x & 255;
        while(o > 0){
            bytes.unshift(o);
            x = x >> 8;
            o = x & 255;
            ++n;
        }
        if (right) bytes.push(n);
        else bytes.unshift(n);
        this.update(bytes);
        return bytes.length;
    };
    Keccak.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== 'string') {
            if (type === 'object') {
                if (str === null) throw ERROR;
                else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) str = new Uint8Array(str);
                else if (!Array.isArray(str)) {
                    if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) throw ERROR;
                }
            } else throw ERROR;
            notString = true;
        }
        var bytes = 0, length = str.length;
        if (notString) bytes = length;
        else for(var i = 0; i < str.length; ++i){
            var code = str.charCodeAt(i);
            if (code < 0x80) bytes += 1;
            else if (code < 0x800) bytes += 2;
            else if (code < 0xd800 || code >= 0xe000) bytes += 3;
            else {
                code = 0x10000 + ((code & 0x3ff) << 10 | str.charCodeAt(++i) & 0x3ff);
                bytes += 4;
            }
        }
        bytes += this.encode(bytes * 8);
        this.update(str);
        return bytes;
    };
    Keccak.prototype.bytepad = function(strs, w) {
        var bytes = this.encode(w);
        for(var i = 0; i < strs.length; ++i)bytes += this.encodeString(strs[i]);
        var paddingBytes = w - bytes % w;
        var zeros = [];
        zeros.length = paddingBytes;
        this.update(zeros);
        return this;
    };
    Keccak.prototype.finalize = function() {
        if (this.finalized) return;
        this.finalized = true;
        var blocks = this.blocks, i = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i >> 2] |= this.padding[i & 3];
        if (this.lastByteIndex === this.byteCount) {
            blocks[0] = blocks[blockCount];
            for(i = 1; i < blockCount + 1; ++i)blocks[i] = 0;
        }
        blocks[blockCount - 1] |= 0x80000000;
        for(i = 0; i < blockCount; ++i)s[i] ^= blocks[i];
        f(s);
    };
    Keccak.prototype.toString = Keccak.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
        var hex = '', block;
        while(j < outputBlocks){
            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){
                block = s[i];
                hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F] + HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F] + HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F] + HEX_CHARS[block >> 28 & 0x0F] + HEX_CHARS[block >> 24 & 0x0F];
            }
            if (j % blockCount === 0) {
                f(s);
                i = 0;
            }
        }
        if (extraBytes) {
            block = s[i];
            hex += HEX_CHARS[block >> 4 & 0x0F] + HEX_CHARS[block & 0x0F];
            if (extraBytes > 1) hex += HEX_CHARS[block >> 12 & 0x0F] + HEX_CHARS[block >> 8 & 0x0F];
            if (extraBytes > 2) hex += HEX_CHARS[block >> 20 & 0x0F] + HEX_CHARS[block >> 16 & 0x0F];
        }
        return hex;
    };
    Keccak.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
        var bytes = this.outputBits >> 3;
        var buffer;
        if (extraBytes) buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        else buffer = new ArrayBuffer(bytes);
        var array = new Uint32Array(buffer);
        while(j < outputBlocks){
            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j)array[j] = s[i];
            if (j % blockCount === 0) f(s);
        }
        if (extraBytes) {
            array[i] = s[i];
            buffer = buffer.slice(0, bytes);
        }
        return buffer;
    };
    Keccak.prototype.buffer = Keccak.prototype.arrayBuffer;
    Keccak.prototype.digest = Keccak.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i = 0, j = 0;
        var array = [], offset, block;
        while(j < outputBlocks){
            for(i = 0; i < blockCount && j < outputBlocks; ++i, ++j){
                offset = j << 2;
                block = s[i];
                array[offset] = block & 0xFF;
                array[offset + 1] = block >> 8 & 0xFF;
                array[offset + 2] = block >> 16 & 0xFF;
                array[offset + 3] = block >> 24 & 0xFF;
            }
            if (j % blockCount === 0) f(s);
        }
        if (extraBytes) {
            offset = j << 2;
            block = s[i];
            array[offset] = block & 0xFF;
            if (extraBytes > 1) array[offset + 1] = block >> 8 & 0xFF;
            if (extraBytes > 2) array[offset + 2] = block >> 16 & 0xFF;
        }
        return array;
    };
    function Kmac(bits, padding, outputBits) {
        Keccak.call(this, bits, padding, outputBits);
    }
    Kmac.prototype = new Keccak();
    Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak.prototype.finalize.call(this);
    };
    var f = function(s) {
        var h, l, n, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for(n = 0; n < 48; n += 2){
            c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
            c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
            c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
            c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
            c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
            c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
            c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
            c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
            c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
            c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
            h = c8 ^ (c2 << 1 | c3 >>> 31);
            l = c9 ^ (c3 << 1 | c2 >>> 31);
            s[0] ^= h;
            s[1] ^= l;
            s[10] ^= h;
            s[11] ^= l;
            s[20] ^= h;
            s[21] ^= l;
            s[30] ^= h;
            s[31] ^= l;
            s[40] ^= h;
            s[41] ^= l;
            h = c0 ^ (c4 << 1 | c5 >>> 31);
            l = c1 ^ (c5 << 1 | c4 >>> 31);
            s[2] ^= h;
            s[3] ^= l;
            s[12] ^= h;
            s[13] ^= l;
            s[22] ^= h;
            s[23] ^= l;
            s[32] ^= h;
            s[33] ^= l;
            s[42] ^= h;
            s[43] ^= l;
            h = c2 ^ (c6 << 1 | c7 >>> 31);
            l = c3 ^ (c7 << 1 | c6 >>> 31);
            s[4] ^= h;
            s[5] ^= l;
            s[14] ^= h;
            s[15] ^= l;
            s[24] ^= h;
            s[25] ^= l;
            s[34] ^= h;
            s[35] ^= l;
            s[44] ^= h;
            s[45] ^= l;
            h = c4 ^ (c8 << 1 | c9 >>> 31);
            l = c5 ^ (c9 << 1 | c8 >>> 31);
            s[6] ^= h;
            s[7] ^= l;
            s[16] ^= h;
            s[17] ^= l;
            s[26] ^= h;
            s[27] ^= l;
            s[36] ^= h;
            s[37] ^= l;
            s[46] ^= h;
            s[47] ^= l;
            h = c6 ^ (c0 << 1 | c1 >>> 31);
            l = c7 ^ (c1 << 1 | c0 >>> 31);
            s[8] ^= h;
            s[9] ^= l;
            s[18] ^= h;
            s[19] ^= l;
            s[28] ^= h;
            s[29] ^= l;
            s[38] ^= h;
            s[39] ^= l;
            s[48] ^= h;
            s[49] ^= l;
            b0 = s[0];
            b1 = s[1];
            b32 = s[11] << 4 | s[10] >>> 28;
            b33 = s[10] << 4 | s[11] >>> 28;
            b14 = s[20] << 3 | s[21] >>> 29;
            b15 = s[21] << 3 | s[20] >>> 29;
            b46 = s[31] << 9 | s[30] >>> 23;
            b47 = s[30] << 9 | s[31] >>> 23;
            b28 = s[40] << 18 | s[41] >>> 14;
            b29 = s[41] << 18 | s[40] >>> 14;
            b20 = s[2] << 1 | s[3] >>> 31;
            b21 = s[3] << 1 | s[2] >>> 31;
            b2 = s[13] << 12 | s[12] >>> 20;
            b3 = s[12] << 12 | s[13] >>> 20;
            b34 = s[22] << 10 | s[23] >>> 22;
            b35 = s[23] << 10 | s[22] >>> 22;
            b16 = s[33] << 13 | s[32] >>> 19;
            b17 = s[32] << 13 | s[33] >>> 19;
            b48 = s[42] << 2 | s[43] >>> 30;
            b49 = s[43] << 2 | s[42] >>> 30;
            b40 = s[5] << 30 | s[4] >>> 2;
            b41 = s[4] << 30 | s[5] >>> 2;
            b22 = s[14] << 6 | s[15] >>> 26;
            b23 = s[15] << 6 | s[14] >>> 26;
            b4 = s[25] << 11 | s[24] >>> 21;
            b5 = s[24] << 11 | s[25] >>> 21;
            b36 = s[34] << 15 | s[35] >>> 17;
            b37 = s[35] << 15 | s[34] >>> 17;
            b18 = s[45] << 29 | s[44] >>> 3;
            b19 = s[44] << 29 | s[45] >>> 3;
            b10 = s[6] << 28 | s[7] >>> 4;
            b11 = s[7] << 28 | s[6] >>> 4;
            b42 = s[17] << 23 | s[16] >>> 9;
            b43 = s[16] << 23 | s[17] >>> 9;
            b24 = s[26] << 25 | s[27] >>> 7;
            b25 = s[27] << 25 | s[26] >>> 7;
            b6 = s[36] << 21 | s[37] >>> 11;
            b7 = s[37] << 21 | s[36] >>> 11;
            b38 = s[47] << 24 | s[46] >>> 8;
            b39 = s[46] << 24 | s[47] >>> 8;
            b30 = s[8] << 27 | s[9] >>> 5;
            b31 = s[9] << 27 | s[8] >>> 5;
            b12 = s[18] << 20 | s[19] >>> 12;
            b13 = s[19] << 20 | s[18] >>> 12;
            b44 = s[29] << 7 | s[28] >>> 25;
            b45 = s[28] << 7 | s[29] >>> 25;
            b26 = s[38] << 8 | s[39] >>> 24;
            b27 = s[39] << 8 | s[38] >>> 24;
            b8 = s[48] << 14 | s[49] >>> 18;
            b9 = s[49] << 14 | s[48] >>> 18;
            s[0] = b0 ^ ~b2 & b4;
            s[1] = b1 ^ ~b3 & b5;
            s[10] = b10 ^ ~b12 & b14;
            s[11] = b11 ^ ~b13 & b15;
            s[20] = b20 ^ ~b22 & b24;
            s[21] = b21 ^ ~b23 & b25;
            s[30] = b30 ^ ~b32 & b34;
            s[31] = b31 ^ ~b33 & b35;
            s[40] = b40 ^ ~b42 & b44;
            s[41] = b41 ^ ~b43 & b45;
            s[2] = b2 ^ ~b4 & b6;
            s[3] = b3 ^ ~b5 & b7;
            s[12] = b12 ^ ~b14 & b16;
            s[13] = b13 ^ ~b15 & b17;
            s[22] = b22 ^ ~b24 & b26;
            s[23] = b23 ^ ~b25 & b27;
            s[32] = b32 ^ ~b34 & b36;
            s[33] = b33 ^ ~b35 & b37;
            s[42] = b42 ^ ~b44 & b46;
            s[43] = b43 ^ ~b45 & b47;
            s[4] = b4 ^ ~b6 & b8;
            s[5] = b5 ^ ~b7 & b9;
            s[14] = b14 ^ ~b16 & b18;
            s[15] = b15 ^ ~b17 & b19;
            s[24] = b24 ^ ~b26 & b28;
            s[25] = b25 ^ ~b27 & b29;
            s[34] = b34 ^ ~b36 & b38;
            s[35] = b35 ^ ~b37 & b39;
            s[44] = b44 ^ ~b46 & b48;
            s[45] = b45 ^ ~b47 & b49;
            s[6] = b6 ^ ~b8 & b0;
            s[7] = b7 ^ ~b9 & b1;
            s[16] = b16 ^ ~b18 & b10;
            s[17] = b17 ^ ~b19 & b11;
            s[26] = b26 ^ ~b28 & b20;
            s[27] = b27 ^ ~b29 & b21;
            s[36] = b36 ^ ~b38 & b30;
            s[37] = b37 ^ ~b39 & b31;
            s[46] = b46 ^ ~b48 & b40;
            s[47] = b47 ^ ~b49 & b41;
            s[8] = b8 ^ ~b0 & b2;
            s[9] = b9 ^ ~b1 & b3;
            s[18] = b18 ^ ~b10 & b12;
            s[19] = b19 ^ ~b11 & b13;
            s[28] = b28 ^ ~b20 & b22;
            s[29] = b29 ^ ~b21 & b23;
            s[38] = b38 ^ ~b30 & b32;
            s[39] = b39 ^ ~b31 & b33;
            s[48] = b48 ^ ~b40 & b42;
            s[49] = b49 ^ ~b41 & b43;
            s[0] ^= RC[n];
            s[1] ^= RC[n + 1];
        }
    };
    if (COMMON_JS) module.exports = methods;
    else {
        for(i1 = 0; i1 < methodNames.length; ++i1)root[methodNames[i1]] = methods[methodNames[i1]];
        if (AMD) define(function() {
            return methods;
        });
    }
})();

},{"process":"d5jf4"}],"3qBDj":[function(require,module,exports) {
var global = arguments[3];
(function() {
    /** Used as a safe reference for `undefined` in pre-ES5 environments. */ var undefined;
    /** Used as the semantic version number. */ var VERSION = '4.17.21';
    /** Used as the size to enable large array optimizations. */ var LARGE_ARRAY_SIZE = 200;
    /** Error message constants. */ var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.', FUNC_ERROR_TEXT = 'Expected a function', INVALID_TEMPL_VAR_ERROR_TEXT = 'Invalid `variable` option passed into `_.template`';
    /** Used to stand-in for `undefined` hash values. */ var HASH_UNDEFINED = '__lodash_hash_undefined__';
    /** Used as the maximum memoize cache size. */ var MAX_MEMOIZE_SIZE = 500;
    /** Used as the internal argument placeholder. */ var PLACEHOLDER = '__lodash_placeholder__';
    /** Used to compose bitmasks for cloning. */ var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
    /** Used to compose bitmasks for value comparisons. */ var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
    /** Used to compose bitmasks for function metadata. */ var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
    /** Used as default options for `_.truncate`. */ var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = '...';
    /** Used to detect hot functions by number of calls within a span of milliseconds. */ var HOT_COUNT = 800, HOT_SPAN = 16;
    /** Used to indicate the type of lazy iteratees. */ var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
    /** Used as references for various `Number` constants. */ var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 1.7976931348623157e+308, NAN = 0 / 0;
    /** Used as references for the maximum length and index of an array. */ var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
    /** Used to associate wrap methods with their bit flags. */ var wrapFlags = [
        [
            'ary',
            WRAP_ARY_FLAG
        ],
        [
            'bind',
            WRAP_BIND_FLAG
        ],
        [
            'bindKey',
            WRAP_BIND_KEY_FLAG
        ],
        [
            'curry',
            WRAP_CURRY_FLAG
        ],
        [
            'curryRight',
            WRAP_CURRY_RIGHT_FLAG
        ],
        [
            'flip',
            WRAP_FLIP_FLAG
        ],
        [
            'partial',
            WRAP_PARTIAL_FLAG
        ],
        [
            'partialRight',
            WRAP_PARTIAL_RIGHT_FLAG
        ],
        [
            'rearg',
            WRAP_REARG_FLAG
        ]
    ];
    /** `Object#toString` result references. */ var argsTag = '[object Arguments]', arrayTag = '[object Array]', asyncTag = '[object AsyncFunction]', boolTag = '[object Boolean]', dateTag = '[object Date]', domExcTag = '[object DOMException]', errorTag = '[object Error]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]', mapTag = '[object Map]', numberTag = '[object Number]', nullTag = '[object Null]', objectTag = '[object Object]', promiseTag = '[object Promise]', proxyTag = '[object Proxy]', regexpTag = '[object RegExp]', setTag = '[object Set]', stringTag = '[object String]', symbolTag = '[object Symbol]', undefinedTag = '[object Undefined]', weakMapTag = '[object WeakMap]', weakSetTag = '[object WeakSet]';
    var arrayBufferTag = '[object ArrayBuffer]', dataViewTag = '[object DataView]', float32Tag = '[object Float32Array]', float64Tag = '[object Float64Array]', int8Tag = '[object Int8Array]', int16Tag = '[object Int16Array]', int32Tag = '[object Int32Array]', uint8Tag = '[object Uint8Array]', uint8ClampedTag = '[object Uint8ClampedArray]', uint16Tag = '[object Uint16Array]', uint32Tag = '[object Uint32Array]';
    /** Used to match empty string literals in compiled template source. */ var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
    /** Used to match HTML entities and HTML characters. */ var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
    /** Used to match template delimiters. */ var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
    /** Used to match property names within property paths. */ var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
    /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */ var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
    /** Used to match leading whitespace. */ var reTrimStart = /^\s+/;
    /** Used to match a single whitespace character. */ var reWhitespace = /\s/;
    /** Used to match wrap detail comments. */ var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
    /** Used to match words composed of alphanumeric characters. */ var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
    /**
   * Used to validate the `validate` option in `_.template` variable.
   *
   * Forbids characters which could potentially change the meaning of the function argument definition:
   * - "()," (modification of function parameters)
   * - "=" (default value)
   * - "[]{}" (destructuring of function parameters)
   * - "/" (beginning of a comment)
   * - whitespace
   */ var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
    /** Used to match backslashes in property paths. */ var reEscapeChar = /\\(\\)?/g;
    /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */ var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
    /** Used to match `RegExp` flags from their coerced string values. */ var reFlags = /\w*$/;
    /** Used to detect bad signed hexadecimal string values. */ var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
    /** Used to detect binary string values. */ var reIsBinary = /^0b[01]+$/i;
    /** Used to detect host constructors (Safari). */ var reIsHostCtor = /^\[object .+?Constructor\]$/;
    /** Used to detect octal string values. */ var reIsOctal = /^0o[0-7]+$/i;
    /** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
    /** Used to match Latin Unicode letters (excluding mathematical operators). */ var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
    /** Used to ensure capturing order of template delimiters. */ var reNoMatch = /($^)/;
    /** Used to match unescaped characters in compiled string literals. */ var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
    /** Used to compose unicode character classes. */ var rsAstralRange = '\\ud800-\\udfff', rsComboMarksRange = '\\u0300-\\u036f', reComboHalfMarksRange = '\\ufe20-\\ufe2f', rsComboSymbolsRange = '\\u20d0-\\u20ff', rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = '\\u2700-\\u27bf', rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff', rsMathOpRange = '\\xac\\xb1\\xd7\\xf7', rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf', rsPunctuationRange = '\\u2000-\\u206f', rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000', rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde', rsVarRange = '\\ufe0e\\ufe0f', rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
    /** Used to compose unicode capture groups. */ var rsApos = "['\u2019]", rsAstral = '[' + rsAstralRange + ']', rsBreak = '[' + rsBreakRange + ']', rsCombo = '[' + rsComboRange + ']', rsDigits = '\\d+', rsDingbat = '[' + rsDingbatRange + ']', rsLower = '[' + rsLowerRange + ']', rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']', rsFitz = '\\ud83c[\\udffb-\\udfff]', rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')', rsNonAstral = '[^' + rsAstralRange + ']', rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}', rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]', rsUpper = '[' + rsUpperRange + ']', rsZWJ = '\\u200d';
    /** Used to compose unicode regexes. */ var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')', rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')', rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?', rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?', reOptMod = rsModifier + '?', rsOptVar = '[' + rsVarRange + ']?', rsOptJoin = '(?:' + rsZWJ + '(?:' + [
        rsNonAstral,
        rsRegional,
        rsSurrPair
    ].join('|') + ')' + rsOptVar + reOptMod + ')*', rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])', rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])', rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = '(?:' + [
        rsDingbat,
        rsRegional,
        rsSurrPair
    ].join('|') + ')' + rsSeq, rsSymbol = '(?:' + [
        rsNonAstral + rsCombo + '?',
        rsCombo,
        rsRegional,
        rsSurrPair,
        rsAstral
    ].join('|') + ')';
    /** Used to match apostrophes. */ var reApos = RegExp(rsApos, 'g');
    /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */ var reComboMark = RegExp(rsCombo, 'g');
    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */ var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');
    /** Used to match complex or compound words. */ var reUnicodeWord = RegExp([
        rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [
            rsBreak,
            rsUpper,
            '$'
        ].join('|') + ')',
        rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [
            rsBreak,
            rsUpper + rsMiscLower,
            '$'
        ].join('|') + ')',
        rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
        rsUpper + '+' + rsOptContrUpper,
        rsOrdUpper,
        rsOrdLower,
        rsDigits,
        rsEmoji
    ].join('|'), 'g');
    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */ var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
    /** Used to detect strings that need a more robust regexp to match words. */ var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
    /** Used to assign default `context` object properties. */ var contextProps = [
        'Array',
        'Buffer',
        'DataView',
        'Date',
        'Error',
        'Float32Array',
        'Float64Array',
        'Function',
        'Int8Array',
        'Int16Array',
        'Int32Array',
        'Map',
        'Math',
        'Object',
        'Promise',
        'RegExp',
        'Set',
        'String',
        'Symbol',
        'TypeError',
        'Uint8Array',
        'Uint8ClampedArray',
        'Uint16Array',
        'Uint32Array',
        'WeakMap',
        '_',
        'clearTimeout',
        'isFinite',
        'parseInt',
        'setTimeout'
    ];
    /** Used to make template sourceURLs easier to identify. */ var templateCounter = -1;
    /** Used to identify `toStringTag` values of typed arrays. */ var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    /** Used to identify `toStringTag` values supported by `_.clone`. */ var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
    /** Used to map Latin Unicode letters to basic Latin letters. */ var deburredLetters = {
        // Latin-1 Supplement block.
        '\xc0': 'A',
        '\xc1': 'A',
        '\xc2': 'A',
        '\xc3': 'A',
        '\xc4': 'A',
        '\xc5': 'A',
        '\xe0': 'a',
        '\xe1': 'a',
        '\xe2': 'a',
        '\xe3': 'a',
        '\xe4': 'a',
        '\xe5': 'a',
        '\xc7': 'C',
        '\xe7': 'c',
        '\xd0': 'D',
        '\xf0': 'd',
        '\xc8': 'E',
        '\xc9': 'E',
        '\xca': 'E',
        '\xcb': 'E',
        '\xe8': 'e',
        '\xe9': 'e',
        '\xea': 'e',
        '\xeb': 'e',
        '\xcc': 'I',
        '\xcd': 'I',
        '\xce': 'I',
        '\xcf': 'I',
        '\xec': 'i',
        '\xed': 'i',
        '\xee': 'i',
        '\xef': 'i',
        '\xd1': 'N',
        '\xf1': 'n',
        '\xd2': 'O',
        '\xd3': 'O',
        '\xd4': 'O',
        '\xd5': 'O',
        '\xd6': 'O',
        '\xd8': 'O',
        '\xf2': 'o',
        '\xf3': 'o',
        '\xf4': 'o',
        '\xf5': 'o',
        '\xf6': 'o',
        '\xf8': 'o',
        '\xd9': 'U',
        '\xda': 'U',
        '\xdb': 'U',
        '\xdc': 'U',
        '\xf9': 'u',
        '\xfa': 'u',
        '\xfb': 'u',
        '\xfc': 'u',
        '\xdd': 'Y',
        '\xfd': 'y',
        '\xff': 'y',
        '\xc6': 'Ae',
        '\xe6': 'ae',
        '\xde': 'Th',
        '\xfe': 'th',
        '\xdf': 'ss',
        // Latin Extended-A block.
        '\u0100': 'A',
        '\u0102': 'A',
        '\u0104': 'A',
        '\u0101': 'a',
        '\u0103': 'a',
        '\u0105': 'a',
        '\u0106': 'C',
        '\u0108': 'C',
        '\u010a': 'C',
        '\u010c': 'C',
        '\u0107': 'c',
        '\u0109': 'c',
        '\u010b': 'c',
        '\u010d': 'c',
        '\u010e': 'D',
        '\u0110': 'D',
        '\u010f': 'd',
        '\u0111': 'd',
        '\u0112': 'E',
        '\u0114': 'E',
        '\u0116': 'E',
        '\u0118': 'E',
        '\u011a': 'E',
        '\u0113': 'e',
        '\u0115': 'e',
        '\u0117': 'e',
        '\u0119': 'e',
        '\u011b': 'e',
        '\u011c': 'G',
        '\u011e': 'G',
        '\u0120': 'G',
        '\u0122': 'G',
        '\u011d': 'g',
        '\u011f': 'g',
        '\u0121': 'g',
        '\u0123': 'g',
        '\u0124': 'H',
        '\u0126': 'H',
        '\u0125': 'h',
        '\u0127': 'h',
        '\u0128': 'I',
        '\u012a': 'I',
        '\u012c': 'I',
        '\u012e': 'I',
        '\u0130': 'I',
        '\u0129': 'i',
        '\u012b': 'i',
        '\u012d': 'i',
        '\u012f': 'i',
        '\u0131': 'i',
        '\u0134': 'J',
        '\u0135': 'j',
        '\u0136': 'K',
        '\u0137': 'k',
        '\u0138': 'k',
        '\u0139': 'L',
        '\u013b': 'L',
        '\u013d': 'L',
        '\u013f': 'L',
        '\u0141': 'L',
        '\u013a': 'l',
        '\u013c': 'l',
        '\u013e': 'l',
        '\u0140': 'l',
        '\u0142': 'l',
        '\u0143': 'N',
        '\u0145': 'N',
        '\u0147': 'N',
        '\u014a': 'N',
        '\u0144': 'n',
        '\u0146': 'n',
        '\u0148': 'n',
        '\u014b': 'n',
        '\u014c': 'O',
        '\u014e': 'O',
        '\u0150': 'O',
        '\u014d': 'o',
        '\u014f': 'o',
        '\u0151': 'o',
        '\u0154': 'R',
        '\u0156': 'R',
        '\u0158': 'R',
        '\u0155': 'r',
        '\u0157': 'r',
        '\u0159': 'r',
        '\u015a': 'S',
        '\u015c': 'S',
        '\u015e': 'S',
        '\u0160': 'S',
        '\u015b': 's',
        '\u015d': 's',
        '\u015f': 's',
        '\u0161': 's',
        '\u0162': 'T',
        '\u0164': 'T',
        '\u0166': 'T',
        '\u0163': 't',
        '\u0165': 't',
        '\u0167': 't',
        '\u0168': 'U',
        '\u016a': 'U',
        '\u016c': 'U',
        '\u016e': 'U',
        '\u0170': 'U',
        '\u0172': 'U',
        '\u0169': 'u',
        '\u016b': 'u',
        '\u016d': 'u',
        '\u016f': 'u',
        '\u0171': 'u',
        '\u0173': 'u',
        '\u0174': 'W',
        '\u0175': 'w',
        '\u0176': 'Y',
        '\u0177': 'y',
        '\u0178': 'Y',
        '\u0179': 'Z',
        '\u017b': 'Z',
        '\u017d': 'Z',
        '\u017a': 'z',
        '\u017c': 'z',
        '\u017e': 'z',
        '\u0132': 'IJ',
        '\u0133': 'ij',
        '\u0152': 'Oe',
        '\u0153': 'oe',
        '\u0149': "'n",
        '\u017f': 's'
    };
    /** Used to map characters to HTML entities. */ var htmlEscapes = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;'
    };
    /** Used to map HTML entities to characters. */ var htmlUnescapes = {
        '&amp;': '&',
        '&lt;': '<',
        '&gt;': '>',
        '&quot;': '"',
        '&#39;': "'"
    };
    /** Used to escape characters for inclusion in compiled string literals. */ var stringEscapes = {
        '\\': '\\',
        "'": "'",
        '\n': 'n',
        '\r': 'r',
        '\u2028': 'u2028',
        '\u2029': 'u2029'
    };
    /** Built-in method references without a dependency on `root`. */ var freeParseFloat = parseFloat, freeParseInt = parseInt;
    /** Detect free variable `global` from Node.js. */ var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;
    /** Detect free variable `self`. */ var freeSelf = typeof self == 'object' && self && self.Object === Object && self;
    /** Used as a reference to the global object. */ var root = freeGlobal || freeSelf || Function('return this')();
    /** Detect free variable `exports`. */ var freeExports = exports && !exports.nodeType && exports;
    /** Detect free variable `module`. */ var freeModule = freeExports && true && module && !module.nodeType && module;
    /** Detect the popular CommonJS extension `module.exports`. */ var moduleExports = freeModule && freeModule.exports === freeExports;
    /** Detect free variable `process` from Node.js. */ var freeProcess = moduleExports && freeGlobal.process;
    /** Used to access faster Node.js helpers. */ var nodeUtil = function() {
        try {
            // Use `util.types` for Node.js 10+.
            var types = freeModule && freeModule.require && freeModule.require('util').types;
            if (types) return types;
            // Legacy `process.binding('util')` for Node.js < 10.
            return freeProcess && freeProcess.binding && freeProcess.binding('util');
        } catch (e) {}
    }();
    /* Node.js helper references. */ var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    /*--------------------------------------------------------------------------*/ /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */ function apply(func, thisArg, args) {
        switch(args.length){
            case 0:
                return func.call(thisArg);
            case 1:
                return func.call(thisArg, args[0]);
            case 2:
                return func.call(thisArg, args[0], args[1]);
            case 3:
                return func.call(thisArg, args[0], args[1], args[2]);
        }
        return func.apply(thisArg, args);
    }
    /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */ function arrayAggregator(array, setter, iteratee, accumulator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
        }
        return accumulator;
    }
    /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEach(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (iteratee(array[index], index, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */ function arrayEachRight(array, iteratee) {
        var length = array == null ? 0 : array.length;
        while(length--){
            if (iteratee(array[length], length, array) === false) break;
        }
        return array;
    }
    /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */ function arrayEvery(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (!predicate(array[index], index, array)) return false;
        }
        return true;
    }
    /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */ function arrayFilter(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (predicate(value, index, array)) result[resIndex++] = value;
        }
        return result;
    }
    /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludes(array, value) {
        var length = array == null ? 0 : array.length;
        return !!length && baseIndexOf(array, value, 0) > -1;
    }
    /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */ function arrayIncludesWith(array, value, comparator) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (comparator(value, array[index])) return true;
        }
        return false;
    }
    /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */ function arrayMap(array, iteratee) {
        var index = -1, length = array == null ? 0 : array.length, result = Array(length);
        while(++index < length)result[index] = iteratee(array[index], index, array);
        return result;
    }
    /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */ function arrayPush(array, values) {
        var index = -1, length = values.length, offset = array.length;
        while(++index < length)array[offset + index] = values[index];
        return array;
    }
    /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduce(array, iteratee, accumulator, initAccum) {
        var index = -1, length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[++index];
        while(++index < length)accumulator = iteratee(accumulator, array[index], index, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */ function arrayReduceRight(array, iteratee, accumulator, initAccum) {
        var length = array == null ? 0 : array.length;
        if (initAccum && length) accumulator = array[--length];
        while(length--)accumulator = iteratee(accumulator, array[length], length, array);
        return accumulator;
    }
    /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */ function arraySome(array, predicate) {
        var index = -1, length = array == null ? 0 : array.length;
        while(++index < length){
            if (predicate(array[index], index, array)) return true;
        }
        return false;
    }
    /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ var asciiSize = baseProperty('length');
    /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function asciiToArray(string) {
        return string.split('');
    }
    /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function asciiWords(string) {
        return string.match(reAsciiWord) || [];
    }
    /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */ function baseFindKey(collection1, predicate, eachFunc) {
        var result;
        eachFunc(collection1, function(value, key, collection) {
            if (predicate(value, key, collection)) {
                result = key;
                return false;
            }
        });
        return result;
    }
    /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseFindIndex(array, predicate, fromIndex, fromRight) {
        var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
        while(fromRight ? index-- : ++index < length){
            if (predicate(array[index], index, array)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOf(array, value, fromIndex) {
        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
    }
    /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function baseIndexOfWith(array, value, fromIndex, comparator) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (comparator(array[index], value)) return index;
        }
        return -1;
    }
    /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */ function baseIsNaN(value) {
        return value !== value;
    }
    /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */ function baseMean(array, iteratee) {
        var length = array == null ? 0 : array.length;
        return length ? baseSum(array, iteratee) / length : NAN;
    }
    /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */ function baseProperty(key) {
        return function(object) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */ function basePropertyOf(object) {
        return function(key) {
            return object == null ? undefined : object[key];
        };
    }
    /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */ function baseReduce(collection2, iteratee, accumulator, initAccum, eachFunc) {
        eachFunc(collection2, function(value, index, collection) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
        });
        return accumulator;
    }
    /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */ function baseSortBy(array, comparer) {
        var length = array.length;
        array.sort(comparer);
        while(length--)array[length] = array[length].value;
        return array;
    }
    /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */ function baseSum(array, iteratee) {
        var result, index = -1, length = array.length;
        while(++index < length){
            var current = iteratee(array[index]);
            if (current !== undefined) result = result === undefined ? current : result + current;
        }
        return result;
    }
    /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */ function baseTimes(n, iteratee) {
        var index = -1, result = Array(n);
        while(++index < n)result[index] = iteratee(index);
        return result;
    }
    /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */ function baseToPairs(object, props) {
        return arrayMap(props, function(key) {
            return [
                key,
                object[key]
            ];
        });
    }
    /**
   * The base implementation of `_.trim`.
   *
   * @private
   * @param {string} string The string to trim.
   * @returns {string} Returns the trimmed string.
   */ function baseTrim(string) {
        return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;
    }
    /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */ function baseUnary(func) {
        return function(value) {
            return func(value);
        };
    }
    /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */ function baseValues(object, props) {
        return arrayMap(props, function(key) {
            return object[key];
        });
    }
    /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */ function cacheHas(cache, key) {
        return cache.has(key);
    }
    /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */ function charsStartIndex(strSymbols, chrSymbols) {
        var index = -1, length = strSymbols.length;
        while(++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */ function charsEndIndex(strSymbols, chrSymbols) {
        var index = strSymbols.length;
        while((index--) && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1);
        return index;
    }
    /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */ function countHolders(array, placeholder) {
        var length = array.length, result = 0;
        while(length--)if (array[length] === placeholder) ++result;
        return result;
    }
    /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */ var deburrLetter = basePropertyOf(deburredLetters);
    /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ var escapeHtmlChar = basePropertyOf(htmlEscapes);
    /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */ function escapeStringChar(chr) {
        return '\\' + stringEscapes[chr];
    }
    /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */ function getValue(object, key) {
        return object == null ? undefined : object[key];
    }
    /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */ function hasUnicode(string) {
        return reHasUnicode.test(string);
    }
    /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */ function hasUnicodeWord(string) {
        return reHasUnicodeWord.test(string);
    }
    /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */ function iteratorToArray(iterator) {
        var data, result = [];
        while(!(data = iterator.next()).done)result.push(data.value);
        return result;
    }
    /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */ function mapToArray(map) {
        var index = -1, result = Array(map.size);
        map.forEach(function(value, key) {
            result[++index] = [
                key,
                value
            ];
        });
        return result;
    }
    /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */ function overArg(func, transform) {
        return function(arg) {
            return func(transform(arg));
        };
    }
    /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */ function replaceHolders(array, placeholder) {
        var index = -1, length = array.length, resIndex = 0, result = [];
        while(++index < length){
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
                array[index] = PLACEHOLDER;
                result[resIndex++] = index;
            }
        }
        return result;
    }
    /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */ function setToArray(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = value;
        });
        return result;
    }
    /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */ function setToPairs(set) {
        var index = -1, result = Array(set.size);
        set.forEach(function(value) {
            result[++index] = [
                value,
                value
            ];
        });
        return result;
    }
    /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictIndexOf(array, value, fromIndex) {
        var index = fromIndex - 1, length = array.length;
        while(++index < length){
            if (array[index] === value) return index;
        }
        return -1;
    }
    /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */ function strictLastIndexOf(array, value, fromIndex) {
        var index = fromIndex + 1;
        while(index--){
            if (array[index] === value) return index;
        }
        return index;
    }
    /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */ function stringSize(string) {
        return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
    }
    /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function stringToArray(string) {
        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
    }
    /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
   * character of `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the index of the last non-whitespace character.
   */ function trimmedEndIndex(string) {
        var index = string.length;
        while(index-- && reWhitespace.test(string.charAt(index)));
        return index;
    }
    /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */ var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
    /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */ function unicodeSize(string) {
        var result = reUnicode.lastIndex = 0;
        while(reUnicode.test(string))++result;
        return result;
    }
    /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */ function unicodeToArray(string) {
        return string.match(reUnicode) || [];
    }
    /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */ function unicodeWords(string) {
        return string.match(reUnicodeWord) || [];
    }
    /*--------------------------------------------------------------------------*/ /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */ var runInContext1 = function runInContext(context) {
        context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
        /** Built-in constructor references. */ var Array = context.Array, Date = context.Date, Error = context.Error, Function = context.Function, Math = context.Math, Object = context.Object, RegExp = context.RegExp, String = context.String, TypeError = context.TypeError;
        /** Used for built-in method references. */ var arrayProto = Array.prototype, funcProto = Function.prototype, objectProto = Object.prototype;
        /** Used to detect overreaching core-js shims. */ var coreJsData = context['__core-js_shared__'];
        /** Used to resolve the decompiled source of functions. */ var funcToString = funcProto.toString;
        /** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
        /** Used to generate unique IDs. */ var idCounter = 0;
        /** Used to detect methods masquerading as native. */ var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
            return uid ? 'Symbol(src)_1.' + uid : '';
        }();
        /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */ var nativeObjectToString = objectProto.toString;
        /** Used to infer the `Object` constructor. */ var objectCtorString = funcToString.call(Object);
        /** Used to restore the original `_` reference in `_.noConflict`. */ var oldDash = root._;
        /** Used to detect if a method is native. */ var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
        /** Built-in value references. */ var Buffer = moduleExports ? context.Buffer : undefined, Symbol = context.Symbol, Uint8Array = context.Uint8Array, allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined, getPrototype = overArg(Object.getPrototypeOf, Object), objectCreate = Object.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined, symIterator = Symbol ? Symbol.iterator : undefined, symToStringTag = Symbol ? Symbol.toStringTag : undefined;
        var defineProperty = function() {
            try {
                var func = getNative(Object, 'defineProperty');
                func({}, '', {});
                return func;
            } catch (e) {}
        }();
        /** Mocked built-ins. */ var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date && Date.now !== root.Date.now && Date.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
        /* Built-in method references for those with the same name as other `lodash` methods. */ var nativeCeil = Math.ceil, nativeFloor = Math.floor, nativeGetSymbols = Object.getOwnPropertySymbols, nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object.keys, Object), nativeMax = Math.max, nativeMin = Math.min, nativeNow = Date.now, nativeParseInt = context.parseInt, nativeRandom = Math.random, nativeReverse = arrayProto.reverse;
        /* Built-in method references that are verified to be native. */ var DataView = getNative(context, 'DataView'), Map = getNative(context, 'Map'), Promise = getNative(context, 'Promise'), Set = getNative(context, 'Set'), WeakMap = getNative(context, 'WeakMap'), nativeCreate = getNative(Object, 'create');
        /** Used to store function metadata. */ var metaMap = WeakMap && new WeakMap;
        /** Used to lookup unminified function names. */ var realNames = {};
        /** Used to detect maps, sets, and weakmaps. */ var dataViewCtorString = toSource(DataView), mapCtorString = toSource(Map), promiseCtorString = toSource(Promise), setCtorString = toSource(Set), weakMapCtorString = toSource(WeakMap);
        /** Used to convert symbols to primitives and strings. */ var symbolProto = Symbol ? Symbol.prototype : undefined, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined, symbolToString = symbolProto ? symbolProto.toString : undefined;
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */ function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
                if (value instanceof LodashWrapper) return value;
                if (hasOwnProperty.call(value, '__wrapped__')) return wrapperClone(value);
            }
            return new LodashWrapper(value);
        }
        /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */ var baseCreate = function() {
            function object() {}
            return function(proto) {
                if (!isObject(proto)) return {};
                if (objectCreate) return objectCreate(proto);
                object.prototype = proto;
                var result = new object;
                object.prototype = undefined;
                return result;
            };
        }();
        /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */ function baseLodash() {
        // No operation performed.
        }
        /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */ function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined;
        }
        /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */ lodash.templateSettings = {
            /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'escape': reEscape,
            /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'evaluate': reEvaluate,
            /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */ 'interpolate': reInterpolate,
            /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */ 'variable': '',
            /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */ 'imports': {
                /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */ '_': lodash
            }
        };
        // Ensure wrappers are instances of `baseLodash`.
        lodash.prototype = baseLodash.prototype;
        lodash.prototype.constructor = lodash;
        LodashWrapper.prototype = baseCreate(baseLodash.prototype);
        LodashWrapper.prototype.constructor = LodashWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */ function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
        }
        /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */ function lazyClone() {
            var result = new LazyWrapper(this.__wrapped__);
            result.__actions__ = copyArray(this.__actions__);
            result.__dir__ = this.__dir__;
            result.__filtered__ = this.__filtered__;
            result.__iteratees__ = copyArray(this.__iteratees__);
            result.__takeCount__ = this.__takeCount__;
            result.__views__ = copyArray(this.__views__);
            return result;
        }
        /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */ function lazyReverse() {
            if (this.__filtered__) {
                var result = new LazyWrapper(this);
                result.__dir__ = -1;
                result.__filtered__ = true;
            } else {
                result = this.clone();
                result.__dir__ *= -1;
            }
            return result;
        }
        /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */ function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) return baseWrapperValue(array, this.__actions__);
            var result = [];
            outer: while((length--) && resIndex < takeCount){
                index += dir;
                var iterIndex = -1, value = array[index];
                while(++iterIndex < iterLength){
                    var data = iteratees[iterIndex], iteratee = data.iteratee, type = data.type, computed = iteratee(value);
                    if (type == LAZY_MAP_FLAG) value = computed;
                    else if (!computed) {
                        if (type == LAZY_FILTER_FLAG) continue outer;
                        else break outer;
                    }
                }
                result[resIndex++] = value;
            }
            return result;
        }
        // Ensure `LazyWrapper` is an instance of `baseLodash`.
        LazyWrapper.prototype = baseCreate(baseLodash.prototype);
        LazyWrapper.prototype.constructor = LazyWrapper;
        /*------------------------------------------------------------------------*/ /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */ function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function hashDelete(key) {
            var result = this.has(key) && delete this.__data__[key];
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
                var result = data[key];
                return result === HASH_UNDEFINED ? undefined : result;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined;
        }
        /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
        }
        /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */ function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
            return this;
        }
        // Add methods to `Hash`.
        Hash.prototype.clear = hashClear;
        Hash.prototype['delete'] = hashDelete;
        Hash.prototype.get = hashGet;
        Hash.prototype.has = hashHas;
        Hash.prototype.set = hashSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */ function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) return false;
            var lastIndex = data.length - 1;
            if (index == lastIndex) data.pop();
            else splice.call(data, index, 1);
            --this.size;
            return true;
        }
        /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined : data[index][1];
        }
        /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
        }
        /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */ function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
                ++this.size;
                data.push([
                    key,
                    value
                ]);
            } else data[index][1] = value;
            return this;
        }
        // Add methods to `ListCache`.
        ListCache.prototype.clear = listCacheClear;
        ListCache.prototype['delete'] = listCacheDelete;
        ListCache.prototype.get = listCacheGet;
        ListCache.prototype.has = listCacheHas;
        ListCache.prototype.set = listCacheSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while(++index < length){
                var entry = entries[index];
                this.set(entry[0], entry[1]);
            }
        }
        /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */ function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
                'hash': new Hash,
                'map': new (Map || ListCache),
                'string': new Hash
            };
        }
        /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function mapCacheDelete(key) {
            var result = getMapData(this, key)['delete'](key);
            this.size -= result ? 1 : 0;
            return result;
        }
        /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function mapCacheGet(key) {
            return getMapData(this, key).get(key);
        }
        /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function mapCacheHas(key) {
            return getMapData(this, key).has(key);
        }
        /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */ function mapCacheSet(key, value) {
            var data = getMapData(this, key), size = data.size;
            data.set(key, value);
            this.size += data.size == size ? 0 : 1;
            return this;
        }
        // Add methods to `MapCache`.
        MapCache.prototype.clear = mapCacheClear;
        MapCache.prototype['delete'] = mapCacheDelete;
        MapCache.prototype.get = mapCacheGet;
        MapCache.prototype.has = mapCacheHas;
        MapCache.prototype.set = mapCacheSet;
        /*------------------------------------------------------------------------*/ /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */ function SetCache(values) {
            var index = -1, length = values == null ? 0 : values.length;
            this.__data__ = new MapCache;
            while(++index < length)this.add(values[index]);
        }
        /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */ function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
        }
        /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */ function setCacheHas(value) {
            return this.__data__.has(value);
        }
        // Add methods to `SetCache`.
        SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
        SetCache.prototype.has = setCacheHas;
        /*------------------------------------------------------------------------*/ /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */ function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
        }
        /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */ function stackClear() {
            this.__data__ = new ListCache;
            this.size = 0;
        }
        /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */ function stackDelete(key) {
            var data = this.__data__, result = data['delete'](key);
            this.size = data.size;
            return result;
        }
        /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */ function stackGet(key) {
            return this.__data__.get(key);
        }
        /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */ function stackHas(key) {
            return this.__data__.has(key);
        }
        /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */ function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
                var pairs = data.__data__;
                if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
                    pairs.push([
                        key,
                        value
                    ]);
                    this.size = ++data.size;
                    return this;
                }
                data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
        }
        // Add methods to `Stack`.
        Stack.prototype.clear = stackClear;
        Stack.prototype['delete'] = stackDelete;
        Stack.prototype.get = stackGet;
        Stack.prototype.has = stackHas;
        Stack.prototype.set = stackSet;
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */ function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
            for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
            (key == 'length' || isBuff && (key == 'offset' || key == 'parent') || isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') || // Skip index properties.
            isIndex(key, length)))) result.push(key);
            return result;
        }
        /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */ function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined;
        }
        /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
        }
        /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
        }
        /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignMergeValue(object, key, value) {
            if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) baseAssignValue(object, key, value);
        }
        /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */ function assocIndexOf(array, key) {
            var length = array.length;
            while(length--){
                if (eq(array[length][0], key)) return length;
            }
            return -1;
        }
        /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */ function baseAggregator(collection3, setter, iteratee, accumulator) {
            baseEach(collection3, function(value, key, collection) {
                setter(accumulator, value, iteratee(value), collection);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
        }
        /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */ function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
        }
        /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */ function baseAssignValue(object, key, value) {
            if (key == '__proto__' && defineProperty) defineProperty(object, key, {
                'configurable': true,
                'enumerable': true,
                'value': value,
                'writable': true
            });
            else object[key] = value;
        }
        /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */ function baseAt(object, paths) {
            var index = -1, length = paths.length, result = Array(length), skip = object == null;
            while(++index < length)result[index] = skip ? undefined : get(object, paths[index]);
            return result;
        }
        /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */ function baseClamp(number, lower, upper) {
            if (number === number) {
                if (upper !== undefined) number = number <= upper ? number : upper;
                if (lower !== undefined) number = number >= lower ? number : lower;
            }
            return number;
        }
        /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */ function baseClone(value, bitmask, customizer, key1, object, stack) {
            var result, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) result = object ? customizer(value, key1, object, stack) : customizer(value);
            if (result !== undefined) return result;
            if (!isObject(value)) return value;
            var isArr = isArray(value);
            if (isArr) {
                result = initCloneArray(value);
                if (!isDeep) return copyArray(value, result);
            } else {
                var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
                if (isBuffer(value)) return cloneBuffer(value, isDeep);
                if (tag == objectTag || tag == argsTag || isFunc && !object) {
                    result = isFlat || isFunc ? {} : initCloneObject(value);
                    if (!isDeep) return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
                } else {
                    if (!cloneableTags[tag]) return object ? value : {};
                    result = initCloneByTag(value, tag, isDeep);
                }
            }
            // Check for circular references and return its corresponding clone.
            stack || (stack = new Stack);
            var stacked = stack.get(value);
            if (stacked) return stacked;
            stack.set(value, result);
            if (isSet(value)) value.forEach(function(subValue) {
                result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
            });
            else if (isMap(value)) value.forEach(function(subValue, key) {
                result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined : keysFunc(value);
            arrayEach(props || value, function(subValue, key) {
                if (props) {
                    key = subValue;
                    subValue = value[key];
                }
                // Recursively populate clone (susceptible to call stack limits).
                assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
            });
            return result;
        }
        /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */ function baseConforms(source) {
            var props = keys(source);
            return function(object) {
                return baseConformsTo(object, source, props);
            };
        }
        /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */ function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) return !length;
            object = Object(object);
            while(length--){
                var key = props[length], predicate = source[key], value = object[key];
                if (value === undefined && !(key in object) || !predicate(value)) return false;
            }
            return true;
        }
        /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ function baseDelay(func, wait, args) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            return setTimeout(function() {
                func.apply(undefined, args);
            }, wait);
        }
        /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */ function baseDifference(array, values, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, isCommon = true, length = array.length, result = [], valuesLength = values.length;
            if (!length) return result;
            if (iteratee) values = arrayMap(values, baseUnary(iteratee));
            if (comparator) {
                includes = arrayIncludesWith;
                isCommon = false;
            } else if (values.length >= LARGE_ARRAY_SIZE) {
                includes = cacheHas;
                isCommon = false;
                values = new SetCache(values);
            }
            outer: while(++index < length){
                var value = array[index], computed = iteratee == null ? value : iteratee(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var valuesIndex = valuesLength;
                    while(valuesIndex--){
                        if (values[valuesIndex] === computed) continue outer;
                    }
                    result.push(value);
                } else if (!includes(values, computed, comparator)) result.push(value);
            }
            return result;
        }
        /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEach = createBaseEach(baseForOwn);
        /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */ var baseEachRight = createBaseEach(baseForOwnRight, true);
        /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */ function baseEvery(collection4, predicate) {
            var result = true;
            baseEach(collection4, function(value, index, collection) {
                result = !!predicate(value, index, collection);
                return result;
            });
            return result;
        }
        /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */ function baseExtremum(array, iteratee, comparator) {
            var index = -1, length = array.length;
            while(++index < length){
                var value = array[index], current = iteratee(value);
                if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) var computed = current, result = value;
            }
            return result;
        }
        /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */ function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end === undefined || end > length ? length : toInteger(end);
            if (end < 0) end += length;
            end = start > end ? 0 : toLength(end);
            while(start < end)array[start++] = value;
            return array;
        }
        /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */ function baseFilter(collection5, predicate) {
            var result = [];
            baseEach(collection5, function(value, index, collection) {
                if (predicate(value, index, collection)) result.push(value);
            });
            return result;
        }
        /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */ function baseFlatten(array, depth, predicate, isStrict, result) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result || (result = []);
            while(++index < length){
                var value = array[index];
                if (depth > 0 && predicate(value)) {
                    if (depth > 1) // Recursively flatten arrays (susceptible to call stack limits).
                    baseFlatten(value, depth - 1, predicate, isStrict, result);
                    else arrayPush(result, value);
                } else if (!isStrict) result[result.length] = value;
            }
            return result;
        }
        /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseFor = createBaseFor();
        /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */ var baseForRight = createBaseFor(true);
        /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwn(object, iteratee) {
            return object && baseFor(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */ function baseForOwnRight(object, iteratee) {
            return object && baseForRight(object, iteratee, keys);
        }
        /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */ function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
                return isFunction(object[key]);
            });
        }
        /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */ function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while(object != null && index < length)object = object[toKey(path[index++])];
            return index && index == length ? object : undefined;
        }
        /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */ function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result = keysFunc(object);
            return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
        }
        /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ function baseGetTag(value) {
            if (value == null) return value === undefined ? undefinedTag : nullTag;
            return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
        }
        /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */ function baseGt(value, other) {
            return value > other;
        }
        /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
        }
        /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */ function baseHasIn(object, key) {
            return object != null && key in Object(object);
        }
        /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */ function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
        }
        /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */ function baseIntersection(arrays, iteratee, comparator) {
            var includes = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array(othLength), maxLength = Infinity, result = [];
            while(othIndex--){
                var array = arrays[othIndex];
                if (othIndex && iteratee) array = arrayMap(array, baseUnary(iteratee));
                maxLength = nativeMin(array.length, maxLength);
                caches[othIndex] = !comparator && (iteratee || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer: while(++index < length && result.length < maxLength){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes(result, computed, comparator))) {
                    othIndex = othLength;
                    while(--othIndex){
                        var cache = caches[othIndex];
                        if (!(cache ? cacheHas(cache, computed) : includes(arrays[othIndex], computed, comparator))) continue outer;
                    }
                    if (seen) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */ function baseInverter(object1, setter, iteratee, accumulator) {
            baseForOwn(object1, function(value, key, object) {
                setter(accumulator, iteratee(value), key, object);
            });
            return accumulator;
        }
        /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */ function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent1(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined : apply(func, object, args);
        }
        /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */ function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
        }
        /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */ function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
        }
        /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */ function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
        }
        /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */ function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) return true;
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) return value !== value && other !== other;
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
        }
        /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
                if (!isBuffer(other)) return false;
                objIsArr = true;
                objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
                stack || (stack = new Stack);
                return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
                var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'), othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');
                if (objIsWrapped || othIsWrapped) {
                    var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                    stack || (stack = new Stack);
                    return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
                }
            }
            if (!isSameTag) return false;
            stack || (stack = new Stack);
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
        }
        /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */ function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
        }
        /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */ function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) return !length;
            object = Object(object);
            while(index--){
                var data = matchData[index];
                if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) return false;
            }
            while(++index < length){
                data = matchData[index];
                var key = data[0], objValue = object[key], srcValue = data[1];
                if (noCustomizer && data[2]) {
                    if (objValue === undefined && !(key in object)) return false;
                } else {
                    var stack = new Stack;
                    if (customizer) var result = customizer(objValue, srcValue, key, object, source, stack);
                    if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) return false;
                }
            }
            return true;
        }
        /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */ function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) return false;
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
        }
        /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */ function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
        }
        /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */ function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
        }
        /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */ function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
        }
        /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */ function baseIteratee(value) {
            // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
            // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
            if (typeof value == 'function') return value;
            if (value == null) return identity;
            if (typeof value == 'object') return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            return property(value);
        }
        /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeys(object) {
            if (!isPrototype(object)) return nativeKeys(object);
            var result = [];
            for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function baseKeysIn(object) {
            if (!isObject(object)) return nativeKeysIn(object);
            var isProto = isPrototype(object), result = [];
            for(var key in object)if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) result.push(key);
            return result;
        }
        /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */ function baseLt(value, other) {
            return value < other;
        }
        /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */ function baseMap(collection6, iteratee) {
            var index = -1, result = isArrayLike(collection6) ? Array(collection6.length) : [];
            baseEach(collection6, function(value, key, collection) {
                result[++index] = iteratee(value, key, collection);
            });
            return result;
        }
        /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            return function(object) {
                return object === source || baseIsMatch(object, source, matchData);
            };
        }
        /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) return matchesStrictComparable(toKey(path), srcValue);
            return function(object) {
                var objValue = get(object, path);
                return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
        }
        /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) return;
            baseFor(source, function(srcValue, key) {
                stack || (stack = new Stack);
                if (isObject(srcValue)) baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
                else {
                    var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
                    if (newValue === undefined) newValue = srcValue;
                    assignMergeValue(object, key, newValue);
                }
            }, keysIn);
        }
        /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */ function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
                assignMergeValue(object, key, stacked);
                return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;
            var isCommon = newValue === undefined;
            if (isCommon) {
                var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
                newValue = srcValue;
                if (isArr || isBuff || isTyped) {
                    if (isArray(objValue)) newValue = objValue;
                    else if (isArrayLikeObject(objValue)) newValue = copyArray(objValue);
                    else if (isBuff) {
                        isCommon = false;
                        newValue = cloneBuffer(srcValue, true);
                    } else if (isTyped) {
                        isCommon = false;
                        newValue = cloneTypedArray(srcValue, true);
                    } else newValue = [];
                } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                    newValue = objValue;
                    if (isArguments(objValue)) newValue = toPlainObject(objValue);
                    else if (!isObject(objValue) || isFunction(objValue)) newValue = initCloneObject(srcValue);
                } else isCommon = false;
            }
            if (isCommon) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, newValue);
                mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
                stack['delete'](srcValue);
            }
            assignMergeValue(object, key, newValue);
        }
        /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */ function baseNth(array, n) {
            var length = array.length;
            if (!length) return;
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined;
        }
        /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */ function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) iteratees = arrayMap(iteratees, function(iteratee) {
                if (isArray(iteratee)) return function(value) {
                    return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);
                };
                return iteratee;
            });
            else iteratees = [
                identity
            ];
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result = baseMap(collection, function(value, key, collection) {
                var criteria = arrayMap(iteratees, function(iteratee) {
                    return iteratee(value);
                });
                return {
                    'criteria': criteria,
                    'index': ++index,
                    'value': value
                };
            });
            return baseSortBy(result, function(object, other) {
                return compareMultiple(object, other, orders);
            });
        }
        /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */ function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
                return hasIn(object, path);
            });
        }
        /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */ function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result = {};
            while(++index < length){
                var path = paths[index], value = baseGet(object, path);
                if (predicate(value, path)) baseSet(result, castPath(path, object), value);
            }
            return result;
        }
        /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */ function basePropertyDeep(path) {
            return function(object) {
                return baseGet(object, path);
            };
        }
        /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */ function basePullAll(array, values, iteratee, comparator) {
            var indexOf = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values.length, seen = array;
            if (array === values) values = copyArray(values);
            if (iteratee) seen = arrayMap(array, baseUnary(iteratee));
            while(++index < length){
                var fromIndex = 0, value = values[index], computed = iteratee ? iteratee(value) : value;
                while((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1){
                    if (seen !== array) splice.call(seen, fromIndex, 1);
                    splice.call(array, fromIndex, 1);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */ function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while(length--){
                var index = indexes[length];
                if (length == lastIndex || index !== previous) {
                    var previous = index;
                    if (isIndex(index)) splice.call(array, index, 1);
                    else baseUnset(array, index);
                }
            }
            return array;
        }
        /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */ function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
        }
        /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */ function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result = Array(length);
            while(length--){
                result[fromRight ? length : ++index] = start;
                start += step;
            }
            return result;
        }
        /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */ function baseRepeat(string, n) {
            var result = '';
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) return result;
            // Leverage the exponentiation by squaring algorithm for a faster repeat.
            // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
            do {
                if (n % 2) result += string;
                n = nativeFloor(n / 2);
                if (n) string += string;
            }while (n)
            return result;
        }
        /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */ function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + '');
        }
        /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */ function baseSample(collection) {
            return arraySample(values1(collection));
        }
        /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */ function baseSampleSize(collection, n) {
            var array = values1(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
        }
        /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseSet(object, path, value, customizer) {
            if (!isObject(object)) return object;
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while(nested != null && ++index < length){
                var key = toKey(path[index]), newValue = value;
                if (key === '__proto__' || key === 'constructor' || key === 'prototype') return object;
                if (index != lastIndex) {
                    var objValue = nested[key];
                    newValue = customizer ? customizer(objValue, key, nested) : undefined;
                    if (newValue === undefined) newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
                assignValue(nested, key, newValue);
                nested = nested[key];
            }
            return object;
        }
        /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
        };
        /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, 'toString', {
                'configurable': true,
                'enumerable': false,
                'value': constant(string),
                'writable': true
            });
        };
        /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */ function baseShuffle(collection) {
            return shuffleSelf(values1(collection));
        }
        /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) start = -start > length ? 0 : length + start;
            end = end > length ? length : end;
            if (end < 0) end += length;
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result = Array(length);
            while(++index < length)result[index] = array[index + start];
            return result;
        }
        /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */ function baseSome(collection7, predicate) {
            var result;
            baseEach(collection7, function(value, index, collection) {
                result = predicate(value, index, collection);
                return !result;
            });
            return !!result;
        }
        /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
                while(low < high){
                    var mid = low + high >>> 1, computed = array[mid];
                    if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) low = mid + 1;
                    else high = mid;
                }
                return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
        }
        /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */ function baseSortedIndexBy(array, value, iteratee, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) return 0;
            value = iteratee(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined;
            while(low < high){
                var mid = nativeFloor((low + high) / 2), computed = iteratee(array[mid]), othIsDefined = computed !== undefined, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
                if (valIsNaN) var setLow = retHighest || othIsReflexive;
                else if (valIsUndefined) setLow = othIsReflexive && (retHighest || othIsDefined);
                else if (valIsNull) setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
                else if (valIsSymbol) setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
                else if (othIsNull || othIsSymbol) setLow = false;
                else setLow = retHighest ? computed <= value : computed < value;
                if (setLow) low = mid + 1;
                else high = mid;
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
        }
        /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseSortedUniq(array, iteratee) {
            var index = -1, length = array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                if (!index || !eq(computed, seen)) {
                    var seen = computed;
                    result[resIndex++] = value === 0 ? 0 : value;
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */ function baseToNumber(value) {
            if (typeof value == 'number') return value;
            if (isSymbol(value)) return NAN;
            return +value;
        }
        /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */ function baseToString(value) {
            // Exit early for strings to avoid a performance hit in some environments.
            if (typeof value == 'string') return value;
            if (isArray(value)) // Recursively convert values (susceptible to call stack limits).
            return arrayMap(value, baseToString) + '';
            if (isSymbol(value)) return symbolToString ? symbolToString.call(value) : '';
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */ function baseUniq(array, iteratee, comparator) {
            var index = -1, includes = arrayIncludes, length = array.length, isCommon = true, result = [], seen = result;
            if (comparator) {
                isCommon = false;
                includes = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
                var set = iteratee ? null : createSet(array);
                if (set) return setToArray(set);
                isCommon = false;
                includes = cacheHas;
                seen = new SetCache;
            } else seen = iteratee ? [] : result;
            outer: while(++index < length){
                var value = array[index], computed = iteratee ? iteratee(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                    var seenIndex = seen.length;
                    while(seenIndex--){
                        if (seen[seenIndex] === computed) continue outer;
                    }
                    if (iteratee) seen.push(computed);
                    result.push(value);
                } else if (!includes(seen, computed, comparator)) {
                    if (seen !== result) seen.push(computed);
                    result.push(value);
                }
            }
            return result;
        }
        /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */ function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent1(object, path);
            return object == null || delete object[toKey(last(path))];
        }
        /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */ function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
        }
        /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */ function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while((fromRight ? index-- : ++index < length) && predicate(array[index], index, array));
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
        }
        /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */ function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) result2 = result2.value();
            return arrayReduce(actions, function(result, action) {
                return action.func.apply(action.thisArg, arrayPush([
                    result
                ], action.args));
            }, result2);
        }
        /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */ function baseXor(arrays, iteratee, comparator) {
            var length = arrays.length;
            if (length < 2) return length ? baseUniq(arrays[0]) : [];
            var index = -1, result = Array(length);
            while(++index < length){
                var array = arrays[index], othIndex = -1;
                while(++othIndex < length)if (othIndex != index) result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
            return baseUniq(baseFlatten(result, 1), iteratee, comparator);
        }
        /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */ function baseZipObject(props, values, assignFunc) {
            var index = -1, length = props.length, valsLength = values.length, result = {};
            while(++index < length){
                var value = index < valsLength ? values[index] : undefined;
                assignFunc(result, props[index], value);
            }
            return result;
        }
        /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */ function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
        }
        /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */ function castFunction(value) {
            return typeof value == 'function' ? value : identity;
        }
        /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */ function castPath(value, object) {
            if (isArray(value)) return value;
            return isKey(value, object) ? [
                value
            ] : stringToPath(toString(value));
        }
        /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ var castRest = baseRest;
        /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */ function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
        }
        /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */ var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
        };
        /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */ function cloneBuffer(buffer, isDeep) {
            if (isDeep) return buffer.slice();
            var length = buffer.length, result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result);
            return result;
        }
        /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */ function cloneArrayBuffer(arrayBuffer) {
            var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array(result).set(new Uint8Array(arrayBuffer));
            return result;
        }
        /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */ function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
        }
        /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */ function cloneRegExp(regexp) {
            var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result.lastIndex = regexp.lastIndex;
            return result;
        }
        /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */ function cloneSymbol(symbol) {
            return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
        }
        /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */ function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
        }
        /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */ function compareAscending(value, other) {
            if (value !== other) {
                var valIsDefined = value !== undefined, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
                var othIsDefined = other !== undefined, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
                if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) return 1;
                if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) return -1;
            }
            return 0;
        }
        /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */ function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while(++index < length){
                var result = compareAscending(objCriteria[index], othCriteria[index]);
                if (result) {
                    if (index >= ordersLength) return result;
                    var order = orders[index];
                    return result * (order == 'desc' ? -1 : 1);
                }
            }
            // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
            // that causes it, under certain circumstances, to provide the same value for
            // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
            // for more details.
            //
            // This also ensures a stable sort in V8 and other engines.
            // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
            return object.index - other.index;
        }
        /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(leftLength + rangeLength), isUncurried = !isCurried;
            while(++leftIndex < leftLength)result[leftIndex] = partials[leftIndex];
            while(++argsIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[holders[argsIndex]] = args[argsIndex];
            while(rangeLength--)result[leftIndex++] = args[argsIndex++];
            return result;
        }
        /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */ function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result = Array(rangeLength + rightLength), isUncurried = !isCurried;
            while(++argsIndex < rangeLength)result[argsIndex] = args[argsIndex];
            var offset = argsIndex;
            while(++rightIndex < rightLength)result[offset + rightIndex] = partials[rightIndex];
            while(++holdersIndex < holdersLength)if (isUncurried || argsIndex < argsLength) result[offset + holders[holdersIndex]] = args[argsIndex++];
            return result;
        }
        /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */ function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array(length));
            while(++index < length)array[index] = source[index];
            return array;
        }
        /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */ function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while(++index < length){
                var key = props[index];
                var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;
                if (newValue === undefined) newValue = source[key];
                if (isNew) baseAssignValue(object, key, newValue);
                else assignValue(object, key, newValue);
            }
            return object;
        }
        /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
        }
        /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */ function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
        }
        /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */ function createAggregator(setter, initializer) {
            return function(collection, iteratee) {
                var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
                return func(collection, setter, getIteratee(iteratee, 2), accumulator);
            };
        }
        /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */ function createAssigner(assigner) {
            return baseRest(function(object, sources) {
                var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined, guard = length > 2 ? sources[2] : undefined;
                customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;
                if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                    customizer = length < 3 ? undefined : customizer;
                    length = 1;
                }
                object = Object(object);
                while(++index < length){
                    var source = sources[index];
                    if (source) assigner(object, source, index, customizer);
                }
                return object;
            });
        }
        /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee) {
                if (collection == null) return collection;
                if (!isArrayLike(collection)) return eachFunc(collection, iteratee);
                var length = collection.length, index = fromRight ? length : -1, iterable = Object(collection);
                while(fromRight ? index-- : ++index < length){
                    if (iteratee(iterable[index], index, iterable) === false) break;
                }
                return collection;
            };
        }
        /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */ function createBaseFor(fromRight) {
            return function(object, iteratee, keysFunc) {
                var index = -1, iterable = Object(object), props = keysFunc(object), length = props.length;
                while(length--){
                    var key = props[fromRight ? length : ++index];
                    if (iteratee(iterable[key], key, iterable) === false) break;
                }
                return object;
            };
        }
        /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */ function createCaseFirst(methodName) {
            return function(string) {
                string = toString(string);
                var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;
                var chr = strSymbols ? strSymbols[0] : string.charAt(0);
                var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);
                return chr[methodName]() + trailing;
            };
        }
        /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */ function createCompounder(callback) {
            return function(string) {
                return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
            };
        }
        /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */ function createCtor(Ctor) {
            return function() {
                // Use a `switch` statement to work with class constructors. See
                // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
                // for more details.
                var args = arguments;
                switch(args.length){
                    case 0:
                        return new Ctor;
                    case 1:
                        return new Ctor(args[0]);
                    case 2:
                        return new Ctor(args[0], args[1]);
                    case 3:
                        return new Ctor(args[0], args[1], args[2]);
                    case 4:
                        return new Ctor(args[0], args[1], args[2], args[3]);
                    case 5:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                    case 6:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                    case 7:
                        return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
                }
                var thisBinding = baseCreate(Ctor.prototype), result = Ctor.apply(thisBinding, args);
                // Mimic the constructor's `return` behavior.
                // See https://es5.github.io/#x13.2.2 for more details.
                return isObject(result) ? result : thisBinding;
            };
        }
        /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length, placeholder = getHolder(wrapper);
                while(index--)args[index] = arguments[index];
                var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
                length -= holders.length;
                if (length < arity) return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);
                var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                return apply(fn, this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */ function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
                var iterable = Object(collection);
                if (!isArrayLike(collection)) {
                    var iteratee = getIteratee(predicate, 3);
                    collection = keys(collection);
                    predicate = function(key) {
                        return iteratee(iterable[key], key, iterable);
                    };
                }
                var index = findIndexFunc(collection, predicate, fromIndex);
                return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
            };
        }
        /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */ function createFlow(fromRight) {
            return flatRest(function(funcs) {
                var length = funcs.length, index1 = length, prereq = LodashWrapper.prototype.thru;
                if (fromRight) funcs.reverse();
                while(index1--){
                    var func = funcs[index1];
                    if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
                    if (prereq && !wrapper && getFuncName(func) == 'wrapper') var wrapper = new LodashWrapper([], true);
                }
                index1 = wrapper ? index1 : length;
                while(++index1 < length){
                    func = funcs[index1];
                    var funcName = getFuncName(func), data = funcName == 'wrapper' ? getData(func) : undefined;
                    if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                    else wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
                return function() {
                    var args = arguments, value = args[0];
                    if (wrapper && args.length == 1 && isArray(value)) return wrapper.plant(value).value();
                    var index = 0, result = length ? funcs[index].apply(this, args) : value;
                    while(++index < length)result = funcs[index].call(this, result);
                    return result;
                };
            });
        }
        /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined : createCtor(func);
            function wrapper() {
                var length = arguments.length, args = Array(length), index = length;
                while(index--)args[index] = arguments[index];
                if (isCurried) var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
                if (partials) args = composeArgs(args, partials, holders, isCurried);
                if (partialsRight) args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
                length -= holdersCount;
                if (isCurried && length < arity) {
                    var newHolders = replaceHolders(args, placeholder);
                    return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);
                }
                var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
                length = args.length;
                if (argPos) args = reorder(args, argPos);
                else if (isFlip && length > 1) args.reverse();
                if (isAry && ary < length) args.length = ary;
                if (this && this !== root && this instanceof wrapper) fn = Ctor || createCtor(fn);
                return fn.apply(thisBinding, args);
            }
            return wrapper;
        }
        /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */ function createInverter(setter, toIteratee) {
            return function(object, iteratee) {
                return baseInverter(object, setter, toIteratee(iteratee), {});
            };
        }
        /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */ function createMathOperation(operator, defaultValue) {
            return function(value, other) {
                var result;
                if (value === undefined && other === undefined) return defaultValue;
                if (value !== undefined) result = value;
                if (other !== undefined) {
                    if (result === undefined) return other;
                    if (typeof value == 'string' || typeof other == 'string') {
                        value = baseToString(value);
                        other = baseToString(other);
                    } else {
                        value = baseToNumber(value);
                        other = baseToNumber(other);
                    }
                    result = operator(value, other);
                }
                return result;
            };
        }
        /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */ function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
                iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
                return baseRest(function(args) {
                    var thisArg = this;
                    return arrayFunc(iteratees, function(iteratee) {
                        return apply(iteratee, thisArg, args);
                    });
                });
            });
        }
        /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */ function createPadding(length, chars) {
            chars = chars === undefined ? ' ' : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) return charsLength ? baseRepeat(chars, length) : chars;
            var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result), 0, length).join('') : result.slice(0, length);
        }
        /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */ function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
                var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
                while(++leftIndex < leftLength)args[leftIndex] = partials[leftIndex];
                while(argsLength--)args[leftIndex++] = arguments[++argsIndex];
                return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
        }
        /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */ function createRange(fromRight) {
            return function(start, end, step) {
                if (step && typeof step != 'number' && isIterateeCall(start, end, step)) end = step = undefined;
                // Ensure the sign of `-0` is preserved.
                start = toFinite(start);
                if (end === undefined) {
                    end = start;
                    start = 0;
                } else end = toFinite(end);
                step = step === undefined ? start < end ? 1 : -1 : toFinite(step);
                return baseRange(start, end, step, fromRight);
            };
        }
        /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */ function createRelationalOperation(operator) {
            return function(value, other) {
                if (!(typeof value == 'string' && typeof other == 'string')) {
                    value = toNumber(value);
                    other = toNumber(other);
                }
                return operator(value, other);
            };
        }
        /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined, newHoldersRight = isCurry ? undefined : holders, newPartials = isCurry ? partials : undefined, newPartialsRight = isCurry ? undefined : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            var newData = [
                func,
                bitmask,
                thisArg,
                newPartials,
                newHolders,
                newPartialsRight,
                newHoldersRight,
                argPos,
                ary,
                arity
            ];
            var result = wrapFunc.apply(undefined, newData);
            if (isLaziable(func)) setData(result, newData);
            result.placeholder = placeholder;
            return setWrapToString(result, func, bitmask);
        }
        /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */ function createRound(methodName) {
            var func = Math[methodName];
            return function(number, precision) {
                number = toNumber(number);
                precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
                if (precision && nativeIsFinite(number)) {
                    // Shift with exponential notation to avoid floating-point issues.
                    // See [MDN](https://mdn.io/round#Examples) for more details.
                    var pair = (toString(number) + 'e').split('e'), value = func(pair[0] + 'e' + (+pair[1] + precision));
                    pair = (toString(value) + 'e').split('e');
                    return +(pair[0] + 'e' + (+pair[1] - precision));
                }
                return func(number);
            };
        }
        /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */ var createSet = !(Set && 1 / setToArray(new Set([
            ,
            -0
        ]))[1] == INFINITY) ? noop : function(values) {
            return new Set(values);
        };
        /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */ function createToPairs(keysFunc) {
            return function(object) {
                var tag = getTag(object);
                if (tag == mapTag) return mapToArray(object);
                if (tag == setTag) return setToPairs(object);
                return baseToPairs(object, keysFunc(object));
            };
        }
        /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */ function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            var length = partials ? partials.length : 0;
            if (!length) {
                bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
                partials = holders = undefined;
            }
            ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
            arity = arity === undefined ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
                var partialsRight = partials, holdersRight = holders;
                partials = holders = undefined;
            }
            var data = isBindKey ? undefined : getData(func);
            var newData = [
                func,
                bitmask,
                thisArg,
                partials,
                holders,
                partialsRight,
                holdersRight,
                argPos,
                ary,
                arity
            ];
            if (data) mergeData(newData, data);
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            if (!bitmask || bitmask == WRAP_BIND_FLAG) var result = createBind(func, bitmask, thisArg);
            else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) result = createCurry(func, bitmask, arity);
            else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) result = createPartial(func, bitmask, thisArg, partials);
            else result = createHybrid.apply(undefined, newData);
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result, newData), func, bitmask);
        }
        /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) return srcValue;
            return objValue;
        }
        /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */ function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
                // Recursively merge objects and arrays (susceptible to call stack limits).
                stack.set(srcValue, objValue);
                baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
                stack['delete'](srcValue);
            }
            return objValue;
        }
        /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */ function customOmitClone(value) {
            return isPlainObject(value) ? undefined : value;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */ function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) return false;
            // Check that cyclic values are equal.
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) return arrStacked == other && othStacked == array;
            var index = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache : undefined;
            stack.set(array, other);
            stack.set(other, array);
            // Ignore non-index properties.
            while(++index < arrLength){
                var arrValue = array[index], othValue1 = other[index];
                if (customizer) var compared = isPartial ? customizer(othValue1, arrValue, index, other, array, stack) : customizer(arrValue, othValue1, index, array, other, stack);
                if (compared !== undefined) {
                    if (compared) continue;
                    result = false;
                    break;
                }
                // Recursively compare arrays (susceptible to call stack limits).
                if (seen) {
                    if (!arraySome(other, function(othValue, othIndex) {
                        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) return seen.push(othIndex);
                    })) {
                        result = false;
                        break;
                    }
                } else if (!(arrValue === othValue1 || equalFunc(arrValue, othValue1, bitmask, customizer, stack))) {
                    result = false;
                    break;
                }
            }
            stack['delete'](array);
            stack['delete'](other);
            return result;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch(tag){
                case dataViewTag:
                    if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) return false;
                    object = object.buffer;
                    other = other.buffer;
                case arrayBufferTag:
                    if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) return false;
                    return true;
                case boolTag:
                case dateTag:
                case numberTag:
                    // Coerce booleans to `1` or `0` and dates to milliseconds.
                    // Invalid dates are coerced to `NaN`.
                    return eq(+object, +other);
                case errorTag:
                    return object.name == other.name && object.message == other.message;
                case regexpTag:
                case stringTag:
                    // Coerce regexes to strings and treat strings, primitives and objects,
                    // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
                    // for more details.
                    return object == other + '';
                case mapTag:
                    var convert = mapToArray;
                case setTag:
                    var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                    convert || (convert = setToArray);
                    if (object.size != other.size && !isPartial) return false;
                    // Assume cyclic values are equal.
                    var stacked = stack.get(object);
                    if (stacked) return stacked == other;
                    bitmask |= COMPARE_UNORDERED_FLAG;
                    // Recursively compare objects (susceptible to call stack limits).
                    stack.set(object, other);
                    var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                    stack['delete'](object);
                    return result;
                case symbolTag:
                    if (symbolValueOf) return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
            return false;
        }
        /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */ function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) return false;
            var index = objLength;
            while(index--){
                var key = objProps[index];
                if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) return false;
            }
            // Check that cyclic values are equal.
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) return objStacked == other && othStacked == object;
            var result = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while(++index < objLength){
                key = objProps[index];
                var objValue = object[key], othValue = other[key];
                if (customizer) var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
                // Recursively compare objects (susceptible to call stack limits).
                if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                    result = false;
                    break;
                }
                skipCtor || (skipCtor = key == 'constructor');
            }
            if (result && !skipCtor) {
                var objCtor = object.constructor, othCtor = other.constructor;
                // Non `Object` object instances with different constructors are not equal.
                if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) result = false;
            }
            stack['delete'](object);
            stack['delete'](other);
            return result;
        }
        /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */ function flatRest(func) {
            return setToString(overRest(func, undefined, flatten), func + '');
        }
        /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
        }
        /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */ function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
        }
        /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */ var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
        };
        /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */ function getFuncName(func) {
            var result = func.name + '', array = realNames[result], length = hasOwnProperty.call(realNames, result) ? array.length : 0;
            while(length--){
                var data = array[length], otherFunc = data.func;
                if (otherFunc == null || otherFunc == func) return data.name;
            }
            return result;
        }
        /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */ function getHolder(func) {
            var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
            return object.placeholder;
        }
        /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */ function getIteratee() {
            var result = lodash.iteratee || iteratee1;
            result = result === iteratee1 ? baseIteratee : result;
            return arguments.length ? result(arguments[0], arguments[1]) : result;
        }
        /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */ function getMapData(map, key) {
            var data = map.__data__;
            return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
        }
        /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */ function getMatchData(object) {
            var result = keys(object), length = result.length;
            while(length--){
                var key = result[length], value = object[key];
                result[length] = [
                    key,
                    value,
                    isStrictComparable(value)
                ];
            }
            return result;
        }
        /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */ function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined;
        }
        /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */ function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
                value[symToStringTag] = undefined;
                var unmasked = true;
            } catch (e) {}
            var result = nativeObjectToString.call(value);
            if (unmasked) {
                if (isOwn) value[symToStringTag] = tag;
                else delete value[symToStringTag];
            }
            return result;
        }
        /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) return [];
            object = Object(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
                return propertyIsEnumerable.call(object, symbol);
            });
        };
        /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */ var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result = [];
            while(object){
                arrayPush(result, getSymbols(object));
                object = getPrototype(object);
            }
            return result;
        };
        /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */ var getTag = baseGetTag;
        // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
        if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set) != setTag || WeakMap && getTag(new WeakMap) != weakMapTag) getTag = function(value) {
            var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : undefined, ctorString = Ctor ? toSource(Ctor) : '';
            if (ctorString) switch(ctorString){
                case dataViewCtorString:
                    return dataViewTag;
                case mapCtorString:
                    return mapTag;
                case promiseCtorString:
                    return promiseTag;
                case setCtorString:
                    return setTag;
                case weakMapCtorString:
                    return weakMapTag;
            }
            return result;
        };
        /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */ function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while(++index < length){
                var data = transforms[index], size = data.size;
                switch(data.type){
                    case 'drop':
                        start += size;
                        break;
                    case 'dropRight':
                        end -= size;
                        break;
                    case 'take':
                        end = nativeMin(end, start + size);
                        break;
                    case 'takeRight':
                        start = nativeMax(start, end - size);
                        break;
                }
            }
            return {
                'start': start,
                'end': end
            };
        }
        /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */ function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
        }
        /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */ function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result = false;
            while(++index < length){
                var key = toKey(path[index]);
                if (!(result = object != null && hasFunc(object, key))) break;
                object = object[key];
            }
            if (result || ++index != length) return result;
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
        }
        /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */ function initCloneArray(array) {
            var length = array.length, result = new array.constructor(length);
            // Add properties assigned by `RegExp#exec`.
            if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
                result.index = array.index;
                result.input = array.input;
            }
            return result;
        }
        /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneObject(object) {
            return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
        }
        /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */ function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch(tag){
                case arrayBufferTag:
                    return cloneArrayBuffer(object);
                case boolTag:
                case dateTag:
                    return new Ctor(+object);
                case dataViewTag:
                    return cloneDataView(object, isDeep);
                case float32Tag:
                case float64Tag:
                case int8Tag:
                case int16Tag:
                case int32Tag:
                case uint8Tag:
                case uint8ClampedTag:
                case uint16Tag:
                case uint32Tag:
                    return cloneTypedArray(object, isDeep);
                case mapTag:
                    return new Ctor;
                case numberTag:
                case stringTag:
                    return new Ctor(object);
                case regexpTag:
                    return cloneRegExp(object);
                case setTag:
                    return new Ctor;
                case symbolTag:
                    return cloneSymbol(object);
            }
        }
        /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */ function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) return source;
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
            details = details.join(length > 2 ? ', ' : ' ');
            return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
        }
        /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */ function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
        }
        /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */ function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
        }
        /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */ function isIterateeCall(value, index, object) {
            if (!isObject(object)) return false;
            var type = typeof index;
            if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) return eq(object[index], value);
            return false;
        }
        /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */ function isKey(value, object) {
            if (isArray(value)) return false;
            var type = typeof value;
            if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) return true;
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
        }
        /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */ function isKeyable(value) {
            var type = typeof value;
            return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
        }
        /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */ function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) return false;
            if (func === other) return true;
            var data = getData(other);
            return !!data && func === data[0];
        }
        /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */ function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
        }
        /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */ var isMaskable = coreJsData ? isFunction : stubFalse;
        /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */ function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
            return value === proto;
        }
        /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */ function isStrictComparable(value) {
            return value === value && !isObject(value);
        }
        /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */ function matchesStrictComparable(key, srcValue) {
            return function(object) {
                if (object == null) return false;
                return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
            };
        }
        /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */ function memoizeCapped(func) {
            var result = memoize(func, function(key) {
                if (cache.size === MAX_MEMOIZE_SIZE) cache.clear();
                return key;
            });
            var cache = result.cache;
            return result;
        }
        /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */ function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            // Exit early if metadata can't be merged.
            if (!(isCommon || isCombo)) return data;
            // Use source `thisArg` if available.
            if (srcBitmask & WRAP_BIND_FLAG) {
                data[2] = source[2];
                // Set when currying a bound function.
                newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            // Compose partial arguments.
            var value = source[3];
            if (value) {
                var partials = data[3];
                data[3] = partials ? composeArgs(partials, value, source[4]) : value;
                data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            // Compose partial right arguments.
            value = source[5];
            if (value) {
                partials = data[5];
                data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
                data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            // Use source `argPos` if available.
            value = source[7];
            if (value) data[7] = value;
            // Use source `ary` if it's smaller.
            if (srcBitmask & WRAP_ARY_FLAG) data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            // Use source `arity` if one is not provided.
            if (data[9] == null) data[9] = source[9];
            // Use source `func` and merge bitmasks.
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
        }
        /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */ function nativeKeysIn(object) {
            var result = [];
            if (object != null) for(var key in Object(object))result.push(key);
            return result;
        }
        /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */ function objectToString(value) {
            return nativeObjectToString.call(value);
        }
        /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */ function overRest(func, start, transform) {
            start = nativeMax(start === undefined ? func.length - 1 : start, 0);
            return function() {
                var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array(length);
                while(++index < length)array[index] = args[start + index];
                index = -1;
                var otherArgs = Array(start + 1);
                while(++index < start)otherArgs[index] = args[index];
                otherArgs[start] = transform(array);
                return apply(func, this, otherArgs);
            };
        }
        /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */ function parent1(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
        }
        /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */ function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while(length--){
                var index = indexes[length];
                array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
            }
            return array;
        }
        /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */ function safeGet(object, key) {
            if (key === 'constructor' && typeof object[key] === 'function') return;
            if (key == '__proto__') return;
            return object[key];
        }
        /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */ var setData = shortOut(baseSetData);
        /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */ var setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
        };
        /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */ var setToString = shortOut(baseSetToString);
        /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */ function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + '';
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
        }
        /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */ function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
                var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
                lastCalled = stamp;
                if (remaining > 0) {
                    if (++count >= HOT_COUNT) return arguments[0];
                } else count = 0;
                return func.apply(undefined, arguments);
            };
        }
        /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */ function shuffleSelf(array, size) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size = size === undefined ? length : size;
            while(++index < size){
                var rand = baseRandom(index, lastIndex), value = array[rand];
                array[rand] = array[index];
                array[index] = value;
            }
            array.length = size;
            return array;
        }
        /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */ var stringToPath = memoizeCapped(function(string) {
            var result = [];
            if (string.charCodeAt(0) === 46 /* . */ ) result.push('');
            string.replace(rePropName, function(match, number, quote, subString) {
                result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
            });
            return result;
        });
        /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */ function toKey(value) {
            if (typeof value == 'string' || isSymbol(value)) return value;
            var result = value + '';
            return result == '0' && 1 / value == -INFINITY ? '-0' : result;
        }
        /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */ function toSource(func) {
            if (func != null) {
                try {
                    return funcToString.call(func);
                } catch (e) {}
                try {
                    return func + '';
                } catch (e1) {}
            }
            return '';
        }
        /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */ function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
                var value = '_.' + pair[0];
                if (bitmask & pair[1] && !arrayIncludes(details, value)) details.push(value);
            });
            return details.sort();
        }
        /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */ function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) return wrapper.clone();
            var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result.__actions__ = copyArray(wrapper.__actions__);
            result.__index__ = wrapper.__index__;
            result.__values__ = wrapper.__values__;
            return result;
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */ function chunk(array, size, guard) {
            if (guard ? isIterateeCall(array, size, guard) : size === undefined) size = 1;
            else size = nativeMax(toInteger(size), 0);
            var length = array == null ? 0 : array.length;
            if (!length || size < 1) return [];
            var index = 0, resIndex = 0, result = Array(nativeCeil(length / size));
            while(index < length)result[resIndex++] = baseSlice(array, index, index += size);
            return result;
        }
        /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */ function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
            while(++index < length){
                var value = array[index];
                if (value) result[resIndex++] = value;
            }
            return result;
        }
        /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */ function concat() {
            var length = arguments.length;
            if (!length) return [];
            var args = Array(length - 1), array = arguments[0], index = length;
            while(index--)args[index - 1] = arguments[index];
            return arrayPush(isArray(array) ? copyArray(array) : [
                array
            ], baseFlatten(args, 1));
        }
        /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */ var difference = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var differenceBy = baseRest(function(array, values) {
            var iteratee = last(values);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */ var differenceWith = baseRest(function(array, values) {
            var comparator = last(values);
            if (isArrayLikeObject(comparator)) comparator = undefined;
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator) : [];
        });
        /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */ function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
        }
        /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */ function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
        }
        /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */ function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
                start = 0;
                end = length;
            }
            return baseFill(array, value, start, end);
        }
        /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */ function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseFindIndex(array, getIteratee(predicate, 3), index);
        }
        /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */ function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length - 1;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
        }
        /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */ function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
        }
        /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */ function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
        }
        /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */ function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
        }
        /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */ function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result = {};
            while(++index < length){
                var pair = pairs[index];
                result[pair[0]] = pair[1];
            }
            return result;
        }
        /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */ function head(array) {
            return array && array.length ? array[0] : undefined;
        }
        /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */ function indexOf1(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) index = nativeMax(length + index, 0);
            return baseIndexOf(array, value, index);
        }
        /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */ function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
        }
        /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */ var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */ var intersectionBy = baseRest(function(arrays) {
            var iteratee = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee === last(mapped)) iteratee = undefined;
            else mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee, 2)) : [];
        });
        /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */ var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            if (comparator) mapped.pop();
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];
        });
        /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */ function join(array, separator) {
            return array == null ? '' : nativeJoin.call(array, separator);
        }
        /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */ function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined;
        }
        /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */ function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) return -1;
            var index = length;
            if (fromIndex !== undefined) {
                index = toInteger(fromIndex);
                index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
        }
        /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */ function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined;
        }
        /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */ var pull = baseRest(pullAll);
        /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */ function pullAll(array, values) {
            return array && array.length && values && values.length ? basePullAll(array, values) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */ function pullAllBy(array, values, iteratee) {
            return array && array.length && values && values.length ? basePullAll(array, values, getIteratee(iteratee, 2)) : array;
        }
        /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */ function pullAllWith(array, values, comparator) {
            return array && array.length && values && values.length ? basePullAll(array, values, undefined, comparator) : array;
        }
        /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */ var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
                return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result;
        });
        /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */ function remove(array, predicate) {
            var result = [];
            if (!(array && array.length)) return result;
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while(++index < length){
                var value = array[index];
                if (predicate(value, index, array)) {
                    result.push(value);
                    indexes.push(index);
                }
            }
            basePullAt(array, indexes);
            return result;
        }
        /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
        }
        /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */ function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
                start = 0;
                end = length;
            } else {
                start = start == null ? 0 : toInteger(start);
                end = end === undefined ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
        }
        /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */ function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
        }
        /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */ function sortedIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
        }
        /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */ function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value);
                if (index < length && eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */ function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
        }
        /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */ function sortedLastIndexBy(array, value, iteratee) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
        }
        /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */ function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
                var index = baseSortedIndex(array, value, true) - 1;
                if (eq(array[index], value)) return index;
            }
            return -1;
        }
        /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */ function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
        }
        /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */ function sortedUniqBy(array, iteratee) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */ function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */ function take(array, n, guard) {
            if (!(array && array.length)) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
        }
        /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */ function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) return [];
            n = guard || n === undefined ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
        }
        /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */ function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
        }
        /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */ function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
        }
        /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */ var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
        });
        /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ var unionBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
        });
        /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */ function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */ function uniqBy(array, iteratee) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee, 2)) : [];
        }
        /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */ function uniqWith(array, comparator) {
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return array && array.length ? baseUniq(array, undefined, comparator) : [];
        }
        /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */ function unzip(array) {
            if (!(array && array.length)) return [];
            var length = 0;
            array = arrayFilter(array, function(group) {
                if (isArrayLikeObject(group)) {
                    length = nativeMax(group.length, length);
                    return true;
                }
            });
            return baseTimes(length, function(index) {
                return arrayMap(array, baseProperty(index));
            });
        }
        /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */ function unzipWith(array, iteratee) {
            if (!(array && array.length)) return [];
            var result = unzip(array);
            if (iteratee == null) return result;
            return arrayMap(result, function(group) {
                return apply(iteratee, undefined, group);
            });
        }
        /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */ var without = baseRest(function(array, values) {
            return isArrayLikeObject(array) ? baseDifference(array, values) : [];
        });
        /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */ var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
        });
        /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */ var xorBy = baseRest(function(arrays) {
            var iteratee = last(arrays);
            if (isArrayLikeObject(iteratee)) iteratee = undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
        });
        /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */ var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == 'function' ? comparator : undefined;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
        });
        /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */ var zip = baseRest(unzip);
        /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */ function zipObject(props, values) {
            return baseZipObject(props || [], values || [], assignValue);
        }
        /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */ function zipObjectDeep(props, values) {
            return baseZipObject(props || [], values || [], baseSet);
        }
        /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */ var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee = length > 1 ? arrays[length - 1] : undefined;
            iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
            return unzipWith(arrays, iteratee);
        });
        /*------------------------------------------------------------------------*/ /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */ function chain1(value) {
            var result = lodash(value);
            result.__chain__ = true;
            return result;
        }
        /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */ function tap(value, interceptor) {
            interceptor(value);
            return value;
        }
        /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */ function thru(value, interceptor) {
            return interceptor(value);
        }
        /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */ var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
                return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) return this.thru(interceptor);
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
                'func': thru,
                'args': [
                    interceptor
                ],
                'thisArg': undefined
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
                if (length && !array.length) array.push(undefined);
                return array;
            });
        });
        /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */ function wrapperChain() {
            return chain1(this);
        }
        /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */ function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
        }
        /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */ function wrapperNext() {
            if (this.__values__ === undefined) this.__values__ = toArray(this.value());
            var done = this.__index__ >= this.__values__.length, value = done ? undefined : this.__values__[this.__index__++];
            return {
                'done': done,
                'value': value
            };
        }
        /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */ function wrapperToIterator() {
            return this;
        }
        /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */ function wrapperPlant(value) {
            var result, parent = this;
            while(parent instanceof baseLodash){
                var clone = wrapperClone(parent);
                clone.__index__ = 0;
                clone.__values__ = undefined;
                if (result) previous.__wrapped__ = clone;
                else result = clone;
                var previous = clone;
                parent = parent.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result;
        }
        /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */ function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
                var wrapped = value;
                if (this.__actions__.length) wrapped = new LazyWrapper(this);
                wrapped = wrapped.reverse();
                wrapped.__actions__.push({
                    'func': thru,
                    'args': [
                        reverse
                    ],
                    'thisArg': undefined
                });
                return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
        }
        /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */ function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
        }
        /*------------------------------------------------------------------------*/ /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */ var countBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) ++result[key];
            else baseAssignValue(result, key, 1);
        });
        /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */ function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */ function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */ var find = createFind(findIndex);
        /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */ var findLast = createFind(findLastIndex);
        /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMap(collection, iteratee) {
            return baseFlatten(map1(collection, iteratee), 1);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */ function flatMapDeep(collection, iteratee) {
            return baseFlatten(map1(collection, iteratee), INFINITY);
        }
        /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */ function flatMapDepth(collection, iteratee, depth) {
            depth = depth === undefined ? 1 : toInteger(depth);
            return baseFlatten(map1(collection, iteratee), depth);
        }
        /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forEach(collection, iteratee) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */ function forEachRight(collection, iteratee) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */ var groupBy = createAggregator(function(result, value, key) {
            if (hasOwnProperty.call(result, key)) result[key].push(value);
            else baseAssignValue(result, key, [
                value
            ]);
        });
        /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */ function includes1(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values1(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) fromIndex = nativeMax(length + fromIndex, 0);
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
        }
        /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */ var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == 'function', result = isArrayLike(collection) ? Array(collection.length) : [];
            baseEach(collection, function(value) {
                result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result;
        });
        /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */ var keyBy = createAggregator(function(result, value, key) {
            baseAssignValue(result, key, value);
        });
        /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */ function map1(collection, iteratee) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */ function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) return [];
            if (!isArray(iteratees)) iteratees = iteratees == null ? [] : [
                iteratees
            ];
            orders = guard ? undefined : orders;
            if (!isArray(orders)) orders = orders == null ? [] : [
                orders
            ];
            return baseOrderBy(collection, iteratees, orders);
        }
        /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */ var partition = createAggregator(function(result, value, key) {
            result[key ? 0 : 1].push(value);
        }, function() {
            return [
                [],
                []
            ];
        });
        /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */ function reduce(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
        }
        /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */ function reduceRight(collection, iteratee, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
        }
        /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */ function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
        }
        /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */ function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
        }
        /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */ function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
        }
        /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */ function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
        }
        /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */ function size1(collection) {
            if (collection == null) return 0;
            if (isArrayLike(collection)) return isString(collection) ? stringSize(collection) : collection.length;
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) return collection.size;
            return baseKeys(collection).length;
        }
        /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */ function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) predicate = undefined;
            return func(collection, getIteratee(predicate, 3));
        }
        /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 30 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]
     */ var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) return [];
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) iteratees = [];
            else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) iteratees = [
                iteratees[0]
            ];
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
        });
        /*------------------------------------------------------------------------*/ /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */ var now = ctxNow || function() {
            return root.Date.now();
        };
        /*------------------------------------------------------------------------*/ /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */ function after(n, func) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n < 1) return func.apply(this, arguments);
            };
        }
        /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */ function ary1(func, n, guard) {
            n = guard ? undefined : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
        }
        /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */ function before(n, func) {
            var result;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            n = toInteger(n);
            return function() {
                if (--n > 0) result = func.apply(this, arguments);
                if (n <= 1) func = undefined;
                return result;
            };
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */ var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bind));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
        });
        /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */ var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
                var holders = replaceHolders(partials, getHolder(bindKey));
                bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
        });
        /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */ function curry(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curry.placeholder;
            return result;
        }
        /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */ function curryRight(func, arity, guard) {
            arity = guard ? undefined : arity;
            var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
            result.placeholder = curryRight.placeholder;
            return result;
        }
        /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */ function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
                leading = !!options.leading;
                maxing = 'maxWait' in options;
                maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
                var args = lastArgs, thisArg = lastThis;
                lastArgs = lastThis = undefined;
                lastInvokeTime = time;
                result = func.apply(thisArg, args);
                return result;
            }
            function leadingEdge(time) {
                // Reset any `maxWait` timer.
                lastInvokeTime = time;
                // Start the timer for the trailing edge.
                timerId = setTimeout(timerExpired, wait);
                // Invoke the leading edge.
                return leading ? invokeFunc(time) : result;
            }
            function remainingWait(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
                return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
                var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
                // Either this is the first call, activity has stopped and we're at the
                // trailing edge, the system time has gone backwards and we're treating
                // it as the trailing edge, or we've hit the `maxWait` limit.
                return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
                var time = now();
                if (shouldInvoke(time)) return trailingEdge(time);
                // Restart the timer.
                timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
                timerId = undefined;
                // Only invoke if we have `lastArgs` which means `func` has been
                // debounced at least once.
                if (trailing && lastArgs) return invokeFunc(time);
                lastArgs = lastThis = undefined;
                return result;
            }
            function cancel() {
                if (timerId !== undefined) clearTimeout(timerId);
                lastInvokeTime = 0;
                lastArgs = lastCallTime = lastThis = timerId = undefined;
            }
            function flush() {
                return timerId === undefined ? result : trailingEdge(now());
            }
            function debounced() {
                var time = now(), isInvoking = shouldInvoke(time);
                lastArgs = arguments;
                lastThis = this;
                lastCallTime = time;
                if (isInvoking) {
                    if (timerId === undefined) return leadingEdge(lastCallTime);
                    if (maxing) {
                        // Handle invocations in a tight loop.
                        clearTimeout(timerId);
                        timerId = setTimeout(timerExpired, wait);
                        return invokeFunc(lastCallTime);
                    }
                }
                if (timerId === undefined) timerId = setTimeout(timerExpired, wait);
                return result;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
        }
        /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */ var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
        });
        /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */ var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
        });
        /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */ function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
        }
        /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */ function memoize(func, resolver) {
            if (typeof func != 'function' || resolver != null && typeof resolver != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            var memoized = function() {
                var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
                if (cache.has(key)) return cache.get(key);
                var result = func.apply(this, args);
                memoized.cache = cache.set(key, result) || cache;
                return result;
            };
            memoized.cache = new (memoize.Cache || MapCache);
            return memoized;
        }
        // Expose `MapCache`.
        memoize.Cache = MapCache;
        /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */ function negate(predicate) {
            if (typeof predicate != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            return function() {
                var args = arguments;
                switch(args.length){
                    case 0:
                        return !predicate.call(this);
                    case 1:
                        return !predicate.call(this, args[0]);
                    case 2:
                        return !predicate.call(this, args[0], args[1]);
                    case 3:
                        return !predicate.call(this, args[0], args[1], args[2]);
                }
                return !predicate.apply(this, args);
            };
        }
        /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */ function once(func) {
            return before(2, func);
        }
        /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */ var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
                var index = -1, length = nativeMin(args.length, funcsLength);
                while(++index < length)args[index] = transforms[index].call(this, args[index]);
                return apply(func, this, args);
            });
        });
        /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */ var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
        });
        /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */ var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
        });
        /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */ var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
        });
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */ function rest(func, start) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            start = start === undefined ? start : toInteger(start);
            return baseRest(func, start);
        }
        /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */ function spread(func, start) {
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
                var array = args[start], otherArgs = castSlice(args, 0, start);
                if (array) arrayPush(otherArgs, array);
                return apply(func, this, otherArgs);
            });
        }
        /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */ function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != 'function') throw new TypeError(FUNC_ERROR_TEXT);
            if (isObject(options)) {
                leading = 'leading' in options ? !!options.leading : leading;
                trailing = 'trailing' in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
                'leading': leading,
                'maxWait': wait,
                'trailing': trailing
            });
        }
        /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */ function unary(func) {
            return ary1(func, 1);
        }
        /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */ function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */ function castArray() {
            if (!arguments.length) return [];
            var value = arguments[0];
            return isArray(value) ? value : [
                value
            ];
        }
        /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */ function clone1(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */ function cloneWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */ function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
        }
        /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */ function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
        }
        /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */ function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
        }
        /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */ function eq(value, other) {
            return value === other || value !== value && other !== other;
        }
        /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */ var gt = createRelationalOperation(baseGt);
        /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */ var gte = createRelationalOperation(function(value, other) {
            return value >= other;
        });
        /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */ var isArguments = baseIsArguments(function() {
            return arguments;
        }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
        };
        /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */ var isArray = Array.isArray;
        /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */ var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
        /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */ function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
        }
        /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */ function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
        }
        /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */ function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
        }
        /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */ var isBuffer = nativeIsBuffer || stubFalse;
        /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */ var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
        /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */ function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
        }
        /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */ function isEmpty(value) {
            if (value == null) return true;
            if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) return !value.length;
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) return !value.size;
            if (isPrototype(value)) return !baseKeys(value).length;
            for(var key in value){
                if (hasOwnProperty.call(value, key)) return false;
            }
            return true;
        }
        /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */ function isEqual(value, other) {
            return baseIsEqual(value, other);
        }
        /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */ function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            var result = customizer ? customizer(value, other) : undefined;
            return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
        }
        /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */ function isError(value) {
            if (!isObjectLike(value)) return false;
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value);
        }
        /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */ function isFinite(value) {
            return typeof value == 'number' && nativeIsFinite(value);
        }
        /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */ function isFunction(value) {
            if (!isObject(value)) return false;
            // The use of `Object#toString` avoids issues with the `typeof` operator
            // in Safari 9 which returns 'object' for typed arrays and other constructors.
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
        }
        /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */ function isInteger(value) {
            return typeof value == 'number' && value == toInteger(value);
        }
        /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */ function isLength(value) {
            return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */ function isObject(value) {
            var type = typeof value;
            return value != null && (type == 'object' || type == 'function');
        }
        /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */ function isObjectLike(value) {
            return value != null && typeof value == 'object';
        }
        /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */ var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
        /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */ function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
        }
        /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */ function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return baseIsMatch(object, source, getMatchData(source), customizer);
        }
        /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */ function isNaN(value) {
            // An `NaN` primitive is the only value that is not equal to itself.
            // Perform the `toStringTag` check first to avoid errors with some
            // ActiveX objects in IE.
            return isNumber(value) && value != +value;
        }
        /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */ function isNative(value) {
            if (isMaskable(value)) throw new Error(CORE_ERROR_TEXT);
            return baseIsNative(value);
        }
        /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */ function isNull(value) {
            return value === null;
        }
        /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */ function isNil(value) {
            return value == null;
        }
        /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */ function isNumber(value) {
            return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
        }
        /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */ function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) return false;
            var proto = getPrototype(value);
            if (proto === null) return true;
            var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
            return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
        }
        /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */ var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
        /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */ function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
        }
        /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */ var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
        /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */ function isString(value) {
            return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
        }
        /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */ function isSymbol(value) {
            return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
        }
        /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */ var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
        /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */ function isUndefined(value) {
            return value === undefined;
        }
        /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */ function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
        }
        /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */ function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
        }
        /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */ var lt = createRelationalOperation(baseLt);
        /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */ var lte = createRelationalOperation(function(value, other) {
            return value <= other;
        });
        /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */ function toArray(value) {
            if (!value) return [];
            if (isArrayLike(value)) return isString(value) ? stringToArray(value) : copyArray(value);
            if (symIterator && value[symIterator]) return iteratorToArray(value[symIterator]());
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values1;
            return func(value);
        }
        /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */ function toFinite(value) {
            if (!value) return value === 0 ? value : 0;
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
                var sign = value < 0 ? -1 : 1;
                return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
        }
        /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */ function toInteger(value) {
            var result = toFinite(value), remainder = result % 1;
            return result === result ? remainder ? result - remainder : result : 0;
        }
        /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */ function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
        }
        /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */ function toNumber(value) {
            if (typeof value == 'number') return value;
            if (isSymbol(value)) return NAN;
            if (isObject(value)) {
                var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
                value = isObject(other) ? other + '' : other;
            }
            if (typeof value != 'string') return value === 0 ? value : +value;
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
        }
        /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */ function toPlainObject(value) {
            return copyObject(value, keysIn(value));
        }
        /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */ function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
        }
        /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */ function toString(value) {
            return value == null ? '' : baseToString(value);
        }
        /*------------------------------------------------------------------------*/ /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */ var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
                copyObject(source, keys(source), object);
                return;
            }
            for(var key in source)if (hasOwnProperty.call(source, key)) assignValue(object, key, source[key]);
        });
        /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */ var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
        });
        /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
        });
        /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
        });
        /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */ var at = flatRest(baseAt);
        /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */ function create(prototype, properties) {
            var result = baseCreate(prototype);
            return properties == null ? result : baseAssign(result, properties);
        }
        /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */ var defaults = baseRest(function(object, sources) {
            object = Object(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) length = 1;
            while(++index < length){
                var source = sources[index];
                var props = keysIn(source);
                var propsIndex = -1;
                var propsLength = props.length;
                while(++propsIndex < propsLength){
                    var key = props[propsIndex];
                    var value = object[key];
                    if (value === undefined || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) object[key] = source[key];
                }
            }
            return object;
        });
        /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */ var defaultsDeep = baseRest(function(args) {
            args.push(undefined, customDefaultsMerge);
            return apply(mergeWith, undefined, args);
        });
        /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */ function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
        }
        /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */ function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
        }
        /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */ function forIn(object, iteratee) {
            return object == null ? object : baseFor(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */ function forInRight(object, iteratee) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee, 3), keysIn);
        }
        /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */ function forOwn(object, iteratee) {
            return object && baseForOwn(object, getIteratee(iteratee, 3));
        }
        /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */ function forOwnRight(object, iteratee) {
            return object && baseForOwnRight(object, getIteratee(iteratee, 3));
        }
        /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */ function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
        }
        /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */ function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
        }
        /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */ function get(object, path, defaultValue) {
            var result = object == null ? undefined : baseGet(object, path);
            return result === undefined ? defaultValue : result;
        }
        /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */ function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
        }
        /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */ function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
        }
        /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */ var invert = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
            result[value] = key;
        }, constant(identity));
        /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */ var invertBy = createInverter(function(result, value, key) {
            if (value != null && typeof value.toString != 'function') value = nativeObjectToString.call(value);
            if (hasOwnProperty.call(result, value)) result[value].push(key);
            else result[value] = [
                key
            ];
        }, getIteratee);
        /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */ var invoke = baseRest(baseInvoke);
        /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */ function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
        }
        /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */ function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
        }
        /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */ function mapKeys(object2, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object2, function(value, key, object) {
                baseAssignValue(result, iteratee(value, key, object), value);
            });
            return result;
        }
        /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */ function mapValues(object3, iteratee) {
            var result = {};
            iteratee = getIteratee(iteratee, 3);
            baseForOwn(object3, function(value, key, object) {
                baseAssignValue(result, key, iteratee(value, key, object));
            });
            return result;
        }
        /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */ var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
        });
        /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */ var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
        });
        /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */ var omit = flatRest(function(object, paths) {
            var result = {};
            if (object == null) return result;
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
                path = castPath(path, object);
                isDeep || (isDeep = path.length > 1);
                return path;
            });
            copyObject(object, getAllKeysIn(object), result);
            if (isDeep) result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            var length = paths.length;
            while(length--)baseUnset(result, paths[length]);
            return result;
        });
        /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */ function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
        }
        /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */ var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
        });
        /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */ function pickBy(object, predicate) {
            if (object == null) return {};
            var props = arrayMap(getAllKeysIn(object), function(prop) {
                return [
                    prop
                ];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
                return predicate(value, path[0]);
            });
        }
        /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */ function result1(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            // Ensure the loop is entered when path is empty.
            if (!length) {
                length = 1;
                object = undefined;
            }
            while(++index < length){
                var value = object == null ? undefined : object[toKey(path[index])];
                if (value === undefined) {
                    index = length;
                    value = defaultValue;
                }
                object = isFunction(value) ? value.call(object) : value;
            }
            return object;
        }
        /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */ function set1(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
        }
        /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */ function setWith(object, path, value, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseSet(object, path, value, customizer);
        }
        /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */ var toPairs = createToPairs(keys);
        /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */ var toPairsIn = createToPairs(keysIn);
        /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */ function transform1(object4, iteratee, accumulator) {
            var isArr = isArray(object4), isArrLike = isArr || isBuffer(object4) || isTypedArray(object4);
            iteratee = getIteratee(iteratee, 4);
            if (accumulator == null) {
                var Ctor = object4 && object4.constructor;
                if (isArrLike) accumulator = isArr ? new Ctor : [];
                else if (isObject(object4)) accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object4)) : {};
                else accumulator = {};
            }
            (isArrLike ? arrayEach : baseForOwn)(object4, function(value, index, object) {
                return iteratee(accumulator, value, index, object);
            });
            return accumulator;
        }
        /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */ function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
        }
        /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */ function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
        }
        /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */ function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == 'function' ? customizer : undefined;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
        }
        /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */ function values1(object) {
            return object == null ? [] : baseValues(object, keys(object));
        }
        /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */ function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
        }
        /*------------------------------------------------------------------------*/ /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */ function clamp(number, lower, upper) {
            if (upper === undefined) {
                upper = lower;
                lower = undefined;
            }
            if (upper !== undefined) {
                upper = toNumber(upper);
                upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined) {
                lower = toNumber(lower);
                lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
        }
        /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */ function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined) {
                end = start;
                start = 0;
            } else end = toFinite(end);
            number = toNumber(number);
            return baseInRange(number, start, end);
        }
        /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */ function random(lower, upper, floating) {
            if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) upper = floating = undefined;
            if (floating === undefined) {
                if (typeof upper == 'boolean') {
                    floating = upper;
                    upper = undefined;
                } else if (typeof lower == 'boolean') {
                    floating = lower;
                    lower = undefined;
                }
            }
            if (lower === undefined && upper === undefined) {
                lower = 0;
                upper = 1;
            } else {
                lower = toFinite(lower);
                if (upper === undefined) {
                    upper = lower;
                    lower = 0;
                } else upper = toFinite(upper);
            }
            if (lower > upper) {
                var temp = lower;
                lower = upper;
                upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
                var rand = nativeRandom();
                return nativeMin(lower + rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1))), upper);
            }
            return baseRandom(lower, upper);
        }
        /*------------------------------------------------------------------------*/ /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */ var camelCase = createCompounder(function(result, word, index) {
            word = word.toLowerCase();
            return result + (index ? capitalize(word) : word);
        });
        /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */ function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
        }
        /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */ function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
        }
        /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */ function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
        }
        /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */ function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
        }
        /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */ function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, '\\$&') : string;
        }
        /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */ var kebabCase = createCompounder(function(result, word, index) {
            return result + (index ? '-' : '') + word.toLowerCase();
        });
        /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */ var lowerCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + word.toLowerCase();
        });
        /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */ var lowerFirst = createCaseFirst('toLowerCase');
        /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */ function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) return string;
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
        }
        /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */ function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
        }
        /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */ function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
        }
        /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */ function parseInt(string, radix, guard) {
            if (guard || radix == null) radix = 0;
            else if (radix) radix = +radix;
            return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
        }
        /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */ function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined) n = 1;
            else n = toInteger(n);
            return baseRepeat(toString(string), n);
        }
        /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */ function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
        }
        /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */ var snakeCase = createCompounder(function(result, word, index) {
            return result + (index ? '_' : '') + word.toLowerCase();
        });
        /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */ function split(string, separator, limit) {
            if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) separator = limit = undefined;
            limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) return [];
            string = toString(string);
            if (string && (typeof separator == 'string' || separator != null && !isRegExp(separator))) {
                separator = baseToString(separator);
                if (!separator && hasUnicode(string)) return castSlice(stringToArray(string), 0, limit);
            }
            return string.split(separator, limit);
        }
        /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */ var startCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + upperFirst(word);
        });
        /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */ function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
        }
        /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */ function template(string, options, guard) {
            // Based on John Resig's `tmpl` implementation
            // (http://ejohn.org/blog/javascript-micro-templating/)
            // and Laura Doktorova's doT.js (https://github.com/olado/doT).
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) options = undefined;
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            // Compile the regexp to match each delimiter.
            var reDelimiters = RegExp((options.escape || reNoMatch).source + '|' + interpolate.source + '|' + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' + (options.evaluate || reNoMatch).source + '|$', 'g');
            // Use a sourceURL for easier debugging.
            // The sourceURL gets injected into the source that's eval-ed, so be careful
            // to normalize all kinds of whitespace, so e.g. newlines (and unicode versions of it) can't sneak in
            // and escape the comment, thus injecting code that gets evaled.
            var sourceURL = '//# sourceURL=' + (hasOwnProperty.call(options, 'sourceURL') ? (options.sourceURL + '').replace(/\s/g, ' ') : 'lodash.templateSources[' + ++templateCounter + ']') + '\n';
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
                interpolateValue || (interpolateValue = esTemplateValue);
                // Escape characters that can't be included in string literals.
                source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
                // Replace delimiters with snippets.
                if (escapeValue) {
                    isEscaping = true;
                    source += "' +\n__e(" + escapeValue + ") +\n'";
                }
                if (evaluateValue) {
                    isEvaluating = true;
                    source += "';\n" + evaluateValue + ";\n__p += '";
                }
                if (interpolateValue) source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
                index = offset + match.length;
                // The JS engine embedded in Adobe products needs `match` returned in
                // order to produce the correct `offset` value.
                return match;
            });
            source += "';\n";
            // If `variable` is not specified wrap a with-statement around the generated
            // code to add the data object to the top of the scope chain.
            var variable = hasOwnProperty.call(options, 'variable') && options.variable;
            if (!variable) source = 'with (obj) {\n' + source + '\n}\n';
            else if (reForbiddenIdentifierChars.test(variable)) throw new Error(INVALID_TEMPL_VAR_ERROR_TEXT);
            // Cleanup code by stripping empty strings.
            source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source).replace(reEmptyStringMiddle, '$1').replace(reEmptyStringTrailing, '$1;');
            // Frame code as the function body.
            source = 'function(' + (variable || 'obj') + ') {\n' + (variable ? '' : 'obj || (obj = {});\n') + "var __t, __p = ''" + (isEscaping ? ', __e = _.escape' : '') + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ';\n') + source + 'return __p\n}';
            var result = attempt(function() {
                return Function(importsKeys, sourceURL + 'return ' + source).apply(undefined, importsValues);
            });
            // Provide the compiled function's source by its `toString` method or
            // the `source` property as a convenience for inlining compiled templates.
            result.source = source;
            if (isError(result)) throw result;
            return result;
        }
        /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */ function toLower(value) {
            return toString(value).toLowerCase();
        }
        /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */ function toUpper(value) {
            return toString(value).toUpperCase();
        }
        /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */ function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return baseTrim(string);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join('');
        }
        /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */ function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.slice(0, trimmedEndIndex(string) + 1);
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join('');
        }
        /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */ function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined)) return string.replace(reTrimStart, '');
            if (!string || !(chars = baseToString(chars))) return string;
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join('');
        }
        /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */ function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
                var separator = 'separator' in options ? options.separator : separator;
                length = 'length' in options ? toInteger(options.length) : length;
                omission = 'omission' in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
                var strSymbols = stringToArray(string);
                strLength = strSymbols.length;
            }
            if (length >= strLength) return string;
            var end = length - stringSize(omission);
            if (end < 1) return omission;
            var result = strSymbols ? castSlice(strSymbols, 0, end).join('') : string.slice(0, end);
            if (separator === undefined) return result + omission;
            if (strSymbols) end += result.length - end;
            if (isRegExp(separator)) {
                if (string.slice(end).search(separator)) {
                    var match, substring = result;
                    if (!separator.global) separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
                    separator.lastIndex = 0;
                    while(match = separator.exec(substring))var newEnd = match.index;
                    result = result.slice(0, newEnd === undefined ? end : newEnd);
                }
            } else if (string.indexOf(baseToString(separator), end) != end) {
                var index = result.lastIndexOf(separator);
                if (index > -1) result = result.slice(0, index);
            }
            return result + omission;
        }
        /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */ function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
        }
        /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */ var upperCase = createCompounder(function(result, word, index) {
            return result + (index ? ' ' : '') + word.toUpperCase();
        });
        /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */ var upperFirst = createCaseFirst('toUpperCase');
        /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */ function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined : pattern;
            if (pattern === undefined) return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            return string.match(pattern) || [];
        }
        /*------------------------------------------------------------------------*/ /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */ var attempt = baseRest(function(func, args) {
            try {
                return apply(func, undefined, args);
            } catch (e) {
                return isError(e) ? e : new Error(e);
            }
        });
        /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */ var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
                key = toKey(key);
                baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
        });
        /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */ function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
                if (typeof pair[1] != 'function') throw new TypeError(FUNC_ERROR_TEXT);
                return [
                    toIteratee(pair[0]),
                    pair[1]
                ];
            });
            return baseRest(function(args) {
                var index = -1;
                while(++index < length){
                    var pair = pairs[index];
                    if (apply(pair[0], this, args)) return apply(pair[1], this, args);
                }
            });
        }
        /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */ function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */ function constant(value) {
            return function() {
                return value;
            };
        }
        /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */ function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
        }
        /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */ var flow = createFlow();
        /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */ var flowRight = createFlow(true);
        /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */ function identity(value) {
            return value;
        }
        /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */ function iteratee1(func) {
            return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matches({ 'a': 1 }), _.matches({ 'a': 4 })]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * **Note:** Multiple values can be checked by combining several matchers
     * using `_.overSome`
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     *
     * // Checking for several possible values
     * _.filter(objects, _.overSome([_.matchesProperty('a', 1), _.matchesProperty('a', 4)]));
     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]
     */ function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
        }
        /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */ var method = baseRest(function(path, args) {
            return function(object) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */ var methodOf = baseRest(function(object, args) {
            return function(path) {
                return baseInvoke(object, path, args);
            };
        });
        /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */ function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
                options = source;
                source = object;
                object = this;
                methodNames = baseFunctions(source, keys(source));
            }
            var chain = !(isObject(options) && 'chain' in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
                var func = source[methodName];
                object[methodName] = func;
                if (isFunc) object.prototype[methodName] = function() {
                    var chainAll = this.__chain__;
                    if (chain || chainAll) {
                        var result = object(this.__wrapped__), actions = result.__actions__ = copyArray(this.__actions__);
                        actions.push({
                            'func': func,
                            'args': arguments,
                            'thisArg': object
                        });
                        result.__chain__ = chainAll;
                        return result;
                    }
                    return func.apply(object, arrayPush([
                        this.value()
                    ], arguments));
                };
            });
            return object;
        }
        /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */ function noConflict() {
            if (root._ === this) root._ = oldDash;
            return this;
        }
        /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */ function noop() {
        // No operation performed.
        }
        /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */ function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
                return baseNth(args, n);
            });
        }
        /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */ var over = createOver(arrayMap);
        /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */ var overEvery = createOver(arrayEvery);
        /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * Following shorthands are possible for providing predicates.
     * Pass an `Object` and it will be used as an parameter for `_.matches` to create the predicate.
     * Pass an `Array` of parameters for `_.matchesProperty` and the predicate will be created using them.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     *
     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])
     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])
     */ var overSome = createOver(arraySome);
        /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */ function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
        }
        /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */ function propertyOf(object) {
            return function(path) {
                return object == null ? undefined : baseGet(object, path);
            };
        }
        /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */ var range = createRange();
        /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */ var rangeRight = createRange(true);
        /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */ function stubArray() {
            return [];
        }
        /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */ function stubFalse() {
            return false;
        }
        /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */ function stubObject() {
            return {};
        }
        /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */ function stubString() {
            return '';
        }
        /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */ function stubTrue() {
            return true;
        }
        /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */ function times(n, iteratee) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) return [];
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee = getIteratee(iteratee);
            n -= MAX_ARRAY_LENGTH;
            var result = baseTimes(length, iteratee);
            while(++index < n)iteratee(index);
            return result;
        }
        /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */ function toPath(value) {
            if (isArray(value)) return arrayMap(value, toKey);
            return isSymbol(value) ? [
                value
            ] : copyArray(stringToPath(toString(value)));
        }
        /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */ function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
        }
        /*------------------------------------------------------------------------*/ /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */ var add = createMathOperation(function(augend, addend) {
            return augend + addend;
        }, 0);
        /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */ var ceil = createRound('ceil');
        /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */ var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
        }, 1);
        /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */ var floor = createRound('floor');
        /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */ function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined;
        }
        /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */ function maxBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseGt) : undefined;
        }
        /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */ function mean(array) {
            return baseMean(array, identity);
        }
        /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */ function meanBy(array, iteratee) {
            return baseMean(array, getIteratee(iteratee, 2));
        }
        /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */ function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined;
        }
        /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */ function minBy(array, iteratee) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee, 2), baseLt) : undefined;
        }
        /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */ var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
        }, 1);
        /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */ var round = createRound('round');
        /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */ var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
        }, 0);
        /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */ function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
        }
        /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */ function sumBy(array, iteratee) {
            return array && array.length ? baseSum(array, getIteratee(iteratee, 2)) : 0;
        }
        /*------------------------------------------------------------------------*/ // Add methods that return wrapped values in chain sequences.
        lodash.after = after;
        lodash.ary = ary1;
        lodash.assign = assign;
        lodash.assignIn = assignIn;
        lodash.assignInWith = assignInWith;
        lodash.assignWith = assignWith;
        lodash.at = at;
        lodash.before = before;
        lodash.bind = bind;
        lodash.bindAll = bindAll;
        lodash.bindKey = bindKey;
        lodash.castArray = castArray;
        lodash.chain = chain1;
        lodash.chunk = chunk;
        lodash.compact = compact;
        lodash.concat = concat;
        lodash.cond = cond;
        lodash.conforms = conforms;
        lodash.constant = constant;
        lodash.countBy = countBy;
        lodash.create = create;
        lodash.curry = curry;
        lodash.curryRight = curryRight;
        lodash.debounce = debounce;
        lodash.defaults = defaults;
        lodash.defaultsDeep = defaultsDeep;
        lodash.defer = defer;
        lodash.delay = delay;
        lodash.difference = difference;
        lodash.differenceBy = differenceBy;
        lodash.differenceWith = differenceWith;
        lodash.drop = drop;
        lodash.dropRight = dropRight;
        lodash.dropRightWhile = dropRightWhile;
        lodash.dropWhile = dropWhile;
        lodash.fill = fill;
        lodash.filter = filter;
        lodash.flatMap = flatMap;
        lodash.flatMapDeep = flatMapDeep;
        lodash.flatMapDepth = flatMapDepth;
        lodash.flatten = flatten;
        lodash.flattenDeep = flattenDeep;
        lodash.flattenDepth = flattenDepth;
        lodash.flip = flip;
        lodash.flow = flow;
        lodash.flowRight = flowRight;
        lodash.fromPairs = fromPairs;
        lodash.functions = functions;
        lodash.functionsIn = functionsIn;
        lodash.groupBy = groupBy;
        lodash.initial = initial;
        lodash.intersection = intersection;
        lodash.intersectionBy = intersectionBy;
        lodash.intersectionWith = intersectionWith;
        lodash.invert = invert;
        lodash.invertBy = invertBy;
        lodash.invokeMap = invokeMap;
        lodash.iteratee = iteratee1;
        lodash.keyBy = keyBy;
        lodash.keys = keys;
        lodash.keysIn = keysIn;
        lodash.map = map1;
        lodash.mapKeys = mapKeys;
        lodash.mapValues = mapValues;
        lodash.matches = matches;
        lodash.matchesProperty = matchesProperty;
        lodash.memoize = memoize;
        lodash.merge = merge;
        lodash.mergeWith = mergeWith;
        lodash.method = method;
        lodash.methodOf = methodOf;
        lodash.mixin = mixin;
        lodash.negate = negate;
        lodash.nthArg = nthArg;
        lodash.omit = omit;
        lodash.omitBy = omitBy;
        lodash.once = once;
        lodash.orderBy = orderBy;
        lodash.over = over;
        lodash.overArgs = overArgs;
        lodash.overEvery = overEvery;
        lodash.overSome = overSome;
        lodash.partial = partial;
        lodash.partialRight = partialRight;
        lodash.partition = partition;
        lodash.pick = pick;
        lodash.pickBy = pickBy;
        lodash.property = property;
        lodash.propertyOf = propertyOf;
        lodash.pull = pull;
        lodash.pullAll = pullAll;
        lodash.pullAllBy = pullAllBy;
        lodash.pullAllWith = pullAllWith;
        lodash.pullAt = pullAt;
        lodash.range = range;
        lodash.rangeRight = rangeRight;
        lodash.rearg = rearg;
        lodash.reject = reject;
        lodash.remove = remove;
        lodash.rest = rest;
        lodash.reverse = reverse;
        lodash.sampleSize = sampleSize;
        lodash.set = set1;
        lodash.setWith = setWith;
        lodash.shuffle = shuffle;
        lodash.slice = slice;
        lodash.sortBy = sortBy;
        lodash.sortedUniq = sortedUniq;
        lodash.sortedUniqBy = sortedUniqBy;
        lodash.split = split;
        lodash.spread = spread;
        lodash.tail = tail;
        lodash.take = take;
        lodash.takeRight = takeRight;
        lodash.takeRightWhile = takeRightWhile;
        lodash.takeWhile = takeWhile;
        lodash.tap = tap;
        lodash.throttle = throttle;
        lodash.thru = thru;
        lodash.toArray = toArray;
        lodash.toPairs = toPairs;
        lodash.toPairsIn = toPairsIn;
        lodash.toPath = toPath;
        lodash.toPlainObject = toPlainObject;
        lodash.transform = transform1;
        lodash.unary = unary;
        lodash.union = union;
        lodash.unionBy = unionBy;
        lodash.unionWith = unionWith;
        lodash.uniq = uniq;
        lodash.uniqBy = uniqBy;
        lodash.uniqWith = uniqWith;
        lodash.unset = unset;
        lodash.unzip = unzip;
        lodash.unzipWith = unzipWith;
        lodash.update = update;
        lodash.updateWith = updateWith;
        lodash.values = values1;
        lodash.valuesIn = valuesIn;
        lodash.without = without;
        lodash.words = words;
        lodash.wrap = wrap;
        lodash.xor = xor;
        lodash.xorBy = xorBy;
        lodash.xorWith = xorWith;
        lodash.zip = zip;
        lodash.zipObject = zipObject;
        lodash.zipObjectDeep = zipObjectDeep;
        lodash.zipWith = zipWith;
        // Add aliases.
        lodash.entries = toPairs;
        lodash.entriesIn = toPairsIn;
        lodash.extend = assignIn;
        lodash.extendWith = assignInWith;
        // Add methods to `lodash.prototype`.
        mixin(lodash, lodash);
        /*------------------------------------------------------------------------*/ // Add methods that return unwrapped values in chain sequences.
        lodash.add = add;
        lodash.attempt = attempt;
        lodash.camelCase = camelCase;
        lodash.capitalize = capitalize;
        lodash.ceil = ceil;
        lodash.clamp = clamp;
        lodash.clone = clone1;
        lodash.cloneDeep = cloneDeep;
        lodash.cloneDeepWith = cloneDeepWith;
        lodash.cloneWith = cloneWith;
        lodash.conformsTo = conformsTo;
        lodash.deburr = deburr;
        lodash.defaultTo = defaultTo;
        lodash.divide = divide;
        lodash.endsWith = endsWith;
        lodash.eq = eq;
        lodash.escape = escape;
        lodash.escapeRegExp = escapeRegExp;
        lodash.every = every;
        lodash.find = find;
        lodash.findIndex = findIndex;
        lodash.findKey = findKey;
        lodash.findLast = findLast;
        lodash.findLastIndex = findLastIndex;
        lodash.findLastKey = findLastKey;
        lodash.floor = floor;
        lodash.forEach = forEach;
        lodash.forEachRight = forEachRight;
        lodash.forIn = forIn;
        lodash.forInRight = forInRight;
        lodash.forOwn = forOwn;
        lodash.forOwnRight = forOwnRight;
        lodash.get = get;
        lodash.gt = gt;
        lodash.gte = gte;
        lodash.has = has;
        lodash.hasIn = hasIn;
        lodash.head = head;
        lodash.identity = identity;
        lodash.includes = includes1;
        lodash.indexOf = indexOf1;
        lodash.inRange = inRange;
        lodash.invoke = invoke;
        lodash.isArguments = isArguments;
        lodash.isArray = isArray;
        lodash.isArrayBuffer = isArrayBuffer;
        lodash.isArrayLike = isArrayLike;
        lodash.isArrayLikeObject = isArrayLikeObject;
        lodash.isBoolean = isBoolean;
        lodash.isBuffer = isBuffer;
        lodash.isDate = isDate;
        lodash.isElement = isElement;
        lodash.isEmpty = isEmpty;
        lodash.isEqual = isEqual;
        lodash.isEqualWith = isEqualWith;
        lodash.isError = isError;
        lodash.isFinite = isFinite;
        lodash.isFunction = isFunction;
        lodash.isInteger = isInteger;
        lodash.isLength = isLength;
        lodash.isMap = isMap;
        lodash.isMatch = isMatch;
        lodash.isMatchWith = isMatchWith;
        lodash.isNaN = isNaN;
        lodash.isNative = isNative;
        lodash.isNil = isNil;
        lodash.isNull = isNull;
        lodash.isNumber = isNumber;
        lodash.isObject = isObject;
        lodash.isObjectLike = isObjectLike;
        lodash.isPlainObject = isPlainObject;
        lodash.isRegExp = isRegExp;
        lodash.isSafeInteger = isSafeInteger;
        lodash.isSet = isSet;
        lodash.isString = isString;
        lodash.isSymbol = isSymbol;
        lodash.isTypedArray = isTypedArray;
        lodash.isUndefined = isUndefined;
        lodash.isWeakMap = isWeakMap;
        lodash.isWeakSet = isWeakSet;
        lodash.join = join;
        lodash.kebabCase = kebabCase;
        lodash.last = last;
        lodash.lastIndexOf = lastIndexOf;
        lodash.lowerCase = lowerCase;
        lodash.lowerFirst = lowerFirst;
        lodash.lt = lt;
        lodash.lte = lte;
        lodash.max = max;
        lodash.maxBy = maxBy;
        lodash.mean = mean;
        lodash.meanBy = meanBy;
        lodash.min = min;
        lodash.minBy = minBy;
        lodash.stubArray = stubArray;
        lodash.stubFalse = stubFalse;
        lodash.stubObject = stubObject;
        lodash.stubString = stubString;
        lodash.stubTrue = stubTrue;
        lodash.multiply = multiply;
        lodash.nth = nth;
        lodash.noConflict = noConflict;
        lodash.noop = noop;
        lodash.now = now;
        lodash.pad = pad;
        lodash.padEnd = padEnd;
        lodash.padStart = padStart;
        lodash.parseInt = parseInt;
        lodash.random = random;
        lodash.reduce = reduce;
        lodash.reduceRight = reduceRight;
        lodash.repeat = repeat;
        lodash.replace = replace;
        lodash.result = result1;
        lodash.round = round;
        lodash.runInContext = runInContext;
        lodash.sample = sample;
        lodash.size = size1;
        lodash.snakeCase = snakeCase;
        lodash.some = some;
        lodash.sortedIndex = sortedIndex;
        lodash.sortedIndexBy = sortedIndexBy;
        lodash.sortedIndexOf = sortedIndexOf;
        lodash.sortedLastIndex = sortedLastIndex;
        lodash.sortedLastIndexBy = sortedLastIndexBy;
        lodash.sortedLastIndexOf = sortedLastIndexOf;
        lodash.startCase = startCase;
        lodash.startsWith = startsWith;
        lodash.subtract = subtract;
        lodash.sum = sum;
        lodash.sumBy = sumBy;
        lodash.template = template;
        lodash.times = times;
        lodash.toFinite = toFinite;
        lodash.toInteger = toInteger;
        lodash.toLength = toLength;
        lodash.toLower = toLower;
        lodash.toNumber = toNumber;
        lodash.toSafeInteger = toSafeInteger;
        lodash.toString = toString;
        lodash.toUpper = toUpper;
        lodash.trim = trim;
        lodash.trimEnd = trimEnd;
        lodash.trimStart = trimStart;
        lodash.truncate = truncate;
        lodash.unescape = unescape;
        lodash.uniqueId = uniqueId;
        lodash.upperCase = upperCase;
        lodash.upperFirst = upperFirst;
        // Add aliases.
        lodash.each = forEach;
        lodash.eachRight = forEachRight;
        lodash.first = head;
        mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
                if (!hasOwnProperty.call(lodash.prototype, methodName)) source[methodName] = func;
            });
            return source;
        }(), {
            'chain': false
        });
        /*------------------------------------------------------------------------*/ /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */ lodash.VERSION = VERSION;
        // Assign default placeholders.
        arrayEach([
            'bind',
            'bindKey',
            'curry',
            'curryRight',
            'partial',
            'partialRight'
        ], function(methodName) {
            lodash[methodName].placeholder = lodash;
        });
        // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
        arrayEach([
            'drop',
            'take'
        ], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
                n = n === undefined ? 1 : nativeMax(toInteger(n), 0);
                var result = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
                if (result.__filtered__) result.__takeCount__ = nativeMin(n, result.__takeCount__);
                else result.__views__.push({
                    'size': nativeMin(n, MAX_ARRAY_LENGTH),
                    'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
                });
                return result;
            };
            LazyWrapper.prototype[methodName + 'Right'] = function(n) {
                return this.reverse()[methodName](n).reverse();
            };
        });
        // Add `LazyWrapper` methods that accept an `iteratee` value.
        arrayEach([
            'filter',
            'map',
            'takeWhile'
        ], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee) {
                var result = this.clone();
                result.__iteratees__.push({
                    'iteratee': getIteratee(iteratee, 3),
                    'type': type
                });
                result.__filtered__ = result.__filtered__ || isFilter;
                return result;
            };
        });
        // Add `LazyWrapper` methods for `_.head` and `_.last`.
        arrayEach([
            'head',
            'last'
        ], function(methodName, index) {
            var takeName = 'take' + (index ? 'Right' : '');
            LazyWrapper.prototype[methodName] = function() {
                return this[takeName](1).value()[0];
            };
        });
        // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
        arrayEach([
            'initial',
            'tail'
        ], function(methodName, index) {
            var dropName = 'drop' + (index ? '' : 'Right');
            LazyWrapper.prototype[methodName] = function() {
                return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
        });
        LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
        };
        LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
        };
        LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
        };
        LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == 'function') return new LazyWrapper(this);
            return this.map(function(value) {
                return baseInvoke(value, path, args);
            });
        });
        LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
        };
        LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result = this;
            if (result.__filtered__ && (start > 0 || end < 0)) return new LazyWrapper(result);
            if (start < 0) result = result.takeRight(-start);
            else if (start) result = result.drop(start);
            if (end !== undefined) {
                end = toInteger(end);
                result = end < 0 ? result.dropRight(-end) : result.take(end - start);
            }
            return result;
        };
        LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
        };
        LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
        };
        // Add `LazyWrapper` methods to `lodash.prototype`.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? 'take' + (methodName == 'last' ? 'Right' : '') : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) return;
            lodash.prototype[methodName] = function() {
                var value1 = this.__wrapped__, args = isTaker ? [
                    1
                ] : arguments, isLazy = value1 instanceof LazyWrapper, iteratee = args[0], useLazy = isLazy || isArray(value1);
                var interceptor = function(value) {
                    var result = lodashFunc.apply(lodash, arrayPush([
                        value
                    ], args));
                    return isTaker && chainAll ? result[0] : result;
                };
                if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) // Avoid lazy use if the iteratee has a "length" value other than `1`.
                isLazy = useLazy = false;
                var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
                if (!retUnwrapped && useLazy) {
                    value1 = onlyLazy ? value1 : new LazyWrapper(this);
                    var result3 = func.apply(value1, args);
                    result3.__actions__.push({
                        'func': thru,
                        'args': [
                            interceptor
                        ],
                        'thisArg': undefined
                    });
                    return new LodashWrapper(result3, chainAll);
                }
                if (isUnwrapped && onlyLazy) return func.apply(this, args);
                result3 = this.thru(interceptor);
                return isUnwrapped ? isTaker ? result3.value()[0] : result3.value() : result3;
            };
        });
        // Add `Array` methods to `lodash.prototype`.
        arrayEach([
            'pop',
            'push',
            'shift',
            'sort',
            'splice',
            'unshift'
        ], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru', retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
                var args = arguments;
                if (retUnwrapped && !this.__chain__) {
                    var value = this.value();
                    return func.apply(isArray(value) ? value : [], args);
                }
                return this[chainName](function(value) {
                    return func.apply(isArray(value) ? value : [], args);
                });
            };
        });
        // Map minified method names to their real names.
        baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
                var key = lodashFunc.name + '';
                if (!hasOwnProperty.call(realNames, key)) realNames[key] = [];
                realNames[key].push({
                    'name': methodName,
                    'func': lodashFunc
                });
            }
        });
        realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [
            {
                'name': 'wrapper',
                'func': undefined
            }
        ];
        // Add methods to `LazyWrapper`.
        LazyWrapper.prototype.clone = lazyClone;
        LazyWrapper.prototype.reverse = lazyReverse;
        LazyWrapper.prototype.value = lazyValue;
        // Add chain sequence methods to the `lodash` wrapper.
        lodash.prototype.at = wrapperAt;
        lodash.prototype.chain = wrapperChain;
        lodash.prototype.commit = wrapperCommit;
        lodash.prototype.next = wrapperNext;
        lodash.prototype.plant = wrapperPlant;
        lodash.prototype.reverse = wrapperReverse;
        lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
        // Add lazy aliases.
        lodash.prototype.first = lodash.prototype.head;
        if (symIterator) lodash.prototype[symIterator] = wrapperToIterator;
        return lodash;
    };
    /*--------------------------------------------------------------------------*/ // Export lodash.
    var _ = runInContext1();
    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
        // Expose Lodash on the global object to prevent errors when Lodash is
        // loaded by a script tag in the presence of an AMD loader.
        // See http://requirejs.org/docs/errors.html#mismatch for more details.
        // Use `_.noConflict` to remove Lodash from the global object.
        root._ = _;
        // Define as an anonymous module so, through path mapping, it can be
        // referenced as the "underscore" module.
        define(function() {
            return _;
        });
    } else if (freeModule) {
        // Export for Node.js.
        (freeModule.exports = _)._ = _;
        // Export for CommonJS support.
        freeExports._ = _;
    } else // Export to the global object.
    root._ = _;
}).call(this);

},{}],"bVPz2":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var configured_bignumber_1 = require("./configured_bignumber");
var MAX_DIGITS_IN_UNSIGNED_256_INT = 78;
/**
 * Generates a pseudo-random 256-bit number.
 * @return  A pseudo-random 256-bit number.
 */ function generatePseudoRandom256BitNumber() {
    // BigNumber.random returns a pseudo-random number between 0 & 1 with a passed in number of decimal places.
    // Source: https://mikemcl.github.io/bignumber.js/#random
    var randomNumber = configured_bignumber_1.BigNumber.random(MAX_DIGITS_IN_UNSIGNED_256_INT);
    var factor = new configured_bignumber_1.BigNumber(10).pow(MAX_DIGITS_IN_UNSIGNED_256_INT - 1);
    var randomNumberScaledTo256Bits = randomNumber.times(factor).integerValue();
    return randomNumberScaledTo256Bits;
}
exports.generatePseudoRandom256BitNumber = generatePseudoRandom256BitNumber;

},{"./configured_bignumber":"TutUZ"}],"TutUZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var bignumber_js_1 = require("bignumber.js");
exports.BigNumber = bignumber_js_1.BigNumber;
bignumber_js_1.BigNumber.config({
    // By default BigNumber's `toString` method converts to exponential notation if the value has
    // more then 20 digits. We want to avoid this behavior, so we set EXPONENTIAL_AT to a high number
    EXPONENTIAL_AT: 1000,
    // Note(albrow): This is the lowest value for which
    // `x.div(y).floor() === x.divToInt(y)`
    // for all values of x and y <= MAX_UINT256, where MAX_UINT256 is the
    // maximum number represented by the uint256 type in Solidity (2^256-1).
    DECIMAL_PLACES: 78
});
// Set a debug print function for NodeJS
// Upstream issue: https://github.com/MikeMcl/bignumber.js/issues/188
var isNode = require("detect-node");
if (isNode) {
    // Dynamically load a NodeJS specific module.
    // TypeScript requires all imports to be global, so we need to use
    // `const` here and disable the tslint warning.
    // tslint:disable-next-line: no-var-requires
    var util = require('util');
    // Set a custom util.inspect function
    // HACK: We add a function to the BigNumber class by assigning to the
    //       prototype. The function name is a symbol provided by Node.
    bignumber_js_1.BigNumber.prototype[util.inspect.custom] = function() {
        // HACK: When executed, `this` will refer to the BigNumber instance.
        //       This is also why we need a function expression instead of an
        //       arrow function, as the latter does not have a `this`.
        // Return the readable string representation
        // tslint:disable-next-line: no-invalid-this
        return this.toString();
    };
}

},{"bignumber.js":"9l98w","detect-node":"jZQET","util":"cxohQ"}],"9l98w":[function(require,module,exports) {
(function(globalObject) {
    /*
 *      bignumber.js v8.0.2
 *      A JavaScript library for arbitrary-precision arithmetic.
 *      https://github.com/MikeMcl/bignumber.js
 *      Copyright (c) 2019 Michael Mclaughlin <M8ch88l@gmail.com>
 *      MIT Licensed.
 *
 *      BigNumber.prototype methods     |  BigNumber methods
 *                                      |
 *      absoluteValue            abs    |  clone
 *      comparedTo                      |  config               set
 *      decimalPlaces            dp     |      DECIMAL_PLACES
 *      dividedBy                div    |      ROUNDING_MODE
 *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT
 *      exponentiatedBy          pow    |      RANGE
 *      integerValue                    |      CRYPTO
 *      isEqualTo                eq     |      MODULO_MODE
 *      isFinite                        |      POW_PRECISION
 *      isGreaterThan            gt     |      FORMAT
 *      isGreaterThanOrEqualTo   gte    |      ALPHABET
 *      isInteger                       |  isBigNumber
 *      isLessThan               lt     |  maximum              max
 *      isLessThanOrEqualTo      lte    |  minimum              min
 *      isNaN                           |  random
 *      isNegative                      |  sum
 *      isPositive                      |
 *      isZero                          |
 *      minus                           |
 *      modulo                   mod    |
 *      multipliedBy             times  |
 *      negated                         |
 *      plus                            |
 *      precision                sd     |
 *      shiftedBy                       |
 *      squareRoot               sqrt   |
 *      toExponential                   |
 *      toFixed                         |
 *      toFormat                        |
 *      toFraction                      |
 *      toJSON                          |
 *      toNumber                        |
 *      toPrecision                     |
 *      toString                        |
 *      valueOf                         |
 *
 */ var BigNumber1, isNumeric = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, bignumberError = '[BigNumber Error] ', tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ', BASE = 1e14, LOG_BASE = 14, MAX_SAFE_INTEGER = 0x1fffffffffffff, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1,
        10,
        100,
        1e3,
        1e4,
        1e5,
        1e6,
        1e7,
        1e8,
        1e9,
        1e10,
        1e11,
        1e12,
        1e13
    ], SQRT_BASE = 1e7, // EDITABLE
    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
    // the arguments to toExponential, toFixed, toFormat, and toPrecision.
    MAX = 1E9; // 0 to MAX_INT32
    /*
   * Create and return a BigNumber constructor.
   */ function clone(configObject) {
        var div, convertBase, parseNumeric, P = BigNumber.prototype = {
            constructor: BigNumber,
            toString: null,
            valueOf: null
        }, ONE = new BigNumber(1), //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------
        // The default values below must be integers within the inclusive ranges stated.
        // The values can also be changed at run-time using BigNumber.set.
        // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, // The rounding mode used when rounding to the above decimal places, and when using
        // toExponential, toFixed, toFormat and toPrecision, and round (default value).
        // UP         0 Away from zero.
        // DOWN       1 Towards zero.
        // CEIL       2 Towards +Infinity.
        // FLOOR      3 Towards -Infinity.
        // HALF_UP    4 Towards nearest neighbour. If equidistant, up.
        // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
        // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
        // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
        // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
        ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -10000000, // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 1e7, // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, // The modulo mode used when calculating the modulus: a mod n.
        // The quotient (q = a / n) is calculated according to the corresponding rounding mode.
        // The remainder (r) is calculated as: r = a - n * q.
        //
        // UP        0 The remainder is positive if the dividend is negative, else is negative.
        // DOWN      1 The remainder has the same sign as the dividend.
        //             This modulo mode is commonly known as 'truncated division' and is
        //             equivalent to (a % n) in JavaScript.
        // FLOOR     3 The remainder has the same sign as the divisor (Python %).
        // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
        // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
        //             The remainder is always positive.
        //
        // The truncated division, floored division, Euclidian division and IEEE 754 remainder
        // modes are commonly used for the modulus operation.
        // Although the other rounding modes can also be used, they may not give useful results.
        MODULO_MODE = 1, // The maximum number of significant digits of the result of the exponentiatedBy operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 0, // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            prefix: '',
            groupSize: 3,
            secondaryGroupSize: 0,
            groupSeparator: ',',
            decimalSeparator: '.',
            fractionGroupSize: 0,
            fractionGroupSeparator: '\xA0',
            suffix: ''
        }, // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',
        // '-', '.', whitespace, or repeated character.
        // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'
        ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';
        //------------------------------------------------------------------------------------------
        // CONSTRUCTOR
        /*
     * The BigNumber constructor and exported function.
     * Create and return a new instance of a BigNumber object.
     *
     * n {number|string|BigNumber} A numeric value.
     * [b] {number} The base of n. Integer, 2 to ALPHABET.length inclusive.
     */ function BigNumber(n, b) {
            var alphabet, c, caseChanged, e, i, isNum, len, str, x = this;
            // Enable constructor usage without new.
            if (!(x instanceof BigNumber)) // Don't throw on constructor call without new (#81).
            // '[BigNumber Error] Constructor call without new: {n}'
            //throw Error(bignumberError + ' Constructor call without new: ' + n);
            return new BigNumber(n, b);
            if (b == null) {
                // Duplicate.
                if (n instanceof BigNumber) {
                    x.s = n.s;
                    x.e = n.e;
                    x.c = (n = n.c) ? n.slice() : n;
                    return;
                }
                isNum = typeof n == 'number';
                if (isNum && n * 0 == 0) {
                    // Use `1 / n` to handle minus zero also.
                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;
                    // Faster path for integers.
                    if (n === ~~n) {
                        for(e = 0, i = n; i >= 10; i /= 10, e++);
                        x.e = e;
                        x.c = [
                            n
                        ];
                        return;
                    }
                    str = String(n);
                } else {
                    str = String(n);
                    if (!isNumeric.test(str)) return parseNumeric(x, str, isNum);
                    x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;
                }
                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                // Exponential form?
                if ((i = str.search(/e/i)) > 0) {
                    // Determine exponent.
                    if (e < 0) e = i;
                    e += +str.slice(i + 1);
                    str = str.substring(0, i);
                } else if (e < 0) // Integer.
                e = str.length;
            } else {
                // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
                intCheck(b, 2, ALPHABET.length, 'Base');
                str = String(n);
                // Allow exponential notation to be used with base 10 argument, while
                // also rounding to DECIMAL_PLACES as with other bases.
                if (b == 10) {
                    x = new BigNumber(n instanceof BigNumber ? n : str);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }
                isNum = typeof n == 'number';
                if (isNum) {
                    // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                    if (n * 0 != 0) return parseNumeric(x, str, isNum, b);
                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;
                    // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                    if (BigNumber.DEBUG && str.replace(/^0\.0*|\./, '').length > 15) throw Error(tooManyDigits + n);
                    // Prevent later check for length on converted number.
                    isNum = false;
                } else x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                alphabet = ALPHABET.slice(0, b);
                e = i = 0;
                // Check that str is a valid base b number.
                // Don't use RegExp so alphabet can contain special characters.
                for(len = str.length; i < len; i++)if (alphabet.indexOf(c = str.charAt(i)) < 0) {
                    if (c == '.') // If '.' is not the first character and it has not be found before.
                    {
                        if (i > e) {
                            e = len;
                            continue;
                        }
                    } else if (!caseChanged) // Allow e.g. hexadecimal 'FF' as well as 'ff'.
                    {
                        if (str == str.toUpperCase() && (str = str.toLowerCase()) || str == str.toLowerCase() && (str = str.toUpperCase())) {
                            caseChanged = true;
                            i = -1;
                            e = 0;
                            continue;
                        }
                    }
                    return parseNumeric(x, String(n), isNum, b);
                }
                str = convertBase(str, b, 10, x.s);
                // Decimal point?
                if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
                else e = str.length;
            }
            // Determine leading zeros.
            for(i = 0; str.charCodeAt(i) === 48; i++);
            // Determine trailing zeros.
            for(len = str.length; str.charCodeAt(--len) === 48;);
            str = str.slice(i, ++len);
            if (str) {
                len -= i;
                // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'
                if (isNum && BigNumber.DEBUG && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) throw Error(tooManyDigits + x.s * n);
                e = e - i - 1;
                // Overflow?
                if (e > MAX_EXP) // Infinity.
                x.c = x.e = null;
                else if (e < MIN_EXP) // Zero.
                x.c = [
                    x.e = 0
                ];
                else {
                    x.e = e;
                    x.c = [];
                    // Transform base
                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE;
                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));
                        for(len -= LOG_BASE; i < len;)x.c.push(+str.slice(i, i += LOG_BASE));
                        str = str.slice(i);
                        i = LOG_BASE - str.length;
                    } else i -= len;
                    for(; i--; str += '0');
                    x.c.push(+str);
                }
            } else // Zero.
            x.c = [
                x.e = 0
            ];
        }
        // CONSTRUCTOR PROPERTIES
        BigNumber.clone = clone;
        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;
        /*
     * Configure infrequently-changing library-wide settings.
     *
     * Accept an object with the following optional properties (if the value of a property is
     * a number, it must be an integer within the inclusive range stated):
     *
     *   DECIMAL_PLACES   {number}           0 to MAX
     *   ROUNDING_MODE    {number}           0 to 8
     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]
     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]
     *   CRYPTO           {boolean}          true or false
     *   MODULO_MODE      {number}           0 to 9
     *   POW_PRECISION       {number}           0 to MAX
     *   ALPHABET         {string}           A string of two or more unique characters which does
     *                                       not contain '.'.
     *   FORMAT           {object}           An object with some of the following properties:
     *     prefix                 {string}
     *     groupSize              {number}
     *     secondaryGroupSize     {number}
     *     groupSeparator         {string}
     *     decimalSeparator       {string}
     *     fractionGroupSize      {number}
     *     fractionGroupSeparator {string}
     *     suffix                 {string}
     *
     * (The values assigned to the above FORMAT object properties are not checked for validity.)
     *
     * E.g.
     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
     *
     * Ignore properties/parameters set to null or undefined, except for ALPHABET.
     *
     * Return an object with the properties current values.
     */ BigNumber.config = BigNumber.set = function(obj) {
            var p, v;
            if (obj != null) {
                if (typeof obj == 'object') {
                    // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        DECIMAL_PLACES = v;
                    }
                    // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
                    // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {
                        v = obj[p];
                        intCheck(v, 0, 8, p);
                        ROUNDING_MODE = v;
                    }
                    // EXPONENTIAL_AT {number|number[]}
                    // Integer, -MAX to MAX inclusive or
                    // [integer -MAX to 0 inclusive, 0 to MAX inclusive].
                    // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, 0, p);
                            intCheck(v[1], 0, MAX, p);
                            TO_EXP_NEG = v[0];
                            TO_EXP_POS = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);
                        }
                    }
                    // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
                    // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
                    // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'
                    if (obj.hasOwnProperty(p = 'RANGE')) {
                        v = obj[p];
                        if (v && v.pop) {
                            intCheck(v[0], -MAX, -1, p);
                            intCheck(v[1], 1, MAX, p);
                            MIN_EXP = v[0];
                            MAX_EXP = v[1];
                        } else {
                            intCheck(v, -MAX, MAX, p);
                            if (v) MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);
                            else throw Error(bignumberError + p + ' cannot be zero: ' + v);
                        }
                    }
                    // CRYPTO {boolean} true or false.
                    // '[BigNumber Error] CRYPTO not true or false: {v}'
                    // '[BigNumber Error] crypto unavailable'
                    if (obj.hasOwnProperty(p = 'CRYPTO')) {
                        v = obj[p];
                        if (v === !!v) {
                            if (v) {
                                if (typeof crypto != 'undefined' && crypto && (crypto.getRandomValues || crypto.randomBytes)) CRYPTO = v;
                                else {
                                    CRYPTO = !v;
                                    throw Error(bignumberError + 'crypto unavailable');
                                }
                            } else CRYPTO = v;
                        } else throw Error(bignumberError + p + ' not true or false: ' + v);
                    }
                    // MODULO_MODE {number} Integer, 0 to 9 inclusive.
                    // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'MODULO_MODE')) {
                        v = obj[p];
                        intCheck(v, 0, 9, p);
                        MODULO_MODE = v;
                    }
                    // POW_PRECISION {number} Integer, 0 to MAX inclusive.
                    // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'
                    if (obj.hasOwnProperty(p = 'POW_PRECISION')) {
                        v = obj[p];
                        intCheck(v, 0, MAX, p);
                        POW_PRECISION = v;
                    }
                    // FORMAT {object}
                    // '[BigNumber Error] FORMAT not an object: {v}'
                    if (obj.hasOwnProperty(p = 'FORMAT')) {
                        v = obj[p];
                        if (typeof v == 'object') FORMAT = v;
                        else throw Error(bignumberError + p + ' not an object: ' + v);
                    }
                    // ALPHABET {string}
                    // '[BigNumber Error] ALPHABET invalid: {v}'
                    if (obj.hasOwnProperty(p = 'ALPHABET')) {
                        v = obj[p];
                        // Disallow if only one character,
                        // or if it contains '+', '-', '.', whitespace, or a repeated character.
                        if (typeof v == 'string' && !/^.$|[+-.\s]|(.).*\1/.test(v)) ALPHABET = v;
                        else throw Error(bignumberError + p + ' invalid: ' + v);
                    }
                } else // '[BigNumber Error] Object expected: {v}'
                throw Error(bignumberError + 'Object expected: ' + obj);
            }
            return {
                DECIMAL_PLACES: DECIMAL_PLACES,
                ROUNDING_MODE: ROUNDING_MODE,
                EXPONENTIAL_AT: [
                    TO_EXP_NEG,
                    TO_EXP_POS
                ],
                RANGE: [
                    MIN_EXP,
                    MAX_EXP
                ],
                CRYPTO: CRYPTO,
                MODULO_MODE: MODULO_MODE,
                POW_PRECISION: POW_PRECISION,
                FORMAT: FORMAT,
                ALPHABET: ALPHABET
            };
        };
        /*
     * Return true if v is a BigNumber instance, otherwise return false.
     *
     * v {any}
     */ BigNumber.isBigNumber = function(v) {
            return v instanceof BigNumber || v && v._isBigNumber === true || false;
        };
        /*
     * Return a new BigNumber whose value is the maximum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.maximum = BigNumber.max = function() {
            return maxOrMin(arguments, P.lt);
        };
        /*
     * Return a new BigNumber whose value is the minimum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.minimum = BigNumber.min = function() {
            return maxOrMin(arguments, P.gt);
        };
        /*
     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
     * zeros are produced).
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'
     * '[BigNumber Error] crypto unavailable'
     */ BigNumber.random = function() {
            var pow2_53 = 0x20000000000000;
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 0x1fffff ? function() {
                return mathfloor(Math.random() * pow2_53);
            } : function() {
                return (Math.random() * 0x40000000 | 0) * 0x800000 + (Math.random() * 0x800000 | 0);
            };
            return function(dp) {
                var a, b, e, k, v, i = 0, c = [], rand = new BigNumber(ONE);
                if (dp == null) dp = DECIMAL_PLACES;
                else intCheck(dp, 0, MAX);
                k = mathceil(dp / LOG_BASE);
                if (CRYPTO) {
                    // Browsers supporting crypto.getRandomValues.
                    if (crypto.getRandomValues) {
                        a = crypto.getRandomValues(new Uint32Array(k *= 2));
                        for(; i < k;){
                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 0x20000 + (a[i + 1] >>> 11);
                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9e15) {
                                b = crypto.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {
                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 2;
                            }
                        }
                        i = k / 2;
                    // Node.js supporting crypto.randomBytes.
                    } else if (crypto.randomBytes) {
                        // buffer
                        a = crypto.randomBytes(k *= 7);
                        for(; i < k;){
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 0x1000000000000 + a[i + 1] * 0x10000000000 + a[i + 2] * 0x100000000 + a[i + 3] * 0x1000000 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                            if (v >= 9e15) crypto.randomBytes(7).copy(a, i);
                            else {
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 1e14);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else {
                        CRYPTO = false;
                        throw Error(bignumberError + 'crypto unavailable');
                    }
                }
                // Use Math.random.
                if (!CRYPTO) for(; i < k;){
                    v = random53bitInt();
                    if (v < 9e15) c[i++] = v % 1e14;
                }
                k = c[--i];
                dp %= LOG_BASE;
                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }
                // Remove trailing elements which are zero.
                for(; c[i] === 0; c.pop(), i--);
                // Zero?
                if (i < 0) c = [
                    e = 0
                ];
                else {
                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for(e = -1; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);
                    // Count the digits of the first element of c to determine leading zeros, and...
                    for(i = 1, v = c[0]; v >= 10; v /= 10, i++);
                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }
                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();
        /*
     * Return a BigNumber whose value is the sum of the arguments.
     *
     * arguments {number|string|BigNumber}
     */ BigNumber.sum = function() {
            var i = 1, args = arguments, sum = new BigNumber(args[0]);
            for(; i < args.length;)sum = sum.plus(args[i++]);
            return sum;
        };
        // PRIVATE FUNCTIONS
        // Called by BigNumber and BigNumber.prototype.toString.
        convertBase = function() {
            var decimal = '0123456789';
            /*
       * Convert string of baseIn to an array of numbers of baseOut.
       * Eg. toBaseOut('255', 10, 16) returns [15, 15].
       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].
       */ function toBaseOut(str, baseIn, baseOut, alphabet) {
                var j, arr = [
                    0
                ], arrL, i = 0, len = str.length;
                for(; i < len;){
                    for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);
                    arr[0] += alphabet.indexOf(str.charAt(i++));
                    for(j = 0; j < arr.length; j++)if (arr[j] > baseOut - 1) {
                        if (arr[j + 1] == null) arr[j + 1] = 0;
                        arr[j + 1] += arr[j] / baseOut | 0;
                        arr[j] %= baseOut;
                    }
                }
                return arr.reverse();
            }
            // Convert a numeric string of baseIn to a numeric string of baseOut.
            // If the caller is toString, we are converting from base 10 to baseOut.
            // If the caller is BigNumber, we are converting from baseIn to base 10.
            return function(str, baseIn, baseOut, sign, callerIsToString) {
                var alphabet, d, e, k, r, x, xc, y, i = str.indexOf('.'), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
                // Non-integer.
                if (i >= 0) {
                    k = POW_PRECISION;
                    // Unlimited precision.
                    POW_PRECISION = 0;
                    str = str.replace('.', '');
                    y = new BigNumber(baseIn);
                    x = y.pow(str.length - i);
                    POW_PRECISION = k;
                    // Convert str as if an integer, then restore the fraction part by dividing the
                    // result by its base raised to a power.
                    y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'), 10, baseOut, decimal);
                    y.e = y.c.length;
                }
                // Convert the number as integer.
                xc = toBaseOut(str, baseIn, baseOut, callerIsToString ? (alphabet = ALPHABET, decimal) : (alphabet = decimal, ALPHABET));
                // xc now represents str as an integer and converted to baseOut. e is the exponent.
                e = k = xc.length;
                // Remove trailing zeros.
                for(; xc[--k] == 0; xc.pop());
                // Zero?
                if (!xc[0]) return alphabet.charAt(0);
                // Does str represent an integer? If so, no need for the division.
                if (i < 0) --e;
                else {
                    x.c = xc;
                    x.e = e;
                    // The sign is needed for correct rounding.
                    x.s = sign;
                    x = div(x, y, dp, rm, baseOut);
                    xc = x.c;
                    r = x.r;
                    e = x.e;
                }
                // xc now represents str converted to baseOut.
                // THe index of the rounding digit.
                d = e + dp + 1;
                // The rounding digit: the digit to the right of the digit that may be rounded up.
                i = xc[d];
                // Look at the rounding digits and mode to determine whether to round up.
                k = baseOut / 2;
                r = r || d < 0 || xc[d + 1] != null;
                r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
                // If the index of the rounding digit is not greater than zero, or xc represents
                // zero, then the result of the base conversion is zero or, if rounding up, a value
                // such as 0.00001.
                if (d < 1 || !xc[0]) // 1^-dp or 0
                str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);
                else {
                    // Truncate xc to the required number of decimal places.
                    xc.length = d;
                    // Round up?
                    if (r) // Rounding up may mean the previous digit has to be rounded up and so on.
                    for(--baseOut; ++xc[--d] > baseOut;){
                        xc[d] = 0;
                        if (!d) {
                            ++e;
                            xc = [
                                1
                            ].concat(xc);
                        }
                    }
                    // Determine trailing zeros.
                    for(k = xc.length; !xc[--k];);
                    // E.g. [4, 11, 15] becomes 4bf.
                    for(i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));
                    // Add leading zeros, decimal point and trailing zeros as required.
                    str = toFixedPoint(str, e, alphabet.charAt(0));
                }
                // The caller will add the sign.
                return str;
            };
        }();
        // Perform division in the specified base. Called by div and convertBase.
        div = function() {
            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
                for(x = x.slice(); i--;){
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }
                if (carry) x = [
                    carry
                ].concat(x);
                return x;
            }
            function compare(a, b, aL, bL) {
                var i, cmp;
                if (aL != bL) cmp = aL > bL ? 1 : -1;
                else {
                    for(i = cmp = 0; i < aL; i++)if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                    }
                }
                return cmp;
            }
            function subtract(a, b, aL, base) {
                var i = 0;
                // Subtract b from a.
                for(; aL--;){
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }
                // Remove leading zeros.
                for(; !a[0] && a.length > 1; a.splice(0, 1));
            }
            // x: dividend, y: divisor.
            return function(x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) return new BigNumber(// Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;
                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }
                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for(i = 0; yc[i] == (xc[i] || 0); i++);
                if (yc[i] > (xc[i] || 0)) e--;
                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.
                    n = mathfloor(base / (yc[0] + 1));
                    // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.
                    // if (n > 1 || n++ == 1 && yc[0] < base / 2) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }
                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz = [
                        0
                    ].concat(yz);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;
                    do {
                        n = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, n.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);
                            //  Algorithm:
                            //  product = divisor multiplied by trial digit (n).
                            //  Compare product and remainder.
                            //  If product is greater than remainder:
                            //    Subtract divisor from product, decrement trial digit.
                            //  Subtract product from remainder.
                            //  If product was less than remainder at the last compare:
                            //    Compare new remainder and divisor.
                            //    If remainder is greater than divisor:
                            //      Subtract divisor from remainder, increment trial digit.
                            if (n > 1) {
                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;
                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                // If product > remainder then trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while(compare(prod, rem, prodL, remL) == 1){
                                    n--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {
                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) // divisor < remainder, so n must be at least 1.
                                cmp = n = 1;
                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }
                            if (prodL < remL) prod = [
                                0
                            ].concat(prod);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;
                            // If product was < remainder.
                            if (cmp == -1) // Compare divisor and new remainder.
                            // If divisor < new remainder, subtract divisor from remainder.
                            // Trial digit n too low.
                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                            while(compare(yc, rem, yL, remL) < 1){
                                n++;
                                // Subtract divisor from remainder.
                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                remL = rem.length;
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [
                                0
                            ];
                        } // else cmp === 1 and n will be 0
                        // Add the next digit, n, to the result array.
                        qc[i++] = n;
                        // Update the remainder.
                        if (rem[0]) rem[remL++] = xc[xi] || 0;
                        else {
                            rem = [
                                xc[xi]
                            ];
                            remL = 1;
                        }
                    }while (((xi++) < xL || rem[0] != null) && s--)
                    more = rem[0] != null;
                    // Leading zero?
                    if (!qc[0]) qc.splice(0, 1);
                }
                if (base == BASE) {
                    // To calculate q.e, first get the number of digits of qc[0].
                    for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }
                return q;
            };
        }();
        /*
     * Return a string representing the value of BigNumber n in fixed-point or exponential
     * notation rounded to the specified decimal places or significant digits.
     *
     * n: a BigNumber.
     * i: the index of the last digit required (i.e. the digit that may be rounded up).
     * rm: the rounding mode.
     * id: 1 (toExponential) or 2 (toPrecision).
     */ function format1(n, i, rm, id) {
            var c0, e, ne, len, str;
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
                str = coeffToString(n.c);
                str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS) ? toExponential(str, ne) : toFixedPoint(str, ne, '0');
            } else {
                n = round(new BigNumber(n), i, rm);
                // n.e may have changed if the value was rounded up.
                e = n.e;
                str = coeffToString(n.c);
                len = str.length;
                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.
                // Exponential notation.
                if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {
                    // Append zeros?
                    for(; len < i; str += '0', len++);
                    str = toExponential(str, e);
                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e, '0');
                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for(str += '.'; i--; str += '0');
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += '.';
                            for(; i--; str += '0');
                        }
                    }
                }
            }
            return n.s < 0 && c0 ? '-' + str : str;
        }
        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var n, i = 1, m = new BigNumber(args[0]);
            for(; i < args.length; i++){
                n = new BigNumber(args[i]);
                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) m = n;
            }
            return m;
        }
        /*
     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
     * Called by minus, plus and times.
     */ function normalise(n, c, e) {
            var i = 1, j = c.length;
            // Remove trailing zeros.
            for(; !c[--j]; c.pop());
            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for(j = c[0]; j >= 10; j /= 10, i++);
            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) // Infinity.
            n.c = n.e = null;
            else if (e < MIN_EXP) // Zero.
            n.c = [
                n.e = 0
            ];
            else {
                n.e = e;
                n.c = c;
            }
            return n;
        }
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, isNum, b) {
                var base, s = isNum ? str : str.replace(whitespaceOrPlus, '');
                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) {
                    x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                    x.c = x.e = null;
                } else {
                    if (!isNum) {
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function(m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });
                        if (b) {
                            base = b;
                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                        }
                        if (str != s) return new BigNumber(s, base);
                    }
                    // '[BigNumber Error] Not a number: {n}'
                    // '[BigNumber Error] Not a base {b} number: {n}'
                    if (BigNumber.DEBUG) throw Error(bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);
                    // NaN
                    x.c = x.e = x.s = null;
                }
            };
        }();
        /*
     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
     * If r is truthy, it is known that there are more digits after the rounding digit.
     */ function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            // if x is not Infinity or NaN...
            if (xc) {
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {
                    // Get the number of digits of the first element of xc.
                    for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;
                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];
                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);
                        if (ni >= xc.length) {
                            if (r) {
                                // Needed by sqrt.
                                for(; xc.length <= ni; xc.push(0));
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else break out;
                        } else {
                            n = k = xc[ni];
                            // Get the number of digits of n.
                            for(d = 1; k >= 10; k /= 10, d++);
                            // Get the index of rd within n.
                            i %= LOG_BASE;
                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;
                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }
                    r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;
                        if (r) {
                            // Convert sd to decimal places.
                            sd -= x.e + 1;
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else // Zero.
                        xc[0] = x.e = 0;
                        return x;
                    }
                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }
                    // Round up?
                    if (r) {
                        for(;;)// If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {
                            // i will be the length of xc[0] before k is added.
                            for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                            j = xc[0] += k;
                            for(k = 1; j >= 10; j /= 10, k++);
                            // if i != k the length has increased.
                            if (i != k) {
                                x.e++;
                                if (xc[0] == BASE) xc[0] = 1;
                            }
                            break;
                        } else {
                            xc[ni] += k;
                            if (xc[ni] != BASE) break;
                            xc[ni--] = 0;
                            k = 1;
                        }
                    }
                    // Remove trailing zeros.
                    for(i = xc.length; xc[--i] === 0; xc.pop());
                }
                // Overflow? Infinity.
                if (x.e > MAX_EXP) x.c = x.e = null;
                else if (x.e < MIN_EXP) x.c = [
                    x.e = 0
                ];
            }
            return x;
        }
        function valueOf(n) {
            var str, e = n.e;
            if (e === null) return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e, '0');
            return n.s < 0 ? '-' + str : str;
        }
        // PROTOTYPE/INSTANCE METHODS
        /*
     * Return a new BigNumber whose value is the absolute value of this BigNumber.
     */ P.absoluteValue = P.abs = function() {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };
        /*
     * Return
     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
     *   0 if they have the same value,
     *   or null if the value of either is NaN.
     */ P.comparedTo = function(y, b) {
            return compare1(this, new BigNumber(y, b));
        };
        /*
     * If dp is undefined or null or true or false, return the number of decimal places of the
     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     *
     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.decimalPlaces = P.dp = function(dp, rm) {
            var c, n, v, x = this;
            if (dp != null) {
                intCheck(dp, 0, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), dp + x.e + 1, rm);
            }
            if (!(c = x.c)) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;
            return n;
        };
        /*
     *  n / 0 = I
     *  n / N = N
     *  n / I = 0
     *  0 / n = 0
     *  0 / 0 = N
     *  0 / N = N
     *  0 / I = 0
     *  N / n = N
     *  N / 0 = N
     *  N / N = N
     *  N / I = N
     *  I / n = I
     *  I / 0 = I
     *  I / N = N
     *  I / I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.dividedBy = P.div = function(y, b) {
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        /*
     * Return a new BigNumber whose value is the integer part of dividing the value of this
     * BigNumber by the value of BigNumber(y, b).
     */ P.dividedToIntegerBy = P.idiv = function(y, b) {
            return div(this, new BigNumber(y, b), 0, 1);
        };
        /*
     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.
     *
     * If m is present, return the result modulo m.
     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.
     *
     * The modular power operation works efficiently when x, n, and m are integers, otherwise it
     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.
     *
     * n {number|string|BigNumber} The exponent. An integer.
     * [m] {number|string|BigNumber} The modulus.
     *
     * '[BigNumber Error] Exponent not an integer: {n}'
     */ P.exponentiatedBy = P.pow = function(n, m) {
            var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y, x = this;
            n = new BigNumber(n);
            // Allow NaN and ±Infinity, but not other non-integers.
            if (n.c && !n.isInteger()) throw Error(bignumberError + 'Exponent not an integer: ' + valueOf(n));
            if (m != null) m = new BigNumber(m);
            // Exponent of MAX_SAFE_INTEGER is 15.
            nIsBig = n.e > 14;
            // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.
            if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {
                // The sign of the result of pow when x is negative depends on the evenness of n.
                // If +n overflows to ±Infinity, the evenness of n would be not be known.
                y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));
                return m ? y.mod(m) : y;
            }
            nIsNeg = n.s < 0;
            if (m) {
                // x % m returns NaN if abs(m) is zero, or m is NaN.
                if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);
                isModExp = !nIsNeg && x.isInteger() && m.isInteger();
                if (isModExp) x = x.mod(m);
            // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.
            // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.
            } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0 ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7 : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {
                // If x is negative and n is odd, k = -0, else k = 0.
                k = x.s < 0 && isOdd(n) ? -0 : 0;
                // If x >= 1, k = ±Infinity.
                if (x.e > -1) k = 1 / k;
                // If n is negative return ±0, else return ±Infinity.
                return new BigNumber(nIsNeg ? 1 / k : k);
            } else if (POW_PRECISION) // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
            if (nIsBig) {
                half = new BigNumber(0.5);
                if (nIsNeg) n.s = 1;
                nIsOdd = isOdd(n);
            } else {
                i = Math.abs(+valueOf(n));
                nIsOdd = i % 2;
            }
            y = new BigNumber(ONE);
            // Performs 54 loop iterations for n of 9007199254740991.
            for(;;){
                if (nIsOdd) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (isModExp) y = y.mod(m); //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));
                }
                if (i) {
                    i = mathfloor(i / 2);
                    if (i === 0) break;
                    nIsOdd = i % 2;
                } else {
                    n = n.times(half);
                    round(n, n.e + 1, 1);
                    if (n.e > 14) nIsOdd = isOdd(n);
                    else {
                        i = +valueOf(n);
                        if (i === 0) break;
                        nIsOdd = i % 2;
                    }
                }
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (isModExp) x = x.mod(m); //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));
            }
            if (isModExp) return y;
            if (nIsNeg) y = ONE.div(y);
            return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer
     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'
     */ P.integerValue = function(rm) {
            var n = new BigNumber(this);
            if (rm == null) rm = ROUNDING_MODE;
            else intCheck(rm, 0, 8);
            return round(n, n.e + 1, rm);
        };
        /*
     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isEqualTo = P.eq = function(y, b) {
            return compare1(this, new BigNumber(y, b)) === 0;
        };
        /*
     * Return true if the value of this BigNumber is a finite number, otherwise return false.
     */ P.isFinite = function() {
            return !!this.c;
        };
        /*
     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isGreaterThan = P.gt = function(y, b) {
            return compare1(this, new BigNumber(y, b)) > 0;
        };
        /*
     * Return true if the value of this BigNumber is greater than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isGreaterThanOrEqualTo = P.gte = function(y, b) {
            return (b = compare1(this, new BigNumber(y, b))) === 1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is an integer, otherwise return false.
     */ P.isInteger = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        /*
     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
     * otherwise return false.
     */ P.isLessThan = P.lt = function(y, b) {
            return compare1(this, new BigNumber(y, b)) < 0;
        };
        /*
     * Return true if the value of this BigNumber is less than or equal to the value of
     * BigNumber(y, b), otherwise return false.
     */ P.isLessThanOrEqualTo = P.lte = function(y, b) {
            return (b = compare1(this, new BigNumber(y, b))) === -1 || b === 0;
        };
        /*
     * Return true if the value of this BigNumber is NaN, otherwise return false.
     */ P.isNaN = function() {
            return !this.s;
        };
        /*
     * Return true if the value of this BigNumber is negative, otherwise return false.
     */ P.isNegative = function() {
            return this.s < 0;
        };
        /*
     * Return true if the value of this BigNumber is positive, otherwise return false.
     */ P.isPositive = function() {
            return this.s > 0;
        };
        /*
     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.
     */ P.isZero = function() {
            return !!this.c && this.c[0] == 0;
        };
        /*
     *  n - 0 = n
     *  n - N = N
     *  n - I = -I
     *  0 - n = -n
     *  0 - 0 = 0
     *  0 - N = N
     *  0 - I = -I
     *  N - n = N
     *  N - 0 = N
     *  N - N = N
     *  N - I = N
     *  I - n = I
     *  I - 0 = I
     *  I - N = N
     *  I - I = N
     *
     * Return a new BigNumber whose value is the value of this BigNumber minus the value of
     * BigNumber(y, b).
     */ P.minus = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);
                // Either zero?
                if (!xc[0] || !yc[0]) // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Determine which is the bigger number.
            if (a = xe - ye) {
                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }
                t.reverse();
                // Prepend zeros to equalise exponents.
                for(b = a; b--; t.push(0));
                t.reverse();
            } else {
                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
                for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
            b = (j = yc.length) - (i = xc.length);
            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for(; b--; xc[i++] = 0);
            b = BASE - 1;
            // Subtract yc from xc.
            for(; j > a;){
                if (xc[--j] < yc[j]) {
                    for(i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                }
                xc[j] -= yc[j];
            }
            // Remove leading zeros and adjust exponent accordingly.
            for(; xc[0] == 0; xc.splice(0, 1), --ye);
            // Zero?
            if (!xc[0]) {
                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [
                    y.e = 0
                ];
                return y;
            }
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };
        /*
     *   n % 0 =  N
     *   n % N =  N
     *   n % I =  n
     *   0 % n =  0
     *  -0 % n = -0
     *   0 % 0 =  N
     *   0 % N =  N
     *   0 % I =  0
     *   N % n =  N
     *   N % 0 =  N
     *   N % N =  N
     *   N % I =  N
     *   I % n =  N
     *   I % 0 =  N
     *   I % N =  N
     *   I % I =  N
     *
     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
     * BigNumber(y, b). The result depends on the value of MODULO_MODE.
     */ P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            y = new BigNumber(y, b);
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) return new BigNumber(NaN);
            else if (!y.c || x.c && !x.c[0]) return new BigNumber(x);
            if (MODULO_MODE == 9) {
                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else q = div(x, y, 0, MODULO_MODE);
            y = x.minus(q.times(y));
            // To match JavaScript %, ensure sign of zero is sign of dividend.
            if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;
            return y;
        };
        /*
     *  n * 0 = 0
     *  n * N = N
     *  n * I = I
     *  0 * n = 0
     *  0 * 0 = 0
     *  0 * N = N
     *  0 * I = N
     *  N * n = N
     *  N * 0 = N
     *  N * N = N
     *  N * I = N
     *  I * n = I
     *  I * 0 = N
     *  I * N = N
     *  I * I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value
     * of BigNumber(y, b).
     */ P.multipliedBy = P.times = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (y = new BigNumber(y, b)).c;
            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) y.c = y.e = y.s = null;
                else {
                    y.s *= x.s;
                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) y.c = y.e = null;
                    else {
                        y.c = [
                            0
                        ];
                        y.e = 0;
                    }
                }
                return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;
            // Initialise the result array with zeros.
            for(i = xcL + ycL, zc = []; i--; zc.push(0));
            base = BASE;
            sqrtBase = SQRT_BASE;
            for(i = ycL; --i >= 0;){
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;
                for(k = xcL, j = i + k; j > i;){
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }
                zc[j] = c;
            }
            if (c) ++e;
            else zc.splice(0, 1);
            return normalise(y, zc, e);
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber negated,
     * i.e. multiplied by -1.
     */ P.negated = function() {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };
        /*
     *  n + 0 = n
     *  n + N = N
     *  n + I = I
     *  0 + n = n
     *  0 + 0 = 0
     *  0 + N = N
     *  0 + I = I
     *  N + n = N
     *  N + 0 = N
     *  N + N = N
     *  N + I = N
     *  I + n = I
     *  I + 0 = I
     *  I + N = N
     *  I + I = I
     *
     * Return a new BigNumber whose value is the value of this BigNumber plus the value of
     * BigNumber(y, b).
     */ P.plus = function(y, b) {
            var t, x = this, a = x.s;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);
                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }
                t.reverse();
                for(; a--; t.push(0));
                t.reverse();
            }
            a = xc.length;
            b = yc.length;
            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for(a = 0; b;){
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;
            }
            if (a) {
                xc = [
                    a
                ].concat(xc);
                ++ye;
            }
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };
        /*
     * If sd is undefined or null or true or false, return the number of significant digits of
     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.
     * If sd is true include integer-part trailing zeros in the count.
     *
     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this
     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or
     * ROUNDING_MODE if rm is omitted.
     *
     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.
     *                     boolean: whether to count integer-part trailing zeros: true or false.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.precision = P.sd = function(sd, rm) {
            var c, n, v, x = this;
            if (sd != null && sd !== !!sd) {
                intCheck(sd, 1, MAX);
                if (rm == null) rm = ROUNDING_MODE;
                else intCheck(rm, 0, 8);
                return round(new BigNumber(x), sd, rm);
            }
            if (!(c = x.c)) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
                // Subtract the number of trailing zeros of the last element.
                for(; v % 10 == 0; v /= 10, n--);
                // Add the number of digits of the first element.
                for(v = c[0]; v >= 10; v /= 10, n++);
            }
            if (sd && x.e + 1 > n) n = x.e + 1;
            return n;
        };
        /*
     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
     *
     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'
     */ P.shiftedBy = function(k) {
            intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);
            return this.times('1e' + k);
        };
        /*
     *  sqrt(-n) =  N
     *  sqrt(N) =  N
     *  sqrt(-I) =  N
     *  sqrt(I) =  I
     *  sqrt(0) =  0
     *  sqrt(-0) = -0
     *
     * Return a new BigNumber whose value is the square root of the value of this BigNumber,
     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
     */ P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber('0.5');
            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            // Initial estimate.
            s = Math.sqrt(+valueOf(x));
            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += '0';
                s = Math.sqrt(+n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
                if (s == 1 / 0) n = '1e' + e;
                else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                }
                r = new BigNumber(n);
            } else r = new BigNumber(s + '');
            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;
                // Newton-Raphson iteration.
                for(;;){
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));
                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == '9999' || !rep && n == '4999') {
                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);
                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }
                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }
                            break;
                        }
                    }
                }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        /*
     * Return a string representing the value of this BigNumber in exponential notation and
     * rounded using ROUNDING_MODE to dp fixed decimal places.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toExponential = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp++;
            }
            return format1(this, dp, rm, 1);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounding
     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
     *
     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
     * but e.g. (-0.00001).toFixed(0) is '-0'.
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     */ P.toFixed = function(dp, rm) {
            if (dp != null) {
                intCheck(dp, 0, MAX);
                dp = dp + this.e + 1;
            }
            return format1(this, dp, rm);
        };
        /*
     * Return a string representing the value of this BigNumber in fixed-point notation rounded
     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
     * of the format or FORMAT object (see BigNumber.set).
     *
     * The formatting object may contain some or all of the properties shown below.
     *
     * FORMAT = {
     *   prefix: '',
     *   groupSize: 3,
     *   secondaryGroupSize: 0,
     *   groupSeparator: ',',
     *   decimalSeparator: '.',
     *   fractionGroupSize: 0,
     *   fractionGroupSeparator: '\xA0',      // non-breaking space
     *   suffix: ''
     * };
     *
     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     * [format] {object} Formatting options. See FORMAT pbject above.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'
     * '[BigNumber Error] Argument not an object: {format}'
     */ P.toFormat = function(dp, rm, format) {
            var str, x = this;
            if (format == null) {
                if (dp != null && rm && typeof rm == 'object') {
                    format = rm;
                    rm = null;
                } else if (dp && typeof dp == 'object') {
                    format = dp;
                    dp = rm = null;
                } else format = FORMAT;
            } else if (typeof format != 'object') throw Error(bignumberError + 'Argument not an object: ' + format);
            str = x.toFixed(dp, rm);
            if (x.c) {
                var i, arr = str.split('.'), g1 = +format.groupSize, g2 = +format.secondaryGroupSize, groupSeparator = format.groupSeparator || '', intPart = arr[0], fractionPart = arr[1], isNeg = x.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;
                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                }
                str = fractionPart ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + (format.fractionGroupSeparator || '')) : fractionPart) : intPart;
            }
            return (format.prefix || '') + str + (format.suffix || '');
        };
        /*
     * Return an array of two BigNumbers representing the value of this BigNumber as a simple
     * fraction with an integer numerator and an integer denominator.
     * The denominator will be a positive non-zero value less than or equal to the specified
     * maximum denominator. If a maximum denominator is not specified, the denominator will be
     * the lowest value necessary to represent the number exactly.
     *
     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.
     *
     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'
     */ P.toFraction = function(md) {
            var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s, x = this, xc = x.c;
            if (md != null) {
                n = new BigNumber(md);
                // Throw if md is less than one or is not an integer, unless it is Infinity.
                if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) throw Error(bignumberError + 'Argument ' + (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));
            }
            if (!xc) return new BigNumber(x);
            d = new BigNumber(ONE);
            n1 = d0 = new BigNumber(ONE);
            d1 = n0 = new BigNumber(ONE);
            s = coeffToString(xc);
            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.comparedTo(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);
            // n0 = d1 = 0
            n0.c[0] = 0;
            for(;;){
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.comparedTo(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e = e * 2;
            // Determine which fraction is closer to x, n0/d0 or n1/d1
            r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [
                n1,
                d1
            ] : [
                n0,
                d0
            ];
            MAX_EXP = exp;
            return r;
        };
        /*
     * Return the value of this BigNumber converted to a number primitive.
     */ P.toNumber = function() {
            return +valueOf(this);
        };
        /*
     * Return a string representing the value of this BigNumber rounded to sd significant digits
     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
     * necessary to represent the integer part of the value in fixed-point notation, then use
     * exponential notation.
     *
     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
     *
     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'
     */ P.toPrecision = function(sd, rm) {
            if (sd != null) intCheck(sd, 1, MAX);
            return format1(this, sd, rm, 2);
        };
        /*
     * Return a string representing the value of this BigNumber in base b, or base 10 if b is
     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
     * TO_EXP_NEG, return exponential notation.
     *
     * [b] {number} Integer, 2 to ALPHABET.length inclusive.
     *
     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'
     */ P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            // Infinity or NaN?
            if (e === null) {
                if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                } else str = 'NaN';
            } else {
                if (b == null) str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(coeffToString(n.c), e) : toFixedPoint(coeffToString(n.c), e, '0');
                else if (b === 10) {
                    n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);
                    str = toFixedPoint(coeffToString(n.c), n.e, '0');
                } else {
                    intCheck(b, 2, ALPHABET.length, 'Base');
                    str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);
                }
                if (s < 0 && n.c[0]) str = '-' + str;
            }
            return str;
        };
        /*
     * Return as toString, but do not accept a base argument, and include the minus sign for
     * negative zero.
     */ P.valueOf = P.toJSON = function() {
            return valueOf(this);
        };
        P._isBigNumber = true;
        if (typeof Symbol == 'function' && typeof Symbol.iterator == 'symbol') {
            P[Symbol.toStringTag] = 'BigNumber';
            // Node.js v10.12.0+
            P[Symbol.for('nodejs.util.inspect.custom')] = P.valueOf;
        }
        if (configObject != null) BigNumber.set(configObject);
        return BigNumber;
    }
    // PRIVATE HELPER FUNCTIONS
    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }
    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + '';
        for(; i < j;){
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for(; z--; s = '0' + s);
            r += s;
        }
        // Determine trailing zeros.
        for(j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
    }
    // Compare the value of BigNumbers x and y.
    function compare1(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        // Either NaN?
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
        // Signs differ?
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        // Compare digit by digit.
        for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    /*
   * Check that n is a primitive number, an integer, and in range, otherwise throw.
   */ function intCheck(n, min, max, name) {
        if (n < min || n > max || n !== (n < 0 ? mathceil(n) : mathfloor(n))) throw Error(bignumberError + (name || 'Argument') + (typeof n == 'number' ? n < min || n > max ? ' out of range: ' : ' not an integer: ' : ' not a primitive number: ') + String(n));
    }
    // Assumes finite n.
    function isOdd(n) {
        var k = n.c.length - 1;
        return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;
    }
    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
    }
    function toFixedPoint(str, e, z) {
        var len, zs;
        // Negative exponent?
        if (e < 0) {
            // Prepend zeros.
            for(zs = z + '.'; ++e; zs += z);
            str = zs + str;
        // Positive exponent
        } else {
            len = str.length;
            // Append zeros.
            if (++e > len) {
                for(zs = z, e -= len; --e; zs += z);
                str += zs;
            } else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
        return str;
    }
    // EXPORT
    BigNumber1 = clone();
    BigNumber1['default'] = BigNumber1.BigNumber = BigNumber1;
    // AMD.
    if (typeof define == 'function' && define.amd) define(function() {
        return BigNumber1;
    });
    else if (module.exports) module.exports = BigNumber1;
    else {
        if (!globalObject) globalObject = typeof self != 'undefined' && self ? self : window;
        globalObject.BigNumber = BigNumber1;
    }
})(this);

},{}],"jZQET":[function(require,module,exports) {
var global = arguments[3];
module.exports = false;
// Only Node.JS has a process variable that is of [[Class]] process
try {
    module.exports = Object.prototype.toString.call(global.process) === '[object process]';
} catch (e) {}

},{}],"2QYpm":[function(require,module,exports) {
"use strict";
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
exports.classUtils = {
    // This is useful for classes that have nested methods. Nested methods don't get bound out of the box.
    bindAll: function(self, exclude, thisArg) {
        if (exclude === void 0) exclude = [
            'contructor'
        ];
        var e_1, _a;
        try {
            for(var _b = __values(Object.getOwnPropertyNames(self)), _c = _b.next(); !_c.done; _c = _b.next()){
                var key = _c.value;
                var val = self[key];
                if (!_.includes(exclude, key)) {
                    if (_.isFunction(val)) self[key] = val.bind(thisArg || self);
                    else if (_.isObject(val)) exports.classUtils.bindAll(val, exclude, self);
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return self;
    }
};

},{"lodash":"3qBDj"}],"kvIhg":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
/* Deletes deeply nested properties from an object. MUTATES the object
 * @param obj the object to be operated on
 * @param propPath the full dot-separated path to the property to delete, e.g. 'animals.mammals.dog.name'
 * returns void
 */ exports.deleteNestedProperty = function(obj, propPath) {
    if (!obj || !propPath) return;
    var propPathParts = propPath.split('.');
    var _obj = obj;
    for(var i = 0; i < propPathParts.length - 1; i++){
        _obj = _obj[propPathParts[i]];
        if (typeof _obj === 'undefined') return;
    }
    while(propPathParts.length > 0)delete _obj[propPathParts.pop()];
};

},{}],"3pfL9":[function(require,module,exports) {
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.intervalUtils = {
    setAsyncExcludingInterval: function(fn, intervalMs, onError) {
        var _this = this;
        var isLocked = false;
        var intervalId = setInterval(function() {
            return __awaiter(_this, void 0, void 0, function() {
                var err_1;
                return __generator(this, function(_a) {
                    switch(_a.label){
                        case 0:
                            if (!isLocked) return [
                                3 /*break*/ ,
                                1
                            ];
                            return [
                                2 /*return*/ 
                            ];
                        case 1:
                            isLocked = true;
                            _a.label = 2;
                        case 2:
                            _a.trys.push([
                                2,
                                4,
                                ,
                                5
                            ]);
                            return [
                                4 /*yield*/ ,
                                fn()
                            ];
                        case 3:
                            _a.sent();
                            return [
                                3 /*break*/ ,
                                5
                            ];
                        case 4:
                            err_1 = _a.sent();
                            onError(err_1);
                            return [
                                3 /*break*/ ,
                                5
                            ];
                        case 5:
                            isLocked = false;
                            _a.label = 6;
                        case 6:
                            return [
                                2 /*return*/ 
                            ];
                    }
                });
            });
        }, intervalMs);
        return intervalId;
    },
    clearAsyncExcludingInterval: function(intervalId) {
        clearInterval(intervalId);
    },
    setInterval: function(fn, intervalMs, onError) {
        var intervalId = setInterval(function() {
            try {
                fn();
            } catch (err) {
                onError(err);
            }
        }, intervalMs);
        return intervalId;
    },
    clearInterval: function(intervalId) {
        clearInterval(intervalId);
    }
};

},{}],"gcR7E":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
exports.providerUtils = {
    /**
     * Starts the Web3ProviderEngine without excess block polling
     * @param providerEngine The Web3ProviderEngine
     */ startProviderEngine: function(providerEngine) {
        if (providerEngine.start === undefined) throw new Error("Invalid Web3ProviderEngine");
        // HACK: When calling start() Web3ProviderEngine starts a block polling service
        // this continuously pulls data from the network and can result in high data usage
        // for long running services. If used in a front end application this can cause
        // a high amount of load on a node (one request per user per block).
        providerEngine._ready.go();
        providerEngine._running = true;
    },
    /**
     * Standardize the supported provider types into our internal provider interface
     * or throw if unsupported provider supplied.
     * @param supportedProvider Potentially supported provider instance
     * @return Provider that conforms of our internal provider interface
     */ standardizeOrThrow: function(supportedProvider) {
        if (supportedProvider === undefined) throw new Error("supportedProvider cannot be 'undefined'");
        var provider = {
            isStandardizedProvider: true,
            isMetaMask: supportedProvider.isMetaMask,
            isParity: supportedProvider.isParity,
            stop: supportedProvider.stop,
            enable: supportedProvider.enable,
            sendAsync: _.noop.bind(_)
        };
        // Case 1: We've already converted to our ZeroExProvider so noop.
        if (supportedProvider.isStandardizedProvider) // tslint:disable-next-line:no-unnecessary-type-assertion
        return supportedProvider;
        else if (supportedProvider.isEIP1193) {
            provider.sendAsync = function(payload, callback) {
                var method = payload.method;
                var params = payload.params;
                supportedProvider.send(method, params).then(function(result) {
                    callback(null, result);
                }).catch(function(err) {
                    callback(err);
                });
            };
            return provider;
        // Case 3: The provider has a `sendAsync` method, so we use it.
        } else if (supportedProvider.sendAsync !== undefined) {
            provider.sendAsync = supportedProvider.sendAsync.bind(supportedProvider);
            return provider;
        // Case 4: The provider does not have a `sendAsync` method but does have a `send` method
        } else if (supportedProvider.send !== undefined) {
            // HACK(fabio): Detect if the `send` method has the old interface `send(payload, cb)` such
            // as in versions < Web3.js@1.0.0-beta.37. If so, do a simple re-mapping
            if (_.includes(supportedProvider.send.toString(), 'function (payload, callback)')) {
                provider.sendAsync = supportedProvider.send.bind(supportedProvider);
                return provider;
            } else {
                // If doesn't have old interface, we assume it has new interface `send(method, payload)`
                // such as in versions > Web3.js@1.0.0-beta.38 and convert it to `sendAsync`
                provider.sendAsync = function(payload, callback) {
                    var method = payload.method;
                    var params = payload.params;
                    supportedProvider.send(method, params).then(function(result) {
                        callback(null, result);
                    }).catch(function(err) {
                        callback(err);
                    });
                };
                return provider;
            }
        }
        throw new Error("Unsupported provider found. Please make sure it conforms to one of the supported providers. See 'Provider' type in 'ethereum-types' package.");
    }
};

},{"lodash":"3qBDj"}],"7YnMw":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var ethers = require("ethers");
var _ = require("lodash");
var _1 = require(".");
var address_utils_1 = require("./address_utils");
var configured_bignumber_1 = require("./configured_bignumber");
/**
 * AbiDecoder allows you to decode event logs given a set of supplied contract ABI's. It takes the contract's event
 * signature from the ABI and attempts to decode the logs using it.
 */ var AbiDecoder = /** @class */ function() {
    /**
     * Instantiate an AbiDecoder
     * @param abiArrays An array of contract ABI's
     * @return AbiDecoder instance
     */ function AbiDecoder1(abiArrays) {
        var _this = this;
        this._eventIds = {};
        this._selectorToFunctionInfo = {};
        _.each(abiArrays, function(abi) {
            _this.addABI(abi);
        });
    }
    /**
     * Retrieves the function selector from calldata.
     * @param calldata hex-encoded calldata.
     * @return hex-encoded function selector.
     */ AbiDecoder1._getFunctionSelector = function(calldata) {
        var functionSelectorLength = 10;
        if (!calldata.startsWith('0x') || calldata.length < functionSelectorLength) throw new Error("Malformed calldata. Must include a hex prefix '0x' and 4-byte function selector. Got '" + calldata + "'");
        var functionSelector = calldata.substr(0, functionSelectorLength);
        return functionSelector;
    };
    /**
     * Attempt to decode a log given the ABI's the AbiDecoder knows about.
     * @param log The log to attempt to decode
     * @return The decoded log if the requisite ABI was available. Otherwise the log unaltered.
     */ AbiDecoder1.prototype.tryToDecodeLogOrNoop = function(log) {
        var eventId = log.topics[0];
        var numIndexedArgs = log.topics.length - 1;
        if (this._eventIds[eventId] === undefined || this._eventIds[eventId][numIndexedArgs] === undefined) return log;
        var event = this._eventIds[eventId][numIndexedArgs];
        var ethersInterface = new ethers.utils.Interface([
            event
        ]);
        var decodedParams = {};
        var topicsIndex = 1;
        var decodedData;
        try {
            decodedData = ethersInterface.events[event.name].decode(log.data);
        } catch (error) {
            if (error.code === ethers.errors.INVALID_ARGUMENT) // Because we index events by Method ID, and Method IDs are derived from the method
            // name and the input parameters, it's possible that the return value of the event
            // does not match our ABI. If that's the case, then ethers will throw an error
            // when we try to parse the event. We handle that case here by returning the log rather
            // than throwing an error.
            return log;
            throw error;
        }
        var didFailToDecode = false;
        _.forEach(event.inputs, function(param, i) {
            // Indexed parameters are stored in topics. Non-indexed ones in decodedData
            var value = param.indexed ? log.topics[topicsIndex++] : decodedData[i];
            if (value === undefined) {
                didFailToDecode = true;
                return;
            }
            if (param.type === ethereum_types_1.SolidityTypes.Address) {
                var baseHex = 16;
                value = address_utils_1.addressUtils.padZeros(new configured_bignumber_1.BigNumber(value.toLowerCase()).toString(baseHex));
            } else if (param.type === ethereum_types_1.SolidityTypes.Uint256 || param.type === ethereum_types_1.SolidityTypes.Uint) value = new configured_bignumber_1.BigNumber(value);
            else if (param.type === ethereum_types_1.SolidityTypes.Uint8) value = new configured_bignumber_1.BigNumber(value).toNumber();
            decodedParams[param.name] = value;
        });
        if (didFailToDecode) return log;
        else return __assign({}, log, {
            event: event.name,
            args: decodedParams
        });
    };
    /**
     * Decodes calldata for a known ABI.
     * @param calldata hex-encoded calldata.
     * @param contractName used to disambiguate similar ABI's (optional).
     * @return Decoded calldata. Includes: function name and signature, along with the decoded arguments.
     */ AbiDecoder1.prototype.decodeCalldataOrThrow = function(calldata, contractName) {
        var functionSelector = AbiDecoder1._getFunctionSelector(calldata);
        var candidateFunctionInfos = this._selectorToFunctionInfo[functionSelector];
        if (candidateFunctionInfos === undefined) throw new Error("No functions registered for selector '" + functionSelector + "'");
        var functionInfo = _.find(candidateFunctionInfos, function(candidateFunctionInfo) {
            return contractName === undefined || _.toLower(contractName) === _.toLower(candidateFunctionInfo.contractName);
        });
        if (functionInfo === undefined) throw new Error("No function registered with selector " + functionSelector + " and contract name " + contractName + ".");
        else if (functionInfo.abiEncoder === undefined) throw new Error("Function ABI Encoder is not defined, for function registered with selector " + functionSelector + " and contract name " + contractName + ".");
        var functionName = functionInfo.abiEncoder.getDataItem().name;
        var functionSignature = functionInfo.abiEncoder.getSignatureType();
        var functionArguments = functionInfo.abiEncoder.decode(calldata);
        var decodedCalldata = {
            functionName: functionName,
            functionSignature: functionSignature,
            functionArguments: functionArguments
        };
        return decodedCalldata;
    };
    /**
     * Adds a set of ABI definitions, after which calldata and logs targeting these ABI's can be decoded.
     * Additional properties can be included to disambiguate similar ABI's. For example, if two functions
     * have the same signature but different parameter names, then their ABI definitions can be disambiguated
     * by specifying a contract name.
     * @param abiDefinitions ABI definitions for a given contract.
     * @param contractName Name of contract that encapsulates the ABI definitions (optional).
     *                     This can be used when decoding calldata to disambiguate methods with
     *                     the same signature but different parameter names.
     */ AbiDecoder1.prototype.addABI = function(abiArray, contractName) {
        var _this = this;
        if (abiArray === undefined) return;
        var ethersInterface = new ethers.utils.Interface(abiArray);
        _.map(abiArray, function(abi) {
            switch(abi.type){
                case ethereum_types_1.AbiType.Event:
                    // tslint:disable-next-line:no-unnecessary-type-assertion
                    _this._addEventABI(abi, ethersInterface);
                    break;
                case ethereum_types_1.AbiType.Function:
                    // tslint:disable-next-line:no-unnecessary-type-assertion
                    _this._addMethodABI(abi, contractName);
                    break;
                default:
                    break;
            }
        });
    };
    AbiDecoder1.prototype._addEventABI = function(eventAbi, ethersInterface) {
        var _a;
        var topic = ethersInterface.events[eventAbi.name].topic;
        var numIndexedArgs = _.reduce(eventAbi.inputs, function(sum, input) {
            return input.indexed ? sum + 1 : sum;
        }, 0);
        this._eventIds[topic] = __assign({}, this._eventIds[topic], (_a = {}, _a[numIndexedArgs] = eventAbi, _a));
    };
    AbiDecoder1.prototype._addMethodABI = function(methodAbi, contractName) {
        var abiEncoder = new _1.AbiEncoder.Method(methodAbi);
        var functionSelector = abiEncoder.getSelector();
        if (!(functionSelector in this._selectorToFunctionInfo)) this._selectorToFunctionInfo[functionSelector] = [];
        // Recored a copy of this ABI for each deployment
        var functionSignature = abiEncoder.getSignature();
        this._selectorToFunctionInfo[functionSelector].push({
            functionSignature: functionSignature,
            abiEncoder: abiEncoder,
            contractName: contractName
        });
    };
    return AbiDecoder1;
}();
exports.AbiDecoder = AbiDecoder;

},{"ethereum-types":"i8oCe","ethers":"9VrIZ","lodash":"3qBDj",".":"dgW7d","./address_utils":"Dl2Nj","./configured_bignumber":"TutUZ"}],"i8oCe":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var OpCode;
(function(OpCode1) {
    // 0s: Stop and Arithmetic Operations
    OpCode1["Stop"] = "STOP";
    OpCode1["Add"] = "ADD";
    OpCode1["Mul"] = "MUL";
    OpCode1["Sub"] = "SUB";
    OpCode1["Div"] = "DIV";
    OpCode1["SDiv"] = "SDIV";
    OpCode1["Mod"] = "MOD";
    OpCode1["SMod"] = "SMOD";
    OpCode1["AddMod"] = "ADDMOD";
    OpCode1["MulMod"] = "MULMOD";
    OpCode1["Exp"] = "EXP";
    OpCode1["SignExtend"] = "SIGNEXTEND";
    // 10s: Comparison & Bitwise Logic Operations
    OpCode1["Lt"] = "LT";
    OpCode1["Gt"] = "GT";
    OpCode1["SLt"] = "SLT";
    OpCode1["SGt"] = "SGT";
    OpCode1["Eq"] = "EQ";
    OpCode1["IsZero"] = "ISZERO";
    OpCode1["And"] = "AND";
    OpCode1["Or"] = "OR";
    OpCode1["Xor"] = "XOR";
    OpCode1["Not"] = "NOT";
    OpCode1["Byte"] = "BYTE";
    // 20s: SHA3
    OpCode1["Sha3"] = "SHA3";
    // 30s: Environmental Information
    OpCode1["Address"] = "ADDRESS";
    OpCode1["Balance"] = "BALANCE";
    OpCode1["Origin"] = "ORIGIN";
    OpCode1["Caller"] = "CALLER";
    OpCode1["CallValue"] = "CALLVALUE";
    OpCode1["CallDataLoad"] = "CALLDATALOAD";
    OpCode1["CallDataSize"] = "CALLDATASIZE";
    OpCode1["CallDataCopy"] = "CALLDATACOPY";
    OpCode1["CodeSize"] = "CODESIZE";
    OpCode1["CodeCopy"] = "CODECOPY";
    OpCode1["GasPrice"] = "GASPRICE";
    OpCode1["ExtCodeSize"] = "EXTCODESIZE";
    OpCode1["ExtCodeCopy"] = "EXTCODECOPY";
    OpCode1["ReturnDataSize"] = "RETURNDATASIZE";
    OpCode1["ReturnDataCopy"] = "RETURNDATACOPY";
    // 40s: Block Information
    OpCode1["BlockHash"] = "BLOCKHASH";
    OpCode1["Coinbase"] = "COINBASE";
    OpCode1["TimeStamp"] = "TimeStamp";
    OpCode1["Number"] = "NUMBER";
    OpCode1["Difficulty"] = "DIFFICULTY";
    OpCode1["Gaslimit"] = "GASLIMIT";
    // 50s: Stack, Memory, Storage and Flow Operations
    OpCode1["Pop"] = "POP";
    OpCode1["MLoad"] = "MLOAD";
    OpCode1["MStore"] = "MSTORE";
    OpCode1["MStore8"] = "MSTORE8";
    OpCode1["SLoad"] = "SLOAD";
    OpCode1["SStore"] = "SSTORE";
    OpCode1["Jump"] = "JUMP";
    OpCode1["Jumpi"] = "JUMPI";
    OpCode1["Pc"] = "PC";
    OpCode1["MSize"] = "MSIZE";
    OpCode1["Gas"] = "GAS";
    OpCode1["JumpDest"] = "JUMPDEST";
    // 60s & 70s: Push Operations
    OpCode1["Push1"] = "PUSH1";
    OpCode1["Push2"] = "PUSH2";
    OpCode1["Push3"] = "PUSH3";
    OpCode1["Push4"] = "PUSH4";
    OpCode1["Push5"] = "PUSH5";
    OpCode1["Push6"] = "PUSH6";
    OpCode1["Push7"] = "PUSH7";
    OpCode1["Push8"] = "PUSH8";
    OpCode1["Push9"] = "PUSH9";
    OpCode1["Push10"] = "PUSH10";
    OpCode1["Push11"] = "PUSH11";
    OpCode1["Push12"] = "PUSH12";
    OpCode1["Push13"] = "PUSH13";
    OpCode1["Push14"] = "PUSH14";
    OpCode1["Push15"] = "PUSH15";
    OpCode1["Push16"] = "PUSH16";
    OpCode1["Push17"] = "PUSH17";
    OpCode1["Push18"] = "PUSH18";
    OpCode1["Push19"] = "PUSH19";
    OpCode1["Push20"] = "PUSH20";
    OpCode1["Push21"] = "PUSH21";
    OpCode1["Push22"] = "PUSH22";
    OpCode1["Push23"] = "PUSH23";
    OpCode1["Push24"] = "PUSH24";
    OpCode1["Push25"] = "PUSH25";
    OpCode1["Push26"] = "PUSH26";
    OpCode1["Push27"] = "PUSH27";
    OpCode1["Push28"] = "PUSH28";
    OpCode1["Push29"] = "PUSH29";
    OpCode1["Push30"] = "PUSH30";
    OpCode1["Push31"] = "PUSH31";
    OpCode1["Push32"] = "PUSH32";
    // 80s: Duplication Operation
    OpCode1["Dup1"] = "DUP1";
    OpCode1["Dup2"] = "DUP2";
    OpCode1["Dup3"] = "DUP3";
    OpCode1["Dup4"] = "DUP4";
    OpCode1["Dup5"] = "DUP5";
    OpCode1["Dup6"] = "DUP6";
    OpCode1["Dup7"] = "DUP7";
    OpCode1["Dup8"] = "DUP8";
    OpCode1["Dup9"] = "DUP9";
    OpCode1["Dup10"] = "DUP10";
    OpCode1["Dup11"] = "DUP11";
    OpCode1["Dup12"] = "DUP12";
    OpCode1["Dup13"] = "DUP13";
    OpCode1["Dup14"] = "DUP14";
    OpCode1["Dup15"] = "DUP15";
    OpCode1["Dup16"] = "DUP16";
    // 90s: Exchange Operation
    OpCode1["Swap1"] = "SWAP1";
    OpCode1["Swap2"] = "SWAP2";
    OpCode1["Swap3"] = "SWAP3";
    OpCode1["Swap4"] = "SWAP4";
    OpCode1["Swap5"] = "SWAP5";
    OpCode1["Swap6"] = "SWAP6";
    OpCode1["Swap7"] = "SWAP7";
    OpCode1["Swap8"] = "SWAP8";
    OpCode1["Swap9"] = "SWAP9";
    OpCode1["Swap10"] = "SWAP10";
    OpCode1["Swap11"] = "SWAP11";
    OpCode1["Swap12"] = "SWAP12";
    OpCode1["Swap13"] = "SWAP13";
    OpCode1["Swap14"] = "SWAP14";
    OpCode1["Swap15"] = "SWAP15";
    OpCode1["Swap16"] = "SWAP16";
    // a0s: Logging Operations
    OpCode1["Log1"] = "LOG1";
    OpCode1["Log2"] = "LOG2";
    OpCode1["Log3"] = "LOG3";
    OpCode1["Log4"] = "LOG4";
    // f0s: System operations
    OpCode1["Create"] = "CREATE";
    OpCode1["Call"] = "CALL";
    OpCode1["CallCode"] = "CALLCODE";
    OpCode1["Return"] = "RETURN";
    OpCode1["DelegateCall"] = "DELEGATECALL";
    OpCode1["StaticCall"] = "STATICCALL";
    OpCode1["Revert"] = "REVERT";
    OpCode1["Invalid"] = "INVALID";
    OpCode1["SelfDestruct"] = "SELFDESTRUCT";
})(OpCode = exports.OpCode || (exports.OpCode = {}));
var AbiType;
(function(AbiType1) {
    AbiType1["Function"] = "function";
    AbiType1["Constructor"] = "constructor";
    AbiType1["Event"] = "event";
    AbiType1["Fallback"] = "fallback";
})(AbiType = exports.AbiType || (exports.AbiType = {}));
var BlockParamLiteral;
(function(BlockParamLiteral1) {
    BlockParamLiteral1["Earliest"] = "earliest";
    BlockParamLiteral1["Latest"] = "latest";
    BlockParamLiteral1["Pending"] = "pending";
})(BlockParamLiteral = exports.BlockParamLiteral || (exports.BlockParamLiteral = {}));
var SolidityTypes;
(function(SolidityTypes1) {
    SolidityTypes1["Address"] = "address";
    SolidityTypes1["Bool"] = "bool";
    SolidityTypes1["Bytes"] = "bytes";
    SolidityTypes1["Int"] = "int";
    SolidityTypes1["String"] = "string";
    SolidityTypes1["Tuple"] = "tuple";
    SolidityTypes1["Uint256"] = "uint256";
    SolidityTypes1["Uint8"] = "uint8";
    SolidityTypes1["Uint"] = "uint";
})(SolidityTypes = exports.SolidityTypes || (exports.SolidityTypes = {}));

},{}],"9VrIZ":[function(require,module,exports) {
var global = arguments[3];
!function(e) {
    module.exports = e();
}(function() {
    return (function n(i, o, s) {
        function a(t, e2) {
            if (!o[t]) {
                if (!i[t]) {
                    var r = undefined;
                    if (!e2 && r) return r(t, !0);
                    if (u) return u(t, !0);
                    throw (r = new Error("Cannot find module '" + t + "'")).code = "MODULE_NOT_FOUND", r;
                }
                r = o[t] = {
                    exports: {}
                }, i[t][0].call(r.exports, function(e) {
                    return a(i[t][1][e] || e);
                }, r, r.exports, n, i, o, s);
            }
            return o[t].exports;
        }
        for(var u = undefined, e1 = 0; e1 < s.length; e1++)a(s[e1]);
        return a;
    })({
        1: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                }), r.version = "4.0.49";
            },
            {}
        ],
        2: [
            function(e3, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                var n = e3("./utils/properties"), e3 = (i.isSigner = function(e) {
                    return n.isType(e, "Signer");
                }, i);
                function i() {
                    n.setType(this, "Signer");
                }
                r.Signer = e3;
            },
            {
                "./utils/properties": 74
            }
        ],
        3: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                var n = e("./utils/bignumber");
                r.AddressZero = "0x0000000000000000000000000000000000000000";
                r.HashZero = "0x0000000000000000000000000000000000000000000000000000000000000000";
                r.EtherSymbol = "\u039e";
                e = n.bigNumberify(-1);
                r.NegativeOne = e;
                e = n.bigNumberify(0);
                r.Zero = e;
                e = n.bigNumberify(1);
                r.One = e;
                e = n.bigNumberify(2);
                r.Two = e;
                e = n.bigNumberify("1000000000000000000");
                r.WeiPerEther = e;
                n = n.bigNumberify("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
                r.MaxUint256 = n;
            },
            {
                "./utils/bignumber": 63
            }
        ],
        4: [
            function(e4, t1, r1) {
                "use strict";
                var n1, i1 = this && this.__extends || (n1 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n1(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o1 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r1, "__esModule", {
                    value: !0
                });
                var s1, u = e4("./constants"), l = o1(e4("./errors")), h = e4("./utils/abi-coder"), a1 = e4("./utils/address"), f = e4("./utils/bignumber"), c = e4("./utils/bytes"), d = e4("./utils/interface"), p = e4("./utils/properties"), y = e4("./providers/abstract-provider"), m = e4("./abstract-signer"), g = (s1 = m.Signer, i1(v, s1), v.prototype.getAddress = function() {
                    return Promise.resolve(this.address);
                }, v.prototype._fail = function(e, t) {
                    return Promise.resolve().then(function() {
                        l.throwError(e, l.UNSUPPORTED_OPERATION, {
                            operation: t
                        });
                    });
                }, v.prototype.signMessage = function(e) {
                    return this._fail("VoidSigner cannot sign messages", "signMessage");
                }, v.prototype.sendTransaction = function(e) {
                    return this._fail("VoidSigner cannot sign transactions", "sendTransaction");
                }, v.prototype.connect = function(e) {
                    return new v(this.address, e);
                }, v);
                function v(e, t) {
                    var r = s1.call(this) || this;
                    return p.defineReadOnly(r, "address", e), p.defineReadOnly(r, "provider", t), r;
                }
                r1.VoidSigner = g;
                var b = {
                    chainId: !0,
                    data: !0,
                    from: !0,
                    gasLimit: !0,
                    gasPrice: !0,
                    nonce: !0,
                    to: !0,
                    value: !0
                };
                function w(o2, e5, s2) {
                    var a2 = o2.interface.functions[e5];
                    return function() {
                        for(var e6 = [], t2 = 0; t2 < arguments.length; t2++)e6[t2] = arguments[t2];
                        var i2 = {}, r2 = null;
                        if (e6.length === a2.inputs.length + 1 && "object" == typeof e6[e6.length - 1]) {
                            for(var n in null != (i2 = p.shallowCopy(e6.pop())).blockTag && (r2 = i2.blockTag), delete i2.blockTag, i2)if (!b[n]) throw new Error("unknown transaction override " + n);
                        }
                        if (e6.length != a2.inputs.length) throw new Error("incorrect number of arguments");
                        return [
                            "data",
                            "to"
                        ].forEach(function(e) {
                            null != i2[e] && l.throwError("cannot override " + e, l.UNSUPPORTED_OPERATION, {
                                operation: e
                            });
                        }), i2.to = o2._deployed(r2).then(function() {
                            return o2.addressPromise;
                        }), (function n(i, o, e7) {
                            if (Array.isArray(e7)) {
                                var s = [];
                                return e7.forEach(function(e, t) {
                                    var r = null, r = Array.isArray(o) ? o[t] : o[e.name];
                                    s.push(n(i, r, e));
                                }), Promise.all(s);
                            }
                            if ("address" === e7.type) return i.resolveName(o);
                            if ("tuple" === e7.type) return n(i, o, e7.components);
                            var t3 = e7.type.match(/(.*)(\[[0-9]*\]$)/);
                            if (t3) {
                                if (!Array.isArray(o)) throw new Error("invalid value for array");
                                var r3 = [], a = {
                                    components: e7.components,
                                    type: t3[1]
                                };
                                return o.forEach(function(e) {
                                    r3.push(n(i, e, a));
                                }), Promise.all(r3);
                            }
                            return Promise.resolve(o);
                        })(o2.provider, e6, a2.inputs).then(function(n) {
                            if (i2.data = a2.encode(n), "call" === a2.type) return s2 ? Promise.resolve(u.Zero) : (o2.provider || l.throwError("call (constant functions) require a provider or a signer with a provider", l.UNSUPPORTED_OPERATION, {
                                operation: "call"
                            }), [
                                "gasLimit",
                                "gasPrice",
                                "value"
                            ].forEach(function(e) {
                                if (null != i2[e]) throw new Error("call cannot override " + e);
                            }), null == i2.from && o2.signer && (i2.from = o2.signer.getAddress()), o2.provider.call(i2, r2).then(function(t) {
                                var e;
                                c.hexDataLength(t) % 32 == 4 && "0x08c379a0" === c.hexDataSlice(t, 0, 4) && (e = h.defaultAbiCoder.decode([
                                    "string"
                                ], c.hexDataSlice(t, 4)), l.throwError("call revert exception", l.CALL_EXCEPTION, {
                                    address: o2.address,
                                    args: n,
                                    method: a2.signature,
                                    errorSignature: "Error(string)",
                                    errorArgs: [
                                        e
                                    ],
                                    reason: e,
                                    transaction: i2
                                }));
                                try {
                                    var r = a2.decode(t);
                                    return r = 1 === a2.outputs.length ? r[0] : r;
                                } catch (e8) {
                                    throw "0x" === t && 0 < a2.outputs.length && l.throwError("call exception", l.CALL_EXCEPTION, {
                                        address: o2.address,
                                        method: a2.signature,
                                        args: n
                                    }), e8;
                                }
                            }));
                            if ("transaction" === a2.type) return s2 ? (o2.provider || l.throwError("estimate gas require a provider or a signer with a provider", l.UNSUPPORTED_OPERATION, {
                                operation: "estimateGas"
                            }), null == i2.from && o2.signer && (i2.from = o2.signer.getAddress()), o2.provider.estimateGas(i2)) : (null == i2.gasLimit && null != a2.gas && (i2.gasLimit = f.bigNumberify(a2.gas).add(21e3)), o2.signer || l.throwError("sending a transaction requires a signer", l.UNSUPPORTED_OPERATION, {
                                operation: "sendTransaction"
                            }), null != i2.from && l.throwError("cannot override from in a transaction", l.UNSUPPORTED_OPERATION, {
                                operation: "sendTransaction"
                            }), o2.signer.sendTransaction(i2).then(function(e9) {
                                var t4 = e9.wait.bind(e9);
                                return e9.wait = function(e10) {
                                    return t4(e10).then(function(r) {
                                        return r.events = r.logs.map(function(e) {
                                            var t = p.deepCopy(e), e = o2.interface.parseLog(e);
                                            return e && (t.args = e.values, t.decode = e.decode, t.event = e.name, t.eventSignature = e.signature), t.removeListener = function() {
                                                return o2.provider;
                                            }, t.getBlock = function() {
                                                return o2.provider.getBlock(r.blockHash);
                                            }, t.getTransaction = function() {
                                                return o2.provider.getTransaction(r.transactionHash);
                                            }, t.getTransactionReceipt = function() {
                                                return Promise.resolve(r);
                                            }, t;
                                        }), r;
                                    });
                                }, e9;
                            }));
                            throw new Error("invalid type - " + a2.type);
                        });
                    };
                }
                function _(e) {
                    return !e.address || null != e.topics && 0 !== e.topics.length ? (e.address || "*") + "@" + (e.topics ? e.topics.join(":") : "") : "*";
                }
                var M = (A.prototype.deployed = function() {
                    return this._deployed();
                }, A.prototype._deployed = function(e11) {
                    var t = this;
                    return this._deployedPromise || (this.deployTransaction ? this._deployedPromise = this.deployTransaction.wait().then(function() {
                        return t;
                    }) : this._deployedPromise = this.provider.getCode(this.address, e11).then(function(e) {
                        return "0x" === e && l.throwError("contract not deployed", l.UNSUPPORTED_OPERATION, {
                            contractAddress: t.address,
                            operation: "getDeployed"
                        }), t;
                    })), this._deployedPromise;
                }, A.prototype.fallback = function(e12) {
                    var t = this;
                    this.signer || l.throwError("sending a transaction requires a signer", l.UNSUPPORTED_OPERATION, {
                        operation: "sendTransaction(fallback)"
                    });
                    var r = p.shallowCopy(e12 || {});
                    return [
                        "from",
                        "to"
                    ].forEach(function(e) {
                        null != r[e] && l.throwError("cannot override " + e, l.UNSUPPORTED_OPERATION, {
                            operation: e
                        });
                    }), r.to = this.addressPromise, this.deployed().then(function() {
                        return t.signer.sendTransaction(r);
                    });
                }, A.prototype.connect = function(e) {
                    "string" == typeof e && (e = new g(e, this.provider));
                    e = new A(this.address, this.interface, e);
                    return this.deployTransaction && p.defineReadOnly(e, "deployTransaction", this.deployTransaction), e;
                }, A.prototype.attach = function(e) {
                    return new A(e, this.interface, this.signer || this.provider);
                }, A.isIndexed = function(e) {
                    return d.Interface.isIndexed(e);
                }, A.prototype._getEventFilter = function(e13) {
                    var r = this;
                    if ("string" == typeof e13) {
                        if ("*" === e13) return {
                            prepareEvent: function(e) {
                                var t = r.interface.parseLog(e);
                                return t && (e.args = t.values, e.decode = t.decode, e.event = t.name, e.eventSignature = t.signature), [
                                    e
                                ];
                            },
                            eventTag: "*",
                            filter: {
                                address: this.address
                            }
                        };
                        -1 !== e13.indexOf("(") && (e13 = h.formatSignature(h.parseSignature("event " + e13)));
                        var n = this.interface.events[e13];
                        n || l.throwError("unknown event - " + e13, l.INVALID_ARGUMENT, {
                            argumnet: "eventName",
                            value: e13
                        });
                        var t5 = {
                            address: this.address,
                            topics: [
                                n.topic
                            ]
                        };
                        return {
                            prepareEvent: function(e) {
                                var t = n.decode(e.data, e.topics);
                                e.args = t;
                                t = Array.prototype.slice.call(t);
                                return t.push(e), t;
                            },
                            event: n,
                            eventTag: _(t5),
                            filter: t5
                        };
                    }
                    var t5 = {
                        address: this.address
                    }, i = null;
                    if (e13.topics && e13.topics[0]) {
                        for(var o in t5.topics = e13.topics, this.interface.events)if (-1 !== o.indexOf("(")) {
                            o = this.interface.events[o];
                            if (o.topic === e13.topics[0].toLowerCase()) {
                                i = o;
                                break;
                            }
                        }
                    }
                    return {
                        prepareEvent: function(e) {
                            if (!i) return [
                                e
                            ];
                            var t = i.decode(e.data, e.topics);
                            e.args = t;
                            t = Array.prototype.slice.call(t);
                            return t.push(e), t;
                        },
                        event: i,
                        eventTag: _(t5),
                        filter: t5
                    };
                }, A.prototype._addEventListener = function(n, i, e14) {
                    var o = this;
                    this.provider || l.throwError("events require a provider or a signer with a provider", l.UNSUPPORTED_OPERATION, {
                        operation: "once"
                    });
                    function t7(e) {
                        var t = p.deepCopy(e), r = n.prepareEvent(t);
                        n.event && (t.decode = n.event.decode, t.event = n.event.name, t.eventSignature = n.event.signature), t.removeListener = function() {
                            o.removeListener(n.filter, i);
                        }, t.getBlock = function() {
                            return o.provider.getBlock(e.blockHash);
                        }, t.getTransaction = function() {
                            return o.provider.getTransaction(e.transactionHash);
                        }, t.getTransactionReceipt = function() {
                            return o.provider.getTransactionReceipt(e.transactionHash);
                        }, o.emit.apply(o, [
                            n.filter
                        ].concat(r));
                    }
                    this.provider.on(n.filter, t7), this._events.push({
                        eventFilter: n,
                        listener: i,
                        wrappedListener: t7,
                        once: e14
                    });
                }, A.prototype.on = function(e, t) {
                    return this._addEventListener(this._getEventFilter(e), t, !1), this;
                }, A.prototype.once = function(e, t) {
                    return this._addEventListener(this._getEventFilter(e), t, !0), this;
                }, A.prototype.addListener = function(e, t) {
                    return this.on(e, t);
                }, A.prototype.emit = function(e15) {
                    for(var t = this, r = [], n = 1; n < arguments.length; n++)r[n - 1] = arguments[n];
                    if (!this.provider) return !1;
                    var i = !1, o = this._getEventFilter(e15);
                    return this._events = this._events.filter(function(e) {
                        return e.eventFilter.eventTag !== o.eventTag || (setTimeout(function() {
                            e.listener.apply(t, r);
                        }, 0), i = !0, !e.once);
                    }), i;
                }, A.prototype.listenerCount = function(e16) {
                    if (!this.provider) return 0;
                    var t = this._getEventFilter(e16);
                    return this._events.filter(function(e) {
                        return e.eventFilter.eventTag === t.eventTag;
                    }).length;
                }, A.prototype.listeners = function(e17) {
                    if (!this.provider) return [];
                    var t = this._getEventFilter(e17);
                    return this._events.filter(function(e) {
                        return e.eventFilter.eventTag === t.eventTag;
                    }).map(function(e) {
                        return e.listener;
                    });
                }, A.prototype.removeAllListeners = function(e18) {
                    var t = this;
                    if (!this.provider) return this;
                    var r = this._getEventFilter(e18);
                    return this._events = this._events.filter(function(e) {
                        return e.eventFilter.eventTag !== r.eventTag || (t.provider.removeListener(e.eventFilter.filter, e.wrappedListener), !1);
                    }), this;
                }, A.prototype.removeListener = function(e19, t) {
                    var r = this;
                    if (!this.provider) return this;
                    var n = !1, i = this._getEventFilter(e19);
                    return this._events = this._events.filter(function(e) {
                        return e.eventFilter.eventTag !== i.eventTag || e.listener !== t || (r.provider.removeListener(e.eventFilter.filter, e.wrappedListener), !!n || (n = !0, false));
                    }), this;
                }, A);
                function A(t8, e20, r4) {
                    var n = this;
                    if (l.checkNew(this, A), d.Interface.isInterface(e20) ? p.defineReadOnly(this, "interface", e20) : p.defineReadOnly(this, "interface", new d.Interface(e20)), m.Signer.isSigner(r4) ? (p.defineReadOnly(this, "provider", r4.provider), p.defineReadOnly(this, "signer", r4)) : y.Provider.isProvider(r4) ? (p.defineReadOnly(this, "provider", r4), p.defineReadOnly(this, "signer", null)) : l.throwError("invalid signer or provider", l.INVALID_ARGUMENT, {
                        arg: "signerOrProvider",
                        value: r4
                    }), p.defineReadOnly(this, "estimate", {}), p.defineReadOnly(this, "functions", {}), p.defineReadOnly(this, "filters", {}), Object.keys(this.interface.events).forEach(function(e21) {
                        var r = n.interface.events[e21];
                        p.defineReadOnly(n.filters, e21, function() {
                            for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
                            return {
                                address: n.address,
                                topics: r.encodeTopics(e)
                            };
                        });
                    }), this._events = [], p.defineReadOnly(this, "address", t8), this.provider) p.defineReadOnly(this, "addressPromise", this.provider.resolveName(t8).then(function(e) {
                        if (null == e) throw new Error("name not found");
                        return e;
                    }).catch(function(e) {
                        throw e;
                    }));
                    else try {
                        p.defineReadOnly(this, "addressPromise", Promise.resolve(a1.getAddress(t8)));
                    } catch (e22) {
                        l.throwError("provider is required to use non-address contract address", l.INVALID_ARGUMENT, {
                            argument: "addressOrName",
                            value: t8
                        });
                    }
                    Object.keys(this.interface.functions).forEach(function(e) {
                        var t = w(n, e, !1);
                        null == n[e] ? p.defineReadOnly(n, e, t) : l.warn("WARNING: Multiple definitions for " + e), null == n.functions[e] && (p.defineReadOnly(n.functions, e, t), p.defineReadOnly(n.estimate, e, w(n, e, !0)));
                    });
                }
                r1.Contract = M;
                E.prototype.getDeployTransaction = function() {
                    for(var e23 = [], t = 0; t < arguments.length; t++)e23[t] = arguments[t];
                    var r = {};
                    if (e23.length === this.interface.deployFunction.inputs.length + 1) {
                        for(var n in r = p.shallowCopy(e23.pop()))if (!b[n]) throw new Error("unknown transaction override " + n);
                    }
                    return [
                        "data",
                        "from",
                        "to"
                    ].forEach(function(e) {
                        null != r[e] && l.throwError("cannot override " + e, l.UNSUPPORTED_OPERATION, {
                            operation: e
                        });
                    }), l.checkArgumentCount(e23.length, this.interface.deployFunction.inputs.length, " in Contract constructor"), r.data = this.interface.deployFunction.encode(this.bytecode, e23), r;
                }, E.prototype.deploy = function() {
                    for(var r = this, e24 = [], t9 = 0; t9 < arguments.length; t9++)e24[t9] = arguments[t9];
                    var n = this.getDeployTransaction.apply(this, e24);
                    return this.signer.sendTransaction(n).then(function(e) {
                        var t = new M(a1.getContractAddress(e), r.interface, r.signer);
                        return p.defineReadOnly(t, "deployTransaction", e), t;
                    });
                }, E.prototype.attach = function(e) {
                    return new M(e, this.interface, this.signer);
                }, E.prototype.connect = function(e) {
                    return new E(this.interface, this.bytecode, e);
                }, E.fromSolidity = function(e, t) {
                    null == e && l.throwError("missing compiler output", l.MISSING_ARGUMENT, {
                        argument: "compilerOutput"
                    });
                    var r = (e = "string" == typeof e ? JSON.parse(e) : e).abi, n = null;
                    return e.bytecode ? n = e.bytecode : e.evm && e.evm.bytecode && (n = e.evm.bytecode), new E(r, n, t);
                }, i1 = E;
                function E(e, t, r) {
                    var n = null;
                    "string" == typeof t ? n = t : c.isArrayish(t) ? n = c.hexlify(t) : "string" == typeof t.object ? n = t.object : l.throwError("bytecode must be a valid hex string", l.INVALID_ARGUMENT, {
                        arg: "bytecode",
                        value: t
                    }), "0x" !== n.substring(0, 2) && (n = "0x" + n), c.isHexString(n) || l.throwError("bytecode must be a valid hex string", l.INVALID_ARGUMENT, {
                        arg: "bytecode",
                        value: t
                    }), n.length % 2 != 0 && l.throwError("bytecode must be valid data (even length)", l.INVALID_ARGUMENT, {
                        arg: "bytecode",
                        value: t
                    }), p.defineReadOnly(this, "bytecode", n), d.Interface.isInterface(e) ? p.defineReadOnly(this, "interface", e) : p.defineReadOnly(this, "interface", new d.Interface(e)), r && !m.Signer.isSigner(r) && l.throwError("invalid signer", l.INVALID_ARGUMENT, {
                        arg: "signer",
                        value: null
                    }), p.defineReadOnly(this, "signer", r || null);
                }
                r1.ContractFactory = i1;
            },
            {
                "./abstract-signer": 2,
                "./constants": 3,
                "./errors": 5,
                "./providers/abstract-provider": 50,
                "./utils/abi-coder": 59,
                "./utils/address": 60,
                "./utils/bignumber": 63,
                "./utils/bytes": 64,
                "./utils/interface": 69,
                "./utils/properties": 74
            }
        ],
        5: [
            function(e25, t10, s) {
                "use strict";
                Object.defineProperty(s, "__esModule", {
                    value: !0
                });
                var a = e25("./_version");
                s.UNKNOWN_ERROR = "UNKNOWN_ERROR", s.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", s.MISSING_NEW = "MISSING_NEW", s.CALL_EXCEPTION = "CALL_EXCEPTION", s.INVALID_ARGUMENT = "INVALID_ARGUMENT", s.MISSING_ARGUMENT = "MISSING_ARGUMENT", s.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", s.NUMERIC_FAULT = "NUMERIC_FAULT", s.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", s.NONCE_EXPIRED = "NONCE_EXPIRED", s.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED";
                var r5 = (s.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", false), u = !1;
                function n2(e26, t11, r) {
                    if (u) throw new Error("unknown error");
                    t11 = t11 || s.UNKNOWN_ERROR, r = r || {};
                    var n = [];
                    Object.keys(r).forEach(function(t) {
                        try {
                            n.push(t + "=" + JSON.stringify(r[t]));
                        } catch (e) {
                            n.push(t + "=" + JSON.stringify(r[t].toString()));
                        }
                    }), n.push("version=" + a.version);
                    var i = e26;
                    n.length && (e26 += " (" + n.join(", ") + ")");
                    var o = new Error(e26);
                    throw o.reason = i, o.code = t11, Object.keys(r).forEach(function(e) {
                        o[e] = r[e];
                    }), o;
                }
                s.throwError = n2, s.checkNew = function(e, t) {
                    e instanceof t || n2("missing new", s.MISSING_NEW, {
                        name: t.name
                    });
                }, s.checkArgumentCount = function(e, t, r) {
                    r = r || "", e < t && n2("missing argument" + r, s.MISSING_ARGUMENT, {
                        count: e,
                        expectedCount: t
                    }), t < e && n2("too many arguments" + r, s.UNEXPECTED_ARGUMENT, {
                        count: e,
                        expectedCount: t
                    });
                }, s.setCensorship = function(e, t) {
                    r5 && n2("error censorship permanent", s.UNSUPPORTED_OPERATION, {
                        operation: "setCensorship"
                    }), u = !!e, r5 = !!t;
                }, s.checkNormalize = function() {
                    try {
                        if ([
                            "NFD",
                            "NFC",
                            "NFKD",
                            "NFKC"
                        ].forEach(function(t) {
                            try {
                                "test".normalize(t);
                            } catch (e) {
                                throw new Error("missing " + t);
                            }
                        }), String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) throw new Error("broken implementation");
                    } catch (e) {
                        n2("platform missing String.prototype.normalize", s.UNSUPPORTED_OPERATION, {
                            operation: "String.prototype.normalize",
                            form: e.message
                        });
                    }
                };
                var i3 = {
                    debug: 1,
                    default: 2,
                    info: 2,
                    warn: 3,
                    error: 4,
                    off: 5
                }, o3 = i3.default;
                function l(e, t) {
                    o3 > i3[e] || console.log.apply(console, t);
                }
                function h() {
                    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
                    l("warn", e);
                }
                s.setLogLevel = function(e) {
                    var t = i3[e];
                    null != t ? o3 = t : h("invliad log level - " + e);
                }, s.warn = h, s.info = function() {
                    for(var e = [], t = 0; t < arguments.length; t++)e[t] = arguments[t];
                    l("info", e);
                };
            },
            {
                "./_version": 1
            }
        ],
        6: [
            function(e27, t12, r6) {
                "use strict";
                var n = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r6, "__esModule", {
                    value: !0
                });
                var i = e27("./contract");
                r6.Contract = i.Contract, r6.ContractFactory = i.ContractFactory, r6.VoidSigner = i.VoidSigner;
                i = e27("./abstract-signer");
                r6.Signer = i.Signer;
                i = e27("./wallet");
                r6.Wallet = i.Wallet;
                i = n(e27("./constants"));
                r6.constants = i;
                var o = n(e27("./errors"));
                r6.errors = o;
                var s = n(e27("./providers"));
                r6.providers = s;
                var a = n(e27("./utils"));
                r6.utils = a;
                n = n(e27("./wordlists"));
                r6.wordlists = n;
                n = e27("./utils/shims");
                r6.platform = n.platform;
                e27 = e27("./_version");
                r6.version = e27.version, r6.getDefaultProvider = function(e) {
                    var t = a.getNetwork(e = null == e ? "homestead" : e);
                    return t && t._defaultProvider || o.throwError("unsupported getDefaultProvider network", o.UNSUPPORTED_OPERATION, {
                        operation: "getDefaultProvider",
                        network: e
                    }), t._defaultProvider(s);
                };
            },
            {
                "./_version": 1,
                "./abstract-signer": 2,
                "./constants": 3,
                "./contract": 4,
                "./errors": 5,
                "./providers": 54,
                "./utils": 68,
                "./utils/shims": 80,
                "./wallet": 88,
                "./wordlists": 89
            }
        ],
        7: [
            function(e28, t13, r7) {
                "use strict";
                var n = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r7, "__esModule", {
                    value: !0
                });
                n = n(e28("./ethers"));
                r7.ethers = n, function(e) {
                    for(var t in e)r7.hasOwnProperty(t) || (r7[t] = e[t]);
                }(e28("./ethers"));
            },
            {
                "./ethers": 6
            }
        ],
        8: [
            function(e29, O, C) {
                "use strict";
                !function(e30) {
                    function r8(e) {
                        return parseInt(e) === e;
                    }
                    function n3(e) {
                        if (r8(e.length)) {
                            for(var t = 0; t < e.length; t++)if (!r8(e[t]) || e[t] < 0 || 255 < e[t]) return;
                            return 1;
                        }
                    }
                    function o4(e, t) {
                        if (e.buffer && ArrayBuffer.isView(e) && "Uint8Array" === e.name) return e = t ? e.slice ? e.slice() : Array.prototype.slice.call(e) : e;
                        if (Array.isArray(e)) {
                            if (!n3(e)) throw new Error("Array contains invalid value: " + e);
                            return new Uint8Array(e);
                        }
                        if (r8(e.length) && n3(e)) return new Uint8Array(e);
                        throw new Error("unsupported array-like object");
                    }
                    function u1(e) {
                        return new Uint8Array(e);
                    }
                    function s3(e, t, r, n, i) {
                        null == n && null == i || (e = e.slice ? e.slice(n, i) : Array.prototype.slice.call(e, n, i)), t.set(e, r);
                    }
                    var i4, t14 = {
                        toBytes: function(e) {
                            var t = [], r = 0;
                            for(e = encodeURI(e); r < e.length;){
                                var n = e.charCodeAt(r++);
                                37 === n ? (t.push(parseInt(e.substr(r, 2), 16)), r += 2) : t.push(n);
                            }
                            return o4(t);
                        },
                        fromBytes: function(e) {
                            for(var t = [], r = 0; r < e.length;){
                                var n = e[r];
                                n < 128 ? (t.push(String.fromCharCode(n)), r++) : 191 < n && n < 224 ? (t.push(String.fromCharCode((31 & n) << 6 | 63 & e[r + 1])), r += 2) : (t.push(String.fromCharCode((15 & n) << 12 | (63 & e[r + 1]) << 6 | 63 & e[r + 2])), r += 3);
                            }
                            return t.join("");
                        }
                    }, a3 = (i4 = "0123456789abcdef", {
                        toBytes: function(e) {
                            for(var t = [], r = 0; r < e.length; r += 2)t.push(parseInt(e.substr(r, 2), 16));
                            return t;
                        },
                        fromBytes: function(e) {
                            for(var t = [], r = 0; r < e.length; r++){
                                var n = e[r];
                                t.push(i4[(240 & n) >> 4] + i4[15 & n]);
                            }
                            return t.join("");
                        }
                    }), f = {
                        16: 10,
                        24: 12,
                        32: 14
                    }, c = [
                        1,
                        2,
                        4,
                        8,
                        16,
                        32,
                        64,
                        128,
                        27,
                        54,
                        108,
                        216,
                        171,
                        77,
                        154,
                        47,
                        94,
                        188,
                        99,
                        198,
                        151,
                        53,
                        106,
                        212,
                        179,
                        125,
                        250,
                        239,
                        197,
                        145
                    ], d = [
                        99,
                        124,
                        119,
                        123,
                        242,
                        107,
                        111,
                        197,
                        48,
                        1,
                        103,
                        43,
                        254,
                        215,
                        171,
                        118,
                        202,
                        130,
                        201,
                        125,
                        250,
                        89,
                        71,
                        240,
                        173,
                        212,
                        162,
                        175,
                        156,
                        164,
                        114,
                        192,
                        183,
                        253,
                        147,
                        38,
                        54,
                        63,
                        247,
                        204,
                        52,
                        165,
                        229,
                        241,
                        113,
                        216,
                        49,
                        21,
                        4,
                        199,
                        35,
                        195,
                        24,
                        150,
                        5,
                        154,
                        7,
                        18,
                        128,
                        226,
                        235,
                        39,
                        178,
                        117,
                        9,
                        131,
                        44,
                        26,
                        27,
                        110,
                        90,
                        160,
                        82,
                        59,
                        214,
                        179,
                        41,
                        227,
                        47,
                        132,
                        83,
                        209,
                        0,
                        237,
                        32,
                        252,
                        177,
                        91,
                        106,
                        203,
                        190,
                        57,
                        74,
                        76,
                        88,
                        207,
                        208,
                        239,
                        170,
                        251,
                        67,
                        77,
                        51,
                        133,
                        69,
                        249,
                        2,
                        127,
                        80,
                        60,
                        159,
                        168,
                        81,
                        163,
                        64,
                        143,
                        146,
                        157,
                        56,
                        245,
                        188,
                        182,
                        218,
                        33,
                        16,
                        255,
                        243,
                        210,
                        205,
                        12,
                        19,
                        236,
                        95,
                        151,
                        68,
                        23,
                        196,
                        167,
                        126,
                        61,
                        100,
                        93,
                        25,
                        115,
                        96,
                        129,
                        79,
                        220,
                        34,
                        42,
                        144,
                        136,
                        70,
                        238,
                        184,
                        20,
                        222,
                        94,
                        11,
                        219,
                        224,
                        50,
                        58,
                        10,
                        73,
                        6,
                        36,
                        92,
                        194,
                        211,
                        172,
                        98,
                        145,
                        149,
                        228,
                        121,
                        231,
                        200,
                        55,
                        109,
                        141,
                        213,
                        78,
                        169,
                        108,
                        86,
                        244,
                        234,
                        101,
                        122,
                        174,
                        8,
                        186,
                        120,
                        37,
                        46,
                        28,
                        166,
                        180,
                        198,
                        232,
                        221,
                        116,
                        31,
                        75,
                        189,
                        139,
                        138,
                        112,
                        62,
                        181,
                        102,
                        72,
                        3,
                        246,
                        14,
                        97,
                        53,
                        87,
                        185,
                        134,
                        193,
                        29,
                        158,
                        225,
                        248,
                        152,
                        17,
                        105,
                        217,
                        142,
                        148,
                        155,
                        30,
                        135,
                        233,
                        206,
                        85,
                        40,
                        223,
                        140,
                        161,
                        137,
                        13,
                        191,
                        230,
                        66,
                        104,
                        65,
                        153,
                        45,
                        15,
                        176,
                        84,
                        187,
                        22
                    ], l1 = [
                        82,
                        9,
                        106,
                        213,
                        48,
                        54,
                        165,
                        56,
                        191,
                        64,
                        163,
                        158,
                        129,
                        243,
                        215,
                        251,
                        124,
                        227,
                        57,
                        130,
                        155,
                        47,
                        255,
                        135,
                        52,
                        142,
                        67,
                        68,
                        196,
                        222,
                        233,
                        203,
                        84,
                        123,
                        148,
                        50,
                        166,
                        194,
                        35,
                        61,
                        238,
                        76,
                        149,
                        11,
                        66,
                        250,
                        195,
                        78,
                        8,
                        46,
                        161,
                        102,
                        40,
                        217,
                        36,
                        178,
                        118,
                        91,
                        162,
                        73,
                        109,
                        139,
                        209,
                        37,
                        114,
                        248,
                        246,
                        100,
                        134,
                        104,
                        152,
                        22,
                        212,
                        164,
                        92,
                        204,
                        93,
                        101,
                        182,
                        146,
                        108,
                        112,
                        72,
                        80,
                        253,
                        237,
                        185,
                        218,
                        94,
                        21,
                        70,
                        87,
                        167,
                        141,
                        157,
                        132,
                        144,
                        216,
                        171,
                        0,
                        140,
                        188,
                        211,
                        10,
                        247,
                        228,
                        88,
                        5,
                        184,
                        179,
                        69,
                        6,
                        208,
                        44,
                        30,
                        143,
                        202,
                        63,
                        15,
                        2,
                        193,
                        175,
                        189,
                        3,
                        1,
                        19,
                        138,
                        107,
                        58,
                        145,
                        17,
                        65,
                        79,
                        103,
                        220,
                        234,
                        151,
                        242,
                        207,
                        206,
                        240,
                        180,
                        230,
                        115,
                        150,
                        172,
                        116,
                        34,
                        231,
                        173,
                        53,
                        133,
                        226,
                        249,
                        55,
                        232,
                        28,
                        117,
                        223,
                        110,
                        71,
                        241,
                        26,
                        113,
                        29,
                        41,
                        197,
                        137,
                        111,
                        183,
                        98,
                        14,
                        170,
                        24,
                        190,
                        27,
                        252,
                        86,
                        62,
                        75,
                        198,
                        210,
                        121,
                        32,
                        154,
                        219,
                        192,
                        254,
                        120,
                        205,
                        90,
                        244,
                        31,
                        221,
                        168,
                        51,
                        136,
                        7,
                        199,
                        49,
                        177,
                        18,
                        16,
                        89,
                        39,
                        128,
                        236,
                        95,
                        96,
                        81,
                        127,
                        169,
                        25,
                        181,
                        74,
                        13,
                        45,
                        229,
                        122,
                        159,
                        147,
                        201,
                        156,
                        239,
                        160,
                        224,
                        59,
                        77,
                        174,
                        42,
                        245,
                        176,
                        200,
                        235,
                        187,
                        60,
                        131,
                        83,
                        153,
                        97,
                        23,
                        43,
                        4,
                        126,
                        186,
                        119,
                        214,
                        38,
                        225,
                        105,
                        20,
                        99,
                        85,
                        33,
                        12,
                        125
                    ], h1 = [
                        3328402341,
                        4168907908,
                        4000806809,
                        4135287693,
                        4294111757,
                        3597364157,
                        3731845041,
                        2445657428,
                        1613770832,
                        33620227,
                        3462883241,
                        1445669757,
                        3892248089,
                        3050821474,
                        1303096294,
                        3967186586,
                        2412431941,
                        528646813,
                        2311702848,
                        4202528135,
                        4026202645,
                        2992200171,
                        2387036105,
                        4226871307,
                        1101901292,
                        3017069671,
                        1604494077,
                        1169141738,
                        597466303,
                        1403299063,
                        3832705686,
                        2613100635,
                        1974974402,
                        3791519004,
                        1033081774,
                        1277568618,
                        1815492186,
                        2118074177,
                        4126668546,
                        2211236943,
                        1748251740,
                        1369810420,
                        3521504564,
                        4193382664,
                        3799085459,
                        2883115123,
                        1647391059,
                        706024767,
                        134480908,
                        2512897874,
                        1176707941,
                        2646852446,
                        806885416,
                        932615841,
                        168101135,
                        798661301,
                        235341577,
                        605164086,
                        461406363,
                        3756188221,
                        3454790438,
                        1311188841,
                        2142417613,
                        3933566367,
                        302582043,
                        495158174,
                        1479289972,
                        874125870,
                        907746093,
                        3698224818,
                        3025820398,
                        1537253627,
                        2756858614,
                        1983593293,
                        3084310113,
                        2108928974,
                        1378429307,
                        3722699582,
                        1580150641,
                        327451799,
                        2790478837,
                        3117535592,
                        0,
                        3253595436,
                        1075847264,
                        3825007647,
                        2041688520,
                        3059440621,
                        3563743934,
                        2378943302,
                        1740553945,
                        1916352843,
                        2487896798,
                        2555137236,
                        2958579944,
                        2244988746,
                        3151024235,
                        3320835882,
                        1336584933,
                        3992714006,
                        2252555205,
                        2588757463,
                        1714631509,
                        293963156,
                        2319795663,
                        3925473552,
                        67240454,
                        4269768577,
                        2689618160,
                        2017213508,
                        631218106,
                        1269344483,
                        2723238387,
                        1571005438,
                        2151694528,
                        93294474,
                        1066570413,
                        563977660,
                        1882732616,
                        4059428100,
                        1673313503,
                        2008463041,
                        2950355573,
                        1109467491,
                        537923632,
                        3858759450,
                        4260623118,
                        3218264685,
                        2177748300,
                        403442708,
                        638784309,
                        3287084079,
                        3193921505,
                        899127202,
                        2286175436,
                        773265209,
                        2479146071,
                        1437050866,
                        4236148354,
                        2050833735,
                        3362022572,
                        3126681063,
                        840505643,
                        3866325909,
                        3227541664,
                        427917720,
                        2655997905,
                        2749160575,
                        1143087718,
                        1412049534,
                        999329963,
                        193497219,
                        2353415882,
                        3354324521,
                        1807268051,
                        672404540,
                        2816401017,
                        3160301282,
                        369822493,
                        2916866934,
                        3688947771,
                        1681011286,
                        1949973070,
                        336202270,
                        2454276571,
                        201721354,
                        1210328172,
                        3093060836,
                        2680341085,
                        3184776046,
                        1135389935,
                        3294782118,
                        965841320,
                        831886756,
                        3554993207,
                        4068047243,
                        3588745010,
                        2345191491,
                        1849112409,
                        3664604599,
                        26054028,
                        2983581028,
                        2622377682,
                        1235855840,
                        3630984372,
                        2891339514,
                        4092916743,
                        3488279077,
                        3395642799,
                        4101667470,
                        1202630377,
                        268961816,
                        1874508501,
                        4034427016,
                        1243948399,
                        1546530418,
                        941366308,
                        1470539505,
                        1941222599,
                        2546386513,
                        3421038627,
                        2715671932,
                        3899946140,
                        1042226977,
                        2521517021,
                        1639824860,
                        227249030,
                        260737669,
                        3765465232,
                        2084453954,
                        1907733956,
                        3429263018,
                        2420656344,
                        100860677,
                        4160157185,
                        470683154,
                        3261161891,
                        1781871967,
                        2924959737,
                        1773779408,
                        394692241,
                        2579611992,
                        974986535,
                        664706745,
                        3655459128,
                        3958962195,
                        731420851,
                        571543859,
                        3530123707,
                        2849626480,
                        126783113,
                        865375399,
                        765172662,
                        1008606754,
                        361203602,
                        3387549984,
                        2278477385,
                        2857719295,
                        1344809080,
                        2782912378,
                        59542671,
                        1503764984,
                        160008576,
                        437062935,
                        1707065306,
                        3622233649,
                        2218934982,
                        3496503480,
                        2185314755,
                        697932208,
                        1512910199,
                        504303377,
                        2075177163,
                        2824099068,
                        1841019862,
                        739644986
                    ], p = [
                        2781242211,
                        2230877308,
                        2582542199,
                        2381740923,
                        234877682,
                        3184946027,
                        2984144751,
                        1418839493,
                        1348481072,
                        50462977,
                        2848876391,
                        2102799147,
                        434634494,
                        1656084439,
                        3863849899,
                        2599188086,
                        1167051466,
                        2636087938,
                        1082771913,
                        2281340285,
                        368048890,
                        3954334041,
                        3381544775,
                        201060592,
                        3963727277,
                        1739838676,
                        4250903202,
                        3930435503,
                        3206782108,
                        4149453988,
                        2531553906,
                        1536934080,
                        3262494647,
                        484572669,
                        2923271059,
                        1783375398,
                        1517041206,
                        1098792767,
                        49674231,
                        1334037708,
                        1550332980,
                        4098991525,
                        886171109,
                        150598129,
                        2481090929,
                        1940642008,
                        1398944049,
                        1059722517,
                        201851908,
                        1385547719,
                        1699095331,
                        1587397571,
                        674240536,
                        2704774806,
                        252314885,
                        3039795866,
                        151914247,
                        908333586,
                        2602270848,
                        1038082786,
                        651029483,
                        1766729511,
                        3447698098,
                        2682942837,
                        454166793,
                        2652734339,
                        1951935532,
                        775166490,
                        758520603,
                        3000790638,
                        4004797018,
                        4217086112,
                        4137964114,
                        1299594043,
                        1639438038,
                        3464344499,
                        2068982057,
                        1054729187,
                        1901997871,
                        2534638724,
                        4121318227,
                        1757008337,
                        0,
                        750906861,
                        1614815264,
                        535035132,
                        3363418545,
                        3988151131,
                        3201591914,
                        1183697867,
                        3647454910,
                        1265776953,
                        3734260298,
                        3566750796,
                        3903871064,
                        1250283471,
                        1807470800,
                        717615087,
                        3847203498,
                        384695291,
                        3313910595,
                        3617213773,
                        1432761139,
                        2484176261,
                        3481945413,
                        283769337,
                        100925954,
                        2180939647,
                        4037038160,
                        1148730428,
                        3123027871,
                        3813386408,
                        4087501137,
                        4267549603,
                        3229630528,
                        2315620239,
                        2906624658,
                        3156319645,
                        1215313976,
                        82966005,
                        3747855548,
                        3245848246,
                        1974459098,
                        1665278241,
                        807407632,
                        451280895,
                        251524083,
                        1841287890,
                        1283575245,
                        337120268,
                        891687699,
                        801369324,
                        3787349855,
                        2721421207,
                        3431482436,
                        959321879,
                        1469301956,
                        4065699751,
                        2197585534,
                        1199193405,
                        2898814052,
                        3887750493,
                        724703513,
                        2514908019,
                        2696962144,
                        2551808385,
                        3516813135,
                        2141445340,
                        1715741218,
                        2119445034,
                        2872807568,
                        2198571144,
                        3398190662,
                        700968686,
                        3547052216,
                        1009259540,
                        2041044702,
                        3803995742,
                        487983883,
                        1991105499,
                        1004265696,
                        1449407026,
                        1316239930,
                        504629770,
                        3683797321,
                        168560134,
                        1816667172,
                        3837287516,
                        1570751170,
                        1857934291,
                        4014189740,
                        2797888098,
                        2822345105,
                        2754712981,
                        936633572,
                        2347923833,
                        852879335,
                        1133234376,
                        1500395319,
                        3084545389,
                        2348912013,
                        1689376213,
                        3533459022,
                        3762923945,
                        3034082412,
                        4205598294,
                        133428468,
                        634383082,
                        2949277029,
                        2398386810,
                        3913789102,
                        403703816,
                        3580869306,
                        2297460856,
                        1867130149,
                        1918643758,
                        607656988,
                        4049053350,
                        3346248884,
                        1368901318,
                        600565992,
                        2090982877,
                        2632479860,
                        557719327,
                        3717614411,
                        3697393085,
                        2249034635,
                        2232388234,
                        2430627952,
                        1115438654,
                        3295786421,
                        2865522278,
                        3633334344,
                        84280067,
                        33027830,
                        303828494,
                        2747425121,
                        1600795957,
                        4188952407,
                        3496589753,
                        2434238086,
                        1486471617,
                        658119965,
                        3106381470,
                        953803233,
                        334231800,
                        3005978776,
                        857870609,
                        3151128937,
                        1890179545,
                        2298973838,
                        2805175444,
                        3056442267,
                        574365214,
                        2450884487,
                        550103529,
                        1233637070,
                        4289353045,
                        2018519080,
                        2057691103,
                        2399374476,
                        4166623649,
                        2148108681,
                        387583245,
                        3664101311,
                        836232934,
                        3330556482,
                        3100665960,
                        3280093505,
                        2955516313,
                        2002398509,
                        287182607,
                        3413881008,
                        4238890068,
                        3597515707,
                        975967766
                    ], y = [
                        1671808611,
                        2089089148,
                        2006576759,
                        2072901243,
                        4061003762,
                        1807603307,
                        1873927791,
                        3310653893,
                        810573872,
                        16974337,
                        1739181671,
                        729634347,
                        4263110654,
                        3613570519,
                        2883997099,
                        1989864566,
                        3393556426,
                        2191335298,
                        3376449993,
                        2106063485,
                        4195741690,
                        1508618841,
                        1204391495,
                        4027317232,
                        2917941677,
                        3563566036,
                        2734514082,
                        2951366063,
                        2629772188,
                        2767672228,
                        1922491506,
                        3227229120,
                        3082974647,
                        4246528509,
                        2477669779,
                        644500518,
                        911895606,
                        1061256767,
                        4144166391,
                        3427763148,
                        878471220,
                        2784252325,
                        3845444069,
                        4043897329,
                        1905517169,
                        3631459288,
                        827548209,
                        356461077,
                        67897348,
                        3344078279,
                        593839651,
                        3277757891,
                        405286936,
                        2527147926,
                        84871685,
                        2595565466,
                        118033927,
                        305538066,
                        2157648768,
                        3795705826,
                        3945188843,
                        661212711,
                        2999812018,
                        1973414517,
                        152769033,
                        2208177539,
                        745822252,
                        439235610,
                        455947803,
                        1857215598,
                        1525593178,
                        2700827552,
                        1391895634,
                        994932283,
                        3596728278,
                        3016654259,
                        695947817,
                        3812548067,
                        795958831,
                        2224493444,
                        1408607827,
                        3513301457,
                        0,
                        3979133421,
                        543178784,
                        4229948412,
                        2982705585,
                        1542305371,
                        1790891114,
                        3410398667,
                        3201918910,
                        961245753,
                        1256100938,
                        1289001036,
                        1491644504,
                        3477767631,
                        3496721360,
                        4012557807,
                        2867154858,
                        4212583931,
                        1137018435,
                        1305975373,
                        861234739,
                        2241073541,
                        1171229253,
                        4178635257,
                        33948674,
                        2139225727,
                        1357946960,
                        1011120188,
                        2679776671,
                        2833468328,
                        1374921297,
                        2751356323,
                        1086357568,
                        2408187279,
                        2460827538,
                        2646352285,
                        944271416,
                        4110742005,
                        3168756668,
                        3066132406,
                        3665145818,
                        560153121,
                        271589392,
                        4279952895,
                        4077846003,
                        3530407890,
                        3444343245,
                        202643468,
                        322250259,
                        3962553324,
                        1608629855,
                        2543990167,
                        1154254916,
                        389623319,
                        3294073796,
                        2817676711,
                        2122513534,
                        1028094525,
                        1689045092,
                        1575467613,
                        422261273,
                        1939203699,
                        1621147744,
                        2174228865,
                        1339137615,
                        3699352540,
                        577127458,
                        712922154,
                        2427141008,
                        2290289544,
                        1187679302,
                        3995715566,
                        3100863416,
                        339486740,
                        3732514782,
                        1591917662,
                        186455563,
                        3681988059,
                        3762019296,
                        844522546,
                        978220090,
                        169743370,
                        1239126601,
                        101321734,
                        611076132,
                        1558493276,
                        3260915650,
                        3547250131,
                        2901361580,
                        1655096418,
                        2443721105,
                        2510565781,
                        3828863972,
                        2039214713,
                        3878868455,
                        3359869896,
                        928607799,
                        1840765549,
                        2374762893,
                        3580146133,
                        1322425422,
                        2850048425,
                        1823791212,
                        1459268694,
                        4094161908,
                        3928346602,
                        1706019429,
                        2056189050,
                        2934523822,
                        135794696,
                        3134549946,
                        2022240376,
                        628050469,
                        779246638,
                        472135708,
                        2800834470,
                        3032970164,
                        3327236038,
                        3894660072,
                        3715932637,
                        1956440180,
                        522272287,
                        1272813131,
                        3185336765,
                        2340818315,
                        2323976074,
                        1888542832,
                        1044544574,
                        3049550261,
                        1722469478,
                        1222152264,
                        50660867,
                        4127324150,
                        236067854,
                        1638122081,
                        895445557,
                        1475980887,
                        3117443513,
                        2257655686,
                        3243809217,
                        489110045,
                        2662934430,
                        3778599393,
                        4162055160,
                        2561878936,
                        288563729,
                        1773916777,
                        3648039385,
                        2391345038,
                        2493985684,
                        2612407707,
                        505560094,
                        2274497927,
                        3911240169,
                        3460925390,
                        1442818645,
                        678973480,
                        3749357023,
                        2358182796,
                        2717407649,
                        2306869641,
                        219617805,
                        3218761151,
                        3862026214,
                        1120306242,
                        1756942440,
                        1103331905,
                        2578459033,
                        762796589,
                        252780047,
                        2966125488,
                        1425844308,
                        3151392187,
                        372911126
                    ], m = [
                        1667474886,
                        2088535288,
                        2004326894,
                        2071694838,
                        4075949567,
                        1802223062,
                        1869591006,
                        3318043793,
                        808472672,
                        16843522,
                        1734846926,
                        724270422,
                        4278065639,
                        3621216949,
                        2880169549,
                        1987484396,
                        3402253711,
                        2189597983,
                        3385409673,
                        2105378810,
                        4210693615,
                        1499065266,
                        1195886990,
                        4042263547,
                        2913856577,
                        3570689971,
                        2728590687,
                        2947541573,
                        2627518243,
                        2762274643,
                        1920112356,
                        3233831835,
                        3082273397,
                        4261223649,
                        2475929149,
                        640051788,
                        909531756,
                        1061110142,
                        4160160501,
                        3435941763,
                        875846760,
                        2779116625,
                        3857003729,
                        4059105529,
                        1903268834,
                        3638064043,
                        825316194,
                        353713962,
                        67374088,
                        3351728789,
                        589522246,
                        3284360861,
                        404236336,
                        2526454071,
                        84217610,
                        2593830191,
                        117901582,
                        303183396,
                        2155911963,
                        3806477791,
                        3958056653,
                        656894286,
                        2998062463,
                        1970642922,
                        151591698,
                        2206440989,
                        741110872,
                        437923380,
                        454765878,
                        1852748508,
                        1515908788,
                        2694904667,
                        1381168804,
                        993742198,
                        3604373943,
                        3014905469,
                        690584402,
                        3823320797,
                        791638366,
                        2223281939,
                        1398011302,
                        3520161977,
                        0,
                        3991743681,
                        538992704,
                        4244381667,
                        2981218425,
                        1532751286,
                        1785380564,
                        3419096717,
                        3200178535,
                        960056178,
                        1246420628,
                        1280103576,
                        1482221744,
                        3486468741,
                        3503319995,
                        4025428677,
                        2863326543,
                        4227536621,
                        1128514950,
                        1296947098,
                        859002214,
                        2240123921,
                        1162203018,
                        4193849577,
                        33687044,
                        2139062782,
                        1347481760,
                        1010582648,
                        2678045221,
                        2829640523,
                        1364325282,
                        2745433693,
                        1077985408,
                        2408548869,
                        2459086143,
                        2644360225,
                        943212656,
                        4126475505,
                        3166494563,
                        3065430391,
                        3671750063,
                        555836226,
                        269496352,
                        4294908645,
                        4092792573,
                        3537006015,
                        3452783745,
                        202118168,
                        320025894,
                        3974901699,
                        1600119230,
                        2543297077,
                        1145359496,
                        387397934,
                        3301201811,
                        2812801621,
                        2122220284,
                        1027426170,
                        1684319432,
                        1566435258,
                        421079858,
                        1936954854,
                        1616945344,
                        2172753945,
                        1330631070,
                        3705438115,
                        572679748,
                        707427924,
                        2425400123,
                        2290647819,
                        1179044492,
                        4008585671,
                        3099120491,
                        336870440,
                        3739122087,
                        1583276732,
                        185277718,
                        3688593069,
                        3772791771,
                        842159716,
                        976899700,
                        168435220,
                        1229577106,
                        101059084,
                        606366792,
                        1549591736,
                        3267517855,
                        3553849021,
                        2897014595,
                        1650632388,
                        2442242105,
                        2509612081,
                        3840161747,
                        2038008818,
                        3890688725,
                        3368567691,
                        926374254,
                        1835907034,
                        2374863873,
                        3587531953,
                        1313788572,
                        2846482505,
                        1819063512,
                        1448540844,
                        4109633523,
                        3941213647,
                        1701162954,
                        2054852340,
                        2930698567,
                        134748176,
                        3132806511,
                        2021165296,
                        623210314,
                        774795868,
                        471606328,
                        2795958615,
                        3031746419,
                        3334885783,
                        3907527627,
                        3722280097,
                        1953799400,
                        522133822,
                        1263263126,
                        3183336545,
                        2341176845,
                        2324333839,
                        1886425312,
                        1044267644,
                        3048588401,
                        1718004428,
                        1212733584,
                        50529542,
                        4143317495,
                        235803164,
                        1633788866,
                        892690282,
                        1465383342,
                        3115962473,
                        2256965911,
                        3250673817,
                        488449850,
                        2661202215,
                        3789633753,
                        4177007595,
                        2560144171,
                        286339874,
                        1768537042,
                        3654906025,
                        2391705863,
                        2492770099,
                        2610673197,
                        505291324,
                        2273808917,
                        3924369609,
                        3469625735,
                        1431699370,
                        673740880,
                        3755965093,
                        2358021891,
                        2711746649,
                        2307489801,
                        218961690,
                        3217021541,
                        3873845719,
                        1111672452,
                        1751693520,
                        1094828930,
                        2576986153,
                        757954394,
                        252645662,
                        2964376443,
                        1414855848,
                        3149649517,
                        370555436
                    ], g = [
                        1374988112,
                        2118214995,
                        437757123,
                        975658646,
                        1001089995,
                        530400753,
                        2902087851,
                        1273168787,
                        540080725,
                        2910219766,
                        2295101073,
                        4110568485,
                        1340463100,
                        3307916247,
                        641025152,
                        3043140495,
                        3736164937,
                        632953703,
                        1172967064,
                        1576976609,
                        3274667266,
                        2169303058,
                        2370213795,
                        1809054150,
                        59727847,
                        361929877,
                        3211623147,
                        2505202138,
                        3569255213,
                        1484005843,
                        1239443753,
                        2395588676,
                        1975683434,
                        4102977912,
                        2572697195,
                        666464733,
                        3202437046,
                        4035489047,
                        3374361702,
                        2110667444,
                        1675577880,
                        3843699074,
                        2538681184,
                        1649639237,
                        2976151520,
                        3144396420,
                        4269907996,
                        4178062228,
                        1883793496,
                        2403728665,
                        2497604743,
                        1383856311,
                        2876494627,
                        1917518562,
                        3810496343,
                        1716890410,
                        3001755655,
                        800440835,
                        2261089178,
                        3543599269,
                        807962610,
                        599762354,
                        33778362,
                        3977675356,
                        2328828971,
                        2809771154,
                        4077384432,
                        1315562145,
                        1708848333,
                        101039829,
                        3509871135,
                        3299278474,
                        875451293,
                        2733856160,
                        92987698,
                        2767645557,
                        193195065,
                        1080094634,
                        1584504582,
                        3178106961,
                        1042385657,
                        2531067453,
                        3711829422,
                        1306967366,
                        2438237621,
                        1908694277,
                        67556463,
                        1615861247,
                        429456164,
                        3602770327,
                        2302690252,
                        1742315127,
                        2968011453,
                        126454664,
                        3877198648,
                        2043211483,
                        2709260871,
                        2084704233,
                        4169408201,
                        0,
                        159417987,
                        841739592,
                        504459436,
                        1817866830,
                        4245618683,
                        260388950,
                        1034867998,
                        908933415,
                        168810852,
                        1750902305,
                        2606453969,
                        607530554,
                        202008497,
                        2472011535,
                        3035535058,
                        463180190,
                        2160117071,
                        1641816226,
                        1517767529,
                        470948374,
                        3801332234,
                        3231722213,
                        1008918595,
                        303765277,
                        235474187,
                        4069246893,
                        766945465,
                        337553864,
                        1475418501,
                        2943682380,
                        4003061179,
                        2743034109,
                        4144047775,
                        1551037884,
                        1147550661,
                        1543208500,
                        2336434550,
                        3408119516,
                        3069049960,
                        3102011747,
                        3610369226,
                        1113818384,
                        328671808,
                        2227573024,
                        2236228733,
                        3535486456,
                        2935566865,
                        3341394285,
                        496906059,
                        3702665459,
                        226906860,
                        2009195472,
                        733156972,
                        2842737049,
                        294930682,
                        1206477858,
                        2835123396,
                        2700099354,
                        1451044056,
                        573804783,
                        2269728455,
                        3644379585,
                        2362090238,
                        2564033334,
                        2801107407,
                        2776292904,
                        3669462566,
                        1068351396,
                        742039012,
                        1350078989,
                        1784663195,
                        1417561698,
                        4136440770,
                        2430122216,
                        775550814,
                        2193862645,
                        2673705150,
                        1775276924,
                        1876241833,
                        3475313331,
                        3366754619,
                        270040487,
                        3902563182,
                        3678124923,
                        3441850377,
                        1851332852,
                        3969562369,
                        2203032232,
                        3868552805,
                        2868897406,
                        566021896,
                        4011190502,
                        3135740889,
                        1248802510,
                        3936291284,
                        699432150,
                        832877231,
                        708780849,
                        3332740144,
                        899835584,
                        1951317047,
                        4236429990,
                        3767586992,
                        866637845,
                        4043610186,
                        1106041591,
                        2144161806,
                        395441711,
                        1984812685,
                        1139781709,
                        3433712980,
                        3835036895,
                        2664543715,
                        1282050075,
                        3240894392,
                        1181045119,
                        2640243204,
                        25965917,
                        4203181171,
                        4211818798,
                        3009879386,
                        2463879762,
                        3910161971,
                        1842759443,
                        2597806476,
                        933301370,
                        1509430414,
                        3943906441,
                        3467192302,
                        3076639029,
                        3776767469,
                        2051518780,
                        2631065433,
                        1441952575,
                        404016761,
                        1942435775,
                        1408749034,
                        1610459739,
                        3745345300,
                        2017778566,
                        3400528769,
                        3110650942,
                        941896748,
                        3265478751,
                        371049330,
                        3168937228,
                        675039627,
                        4279080257,
                        967311729,
                        135050206,
                        3635733660,
                        1683407248,
                        2076935265,
                        3576870512,
                        1215061108,
                        3501741890
                    ], v = [
                        1347548327,
                        1400783205,
                        3273267108,
                        2520393566,
                        3409685355,
                        4045380933,
                        2880240216,
                        2471224067,
                        1428173050,
                        4138563181,
                        2441661558,
                        636813900,
                        4233094615,
                        3620022987,
                        2149987652,
                        2411029155,
                        1239331162,
                        1730525723,
                        2554718734,
                        3781033664,
                        46346101,
                        310463728,
                        2743944855,
                        3328955385,
                        3875770207,
                        2501218972,
                        3955191162,
                        3667219033,
                        768917123,
                        3545789473,
                        692707433,
                        1150208456,
                        1786102409,
                        2029293177,
                        1805211710,
                        3710368113,
                        3065962831,
                        401639597,
                        1724457132,
                        3028143674,
                        409198410,
                        2196052529,
                        1620529459,
                        1164071807,
                        3769721975,
                        2226875310,
                        486441376,
                        2499348523,
                        1483753576,
                        428819965,
                        2274680428,
                        3075636216,
                        598438867,
                        3799141122,
                        1474502543,
                        711349675,
                        129166120,
                        53458370,
                        2592523643,
                        2782082824,
                        4063242375,
                        2988687269,
                        3120694122,
                        1559041666,
                        730517276,
                        2460449204,
                        4042459122,
                        2706270690,
                        3446004468,
                        3573941694,
                        533804130,
                        2328143614,
                        2637442643,
                        2695033685,
                        839224033,
                        1973745387,
                        957055980,
                        2856345839,
                        106852767,
                        1371368976,
                        4181598602,
                        1033297158,
                        2933734917,
                        1179510461,
                        3046200461,
                        91341917,
                        1862534868,
                        4284502037,
                        605657339,
                        2547432937,
                        3431546947,
                        2003294622,
                        3182487618,
                        2282195339,
                        954669403,
                        3682191598,
                        1201765386,
                        3917234703,
                        3388507166,
                        0,
                        2198438022,
                        1211247597,
                        2887651696,
                        1315723890,
                        4227665663,
                        1443857720,
                        507358933,
                        657861945,
                        1678381017,
                        560487590,
                        3516619604,
                        975451694,
                        2970356327,
                        261314535,
                        3535072918,
                        2652609425,
                        1333838021,
                        2724322336,
                        1767536459,
                        370938394,
                        182621114,
                        3854606378,
                        1128014560,
                        487725847,
                        185469197,
                        2918353863,
                        3106780840,
                        3356761769,
                        2237133081,
                        1286567175,
                        3152976349,
                        4255350624,
                        2683765030,
                        3160175349,
                        3309594171,
                        878443390,
                        1988838185,
                        3704300486,
                        1756818940,
                        1673061617,
                        3403100636,
                        272786309,
                        1075025698,
                        545572369,
                        2105887268,
                        4174560061,
                        296679730,
                        1841768865,
                        1260232239,
                        4091327024,
                        3960309330,
                        3497509347,
                        1814803222,
                        2578018489,
                        4195456072,
                        575138148,
                        3299409036,
                        446754879,
                        3629546796,
                        4011996048,
                        3347532110,
                        3252238545,
                        4270639778,
                        915985419,
                        3483825537,
                        681933534,
                        651868046,
                        2755636671,
                        3828103837,
                        223377554,
                        2607439820,
                        1649704518,
                        3270937875,
                        3901806776,
                        1580087799,
                        4118987695,
                        3198115200,
                        2087309459,
                        2842678573,
                        3016697106,
                        1003007129,
                        2802849917,
                        1860738147,
                        2077965243,
                        164439672,
                        4100872472,
                        32283319,
                        2827177882,
                        1709610350,
                        2125135846,
                        136428751,
                        3874428392,
                        3652904859,
                        3460984630,
                        3572145929,
                        3593056380,
                        2939266226,
                        824852259,
                        818324884,
                        3224740454,
                        930369212,
                        2801566410,
                        2967507152,
                        355706840,
                        1257309336,
                        4148292826,
                        243256656,
                        790073846,
                        2373340630,
                        1296297904,
                        1422699085,
                        3756299780,
                        3818836405,
                        457992840,
                        3099667487,
                        2135319889,
                        77422314,
                        1560382517,
                        1945798516,
                        788204353,
                        1521706781,
                        1385356242,
                        870912086,
                        325965383,
                        2358957921,
                        2050466060,
                        2388260884,
                        2313884476,
                        4006521127,
                        901210569,
                        3990953189,
                        1014646705,
                        1503449823,
                        1062597235,
                        2031621326,
                        3212035895,
                        3931371469,
                        1533017514,
                        350174575,
                        2256028891,
                        2177544179,
                        1052338372,
                        741876788,
                        1606591296,
                        1914052035,
                        213705253,
                        2334669897,
                        1107234197,
                        1899603969,
                        3725069491,
                        2631447780,
                        2422494913,
                        1635502980,
                        1893020342,
                        1950903388,
                        1120974935
                    ], b = [
                        2807058932,
                        1699970625,
                        2764249623,
                        1586903591,
                        1808481195,
                        1173430173,
                        1487645946,
                        59984867,
                        4199882800,
                        1844882806,
                        1989249228,
                        1277555970,
                        3623636965,
                        3419915562,
                        1149249077,
                        2744104290,
                        1514790577,
                        459744698,
                        244860394,
                        3235995134,
                        1963115311,
                        4027744588,
                        2544078150,
                        4190530515,
                        1608975247,
                        2627016082,
                        2062270317,
                        1507497298,
                        2200818878,
                        567498868,
                        1764313568,
                        3359936201,
                        2305455554,
                        2037970062,
                        1047239e3,
                        1910319033,
                        1337376481,
                        2904027272,
                        2892417312,
                        984907214,
                        1243112415,
                        830661914,
                        861968209,
                        2135253587,
                        2011214180,
                        2927934315,
                        2686254721,
                        731183368,
                        1750626376,
                        4246310725,
                        1820824798,
                        4172763771,
                        3542330227,
                        48394827,
                        2404901663,
                        2871682645,
                        671593195,
                        3254988725,
                        2073724613,
                        145085239,
                        2280796200,
                        2779915199,
                        1790575107,
                        2187128086,
                        472615631,
                        3029510009,
                        4075877127,
                        3802222185,
                        4107101658,
                        3201631749,
                        1646252340,
                        4270507174,
                        1402811438,
                        1436590835,
                        3778151818,
                        3950355702,
                        3963161475,
                        4020912224,
                        2667994737,
                        273792366,
                        2331590177,
                        104699613,
                        95345982,
                        3175501286,
                        2377486676,
                        1560637892,
                        3564045318,
                        369057872,
                        4213447064,
                        3919042237,
                        1137477952,
                        2658625497,
                        1119727848,
                        2340947849,
                        1530455833,
                        4007360968,
                        172466556,
                        266959938,
                        516552836,
                        0,
                        2256734592,
                        3980931627,
                        1890328081,
                        1917742170,
                        4294704398,
                        945164165,
                        3575528878,
                        958871085,
                        3647212047,
                        2787207260,
                        1423022939,
                        775562294,
                        1739656202,
                        3876557655,
                        2530391278,
                        2443058075,
                        3310321856,
                        547512796,
                        1265195639,
                        437656594,
                        3121275539,
                        719700128,
                        3762502690,
                        387781147,
                        218828297,
                        3350065803,
                        2830708150,
                        2848461854,
                        428169201,
                        122466165,
                        3720081049,
                        1627235199,
                        648017665,
                        4122762354,
                        1002783846,
                        2117360635,
                        695634755,
                        3336358691,
                        4234721005,
                        4049844452,
                        3704280881,
                        2232435299,
                        574624663,
                        287343814,
                        612205898,
                        1039717051,
                        840019705,
                        2708326185,
                        793451934,
                        821288114,
                        1391201670,
                        3822090177,
                        376187827,
                        3113855344,
                        1224348052,
                        1679968233,
                        2361698556,
                        1058709744,
                        752375421,
                        2431590963,
                        1321699145,
                        3519142200,
                        2734591178,
                        188127444,
                        2177869557,
                        3727205754,
                        2384911031,
                        3215212461,
                        2648976442,
                        2450346104,
                        3432737375,
                        1180849278,
                        331544205,
                        3102249176,
                        4150144569,
                        2952102595,
                        2159976285,
                        2474404304,
                        766078933,
                        313773861,
                        2570832044,
                        2108100632,
                        1668212892,
                        3145456443,
                        2013908262,
                        418672217,
                        3070356634,
                        2594734927,
                        1852171925,
                        3867060991,
                        3473416636,
                        3907448597,
                        2614737639,
                        919489135,
                        164948639,
                        2094410160,
                        2997825956,
                        590424639,
                        2486224549,
                        1723872674,
                        3157750862,
                        3399941250,
                        3501252752,
                        3625268135,
                        2555048196,
                        3673637356,
                        1343127501,
                        4130281361,
                        3599595085,
                        2957853679,
                        1297403050,
                        81781910,
                        3051593425,
                        2283490410,
                        532201772,
                        1367295589,
                        3926170974,
                        895287692,
                        1953757831,
                        1093597963,
                        492483431,
                        3528626907,
                        1446242576,
                        1192455638,
                        1636604631,
                        209336225,
                        344873464,
                        1015671571,
                        669961897,
                        3375740769,
                        3857572124,
                        2973530695,
                        3747192018,
                        1933530610,
                        3464042516,
                        935293895,
                        3454686199,
                        2858115069,
                        1863638845,
                        3683022916,
                        4085369519,
                        3292445032,
                        875313188,
                        1080017571,
                        3279033885,
                        621591778,
                        1233856572,
                        2504130317,
                        24197544,
                        3017672716,
                        3835484340,
                        3247465558,
                        2220981195,
                        3060847922,
                        1551124588,
                        1463996600
                    ], w = [
                        4104605777,
                        1097159550,
                        396673818,
                        660510266,
                        2875968315,
                        2638606623,
                        4200115116,
                        3808662347,
                        821712160,
                        1986918061,
                        3430322568,
                        38544885,
                        3856137295,
                        718002117,
                        893681702,
                        1654886325,
                        2975484382,
                        3122358053,
                        3926825029,
                        4274053469,
                        796197571,
                        1290801793,
                        1184342925,
                        3556361835,
                        2405426947,
                        2459735317,
                        1836772287,
                        1381620373,
                        3196267988,
                        1948373848,
                        3764988233,
                        3385345166,
                        3263785589,
                        2390325492,
                        1480485785,
                        3111247143,
                        3780097726,
                        2293045232,
                        548169417,
                        3459953789,
                        3746175075,
                        439452389,
                        1362321559,
                        1400849762,
                        1685577905,
                        1806599355,
                        2174754046,
                        137073913,
                        1214797936,
                        1174215055,
                        3731654548,
                        2079897426,
                        1943217067,
                        1258480242,
                        529487843,
                        1437280870,
                        3945269170,
                        3049390895,
                        3313212038,
                        923313619,
                        679998e3,
                        3215307299,
                        57326082,
                        377642221,
                        3474729866,
                        2041877159,
                        133361907,
                        1776460110,
                        3673476453,
                        96392454,
                        878845905,
                        2801699524,
                        777231668,
                        4082475170,
                        2330014213,
                        4142626212,
                        2213296395,
                        1626319424,
                        1906247262,
                        1846563261,
                        562755902,
                        3708173718,
                        1040559837,
                        3871163981,
                        1418573201,
                        3294430577,
                        114585348,
                        1343618912,
                        2566595609,
                        3186202582,
                        1078185097,
                        3651041127,
                        3896688048,
                        2307622919,
                        425408743,
                        3371096953,
                        2081048481,
                        1108339068,
                        2216610296,
                        0,
                        2156299017,
                        736970802,
                        292596766,
                        1517440620,
                        251657213,
                        2235061775,
                        2933202493,
                        758720310,
                        265905162,
                        1554391400,
                        1532285339,
                        908999204,
                        174567692,
                        1474760595,
                        4002861748,
                        2610011675,
                        3234156416,
                        3693126241,
                        2001430874,
                        303699484,
                        2478443234,
                        2687165888,
                        585122620,
                        454499602,
                        151849742,
                        2345119218,
                        3064510765,
                        514443284,
                        4044981591,
                        1963412655,
                        2581445614,
                        2137062819,
                        19308535,
                        1928707164,
                        1715193156,
                        4219352155,
                        1126790795,
                        600235211,
                        3992742070,
                        3841024952,
                        836553431,
                        1669664834,
                        2535604243,
                        3323011204,
                        1243905413,
                        3141400786,
                        4180808110,
                        698445255,
                        2653899549,
                        2989552604,
                        2253581325,
                        3252932727,
                        3004591147,
                        1891211689,
                        2487810577,
                        3915653703,
                        4237083816,
                        4030667424,
                        2100090966,
                        865136418,
                        1229899655,
                        953270745,
                        3399679628,
                        3557504664,
                        4118925222,
                        2061379749,
                        3079546586,
                        2915017791,
                        983426092,
                        2022837584,
                        1607244650,
                        2118541908,
                        2366882550,
                        3635996816,
                        972512814,
                        3283088770,
                        1568718495,
                        3499326569,
                        3576539503,
                        621982671,
                        2895723464,
                        410887952,
                        2623762152,
                        1002142683,
                        645401037,
                        1494807662,
                        2595684844,
                        1335535747,
                        2507040230,
                        4293295786,
                        3167684641,
                        367585007,
                        3885750714,
                        1865862730,
                        2668221674,
                        2960971305,
                        2763173681,
                        1059270954,
                        2777952454,
                        2724642869,
                        1320957812,
                        2194319100,
                        2429595872,
                        2815956275,
                        77089521,
                        3973773121,
                        3444575871,
                        2448830231,
                        1305906550,
                        4021308739,
                        2857194700,
                        2516901860,
                        3518358430,
                        1787304780,
                        740276417,
                        1699839814,
                        1592394909,
                        2352307457,
                        2272556026,
                        188821243,
                        1729977011,
                        3687994002,
                        274084841,
                        3594982253,
                        3613494426,
                        2701949495,
                        4162096729,
                        322734571,
                        2837966542,
                        1640576439,
                        484830689,
                        1202797690,
                        3537852828,
                        4067639125,
                        349075736,
                        3342319475,
                        4157467219,
                        4255800159,
                        1030690015,
                        1155237496,
                        2951971274,
                        1757691577,
                        607398968,
                        2738905026,
                        499347990,
                        3794078908,
                        1011452712,
                        227885567,
                        2818666809,
                        213114376,
                        3034881240,
                        1455525988,
                        3414450555,
                        850817237,
                        1817998408,
                        3092726480
                    ], _ = [
                        0,
                        235474187,
                        470948374,
                        303765277,
                        941896748,
                        908933415,
                        607530554,
                        708780849,
                        1883793496,
                        2118214995,
                        1817866830,
                        1649639237,
                        1215061108,
                        1181045119,
                        1417561698,
                        1517767529,
                        3767586992,
                        4003061179,
                        4236429990,
                        4069246893,
                        3635733660,
                        3602770327,
                        3299278474,
                        3400528769,
                        2430122216,
                        2664543715,
                        2362090238,
                        2193862645,
                        2835123396,
                        2801107407,
                        3035535058,
                        3135740889,
                        3678124923,
                        3576870512,
                        3341394285,
                        3374361702,
                        3810496343,
                        3977675356,
                        4279080257,
                        4043610186,
                        2876494627,
                        2776292904,
                        3076639029,
                        3110650942,
                        2472011535,
                        2640243204,
                        2403728665,
                        2169303058,
                        1001089995,
                        899835584,
                        666464733,
                        699432150,
                        59727847,
                        226906860,
                        530400753,
                        294930682,
                        1273168787,
                        1172967064,
                        1475418501,
                        1509430414,
                        1942435775,
                        2110667444,
                        1876241833,
                        1641816226,
                        2910219766,
                        2743034109,
                        2976151520,
                        3211623147,
                        2505202138,
                        2606453969,
                        2302690252,
                        2269728455,
                        3711829422,
                        3543599269,
                        3240894392,
                        3475313331,
                        3843699074,
                        3943906441,
                        4178062228,
                        4144047775,
                        1306967366,
                        1139781709,
                        1374988112,
                        1610459739,
                        1975683434,
                        2076935265,
                        1775276924,
                        1742315127,
                        1034867998,
                        866637845,
                        566021896,
                        800440835,
                        92987698,
                        193195065,
                        429456164,
                        395441711,
                        1984812685,
                        2017778566,
                        1784663195,
                        1683407248,
                        1315562145,
                        1080094634,
                        1383856311,
                        1551037884,
                        101039829,
                        135050206,
                        437757123,
                        337553864,
                        1042385657,
                        807962610,
                        573804783,
                        742039012,
                        2531067453,
                        2564033334,
                        2328828971,
                        2227573024,
                        2935566865,
                        2700099354,
                        3001755655,
                        3168937228,
                        3868552805,
                        3902563182,
                        4203181171,
                        4102977912,
                        3736164937,
                        3501741890,
                        3265478751,
                        3433712980,
                        1106041591,
                        1340463100,
                        1576976609,
                        1408749034,
                        2043211483,
                        2009195472,
                        1708848333,
                        1809054150,
                        832877231,
                        1068351396,
                        766945465,
                        599762354,
                        159417987,
                        126454664,
                        361929877,
                        463180190,
                        2709260871,
                        2943682380,
                        3178106961,
                        3009879386,
                        2572697195,
                        2538681184,
                        2236228733,
                        2336434550,
                        3509871135,
                        3745345300,
                        3441850377,
                        3274667266,
                        3910161971,
                        3877198648,
                        4110568485,
                        4211818798,
                        2597806476,
                        2497604743,
                        2261089178,
                        2295101073,
                        2733856160,
                        2902087851,
                        3202437046,
                        2968011453,
                        3936291284,
                        3835036895,
                        4136440770,
                        4169408201,
                        3535486456,
                        3702665459,
                        3467192302,
                        3231722213,
                        2051518780,
                        1951317047,
                        1716890410,
                        1750902305,
                        1113818384,
                        1282050075,
                        1584504582,
                        1350078989,
                        168810852,
                        67556463,
                        371049330,
                        404016761,
                        841739592,
                        1008918595,
                        775550814,
                        540080725,
                        3969562369,
                        3801332234,
                        4035489047,
                        4269907996,
                        3569255213,
                        3669462566,
                        3366754619,
                        3332740144,
                        2631065433,
                        2463879762,
                        2160117071,
                        2395588676,
                        2767645557,
                        2868897406,
                        3102011747,
                        3069049960,
                        202008497,
                        33778362,
                        270040487,
                        504459436,
                        875451293,
                        975658646,
                        675039627,
                        641025152,
                        2084704233,
                        1917518562,
                        1615861247,
                        1851332852,
                        1147550661,
                        1248802510,
                        1484005843,
                        1451044056,
                        933301370,
                        967311729,
                        733156972,
                        632953703,
                        260388950,
                        25965917,
                        328671808,
                        496906059,
                        1206477858,
                        1239443753,
                        1543208500,
                        1441952575,
                        2144161806,
                        1908694277,
                        1675577880,
                        1842759443,
                        3610369226,
                        3644379585,
                        3408119516,
                        3307916247,
                        4011190502,
                        3776767469,
                        4077384432,
                        4245618683,
                        2809771154,
                        2842737049,
                        3144396420,
                        3043140495,
                        2673705150,
                        2438237621,
                        2203032232,
                        2370213795
                    ], M = [
                        0,
                        185469197,
                        370938394,
                        487725847,
                        741876788,
                        657861945,
                        975451694,
                        824852259,
                        1483753576,
                        1400783205,
                        1315723890,
                        1164071807,
                        1950903388,
                        2135319889,
                        1649704518,
                        1767536459,
                        2967507152,
                        3152976349,
                        2801566410,
                        2918353863,
                        2631447780,
                        2547432937,
                        2328143614,
                        2177544179,
                        3901806776,
                        3818836405,
                        4270639778,
                        4118987695,
                        3299409036,
                        3483825537,
                        3535072918,
                        3652904859,
                        2077965243,
                        1893020342,
                        1841768865,
                        1724457132,
                        1474502543,
                        1559041666,
                        1107234197,
                        1257309336,
                        598438867,
                        681933534,
                        901210569,
                        1052338372,
                        261314535,
                        77422314,
                        428819965,
                        310463728,
                        3409685355,
                        3224740454,
                        3710368113,
                        3593056380,
                        3875770207,
                        3960309330,
                        4045380933,
                        4195456072,
                        2471224067,
                        2554718734,
                        2237133081,
                        2388260884,
                        3212035895,
                        3028143674,
                        2842678573,
                        2724322336,
                        4138563181,
                        4255350624,
                        3769721975,
                        3955191162,
                        3667219033,
                        3516619604,
                        3431546947,
                        3347532110,
                        2933734917,
                        2782082824,
                        3099667487,
                        3016697106,
                        2196052529,
                        2313884476,
                        2499348523,
                        2683765030,
                        1179510461,
                        1296297904,
                        1347548327,
                        1533017514,
                        1786102409,
                        1635502980,
                        2087309459,
                        2003294622,
                        507358933,
                        355706840,
                        136428751,
                        53458370,
                        839224033,
                        957055980,
                        605657339,
                        790073846,
                        2373340630,
                        2256028891,
                        2607439820,
                        2422494913,
                        2706270690,
                        2856345839,
                        3075636216,
                        3160175349,
                        3573941694,
                        3725069491,
                        3273267108,
                        3356761769,
                        4181598602,
                        4063242375,
                        4011996048,
                        3828103837,
                        1033297158,
                        915985419,
                        730517276,
                        545572369,
                        296679730,
                        446754879,
                        129166120,
                        213705253,
                        1709610350,
                        1860738147,
                        1945798516,
                        2029293177,
                        1239331162,
                        1120974935,
                        1606591296,
                        1422699085,
                        4148292826,
                        4233094615,
                        3781033664,
                        3931371469,
                        3682191598,
                        3497509347,
                        3446004468,
                        3328955385,
                        2939266226,
                        2755636671,
                        3106780840,
                        2988687269,
                        2198438022,
                        2282195339,
                        2501218972,
                        2652609425,
                        1201765386,
                        1286567175,
                        1371368976,
                        1521706781,
                        1805211710,
                        1620529459,
                        2105887268,
                        1988838185,
                        533804130,
                        350174575,
                        164439672,
                        46346101,
                        870912086,
                        954669403,
                        636813900,
                        788204353,
                        2358957921,
                        2274680428,
                        2592523643,
                        2441661558,
                        2695033685,
                        2880240216,
                        3065962831,
                        3182487618,
                        3572145929,
                        3756299780,
                        3270937875,
                        3388507166,
                        4174560061,
                        4091327024,
                        4006521127,
                        3854606378,
                        1014646705,
                        930369212,
                        711349675,
                        560487590,
                        272786309,
                        457992840,
                        106852767,
                        223377554,
                        1678381017,
                        1862534868,
                        1914052035,
                        2031621326,
                        1211247597,
                        1128014560,
                        1580087799,
                        1428173050,
                        32283319,
                        182621114,
                        401639597,
                        486441376,
                        768917123,
                        651868046,
                        1003007129,
                        818324884,
                        1503449823,
                        1385356242,
                        1333838021,
                        1150208456,
                        1973745387,
                        2125135846,
                        1673061617,
                        1756818940,
                        2970356327,
                        3120694122,
                        2802849917,
                        2887651696,
                        2637442643,
                        2520393566,
                        2334669897,
                        2149987652,
                        3917234703,
                        3799141122,
                        4284502037,
                        4100872472,
                        3309594171,
                        3460984630,
                        3545789473,
                        3629546796,
                        2050466060,
                        1899603969,
                        1814803222,
                        1730525723,
                        1443857720,
                        1560382517,
                        1075025698,
                        1260232239,
                        575138148,
                        692707433,
                        878443390,
                        1062597235,
                        243256656,
                        91341917,
                        409198410,
                        325965383,
                        3403100636,
                        3252238545,
                        3704300486,
                        3620022987,
                        3874428392,
                        3990953189,
                        4042459122,
                        4227665663,
                        2460449204,
                        2578018489,
                        2226875310,
                        2411029155,
                        3198115200,
                        3046200461,
                        2827177882,
                        2743944855
                    ], A = [
                        0,
                        218828297,
                        437656594,
                        387781147,
                        875313188,
                        958871085,
                        775562294,
                        590424639,
                        1750626376,
                        1699970625,
                        1917742170,
                        2135253587,
                        1551124588,
                        1367295589,
                        1180849278,
                        1265195639,
                        3501252752,
                        3720081049,
                        3399941250,
                        3350065803,
                        3835484340,
                        3919042237,
                        4270507174,
                        4085369519,
                        3102249176,
                        3051593425,
                        2734591178,
                        2952102595,
                        2361698556,
                        2177869557,
                        2530391278,
                        2614737639,
                        3145456443,
                        3060847922,
                        2708326185,
                        2892417312,
                        2404901663,
                        2187128086,
                        2504130317,
                        2555048196,
                        3542330227,
                        3727205754,
                        3375740769,
                        3292445032,
                        3876557655,
                        3926170974,
                        4246310725,
                        4027744588,
                        1808481195,
                        1723872674,
                        1910319033,
                        2094410160,
                        1608975247,
                        1391201670,
                        1173430173,
                        1224348052,
                        59984867,
                        244860394,
                        428169201,
                        344873464,
                        935293895,
                        984907214,
                        766078933,
                        547512796,
                        1844882806,
                        1627235199,
                        2011214180,
                        2062270317,
                        1507497298,
                        1423022939,
                        1137477952,
                        1321699145,
                        95345982,
                        145085239,
                        532201772,
                        313773861,
                        830661914,
                        1015671571,
                        731183368,
                        648017665,
                        3175501286,
                        2957853679,
                        2807058932,
                        2858115069,
                        2305455554,
                        2220981195,
                        2474404304,
                        2658625497,
                        3575528878,
                        3625268135,
                        3473416636,
                        3254988725,
                        3778151818,
                        3963161475,
                        4213447064,
                        4130281361,
                        3599595085,
                        3683022916,
                        3432737375,
                        3247465558,
                        3802222185,
                        4020912224,
                        4172763771,
                        4122762354,
                        3201631749,
                        3017672716,
                        2764249623,
                        2848461854,
                        2331590177,
                        2280796200,
                        2431590963,
                        2648976442,
                        104699613,
                        188127444,
                        472615631,
                        287343814,
                        840019705,
                        1058709744,
                        671593195,
                        621591778,
                        1852171925,
                        1668212892,
                        1953757831,
                        2037970062,
                        1514790577,
                        1463996600,
                        1080017571,
                        1297403050,
                        3673637356,
                        3623636965,
                        3235995134,
                        3454686199,
                        4007360968,
                        3822090177,
                        4107101658,
                        4190530515,
                        2997825956,
                        3215212461,
                        2830708150,
                        2779915199,
                        2256734592,
                        2340947849,
                        2627016082,
                        2443058075,
                        172466556,
                        122466165,
                        273792366,
                        492483431,
                        1047239e3,
                        861968209,
                        612205898,
                        695634755,
                        1646252340,
                        1863638845,
                        2013908262,
                        1963115311,
                        1446242576,
                        1530455833,
                        1277555970,
                        1093597963,
                        1636604631,
                        1820824798,
                        2073724613,
                        1989249228,
                        1436590835,
                        1487645946,
                        1337376481,
                        1119727848,
                        164948639,
                        81781910,
                        331544205,
                        516552836,
                        1039717051,
                        821288114,
                        669961897,
                        719700128,
                        2973530695,
                        3157750862,
                        2871682645,
                        2787207260,
                        2232435299,
                        2283490410,
                        2667994737,
                        2450346104,
                        3647212047,
                        3564045318,
                        3279033885,
                        3464042516,
                        3980931627,
                        3762502690,
                        4150144569,
                        4199882800,
                        3070356634,
                        3121275539,
                        2904027272,
                        2686254721,
                        2200818878,
                        2384911031,
                        2570832044,
                        2486224549,
                        3747192018,
                        3528626907,
                        3310321856,
                        3359936201,
                        3950355702,
                        3867060991,
                        4049844452,
                        4234721005,
                        1739656202,
                        1790575107,
                        2108100632,
                        1890328081,
                        1402811438,
                        1586903591,
                        1233856572,
                        1149249077,
                        266959938,
                        48394827,
                        369057872,
                        418672217,
                        1002783846,
                        919489135,
                        567498868,
                        752375421,
                        209336225,
                        24197544,
                        376187827,
                        459744698,
                        945164165,
                        895287692,
                        574624663,
                        793451934,
                        1679968233,
                        1764313568,
                        2117360635,
                        1933530610,
                        1343127501,
                        1560637892,
                        1243112415,
                        1192455638,
                        3704280881,
                        3519142200,
                        3336358691,
                        3419915562,
                        3907448597,
                        3857572124,
                        4075877127,
                        4294704398,
                        3029510009,
                        3113855344,
                        2927934315,
                        2744104290,
                        2159976285,
                        2377486676,
                        2594734927,
                        2544078150
                    ], E = [
                        0,
                        151849742,
                        303699484,
                        454499602,
                        607398968,
                        758720310,
                        908999204,
                        1059270954,
                        1214797936,
                        1097159550,
                        1517440620,
                        1400849762,
                        1817998408,
                        1699839814,
                        2118541908,
                        2001430874,
                        2429595872,
                        2581445614,
                        2194319100,
                        2345119218,
                        3034881240,
                        3186202582,
                        2801699524,
                        2951971274,
                        3635996816,
                        3518358430,
                        3399679628,
                        3283088770,
                        4237083816,
                        4118925222,
                        4002861748,
                        3885750714,
                        1002142683,
                        850817237,
                        698445255,
                        548169417,
                        529487843,
                        377642221,
                        227885567,
                        77089521,
                        1943217067,
                        2061379749,
                        1640576439,
                        1757691577,
                        1474760595,
                        1592394909,
                        1174215055,
                        1290801793,
                        2875968315,
                        2724642869,
                        3111247143,
                        2960971305,
                        2405426947,
                        2253581325,
                        2638606623,
                        2487810577,
                        3808662347,
                        3926825029,
                        4044981591,
                        4162096729,
                        3342319475,
                        3459953789,
                        3576539503,
                        3693126241,
                        1986918061,
                        2137062819,
                        1685577905,
                        1836772287,
                        1381620373,
                        1532285339,
                        1078185097,
                        1229899655,
                        1040559837,
                        923313619,
                        740276417,
                        621982671,
                        439452389,
                        322734571,
                        137073913,
                        19308535,
                        3871163981,
                        4021308739,
                        4104605777,
                        4255800159,
                        3263785589,
                        3414450555,
                        3499326569,
                        3651041127,
                        2933202493,
                        2815956275,
                        3167684641,
                        3049390895,
                        2330014213,
                        2213296395,
                        2566595609,
                        2448830231,
                        1305906550,
                        1155237496,
                        1607244650,
                        1455525988,
                        1776460110,
                        1626319424,
                        2079897426,
                        1928707164,
                        96392454,
                        213114376,
                        396673818,
                        514443284,
                        562755902,
                        679998e3,
                        865136418,
                        983426092,
                        3708173718,
                        3557504664,
                        3474729866,
                        3323011204,
                        4180808110,
                        4030667424,
                        3945269170,
                        3794078908,
                        2507040230,
                        2623762152,
                        2272556026,
                        2390325492,
                        2975484382,
                        3092726480,
                        2738905026,
                        2857194700,
                        3973773121,
                        3856137295,
                        4274053469,
                        4157467219,
                        3371096953,
                        3252932727,
                        3673476453,
                        3556361835,
                        2763173681,
                        2915017791,
                        3064510765,
                        3215307299,
                        2156299017,
                        2307622919,
                        2459735317,
                        2610011675,
                        2081048481,
                        1963412655,
                        1846563261,
                        1729977011,
                        1480485785,
                        1362321559,
                        1243905413,
                        1126790795,
                        878845905,
                        1030690015,
                        645401037,
                        796197571,
                        274084841,
                        425408743,
                        38544885,
                        188821243,
                        3613494426,
                        3731654548,
                        3313212038,
                        3430322568,
                        4082475170,
                        4200115116,
                        3780097726,
                        3896688048,
                        2668221674,
                        2516901860,
                        2366882550,
                        2216610296,
                        3141400786,
                        2989552604,
                        2837966542,
                        2687165888,
                        1202797690,
                        1320957812,
                        1437280870,
                        1554391400,
                        1669664834,
                        1787304780,
                        1906247262,
                        2022837584,
                        265905162,
                        114585348,
                        499347990,
                        349075736,
                        736970802,
                        585122620,
                        972512814,
                        821712160,
                        2595684844,
                        2478443234,
                        2293045232,
                        2174754046,
                        3196267988,
                        3079546586,
                        2895723464,
                        2777952454,
                        3537852828,
                        3687994002,
                        3234156416,
                        3385345166,
                        4142626212,
                        4293295786,
                        3841024952,
                        3992742070,
                        174567692,
                        57326082,
                        410887952,
                        292596766,
                        777231668,
                        660510266,
                        1011452712,
                        893681702,
                        1108339068,
                        1258480242,
                        1343618912,
                        1494807662,
                        1715193156,
                        1865862730,
                        1948373848,
                        2100090966,
                        2701949495,
                        2818666809,
                        3004591147,
                        3122358053,
                        2235061775,
                        2352307457,
                        2535604243,
                        2653899549,
                        3915653703,
                        3764988233,
                        4219352155,
                        4067639125,
                        3444575871,
                        3294430577,
                        3746175075,
                        3594982253,
                        836553431,
                        953270745,
                        600235211,
                        718002117,
                        367585007,
                        484830689,
                        133361907,
                        251657213,
                        2041877159,
                        1891211689,
                        1806599355,
                        1654886325,
                        1568718495,
                        1418573201,
                        1335535747,
                        1184342925
                    ];
                    function S(e) {
                        for(var t = [], r = 0; r < e.length; r += 4)t.push(e[r] << 24 | e[r + 1] << 16 | e[r + 2] << 8 | e[r + 3]);
                        return t;
                    }
                    var k = function(e) {
                        if (!(this instanceof k)) throw Error("AES must be instanitated with `new`");
                        Object.defineProperty(this, "key", {
                            value: o4(e, !0)
                        }), this._prepare();
                    };
                    k.prototype._prepare = function() {
                        var e = f[this.key.length];
                        if (null == e) throw new Error("invalid key size (must be 16, 24 or 32 bytes)");
                        this._Ke = [], this._Kd = [];
                        for(var t = 0; t <= e; t++)this._Ke.push([
                            0,
                            0,
                            0,
                            0
                        ]), this._Kd.push([
                            0,
                            0,
                            0,
                            0
                        ]);
                        for(var r, n = 4 * (e + 1), i = this.key.length / 4, o = S(this.key), t = 0; t < i; t++)this._Ke[r = t >> 2][t % 4] = o[t], this._Kd[e - r][t % 4] = o[t];
                        for(var s, a = 0, u = i; u < n;){
                            if (s = o[i - 1], o[0] ^= d[s >> 16 & 255] << 24 ^ d[s >> 8 & 255] << 16 ^ d[255 & s] << 8 ^ d[s >> 24 & 255] ^ c[a] << 24, a += 1, 8 != i) for(t = 1; t < i; t++)o[t] ^= o[t - 1];
                            else {
                                for(t = 1; t < i / 2; t++)o[t] ^= o[t - 1];
                                s = o[i / 2 - 1], o[i / 2] ^= d[255 & s] ^ d[s >> 8 & 255] << 8 ^ d[s >> 16 & 255] << 16 ^ d[s >> 24 & 255] << 24;
                                for(t = i / 2 + 1; t < i; t++)o[t] ^= o[t - 1];
                            }
                            for(t = 0; t < i && u < n;)this._Ke[l = u >> 2][h = u % 4] = o[t], this._Kd[e - l][h] = o[t++], u++;
                        }
                        for(var l = 1; l < e; l++)for(var h = 0; h < 4; h++)s = this._Kd[l][h], this._Kd[l][h] = _[s >> 24 & 255] ^ M[s >> 16 & 255] ^ A[s >> 8 & 255] ^ E[255 & s];
                    }, k.prototype.encrypt = function(e) {
                        if (16 != e.length) throw new Error("invalid plaintext size (must be 16 bytes)");
                        for(var t = this._Ke.length - 1, r = [
                            0,
                            0,
                            0,
                            0
                        ], n = S(e), i = 0; i < 4; i++)n[i] ^= this._Ke[0][i];
                        for(var o = 1; o < t; o++){
                            for(i = 0; i < 4; i++)r[i] = h1[n[i] >> 24 & 255] ^ p[n[(i + 1) % 4] >> 16 & 255] ^ y[n[(i + 2) % 4] >> 8 & 255] ^ m[255 & n[(i + 3) % 4]] ^ this._Ke[o][i];
                            n = r.slice();
                        }
                        for(var s, a = u1(16), i = 0; i < 4; i++)s = this._Ke[t][i], a[4 * i] = 255 & (d[n[i] >> 24 & 255] ^ s >> 24), a[4 * i + 1] = 255 & (d[n[(i + 1) % 4] >> 16 & 255] ^ s >> 16), a[4 * i + 2] = 255 & (d[n[(i + 2) % 4] >> 8 & 255] ^ s >> 8), a[4 * i + 3] = 255 & (d[255 & n[(i + 3) % 4]] ^ s);
                        return a;
                    }, k.prototype.decrypt = function(e) {
                        if (16 != e.length) throw new Error("invalid ciphertext size (must be 16 bytes)");
                        for(var t = this._Kd.length - 1, r = [
                            0,
                            0,
                            0,
                            0
                        ], n = S(e), i = 0; i < 4; i++)n[i] ^= this._Kd[0][i];
                        for(var o = 1; o < t; o++){
                            for(i = 0; i < 4; i++)r[i] = g[n[i] >> 24 & 255] ^ v[n[(i + 3) % 4] >> 16 & 255] ^ b[n[(i + 2) % 4] >> 8 & 255] ^ w[255 & n[(i + 1) % 4]] ^ this._Kd[o][i];
                            n = r.slice();
                        }
                        for(var s, a = u1(16), i = 0; i < 4; i++)s = this._Kd[t][i], a[4 * i] = 255 & (l1[n[i] >> 24 & 255] ^ s >> 24), a[4 * i + 1] = 255 & (l1[n[(i + 3) % 4] >> 16 & 255] ^ s >> 16), a[4 * i + 2] = 255 & (l1[n[(i + 2) % 4] >> 8 & 255] ^ s >> 8), a[4 * i + 3] = 255 & (l1[255 & n[(i + 1) % 4]] ^ s);
                        return a;
                    };
                    var N = function(e) {
                        if (!(this instanceof N)) throw Error("AES must be instanitated with `new`");
                        this.description = "Electronic Code Block", this.name = "ecb", this._aes = new k(e);
                    };
                    N.prototype.encrypt = function(e) {
                        if ((e = o4(e)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
                        for(var t = u1(e.length), r = u1(16), n = 0; n < e.length; n += 16)s3(e, r, 0, n, n + 16), s3(r = this._aes.encrypt(r), t, n);
                        return t;
                    }, N.prototype.decrypt = function(e) {
                        if ((e = o4(e)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
                        for(var t = u1(e.length), r = u1(16), n = 0; n < e.length; n += 16)s3(e, r, 0, n, n + 16), s3(r = this._aes.decrypt(r), t, n);
                        return t;
                    };
                    var x = function(e, t) {
                        if (!(this instanceof x)) throw Error("AES must be instanitated with `new`");
                        if (this.description = "Cipher Block Chaining", this.name = "cbc", t) {
                            if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
                        } else t = u1(16);
                        this._lastCipherblock = o4(t, !0), this._aes = new k(e);
                    };
                    x.prototype.encrypt = function(e) {
                        if ((e = o4(e)).length % 16 != 0) throw new Error("invalid plaintext size (must be multiple of 16 bytes)");
                        for(var t = u1(e.length), r = u1(16), n = 0; n < e.length; n += 16){
                            s3(e, r, 0, n, n + 16);
                            for(var i = 0; i < 16; i++)r[i] ^= this._lastCipherblock[i];
                            this._lastCipherblock = this._aes.encrypt(r), s3(this._lastCipherblock, t, n);
                        }
                        return t;
                    }, x.prototype.decrypt = function(e) {
                        if ((e = o4(e)).length % 16 != 0) throw new Error("invalid ciphertext size (must be multiple of 16 bytes)");
                        for(var t = u1(e.length), r = u1(16), n = 0; n < e.length; n += 16){
                            s3(e, r, 0, n, n + 16);
                            for(var r = this._aes.decrypt(r), i = 0; i < 16; i++)t[n + i] = r[i] ^ this._lastCipherblock[i];
                            s3(e, this._lastCipherblock, 0, n, n + 16);
                        }
                        return t;
                    };
                    var P = function(e, t, r) {
                        if (!(this instanceof P)) throw Error("AES must be instanitated with `new`");
                        if (this.description = "Cipher Feedback", this.name = "cfb", t) {
                            if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 size)");
                        } else t = u1(16);
                        this.segmentSize = r = r || 1, this._shiftRegister = o4(t, !0), this._aes = new k(e);
                    };
                    P.prototype.encrypt = function(e) {
                        if (e.length % this.segmentSize != 0) throw new Error("invalid plaintext size (must be segmentSize bytes)");
                        for(var t = o4(e, !0), r = 0; r < t.length; r += this.segmentSize){
                            for(var n = this._aes.encrypt(this._shiftRegister), i = 0; i < this.segmentSize; i++)t[r + i] ^= n[i];
                            s3(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s3(t, this._shiftRegister, 16 - this.segmentSize, r, r + this.segmentSize);
                        }
                        return t;
                    }, P.prototype.decrypt = function(e) {
                        if (e.length % this.segmentSize != 0) throw new Error("invalid ciphertext size (must be segmentSize bytes)");
                        for(var t = o4(e, !0), r = 0; r < t.length; r += this.segmentSize){
                            for(var n = this._aes.encrypt(this._shiftRegister), i = 0; i < this.segmentSize; i++)t[r + i] ^= n[i];
                            s3(this._shiftRegister, this._shiftRegister, 0, this.segmentSize), s3(e, this._shiftRegister, 16 - this.segmentSize, r, r + this.segmentSize);
                        }
                        return t;
                    };
                    var I = function(e, t) {
                        if (!(this instanceof I)) throw Error("AES must be instanitated with `new`");
                        if (this.description = "Output Feedback", this.name = "ofb", t) {
                            if (16 != t.length) throw new Error("invalid initialation vector size (must be 16 bytes)");
                        } else t = u1(16);
                        this._lastPrecipher = o4(t, !0), this._lastPrecipherIndex = 16, this._aes = new k(e);
                    };
                    I.prototype.encrypt = function(e) {
                        for(var t = o4(e, !0), r = 0; r < t.length; r++)16 === this._lastPrecipherIndex && (this._lastPrecipher = this._aes.encrypt(this._lastPrecipher), this._lastPrecipherIndex = 0), t[r] ^= this._lastPrecipher[this._lastPrecipherIndex++];
                        return t;
                    }, I.prototype.decrypt = I.prototype.encrypt;
                    var T = function(e) {
                        if (!(this instanceof T)) throw Error("Counter must be instanitated with `new`");
                        "number" == typeof (e = 0 !== e && !e ? 1 : e) ? (this._counter = u1(16), this.setValue(e)) : this.setBytes(e);
                    };
                    T.prototype.setValue = function(e) {
                        if ("number" != typeof e || parseInt(e) != e) throw new Error("invalid counter value (must be an integer)");
                        for(var t = 15; 0 <= t; --t)this._counter[t] = e % 256, e >>= 8;
                    }, T.prototype.setBytes = function(e) {
                        if (16 != (e = o4(e, !0)).length) throw new Error("invalid counter bytes size (must be 16 bytes)");
                        this._counter = e;
                    }, T.prototype.increment = function() {
                        for(var e = 15; 0 <= e; e--){
                            if (255 !== this._counter[e]) {
                                this._counter[e]++;
                                break;
                            }
                            this._counter[e] = 0;
                        }
                    };
                    var R = function(e, t) {
                        if (!(this instanceof R)) throw Error("AES must be instanitated with `new`");
                        this.description = "Counter", this.name = "ctr", t instanceof T || (t = new T(t)), this._counter = t, this._remainingCounter = null, this._remainingCounterIndex = 16, this._aes = new k(e);
                    };
                    R.prototype.encrypt = function(e) {
                        for(var t = o4(e, !0), r = 0; r < t.length; r++)16 === this._remainingCounterIndex && (this._remainingCounter = this._aes.encrypt(this._counter._counter), this._remainingCounterIndex = 0, this._counter.increment()), t[r] ^= this._remainingCounter[this._remainingCounterIndex++];
                        return t;
                    }, R.prototype.decrypt = R.prototype.encrypt;
                    t14 = {
                        AES: k,
                        Counter: T,
                        ModeOfOperation: {
                            ecb: N,
                            cbc: x,
                            cfb: P,
                            ofb: I,
                            ctr: R
                        },
                        utils: {
                            hex: a3,
                            utf8: t14
                        },
                        padding: {
                            pkcs7: {
                                pad: function(e) {
                                    var t = 16 - (e = o4(e, !0)).length % 16, r = u1(e.length + t);
                                    s3(e, r);
                                    for(var n = e.length; n < r.length; n++)r[n] = t;
                                    return r;
                                },
                                strip: function(e) {
                                    if ((e = o4(e, !0)).length < 16) throw new Error("PKCS#7 invalid length");
                                    var t = e[e.length - 1];
                                    if (16 < t) throw new Error("PKCS#7 padding byte out of range");
                                    for(var r = e.length - t, n = 0; n < t; n++)if (e[r + n] !== t) throw new Error("PKCS#7 invalid padding byte");
                                    var i = u1(r);
                                    return s3(e, i, 0, 0, r), i;
                                }
                            }
                        },
                        _arrayTest: {
                            coerceArray: o4,
                            createArray: u1,
                            copyArray: s3
                        }
                    };
                    void 0 !== C ? O.exports = t14 : (e30.aesjs && (t14._aesjs = e30.aesjs), e30.aesjs = t14);
                }(this);
            },
            {}
        ],
        9: [
            function(E1, e31, t15) {
                !function(e32, t16) {
                    function y1(e, t) {
                        if (!e) throw new Error(t || "Assertion failed");
                    }
                    function r9(e, t) {
                        e.super_ = t;
                        function r() {}
                        r.prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e;
                    }
                    function m1(e, t, r) {
                        if (m1.isBN(e)) return e;
                        this.negative = 0, this.words = null, this.length = 0, (this.red = null) !== e && ("le" !== t && "be" !== t || (r = t, t = 10), this._init(e || 0, t || 10, r || "be"));
                    }
                    var n4;
                    "object" == typeof e32 ? e32.exports = m1 : t16.BN = m1, (m1.BN = m1).wordSize = 26;
                    try {
                        n4 = ("undefined" != typeof window && void 0 !== window.Buffer ? window : E1("buffer")).Buffer;
                    } catch (e33) {}
                    function i5(e, t) {
                        t = e.charCodeAt(t);
                        return 65 <= t && t <= 70 ? t - 55 : 97 <= t && t <= 102 ? t - 87 : t - 48 & 15;
                    }
                    function a4(e, t, r) {
                        var n = i5(e, r);
                        return t <= r - 1 && (n |= i5(e, r - 1) << 4), n;
                    }
                    function f1(e, t, r, n) {
                        for(var i = 0, o = Math.min(e.length, r), s = t; s < o; s++){
                            var a = e.charCodeAt(s) - 48;
                            i *= n, i += 49 <= a ? a - 49 + 10 : 17 <= a ? a - 17 + 10 : a;
                        }
                        return i;
                    }
                    m1.isBN = function(e) {
                        return e instanceof m1 || null !== e && "object" == typeof e && e.constructor.wordSize === m1.wordSize && Array.isArray(e.words);
                    }, m1.max = function(e, t) {
                        return 0 < e.cmp(t) ? e : t;
                    }, m1.min = function(e, t) {
                        return e.cmp(t) < 0 ? e : t;
                    }, m1.prototype._init = function(e, t, r) {
                        if ("number" == typeof e) return this._initNumber(e, t, r);
                        if ("object" == typeof e) return this._initArray(e, t, r);
                        y1((t = "hex" === t ? 16 : t) === (0 | t) && 2 <= t && t <= 36);
                        var n = 0;
                        "-" === (e = e.toString().replace(/\s+/g, ""))[0] && (n++, this.negative = 1), n < e.length && (16 === t ? this._parseHex(e, n, r) : (this._parseBase(e, t, n), "le" === r && this._initArray(this.toArray(), t, r)));
                    }, m1.prototype._initNumber = function(e, t, r) {
                        e < 0 && (this.negative = 1, e = -e), e < 67108864 ? (this.words = [
                            67108863 & e
                        ], this.length = 1) : e < 4503599627370496 ? (this.words = [
                            67108863 & e,
                            e / 67108864 & 67108863
                        ], this.length = 2) : (y1(e < 9007199254740992), this.words = [
                            67108863 & e,
                            e / 67108864 & 67108863,
                            1
                        ], this.length = 3), "le" === r && this._initArray(this.toArray(), t, r);
                    }, m1.prototype._initArray = function(e, t, r) {
                        if (y1("number" == typeof e.length), e.length <= 0) return this.words = [
                            0
                        ], this.length = 1, this;
                        this.length = Math.ceil(e.length / 3), this.words = new Array(this.length);
                        for(var n, i, o = 0; o < this.length; o++)this.words[o] = 0;
                        var s = 0;
                        if ("be" === r) for(o = e.length - 1, n = 0; 0 <= o; o -= 3)i = e[o] | e[o - 1] << 8 | e[o - 2] << 16, this.words[n] |= i << s & 67108863, this.words[n + 1] = i >>> 26 - s & 67108863, 26 <= (s += 24) && (s -= 26, n++);
                        else if ("le" === r) for(n = o = 0; o < e.length; o += 3)i = e[o] | e[o + 1] << 8 | e[o + 2] << 16, this.words[n] |= i << s & 67108863, this.words[n + 1] = i >>> 26 - s & 67108863, 26 <= (s += 24) && (s -= 26, n++);
                        return this.strip();
                    }, m1.prototype._parseHex = function(e, t, r) {
                        this.length = Math.ceil((e.length - t) / 6), this.words = new Array(this.length);
                        for(var n = 0; n < this.length; n++)this.words[n] = 0;
                        var i, o = 0, s = 0;
                        if ("be" === r) for(n = e.length - 1; t <= n; n -= 2)i = a4(e, t, n) << o, this.words[s] |= 67108863 & i, 18 <= o ? (o -= 18, this.words[s += 1] |= i >>> 26) : o += 8;
                        else for(n = (e.length - t) % 2 == 0 ? t + 1 : t; n < e.length; n += 2)i = a4(e, t, n) << o, this.words[s] |= 67108863 & i, 18 <= o ? (o -= 18, this.words[s += 1] |= i >>> 26) : o += 8;
                        this.strip();
                    }, m1.prototype._parseBase = function(e, t, r) {
                        this.words = [
                            0
                        ];
                        for(var n = 0, i = this.length = 1; i <= 67108863; i *= t)n++;
                        for(var i = i / t | 0, o = e.length - r, s = o % --n, a = Math.min(o, o - s) + r, u = 0, l = r; l < a; l += n)u = f1(e, l, l + n, t), this.imuln(i), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                        if (0 != s) {
                            for(var h = 1, u = f1(e, l, e.length, t), l = 0; l < s; l++)h *= t;
                            this.imuln(h), this.words[0] + u < 67108864 ? this.words[0] += u : this._iaddn(u);
                        }
                        this.strip();
                    }, m1.prototype.copy = function(e) {
                        e.words = new Array(this.length);
                        for(var t = 0; t < this.length; t++)e.words[t] = this.words[t];
                        e.length = this.length, e.negative = this.negative, e.red = this.red;
                    }, m1.prototype.clone = function() {
                        var e = new m1(null);
                        return this.copy(e), e;
                    }, m1.prototype._expand = function(e) {
                        for(; this.length < e;)this.words[this.length++] = 0;
                        return this;
                    }, m1.prototype.strip = function() {
                        for(; 1 < this.length && 0 === this.words[this.length - 1];)this.length--;
                        return this._normSign();
                    }, m1.prototype._normSign = function() {
                        return 1 === this.length && 0 === this.words[0] && (this.negative = 0), this;
                    }, m1.prototype.inspect = function() {
                        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
                    };
                    var c1 = [
                        "",
                        "0",
                        "00",
                        "000",
                        "0000",
                        "00000",
                        "000000",
                        "0000000",
                        "00000000",
                        "000000000",
                        "0000000000",
                        "00000000000",
                        "000000000000",
                        "0000000000000",
                        "00000000000000",
                        "000000000000000",
                        "0000000000000000",
                        "00000000000000000",
                        "000000000000000000",
                        "0000000000000000000",
                        "00000000000000000000",
                        "000000000000000000000",
                        "0000000000000000000000",
                        "00000000000000000000000",
                        "000000000000000000000000",
                        "0000000000000000000000000"
                    ], d1 = [
                        0,
                        0,
                        25,
                        16,
                        12,
                        11,
                        10,
                        9,
                        8,
                        8,
                        7,
                        7,
                        7,
                        7,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        6,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5,
                        5
                    ], p1 = [
                        0,
                        0,
                        33554432,
                        43046721,
                        16777216,
                        48828125,
                        60466176,
                        40353607,
                        16777216,
                        43046721,
                        1e7,
                        19487171,
                        35831808,
                        62748517,
                        7529536,
                        11390625,
                        16777216,
                        24137569,
                        34012224,
                        47045881,
                        64e6,
                        4084101,
                        5153632,
                        6436343,
                        7962624,
                        9765625,
                        11881376,
                        14348907,
                        17210368,
                        20511149,
                        243e5,
                        28629151,
                        33554432,
                        39135393,
                        45435424,
                        52521875,
                        60466176
                    ];
                    function o5(e, t, r) {
                        r.negative = t.negative ^ e.negative;
                        var n = e.length + t.length | 0, n = (r.length = n) - 1 | 0, i = (s = (0 | e.words[0]) * (0 | t.words[0])) / 67108864 | 0;
                        r.words[0] = 67108863 & s;
                        for(var o = 1; o < n; o++){
                            for(var s, a = i >>> 26, u = 67108863 & i, l = Math.min(o, t.length - 1), h = Math.max(0, o - e.length + 1); h <= l; h++)a += (s = (0 | e.words[o - h | 0]) * (0 | t.words[h]) + u) / 67108864 | 0, u = 67108863 & s;
                            r.words[o] = 0 | u, i = 0 | a;
                        }
                        return 0 !== i ? r.words[o] = 0 | i : r.length--, r.strip();
                    }
                    m1.prototype.toString = function(e, t) {
                        if (t = 0 | t || 1, 16 === (e = e || 10) || "hex" === e) {
                            a = "";
                            for(var r = 0, n = 0, i = 0; i < this.length; i++){
                                var o = this.words[i], s = (16777215 & (o << r | n)).toString(16), a = 0 !== (n = o >>> 24 - r & 16777215) || i !== this.length - 1 ? c1[6 - s.length] + s + a : s + a;
                                26 <= (r += 2) && (r -= 26, i--);
                            }
                            for(0 !== n && (a = n.toString(16) + a); a.length % t != 0;)a = "0" + a;
                            return a = 0 !== this.negative ? "-" + a : a;
                        }
                        if (e === (0 | e) && 2 <= e && e <= 36) {
                            var u = d1[e], l = p1[e];
                            for(a = "", (h = this.clone()).negative = 0; !h.isZero();){
                                var h, f = h.modn(l).toString(e);
                                a = (h = h.idivn(l)).isZero() ? f + a : c1[u - f.length] + f + a;
                            }
                            for(this.isZero() && (a = "0" + a); a.length % t != 0;)a = "0" + a;
                            return a = 0 !== this.negative ? "-" + a : a;
                        }
                        y1(!1, "Base should be between 2 and 36");
                    }, m1.prototype.toNumber = function() {
                        var e = this.words[0];
                        return 2 === this.length ? e += 67108864 * this.words[1] : 3 === this.length && 1 === this.words[2] ? e += 4503599627370496 + 67108864 * this.words[1] : 2 < this.length && y1(!1, "Number can only safely store up to 53 bits"), 0 !== this.negative ? -e : e;
                    }, m1.prototype.toJSON = function() {
                        return this.toString(16);
                    }, m1.prototype.toBuffer = function(e, t) {
                        return y1(void 0 !== n4), this.toArrayLike(n4, e, t);
                    }, m1.prototype.toArray = function(e, t) {
                        return this.toArrayLike(Array, e, t);
                    }, m1.prototype.toArrayLike = function(e, t, r) {
                        var n = this.byteLength(), i = r || Math.max(1, n);
                        y1(n <= i, "byte array longer than desired length"), y1(0 < i, "Requested array length <= 0"), this.strip();
                        var o, s, t = "le" === t, a = new e(i), u = this.clone();
                        if (t) {
                            for(s = 0; !u.isZero(); s++)o = u.andln(255), u.iushrn(8), a[s] = o;
                            for(; s < i; s++)a[s] = 0;
                        } else {
                            for(s = 0; s < i - n; s++)a[s] = 0;
                            for(s = 0; !u.isZero(); s++)o = u.andln(255), u.iushrn(8), a[i - s - 1] = o;
                        }
                        return a;
                    }, Math.clz32 ? m1.prototype._countBits = function(e) {
                        return 32 - Math.clz32(e);
                    } : m1.prototype._countBits = function(e) {
                        var t = e, e = 0;
                        return 4096 <= t && (e += 13, t >>>= 13), 64 <= t && (e += 7, t >>>= 7), 8 <= t && (e += 4, t >>>= 4), 2 <= t && (e += 2, t >>>= 2), e + t;
                    }, m1.prototype._zeroBits = function(e) {
                        if (0 === e) return 26;
                        var t = e, e = 0;
                        return 0 == (8191 & t) && (e += 13, t >>>= 13), 0 == (127 & t) && (e += 7, t >>>= 7), 0 == (15 & t) && (e += 4, t >>>= 4), 0 == (3 & t) && (e += 2, t >>>= 2), 0 == (1 & t) && e++, e;
                    }, m1.prototype.bitLength = function() {
                        var e = this.words[this.length - 1], e = this._countBits(e);
                        return 26 * (this.length - 1) + e;
                    }, m1.prototype.zeroBits = function() {
                        if (this.isZero()) return 0;
                        for(var e = 0, t = 0; t < this.length; t++){
                            var r = this._zeroBits(this.words[t]);
                            if (e += r, 26 !== r) break;
                        }
                        return e;
                    }, m1.prototype.byteLength = function() {
                        return Math.ceil(this.bitLength() / 8);
                    }, m1.prototype.toTwos = function(e) {
                        return 0 !== this.negative ? this.abs().inotn(e).iaddn(1) : this.clone();
                    }, m1.prototype.fromTwos = function(e) {
                        return this.testn(e - 1) ? this.notn(e).iaddn(1).ineg() : this.clone();
                    }, m1.prototype.isNeg = function() {
                        return 0 !== this.negative;
                    }, m1.prototype.neg = function() {
                        return this.clone().ineg();
                    }, m1.prototype.ineg = function() {
                        return this.isZero() || (this.negative ^= 1), this;
                    }, m1.prototype.iuor = function(e) {
                        for(; this.length < e.length;)this.words[this.length++] = 0;
                        for(var t = 0; t < e.length; t++)this.words[t] = this.words[t] | e.words[t];
                        return this.strip();
                    }, m1.prototype.ior = function(e) {
                        return y1(0 == (this.negative | e.negative)), this.iuor(e);
                    }, m1.prototype.or = function(e) {
                        return this.length > e.length ? this.clone().ior(e) : e.clone().ior(this);
                    }, m1.prototype.uor = function(e) {
                        return this.length > e.length ? this.clone().iuor(e) : e.clone().iuor(this);
                    }, m1.prototype.iuand = function(e) {
                        for(var t = this.length > e.length ? e : this, r = 0; r < t.length; r++)this.words[r] = this.words[r] & e.words[r];
                        return this.length = t.length, this.strip();
                    }, m1.prototype.iand = function(e) {
                        return y1(0 == (this.negative | e.negative)), this.iuand(e);
                    }, m1.prototype.and = function(e) {
                        return this.length > e.length ? this.clone().iand(e) : e.clone().iand(this);
                    }, m1.prototype.uand = function(e) {
                        return this.length > e.length ? this.clone().iuand(e) : e.clone().iuand(this);
                    }, m1.prototype.iuxor = function(e) {
                        for(var t, r = this.length > e.length ? (t = this, e) : (t = e, this), n = 0; n < r.length; n++)this.words[n] = t.words[n] ^ r.words[n];
                        if (this !== t) for(; n < t.length; n++)this.words[n] = t.words[n];
                        return this.length = t.length, this.strip();
                    }, m1.prototype.ixor = function(e) {
                        return y1(0 == (this.negative | e.negative)), this.iuxor(e);
                    }, m1.prototype.xor = function(e) {
                        return this.length > e.length ? this.clone().ixor(e) : e.clone().ixor(this);
                    }, m1.prototype.uxor = function(e) {
                        return this.length > e.length ? this.clone().iuxor(e) : e.clone().iuxor(this);
                    }, m1.prototype.inotn = function(e) {
                        y1("number" == typeof e && 0 <= e);
                        var t = 0 | Math.ceil(e / 26), e = e % 26;
                        this._expand(t), 0 < e && t--;
                        for(var r = 0; r < t; r++)this.words[r] = 67108863 & ~this.words[r];
                        return 0 < e && (this.words[r] = ~this.words[r] & 67108863 >> 26 - e), this.strip();
                    }, m1.prototype.notn = function(e) {
                        return this.clone().inotn(e);
                    }, m1.prototype.setn = function(e, t) {
                        y1("number" == typeof e && 0 <= e);
                        var r = e / 26 | 0, e = e % 26;
                        return this._expand(1 + r), this.words[r] = t ? this.words[r] | 1 << e : this.words[r] & ~(1 << e), this.strip();
                    }, m1.prototype.iadd = function(e) {
                        var t, r;
                        if (0 !== this.negative && 0 === e.negative) return this.negative = 0, t = this.isub(e), this.negative ^= 1, this._normSign();
                        if (0 === this.negative && 0 !== e.negative) return e.negative = 0, t = this.isub(e), e.negative = 1, t._normSign();
                        for(var n = this.length > e.length ? (r = this, e) : (r = e, this), i = 0, o = 0; o < n.length; o++)t = (0 | r.words[o]) + (0 | n.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
                        for(; 0 !== i && o < r.length; o++)t = (0 | r.words[o]) + i, this.words[o] = 67108863 & t, i = t >>> 26;
                        if (this.length = r.length, 0 !== i) this.words[this.length] = i, this.length++;
                        else if (r !== this) for(; o < r.length; o++)this.words[o] = r.words[o];
                        return this;
                    }, m1.prototype.add = function(e) {
                        var t;
                        return 0 !== e.negative && 0 === this.negative ? (e.negative = 0, t = this.sub(e), e.negative ^= 1, t) : 0 === e.negative && 0 !== this.negative ? (this.negative = 0, t = e.sub(this), this.negative = 1, t) : this.length > e.length ? this.clone().iadd(e) : e.clone().iadd(this);
                    }, m1.prototype.isub = function(e) {
                        if (0 !== e.negative) {
                            e.negative = 0;
                            var t = this.iadd(e);
                            return e.negative = 1, t._normSign();
                        }
                        if (0 !== this.negative) return this.negative = 0, this.iadd(e), this.negative = 1, this._normSign();
                        var r, n = this.cmp(e);
                        if (0 === n) return this.negative = 0, this.length = 1, this.words[0] = 0, this;
                        for(var i = 0 < n ? (r = this, e) : (r = e, this), o = 0, s = 0; s < i.length; s++)o = (t = (0 | r.words[s]) - (0 | i.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
                        for(; 0 !== o && s < r.length; s++)o = (t = (0 | r.words[s]) + o) >> 26, this.words[s] = 67108863 & t;
                        if (0 === o && s < r.length && r !== this) for(; s < r.length; s++)this.words[s] = r.words[s];
                        return this.length = Math.max(this.length, s), r !== this && (this.negative = 1), this.strip();
                    }, m1.prototype.sub = function(e) {
                        return this.clone().isub(e);
                    };
                    var s4 = function(e, t, r) {
                        var n = e.words, i = t.words, o = r.words, s = 0 | n[0], a = 8191 & s, u = s >>> 13, l = 0 | n[1], h = 8191 & l, f = l >>> 13, c = 0 | n[2], d = 8191 & c, p = c >>> 13, y = 0 | n[3], m = 8191 & y, g = y >>> 13, v = 0 | n[4], b = 8191 & v, w = v >>> 13, _ = 0 | n[5], M = 8191 & _, A = _ >>> 13, E = 0 | n[6], S = 8191 & E, k = E >>> 13, N = 0 | n[7], x = 8191 & N, P = N >>> 13, I = 0 | n[8], T = 8191 & I, R = I >>> 13, O = 0 | n[9], C = 8191 & O, L = O >>> 13, B = 0 | i[0], D = 8191 & B, U = B >>> 13, F = 0 | i[1], j = 8191 & F, G = F >>> 13, H = 0 | i[2], z = 8191 & H, V = H >>> 13, K = 0 | i[3], q = 8191 & K, W = K >>> 13, Z = 0 | i[4], J = 8191 & Z, X = Z >>> 13, $ = 0 | i[5], Q = 8191 & $, Y = $ >>> 13, s = 0 | i[6], l = 8191 & s, c = s >>> 13, y = 0 | i[7], v = 8191 & y, _ = y >>> 13, E = 0 | i[8], N = 8191 & E, I = E >>> 13, n = 0 | i[9], O = 8191 & n, B = n >>> 13;
                        r.negative = e.negative ^ t.negative, r.length = 19;
                        var K = (0 + Math.imul(a, D) | 0) + ((8191 & (H = (H = Math.imul(a, U)) + Math.imul(u, D) | 0)) << 13) | 0, ee = ((Z = Math.imul(u, U)) + (H >>> 13) | 0) + (K >>> 26) | 0;
                        K &= 67108863, F = Math.imul(h, D), H = (H = Math.imul(h, U)) + Math.imul(f, D) | 0, Z = Math.imul(f, U);
                        $ = (ee + (F + Math.imul(a, j) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, G) | 0) + Math.imul(u, j) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, G) | 0) + (H >>> 13) | 0) + ($ >>> 26) | 0, $ &= 67108863, F = Math.imul(d, D), H = (H = Math.imul(d, U)) + Math.imul(p, D) | 0, Z = Math.imul(p, U), F = F + Math.imul(h, j) | 0, H = (H = H + Math.imul(h, G) | 0) + Math.imul(f, j) | 0, Z = Z + Math.imul(f, G) | 0;
                        s = (ee + (F + Math.imul(a, z) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, V) | 0) + Math.imul(u, z) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, V) | 0) + (H >>> 13) | 0) + (s >>> 26) | 0, s &= 67108863, F = Math.imul(m, D), H = (H = Math.imul(m, U)) + Math.imul(g, D) | 0, Z = Math.imul(g, U), F = F + Math.imul(d, j) | 0, H = (H = H + Math.imul(d, G) | 0) + Math.imul(p, j) | 0, Z = Z + Math.imul(p, G) | 0, F = F + Math.imul(h, z) | 0, H = (H = H + Math.imul(h, V) | 0) + Math.imul(f, z) | 0, Z = Z + Math.imul(f, V) | 0;
                        y = (ee + (F + Math.imul(a, q) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, W) | 0) + Math.imul(u, q) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, W) | 0) + (H >>> 13) | 0) + (y >>> 26) | 0, y &= 67108863, F = Math.imul(b, D), H = (H = Math.imul(b, U)) + Math.imul(w, D) | 0, Z = Math.imul(w, U), F = F + Math.imul(m, j) | 0, H = (H = H + Math.imul(m, G) | 0) + Math.imul(g, j) | 0, Z = Z + Math.imul(g, G) | 0, F = F + Math.imul(d, z) | 0, H = (H = H + Math.imul(d, V) | 0) + Math.imul(p, z) | 0, Z = Z + Math.imul(p, V) | 0, F = F + Math.imul(h, q) | 0, H = (H = H + Math.imul(h, W) | 0) + Math.imul(f, q) | 0, Z = Z + Math.imul(f, W) | 0;
                        E = (ee + (F + Math.imul(a, J) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, X) | 0) + Math.imul(u, J) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, X) | 0) + (H >>> 13) | 0) + (E >>> 26) | 0, E &= 67108863, F = Math.imul(M, D), H = (H = Math.imul(M, U)) + Math.imul(A, D) | 0, Z = Math.imul(A, U), F = F + Math.imul(b, j) | 0, H = (H = H + Math.imul(b, G) | 0) + Math.imul(w, j) | 0, Z = Z + Math.imul(w, G) | 0, F = F + Math.imul(m, z) | 0, H = (H = H + Math.imul(m, V) | 0) + Math.imul(g, z) | 0, Z = Z + Math.imul(g, V) | 0, F = F + Math.imul(d, q) | 0, H = (H = H + Math.imul(d, W) | 0) + Math.imul(p, q) | 0, Z = Z + Math.imul(p, W) | 0, F = F + Math.imul(h, J) | 0, H = (H = H + Math.imul(h, X) | 0) + Math.imul(f, J) | 0, Z = Z + Math.imul(f, X) | 0;
                        i = (ee + (F + Math.imul(a, Q) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, Y) | 0) + Math.imul(u, Q) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, Y) | 0) + (H >>> 13) | 0) + (i >>> 26) | 0, i &= 67108863, F = Math.imul(S, D), H = (H = Math.imul(S, U)) + Math.imul(k, D) | 0, Z = Math.imul(k, U), F = F + Math.imul(M, j) | 0, H = (H = H + Math.imul(M, G) | 0) + Math.imul(A, j) | 0, Z = Z + Math.imul(A, G) | 0, F = F + Math.imul(b, z) | 0, H = (H = H + Math.imul(b, V) | 0) + Math.imul(w, z) | 0, Z = Z + Math.imul(w, V) | 0, F = F + Math.imul(m, q) | 0, H = (H = H + Math.imul(m, W) | 0) + Math.imul(g, q) | 0, Z = Z + Math.imul(g, W) | 0, F = F + Math.imul(d, J) | 0, H = (H = H + Math.imul(d, X) | 0) + Math.imul(p, J) | 0, Z = Z + Math.imul(p, X) | 0, F = F + Math.imul(h, Q) | 0, H = (H = H + Math.imul(h, Y) | 0) + Math.imul(f, Q) | 0, Z = Z + Math.imul(f, Y) | 0;
                        n = (ee + (F + Math.imul(a, l) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, c) | 0) + Math.imul(u, l) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, c) | 0) + (H >>> 13) | 0) + (n >>> 26) | 0, n &= 67108863, F = Math.imul(x, D), H = (H = Math.imul(x, U)) + Math.imul(P, D) | 0, Z = Math.imul(P, U), F = F + Math.imul(S, j) | 0, H = (H = H + Math.imul(S, G) | 0) + Math.imul(k, j) | 0, Z = Z + Math.imul(k, G) | 0, F = F + Math.imul(M, z) | 0, H = (H = H + Math.imul(M, V) | 0) + Math.imul(A, z) | 0, Z = Z + Math.imul(A, V) | 0, F = F + Math.imul(b, q) | 0, H = (H = H + Math.imul(b, W) | 0) + Math.imul(w, q) | 0, Z = Z + Math.imul(w, W) | 0, F = F + Math.imul(m, J) | 0, H = (H = H + Math.imul(m, X) | 0) + Math.imul(g, J) | 0, Z = Z + Math.imul(g, X) | 0, F = F + Math.imul(d, Q) | 0, H = (H = H + Math.imul(d, Y) | 0) + Math.imul(p, Q) | 0, Z = Z + Math.imul(p, Y) | 0, F = F + Math.imul(h, l) | 0, H = (H = H + Math.imul(h, c) | 0) + Math.imul(f, l) | 0, Z = Z + Math.imul(f, c) | 0;
                        e = (ee + (F + Math.imul(a, v) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, _) | 0) + Math.imul(u, v) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, _) | 0) + (H >>> 13) | 0) + (e >>> 26) | 0, e &= 67108863, F = Math.imul(T, D), H = (H = Math.imul(T, U)) + Math.imul(R, D) | 0, Z = Math.imul(R, U), F = F + Math.imul(x, j) | 0, H = (H = H + Math.imul(x, G) | 0) + Math.imul(P, j) | 0, Z = Z + Math.imul(P, G) | 0, F = F + Math.imul(S, z) | 0, H = (H = H + Math.imul(S, V) | 0) + Math.imul(k, z) | 0, Z = Z + Math.imul(k, V) | 0, F = F + Math.imul(M, q) | 0, H = (H = H + Math.imul(M, W) | 0) + Math.imul(A, q) | 0, Z = Z + Math.imul(A, W) | 0, F = F + Math.imul(b, J) | 0, H = (H = H + Math.imul(b, X) | 0) + Math.imul(w, J) | 0, Z = Z + Math.imul(w, X) | 0, F = F + Math.imul(m, Q) | 0, H = (H = H + Math.imul(m, Y) | 0) + Math.imul(g, Q) | 0, Z = Z + Math.imul(g, Y) | 0, F = F + Math.imul(d, l) | 0, H = (H = H + Math.imul(d, c) | 0) + Math.imul(p, l) | 0, Z = Z + Math.imul(p, c) | 0, F = F + Math.imul(h, v) | 0, H = (H = H + Math.imul(h, _) | 0) + Math.imul(f, v) | 0, Z = Z + Math.imul(f, _) | 0;
                        t = (ee + (F + Math.imul(a, N) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, I) | 0) + Math.imul(u, N) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, I) | 0) + (H >>> 13) | 0) + (t >>> 26) | 0, t &= 67108863, F = Math.imul(C, D), H = (H = Math.imul(C, U)) + Math.imul(L, D) | 0, Z = Math.imul(L, U), F = F + Math.imul(T, j) | 0, H = (H = H + Math.imul(T, G) | 0) + Math.imul(R, j) | 0, Z = Z + Math.imul(R, G) | 0, F = F + Math.imul(x, z) | 0, H = (H = H + Math.imul(x, V) | 0) + Math.imul(P, z) | 0, Z = Z + Math.imul(P, V) | 0, F = F + Math.imul(S, q) | 0, H = (H = H + Math.imul(S, W) | 0) + Math.imul(k, q) | 0, Z = Z + Math.imul(k, W) | 0, F = F + Math.imul(M, J) | 0, H = (H = H + Math.imul(M, X) | 0) + Math.imul(A, J) | 0, Z = Z + Math.imul(A, X) | 0, F = F + Math.imul(b, Q) | 0, H = (H = H + Math.imul(b, Y) | 0) + Math.imul(w, Q) | 0, Z = Z + Math.imul(w, Y) | 0, F = F + Math.imul(m, l) | 0, H = (H = H + Math.imul(m, c) | 0) + Math.imul(g, l) | 0, Z = Z + Math.imul(g, c) | 0, F = F + Math.imul(d, v) | 0, H = (H = H + Math.imul(d, _) | 0) + Math.imul(p, v) | 0, Z = Z + Math.imul(p, _) | 0, F = F + Math.imul(h, N) | 0, H = (H = H + Math.imul(h, I) | 0) + Math.imul(f, N) | 0, Z = Z + Math.imul(f, I) | 0;
                        a = (ee + (F + Math.imul(a, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(a, B) | 0) + Math.imul(u, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(u, B) | 0) + (H >>> 13) | 0) + (a >>> 26) | 0, a &= 67108863, F = Math.imul(C, j), H = (H = Math.imul(C, G)) + Math.imul(L, j) | 0, Z = Math.imul(L, G), F = F + Math.imul(T, z) | 0, H = (H = H + Math.imul(T, V) | 0) + Math.imul(R, z) | 0, Z = Z + Math.imul(R, V) | 0, F = F + Math.imul(x, q) | 0, H = (H = H + Math.imul(x, W) | 0) + Math.imul(P, q) | 0, Z = Z + Math.imul(P, W) | 0, F = F + Math.imul(S, J) | 0, H = (H = H + Math.imul(S, X) | 0) + Math.imul(k, J) | 0, Z = Z + Math.imul(k, X) | 0, F = F + Math.imul(M, Q) | 0, H = (H = H + Math.imul(M, Y) | 0) + Math.imul(A, Q) | 0, Z = Z + Math.imul(A, Y) | 0, F = F + Math.imul(b, l) | 0, H = (H = H + Math.imul(b, c) | 0) + Math.imul(w, l) | 0, Z = Z + Math.imul(w, c) | 0, F = F + Math.imul(m, v) | 0, H = (H = H + Math.imul(m, _) | 0) + Math.imul(g, v) | 0, Z = Z + Math.imul(g, _) | 0, F = F + Math.imul(d, N) | 0, H = (H = H + Math.imul(d, I) | 0) + Math.imul(p, N) | 0, Z = Z + Math.imul(p, I) | 0;
                        h = (ee + (F + Math.imul(h, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(h, B) | 0) + Math.imul(f, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(f, B) | 0) + (H >>> 13) | 0) + (h >>> 26) | 0, h &= 67108863, F = Math.imul(C, z), H = (H = Math.imul(C, V)) + Math.imul(L, z) | 0, Z = Math.imul(L, V), F = F + Math.imul(T, q) | 0, H = (H = H + Math.imul(T, W) | 0) + Math.imul(R, q) | 0, Z = Z + Math.imul(R, W) | 0, F = F + Math.imul(x, J) | 0, H = (H = H + Math.imul(x, X) | 0) + Math.imul(P, J) | 0, Z = Z + Math.imul(P, X) | 0, F = F + Math.imul(S, Q) | 0, H = (H = H + Math.imul(S, Y) | 0) + Math.imul(k, Q) | 0, Z = Z + Math.imul(k, Y) | 0, F = F + Math.imul(M, l) | 0, H = (H = H + Math.imul(M, c) | 0) + Math.imul(A, l) | 0, Z = Z + Math.imul(A, c) | 0, F = F + Math.imul(b, v) | 0, H = (H = H + Math.imul(b, _) | 0) + Math.imul(w, v) | 0, Z = Z + Math.imul(w, _) | 0, F = F + Math.imul(m, N) | 0, H = (H = H + Math.imul(m, I) | 0) + Math.imul(g, N) | 0, Z = Z + Math.imul(g, I) | 0;
                        d = (ee + (F + Math.imul(d, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(d, B) | 0) + Math.imul(p, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(p, B) | 0) + (H >>> 13) | 0) + (d >>> 26) | 0, d &= 67108863, F = Math.imul(C, q), H = (H = Math.imul(C, W)) + Math.imul(L, q) | 0, Z = Math.imul(L, W), F = F + Math.imul(T, J) | 0, H = (H = H + Math.imul(T, X) | 0) + Math.imul(R, J) | 0, Z = Z + Math.imul(R, X) | 0, F = F + Math.imul(x, Q) | 0, H = (H = H + Math.imul(x, Y) | 0) + Math.imul(P, Q) | 0, Z = Z + Math.imul(P, Y) | 0, F = F + Math.imul(S, l) | 0, H = (H = H + Math.imul(S, c) | 0) + Math.imul(k, l) | 0, Z = Z + Math.imul(k, c) | 0, F = F + Math.imul(M, v) | 0, H = (H = H + Math.imul(M, _) | 0) + Math.imul(A, v) | 0, Z = Z + Math.imul(A, _) | 0, F = F + Math.imul(b, N) | 0, H = (H = H + Math.imul(b, I) | 0) + Math.imul(w, N) | 0, Z = Z + Math.imul(w, I) | 0;
                        m = (ee + (F + Math.imul(m, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(m, B) | 0) + Math.imul(g, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(g, B) | 0) + (H >>> 13) | 0) + (m >>> 26) | 0, m &= 67108863, F = Math.imul(C, J), H = (H = Math.imul(C, X)) + Math.imul(L, J) | 0, Z = Math.imul(L, X), F = F + Math.imul(T, Q) | 0, H = (H = H + Math.imul(T, Y) | 0) + Math.imul(R, Q) | 0, Z = Z + Math.imul(R, Y) | 0, F = F + Math.imul(x, l) | 0, H = (H = H + Math.imul(x, c) | 0) + Math.imul(P, l) | 0, Z = Z + Math.imul(P, c) | 0, F = F + Math.imul(S, v) | 0, H = (H = H + Math.imul(S, _) | 0) + Math.imul(k, v) | 0, Z = Z + Math.imul(k, _) | 0, F = F + Math.imul(M, N) | 0, H = (H = H + Math.imul(M, I) | 0) + Math.imul(A, N) | 0, Z = Z + Math.imul(A, I) | 0;
                        b = (ee + (F + Math.imul(b, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(b, B) | 0) + Math.imul(w, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(w, B) | 0) + (H >>> 13) | 0) + (b >>> 26) | 0, b &= 67108863, F = Math.imul(C, Q), H = (H = Math.imul(C, Y)) + Math.imul(L, Q) | 0, Z = Math.imul(L, Y), F = F + Math.imul(T, l) | 0, H = (H = H + Math.imul(T, c) | 0) + Math.imul(R, l) | 0, Z = Z + Math.imul(R, c) | 0, F = F + Math.imul(x, v) | 0, H = (H = H + Math.imul(x, _) | 0) + Math.imul(P, v) | 0, Z = Z + Math.imul(P, _) | 0, F = F + Math.imul(S, N) | 0, H = (H = H + Math.imul(S, I) | 0) + Math.imul(k, N) | 0, Z = Z + Math.imul(k, I) | 0;
                        M = (ee + (F + Math.imul(M, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(M, B) | 0) + Math.imul(A, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(A, B) | 0) + (H >>> 13) | 0) + (M >>> 26) | 0, M &= 67108863, F = Math.imul(C, l), H = (H = Math.imul(C, c)) + Math.imul(L, l) | 0, Z = Math.imul(L, c), F = F + Math.imul(T, v) | 0, H = (H = H + Math.imul(T, _) | 0) + Math.imul(R, v) | 0, Z = Z + Math.imul(R, _) | 0, F = F + Math.imul(x, N) | 0, H = (H = H + Math.imul(x, I) | 0) + Math.imul(P, N) | 0, Z = Z + Math.imul(P, I) | 0;
                        S = (ee + (F + Math.imul(S, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(S, B) | 0) + Math.imul(k, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(k, B) | 0) + (H >>> 13) | 0) + (S >>> 26) | 0, S &= 67108863, F = Math.imul(C, v), H = (H = Math.imul(C, _)) + Math.imul(L, v) | 0, Z = Math.imul(L, _), F = F + Math.imul(T, N) | 0, H = (H = H + Math.imul(T, I) | 0) + Math.imul(R, N) | 0, Z = Z + Math.imul(R, I) | 0;
                        x = (ee + (F + Math.imul(x, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(x, B) | 0) + Math.imul(P, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(P, B) | 0) + (H >>> 13) | 0) + (x >>> 26) | 0, x &= 67108863, F = Math.imul(C, N), H = (H = Math.imul(C, I)) + Math.imul(L, N) | 0, Z = Math.imul(L, I);
                        T = (ee + (F + Math.imul(T, O) | 0) | 0) + ((8191 & (H = (H = H + Math.imul(T, B) | 0) + Math.imul(R, O) | 0)) << 13) | 0;
                        ee = ((Z = Z + Math.imul(R, B) | 0) + (H >>> 13) | 0) + (T >>> 26) | 0, T &= 67108863;
                        O = (ee + Math.imul(C, O) | 0) + ((8191 & (H = (H = Math.imul(C, B)) + Math.imul(L, O) | 0)) << 13) | 0;
                        return ee = ((Z = Math.imul(L, B)) + (H >>> 13) | 0) + (O >>> 26) | 0, O &= 67108863, o[0] = K, o[1] = $, o[2] = s, o[3] = y, o[4] = E, o[5] = i, o[6] = n, o[7] = e, o[8] = t, o[9] = a, o[10] = h, o[11] = d, o[12] = m, o[13] = b, o[14] = M, o[15] = S, o[16] = x, o[17] = T, o[18] = O, 0 != ee && (o[19] = ee, r.length++), r;
                    };
                    function u2(e, t, r) {
                        return (new l2).mulp(e, t, r);
                    }
                    function l2(e, t) {
                        this.x = e, this.y = t;
                    }
                    Math.imul || (s4 = o5), m1.prototype.mulTo = function(e34, t17) {
                        var r10 = this.length + e34.length, t17 = (10 === this.length && 10 === e34.length ? s4 : r10 < 63 ? o5 : r10 < 1024 ? function(e, t, r) {
                            r.negative = t.negative ^ e.negative, r.length = e.length + t.length;
                            for(var n = 0, i = 0, o = 0; o < r.length - 1; o++){
                                for(var s = i, i = 0, a = 67108863 & n, u = Math.min(o, t.length - 1), l = Math.max(0, o - e.length + 1); l <= u; l++){
                                    var h, f = (0 | e.words[o - l]) * (0 | t.words[l]), a = 67108863 & (h = (h = 67108863 & f) + a | 0);
                                    i += (s = (s = s + (f / 67108864 | 0) | 0) + (h >>> 26) | 0) >>> 26, s &= 67108863;
                                }
                                r.words[o] = a, n = s, s = i;
                            }
                            return 0 !== n ? r.words[o] = n : r.length--, r.strip();
                        } : u2)(this, e34, t17);
                        return t17;
                    }, l2.prototype.makeRBT = function(e) {
                        for(var t = new Array(e), r = m1.prototype._countBits(e) - 1, n = 0; n < e; n++)t[n] = this.revBin(n, r, e);
                        return t;
                    }, l2.prototype.revBin = function(e, t, r) {
                        if (0 === e || e === r - 1) return e;
                        for(var n = 0, i = 0; i < t; i++)n |= (1 & e) << t - i - 1, e >>= 1;
                        return n;
                    }, l2.prototype.permute = function(e, t, r, n, i, o) {
                        for(var s = 0; s < o; s++)n[s] = t[e[s]], i[s] = r[e[s]];
                    }, l2.prototype.transform = function(e, t, r, n, i, o) {
                        this.permute(o, e, t, r, n, i);
                        for(var s = 1; s < i; s <<= 1)for(var a = s << 1, u = Math.cos(2 * Math.PI / a), l = Math.sin(2 * Math.PI / a), h = 0; h < i; h += a)for(var f = u, c = l, d = 0; d < s; d++){
                            var p = r[h + d], y = n[h + d], m = r[h + d + s], g = f * m - c * (v = n[h + d + s]), v = f * v + c * m;
                            r[h + d] = p + (m = g), n[h + d] = y + v, r[h + d + s] = p - m, n[h + d + s] = y - v, d !== a && (g = u * f - l * c, c = u * c + l * f, f = g);
                        }
                    }, l2.prototype.guessLen13b = function(e, t) {
                        for(var e = 1 & (n = 1 | Math.max(t, e)), r = 0, n = n / 2 | 0; n; n >>>= 1)r++;
                        return 1 << r + 1 + e;
                    }, l2.prototype.conjugate = function(e, t, r) {
                        if (!(r <= 1)) for(var n = 0; n < r / 2; n++){
                            var i = e[n];
                            e[n] = e[r - n - 1], e[r - n - 1] = i, i = t[n], t[n] = -t[r - n - 1], t[r - n - 1] = -i;
                        }
                    }, l2.prototype.normalize13b = function(e, t) {
                        for(var r = 0, n = 0; n < t / 2; n++){
                            var i = 8192 * Math.round(e[2 * n + 1] / t) + Math.round(e[2 * n] / t) + r;
                            e[n] = 67108863 & i, r = i < 67108864 ? 0 : i / 67108864 | 0;
                        }
                        return e;
                    }, l2.prototype.convert13b = function(e, t, r, n) {
                        for(var i = 0, o = 0; o < t; o++)i += 0 | e[o], r[2 * o] = 8191 & i, r[2 * o + 1] = 8191 & (i >>>= 13), i >>>= 13;
                        for(o = 2 * t; o < n; ++o)r[o] = 0;
                        y1(0 === i), y1(0 == (-8192 & i));
                    }, l2.prototype.stub = function(e) {
                        for(var t = new Array(e), r = 0; r < e; r++)t[r] = 0;
                        return t;
                    }, l2.prototype.mulp = function(e, t, r) {
                        var n = 2 * this.guessLen13b(e.length, t.length), i = this.makeRBT(n), o = this.stub(n), s = new Array(n), a = new Array(n), u = new Array(n), l = new Array(n), h = new Array(n), f = new Array(n), c = r.words;
                        c.length = n, this.convert13b(e.words, e.length, s, n), this.convert13b(t.words, t.length, l, n), this.transform(s, o, a, u, n, i), this.transform(l, o, h, f, n, i);
                        for(var d = 0; d < n; d++){
                            var p = a[d] * h[d] - u[d] * f[d];
                            u[d] = a[d] * f[d] + u[d] * h[d], a[d] = p;
                        }
                        return this.conjugate(a, u, n), this.transform(a, u, c, o, n, i), this.conjugate(c, o, n), this.normalize13b(c, n), r.negative = e.negative ^ t.negative, r.length = e.length + t.length, r.strip();
                    }, m1.prototype.mul = function(e) {
                        var t = new m1(null);
                        return t.words = new Array(this.length + e.length), this.mulTo(e, t);
                    }, m1.prototype.mulf = function(e) {
                        var t = new m1(null);
                        return t.words = new Array(this.length + e.length), u2(this, e, t);
                    }, m1.prototype.imul = function(e) {
                        return this.clone().mulTo(e, this);
                    }, m1.prototype.imuln = function(e) {
                        y1("number" == typeof e), y1(e < 67108864);
                        for(var t = 0, r = 0; r < this.length; r++){
                            var n = (0 | this.words[r]) * e, i = (67108863 & n) + (67108863 & t);
                            t >>= 26, t += n / 67108864 | 0, t += i >>> 26, this.words[r] = 67108863 & i;
                        }
                        return 0 !== t && (this.words[r] = t, this.length++), this;
                    }, m1.prototype.muln = function(e) {
                        return this.clone().imuln(e);
                    }, m1.prototype.sqr = function() {
                        return this.mul(this);
                    }, m1.prototype.isqr = function() {
                        return this.imul(this.clone());
                    }, m1.prototype.pow = function(e35) {
                        var t18 = function(e) {
                            for(var t = new Array(e.bitLength()), r = 0; r < t.length; r++){
                                var n = r % 26;
                                t[r] = (e.words[r / 26 | 0] & 1 << n) >>> n;
                            }
                            return t;
                        }(e35);
                        if (0 === t18.length) return new m1(1);
                        for(var r11 = this, n5 = 0; n5 < t18.length && 0 === t18[n5]; n5++, r11 = r11.sqr());
                        if (++n5 < t18.length) for(var i = r11.sqr(); n5 < t18.length; n5++, i = i.sqr())0 !== t18[n5] && (r11 = r11.mul(i));
                        return r11;
                    }, m1.prototype.iushln = function(e) {
                        y1("number" == typeof e && 0 <= e);
                        var t = e % 26, r = (e - t) / 26, n = 67108863 >>> 26 - t << 26 - t;
                        if (0 != t) {
                            for(var i = 0, o = 0; o < this.length; o++){
                                var s = this.words[o] & n, a = (0 | this.words[o]) - s << t;
                                this.words[o] = a | i, i = s >>> 26 - t;
                            }
                            i && (this.words[o] = i, this.length++);
                        }
                        if (0 != r) {
                            for(o = this.length - 1; 0 <= o; o--)this.words[o + r] = this.words[o];
                            for(o = 0; o < r; o++)this.words[o] = 0;
                            this.length += r;
                        }
                        return this.strip();
                    }, m1.prototype.ishln = function(e) {
                        return y1(0 === this.negative), this.iushln(e);
                    }, m1.prototype.iushrn = function(e, t, r) {
                        y1("number" == typeof e && 0 <= e);
                        var n = t ? (t - t % 26) / 26 : 0, i = e % 26, o = Math.min((e - i) / 26, this.length), s = 67108863 ^ 67108863 >>> i << i, a = r;
                        if (n -= o, n = Math.max(0, n), a) {
                            for(var u = 0; u < o; u++)a.words[u] = this.words[u];
                            a.length = o;
                        }
                        if (0 !== o) {
                            if (this.length > o) for(this.length -= o, u = 0; u < this.length; u++)this.words[u] = this.words[u + o];
                            else this.words[0] = 0, this.length = 1;
                        }
                        for(var l = 0, u = this.length - 1; 0 <= u && (0 !== l || n <= u); u--){
                            var h = 0 | this.words[u];
                            this.words[u] = l << 26 - i | h >>> i, l = h & s;
                        }
                        return a && 0 !== l && (a.words[a.length++] = l), 0 === this.length && (this.words[0] = 0, this.length = 1), this.strip();
                    }, m1.prototype.ishrn = function(e, t, r) {
                        return y1(0 === this.negative), this.iushrn(e, t, r);
                    }, m1.prototype.shln = function(e) {
                        return this.clone().ishln(e);
                    }, m1.prototype.ushln = function(e) {
                        return this.clone().iushln(e);
                    }, m1.prototype.shrn = function(e) {
                        return this.clone().ishrn(e);
                    }, m1.prototype.ushrn = function(e) {
                        return this.clone().iushrn(e);
                    }, m1.prototype.testn = function(e) {
                        y1("number" == typeof e && 0 <= e);
                        var t = e % 26, e = (e - t) / 26;
                        return !(this.length <= e) && !!(this.words[e] & 1 << t);
                    }, m1.prototype.imaskn = function(e) {
                        y1("number" == typeof e && 0 <= e);
                        var t = e % 26, e = (e - t) / 26;
                        return y1(0 === this.negative, "imaskn works only with positive numbers"), this.length <= e ? this : (0 != t && e++, this.length = Math.min(e, this.length), 0 != t && (this.words[this.length - 1] &= 67108863 ^ 67108863 >>> t << t), this.strip());
                    }, m1.prototype.maskn = function(e) {
                        return this.clone().imaskn(e);
                    }, m1.prototype.iaddn = function(e) {
                        return y1("number" == typeof e), y1(e < 67108864), e < 0 ? this.isubn(-e) : 0 !== this.negative ? (1 === this.length && (0 | this.words[0]) < e ? (this.words[0] = e - (0 | this.words[0]), this.negative = 0) : (this.negative = 0, this.isubn(e), this.negative = 1), this) : this._iaddn(e);
                    }, m1.prototype._iaddn = function(e) {
                        this.words[0] += e;
                        for(var t = 0; t < this.length && 67108864 <= this.words[t]; t++)this.words[t] -= 67108864, t === this.length - 1 ? this.words[t + 1] = 1 : this.words[t + 1]++;
                        return this.length = Math.max(this.length, t + 1), this;
                    }, m1.prototype.isubn = function(e) {
                        if (y1("number" == typeof e), y1(e < 67108864), e < 0) return this.iaddn(-e);
                        if (0 !== this.negative) return this.negative = 0, this.iaddn(e), this.negative = 1, this;
                        if (this.words[0] -= e, 1 === this.length && this.words[0] < 0) this.words[0] = -this.words[0], this.negative = 1;
                        else for(var t = 0; t < this.length && this.words[t] < 0; t++)this.words[t] += 67108864, --this.words[t + 1];
                        return this.strip();
                    }, m1.prototype.addn = function(e) {
                        return this.clone().iaddn(e);
                    }, m1.prototype.subn = function(e) {
                        return this.clone().isubn(e);
                    }, m1.prototype.iabs = function() {
                        return this.negative = 0, this;
                    }, m1.prototype.abs = function() {
                        return this.clone().iabs();
                    }, m1.prototype._ishlnsubmul = function(e, t, r) {
                        var n = e.length + r;
                        this._expand(n);
                        for(var i = 0, o = 0; o < e.length; o++){
                            var s = (0 | this.words[o + r]) + i, a = (0 | e.words[o]) * t, i = ((s -= 67108863 & a) >> 26) - (a / 67108864 | 0);
                            this.words[o + r] = 67108863 & s;
                        }
                        for(; o < this.length - r; o++)i = (s = (0 | this.words[o + r]) + i) >> 26, this.words[o + r] = 67108863 & s;
                        if (0 === i) return this.strip();
                        for(y1(-1 === i), o = i = 0; o < this.length; o++)i = (s = -(0 | this.words[o]) + i) >> 26, this.words[o] = 67108863 & s;
                        return this.negative = 1, this.strip();
                    }, m1.prototype._wordDiv = function(e, t) {
                        var r = this.length - e.length, n = this.clone(), i = e, o = 0 | i.words[i.length - 1];
                        0 != (r = 26 - this._countBits(o)) && (i = i.ushln(r), n.iushln(r), o = 0 | i.words[i.length - 1]);
                        var s, a = n.length - i.length;
                        if ("mod" !== t) {
                            (s = new m1(null)).length = 1 + a, s.words = new Array(s.length);
                            for(var u = 0; u < s.length; u++)s.words[u] = 0;
                        }
                        e = n.clone()._ishlnsubmul(i, 1, a);
                        0 === e.negative && (n = e, s && (s.words[a] = 1));
                        for(var l = a - 1; 0 <= l; l--){
                            var h = 67108864 * (0 | n.words[i.length + l]) + (0 | n.words[i.length + l - 1]), h = Math.min(h / o | 0, 67108863);
                            for(n._ishlnsubmul(i, h, l); 0 !== n.negative;)h--, n.negative = 0, n._ishlnsubmul(i, 1, l), n.isZero() || (n.negative ^= 1);
                            s && (s.words[l] = h);
                        }
                        return s && s.strip(), n.strip(), "div" !== t && 0 != r && n.iushrn(r), {
                            div: s || null,
                            mod: n
                        };
                    }, m1.prototype.divmod = function(e, t, r) {
                        var n, i, o;
                        return y1(!e.isZero()), this.isZero() ? {
                            div: new m1(0),
                            mod: new m1(0)
                        } : 0 !== this.negative && 0 === e.negative ? (o = this.neg().divmod(e, t), "mod" !== t && (n = o.div.neg()), "div" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.iadd(e)), {
                            div: n,
                            mod: i
                        }) : 0 === this.negative && 0 !== e.negative ? (o = this.divmod(e.neg(), t), {
                            div: n = "mod" !== t ? o.div.neg() : n,
                            mod: o.mod
                        }) : 0 != (this.negative & e.negative) ? (o = this.neg().divmod(e.neg(), t), "div" !== t && (i = o.mod.neg(), r && 0 !== i.negative && i.isub(e)), {
                            div: o.div,
                            mod: i
                        }) : e.length > this.length || this.cmp(e) < 0 ? {
                            div: new m1(0),
                            mod: this
                        } : 1 === e.length ? "div" === t ? {
                            div: this.divn(e.words[0]),
                            mod: null
                        } : "mod" === t ? {
                            div: null,
                            mod: new m1(this.modn(e.words[0]))
                        } : {
                            div: this.divn(e.words[0]),
                            mod: new m1(this.modn(e.words[0]))
                        } : this._wordDiv(e, t);
                    }, m1.prototype.div = function(e) {
                        return this.divmod(e, "div", !1).div;
                    }, m1.prototype.mod = function(e) {
                        return this.divmod(e, "mod", !1).mod;
                    }, m1.prototype.umod = function(e) {
                        return this.divmod(e, "mod", !0).mod;
                    }, m1.prototype.divRound = function(e) {
                        var t = this.divmod(e);
                        if (t.mod.isZero()) return t.div;
                        var r = 0 !== t.div.negative ? t.mod.isub(e) : t.mod, n = e.ushrn(1), e = e.andln(1), n = r.cmp(n);
                        return n < 0 || 1 === e && 0 === n ? t.div : 0 !== t.div.negative ? t.div.isubn(1) : t.div.iaddn(1);
                    }, m1.prototype.modn = function(e) {
                        y1(e <= 67108863);
                        for(var t = 67108864 % e, r = 0, n = this.length - 1; 0 <= n; n--)r = (t * r + (0 | this.words[n])) % e;
                        return r;
                    }, m1.prototype.idivn = function(e) {
                        y1(e <= 67108863);
                        for(var t = 0, r = this.length - 1; 0 <= r; r--){
                            var n = (0 | this.words[r]) + 67108864 * t;
                            this.words[r] = n / e | 0, t = n % e;
                        }
                        return this.strip();
                    }, m1.prototype.divn = function(e) {
                        return this.clone().idivn(e);
                    }, m1.prototype.egcd = function(e) {
                        y1(0 === e.negative), y1(!e.isZero());
                        for(var t = this, r = e.clone(), t = 0 !== t.negative ? t.umod(e) : t.clone(), n = new m1(1), i = new m1(0), o = new m1(0), s = new m1(1), a = 0; t.isEven() && r.isEven();)t.iushrn(1), r.iushrn(1), ++a;
                        for(var u = r.clone(), l = t.clone(); !t.isZero();){
                            for(var h = 0, f = 1; 0 == (t.words[0] & f) && h < 26; ++h, f <<= 1);
                            if (0 < h) for(t.iushrn(h); 0 < h--;)(n.isOdd() || i.isOdd()) && (n.iadd(u), i.isub(l)), n.iushrn(1), i.iushrn(1);
                            for(var c = 0, d = 1; 0 == (r.words[0] & d) && c < 26; ++c, d <<= 1);
                            if (0 < c) for(r.iushrn(c); 0 < c--;)(o.isOdd() || s.isOdd()) && (o.iadd(u), s.isub(l)), o.iushrn(1), s.iushrn(1);
                            0 <= t.cmp(r) ? (t.isub(r), n.isub(o), i.isub(s)) : (r.isub(t), o.isub(n), s.isub(i));
                        }
                        return {
                            a: o,
                            b: s,
                            gcd: r.iushln(a)
                        };
                    }, m1.prototype._invmp = function(e) {
                        y1(0 === e.negative), y1(!e.isZero());
                        for(var t, r = this, n = e.clone(), r = 0 !== r.negative ? r.umod(e) : r.clone(), i = new m1(1), o = new m1(0), s = n.clone(); 0 < r.cmpn(1) && 0 < n.cmpn(1);){
                            for(var a = 0, u = 1; 0 == (r.words[0] & u) && a < 26; ++a, u <<= 1);
                            if (0 < a) for(r.iushrn(a); 0 < a--;)i.isOdd() && i.iadd(s), i.iushrn(1);
                            for(var l = 0, h = 1; 0 == (n.words[0] & h) && l < 26; ++l, h <<= 1);
                            if (0 < l) for(n.iushrn(l); 0 < l--;)o.isOdd() && o.iadd(s), o.iushrn(1);
                            0 <= r.cmp(n) ? (r.isub(n), i.isub(o)) : (n.isub(r), o.isub(i));
                        }
                        return (t = 0 === r.cmpn(1) ? i : o).cmpn(0) < 0 && t.iadd(e), t;
                    }, m1.prototype.gcd = function(e) {
                        if (this.isZero()) return e.abs();
                        if (e.isZero()) return this.abs();
                        var t = this.clone(), r = e.clone();
                        t.negative = 0;
                        for(var n = r.negative = 0; t.isEven() && r.isEven(); n++)t.iushrn(1), r.iushrn(1);
                        for(;;){
                            for(; t.isEven();)t.iushrn(1);
                            for(; r.isEven();)r.iushrn(1);
                            var i = t.cmp(r);
                            if (i < 0) var o = t, t = r, r = o;
                            else if (0 === i || 0 === r.cmpn(1)) break;
                            t.isub(r);
                        }
                        return r.iushln(n);
                    }, m1.prototype.invm = function(e) {
                        return this.egcd(e).a.umod(e);
                    }, m1.prototype.isEven = function() {
                        return 0 == (1 & this.words[0]);
                    }, m1.prototype.isOdd = function() {
                        return 1 == (1 & this.words[0]);
                    }, m1.prototype.andln = function(e) {
                        return this.words[0] & e;
                    }, m1.prototype.bincn = function(e) {
                        y1("number" == typeof e);
                        var t = e % 26, e = (e - t) / 26, t = 1 << t;
                        if (this.length <= e) return this._expand(1 + e), this.words[e] |= t, this;
                        for(var r = t, n = e; 0 !== r && n < this.length; n++){
                            var i = 0 | this.words[n], r = (i += r) >>> 26;
                            i &= 67108863, this.words[n] = i;
                        }
                        return 0 !== r && (this.words[n] = r, this.length++), this;
                    }, m1.prototype.isZero = function() {
                        return 1 === this.length && 0 === this.words[0];
                    }, m1.prototype.cmpn = function(e) {
                        var t = e < 0;
                        return 0 === this.negative || t ? 0 === this.negative && t ? 1 : (this.strip(), e = 1 < this.length ? 1 : (y1((e = t ? -e : e) <= 67108863, "Number is too big"), (t = 0 | this.words[0]) === e ? 0 : t < e ? -1 : 1), 0 !== this.negative ? 0 | -e : e) : -1;
                    }, m1.prototype.cmp = function(e) {
                        if (0 !== this.negative && 0 === e.negative) return -1;
                        if (0 === this.negative && 0 !== e.negative) return 1;
                        e = this.ucmp(e);
                        return 0 !== this.negative ? 0 | -e : e;
                    }, m1.prototype.ucmp = function(e) {
                        if (this.length > e.length) return 1;
                        if (this.length < e.length) return -1;
                        for(var t = 0, r = this.length - 1; 0 <= r; r--){
                            var n = 0 | this.words[r], i = 0 | e.words[r];
                            if (n != i) {
                                n < i ? t = -1 : i < n && (t = 1);
                                break;
                            }
                        }
                        return t;
                    }, m1.prototype.gtn = function(e) {
                        return 1 === this.cmpn(e);
                    }, m1.prototype.gt = function(e) {
                        return 1 === this.cmp(e);
                    }, m1.prototype.gten = function(e) {
                        return 0 <= this.cmpn(e);
                    }, m1.prototype.gte = function(e) {
                        return 0 <= this.cmp(e);
                    }, m1.prototype.ltn = function(e) {
                        return -1 === this.cmpn(e);
                    }, m1.prototype.lt = function(e) {
                        return -1 === this.cmp(e);
                    }, m1.prototype.lten = function(e) {
                        return this.cmpn(e) <= 0;
                    }, m1.prototype.lte = function(e) {
                        return this.cmp(e) <= 0;
                    }, m1.prototype.eqn = function(e) {
                        return 0 === this.cmpn(e);
                    }, m1.prototype.eq = function(e) {
                        return 0 === this.cmp(e);
                    }, m1.red = function(e) {
                        return new M1(e);
                    }, m1.prototype.toRed = function(e) {
                        return y1(!this.red, "Already a number in reduction context"), y1(0 === this.negative, "red works only with positives"), e.convertTo(this)._forceRed(e);
                    }, m1.prototype.fromRed = function() {
                        return y1(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
                    }, m1.prototype._forceRed = function(e) {
                        return this.red = e, this;
                    }, m1.prototype.forceRed = function(e) {
                        return y1(!this.red, "Already a number in reduction context"), this._forceRed(e);
                    }, m1.prototype.redAdd = function(e) {
                        return y1(this.red, "redAdd works only with red numbers"), this.red.add(this, e);
                    }, m1.prototype.redIAdd = function(e) {
                        return y1(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, e);
                    }, m1.prototype.redSub = function(e) {
                        return y1(this.red, "redSub works only with red numbers"), this.red.sub(this, e);
                    }, m1.prototype.redISub = function(e) {
                        return y1(this.red, "redISub works only with red numbers"), this.red.isub(this, e);
                    }, m1.prototype.redShl = function(e) {
                        return y1(this.red, "redShl works only with red numbers"), this.red.shl(this, e);
                    }, m1.prototype.redMul = function(e) {
                        return y1(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.mul(this, e);
                    }, m1.prototype.redIMul = function(e) {
                        return y1(this.red, "redMul works only with red numbers"), this.red._verify2(this, e), this.red.imul(this, e);
                    }, m1.prototype.redSqr = function() {
                        return y1(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
                    }, m1.prototype.redISqr = function() {
                        return y1(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
                    }, m1.prototype.redSqrt = function() {
                        return y1(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
                    }, m1.prototype.redInvm = function() {
                        return y1(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
                    }, m1.prototype.redNeg = function() {
                        return y1(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
                    }, m1.prototype.redPow = function(e) {
                        return y1(this.red && !e.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, e);
                    };
                    var h2 = {
                        k256: null,
                        p224: null,
                        p192: null,
                        p25519: null
                    };
                    function g1(e, t) {
                        this.name = e, this.p = new m1(t, 16), this.n = this.p.bitLength(), this.k = new m1(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
                    }
                    function v1() {
                        g1.call(this, "k256", "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f");
                    }
                    function b1() {
                        g1.call(this, "p224", "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001");
                    }
                    function w1() {
                        g1.call(this, "p192", "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff");
                    }
                    function _1() {
                        g1.call(this, "25519", "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed");
                    }
                    function M1(e) {
                        var t;
                        "string" == typeof e ? (t = m1._prime(e), this.m = t.p, this.prime = t) : (y1(e.gtn(1), "modulus must be greater than 1"), this.m = e, this.prime = null);
                    }
                    function A1(e) {
                        M1.call(this, e), this.shift = this.m.bitLength(), this.shift % 26 != 0 && (this.shift += 26 - this.shift % 26), this.r = new m1(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
                    }
                    g1.prototype._tmp = function() {
                        var e = new m1(null);
                        return e.words = new Array(Math.ceil(this.n / 13)), e;
                    }, g1.prototype.ireduce = function(e) {
                        for(var t, r = e; this.split(r, this.tmp), (t = (r = (r = this.imulK(r)).iadd(this.tmp)).bitLength()) > this.n;);
                        e = t < this.n ? -1 : r.ucmp(this.p);
                        return 0 === e ? (r.words[0] = 0, r.length = 1) : 0 < e ? r.isub(this.p) : void 0 !== r.strip ? r.strip() : r._strip(), r;
                    }, g1.prototype.split = function(e, t) {
                        e.iushrn(this.n, 0, t);
                    }, g1.prototype.imulK = function(e) {
                        return e.imul(this.k);
                    }, r9(v1, g1), v1.prototype.split = function(e, t) {
                        for(var r = Math.min(e.length, 9), n = 0; n < r; n++)t.words[n] = e.words[n];
                        if (t.length = r, e.length <= 9) return e.words[0] = 0, void (e.length = 1);
                        var i = e.words[9];
                        for(t.words[t.length++] = 4194303 & i, n = 10; n < e.length; n++){
                            var o = 0 | e.words[n];
                            e.words[n - 10] = (4194303 & o) << 4 | i >>> 22, i = o;
                        }
                        0 === (e.words[n - 10] = i >>>= 22) && 10 < e.length ? e.length -= 10 : e.length -= 9;
                    }, v1.prototype.imulK = function(e) {
                        e.words[e.length] = 0, e.words[e.length + 1] = 0, e.length += 2;
                        for(var t = 0, r = 0; r < e.length; r++){
                            var n = 0 | e.words[r];
                            t += 977 * n, e.words[r] = 67108863 & t, t = 64 * n + (t / 67108864 | 0);
                        }
                        return 0 === e.words[e.length - 1] && (e.length--, 0 === e.words[e.length - 1] && e.length--), e;
                    }, r9(b1, g1), r9(w1, g1), r9(_1, g1), _1.prototype.imulK = function(e) {
                        for(var t = 0, r = 0; r < e.length; r++){
                            var n = 19 * (0 | e.words[r]) + t, i = 67108863 & n;
                            n >>>= 26, e.words[r] = i, t = n;
                        }
                        return 0 !== t && (e.words[e.length++] = t), e;
                    }, m1._prime = function(e) {
                        if (h2[e]) return h2[e];
                        var t;
                        if ("k256" === e) t = new v1;
                        else if ("p224" === e) t = new b1;
                        else if ("p192" === e) t = new w1;
                        else {
                            if ("p25519" !== e) throw new Error("Unknown prime " + e);
                            t = new _1;
                        }
                        return h2[e] = t;
                    }, M1.prototype._verify1 = function(e) {
                        y1(0 === e.negative, "red works only with positives"), y1(e.red, "red works only with red numbers");
                    }, M1.prototype._verify2 = function(e, t) {
                        y1(0 == (e.negative | t.negative), "red works only with positives"), y1(e.red && e.red === t.red, "red works only with red numbers");
                    }, M1.prototype.imod = function(e) {
                        return (this.prime ? this.prime.ireduce(e) : e.umod(this.m))._forceRed(this);
                    }, M1.prototype.neg = function(e) {
                        return e.isZero() ? e.clone() : this.m.sub(e)._forceRed(this);
                    }, M1.prototype.add = function(e, t) {
                        this._verify2(e, t);
                        t = e.add(t);
                        return 0 <= t.cmp(this.m) && t.isub(this.m), t._forceRed(this);
                    }, M1.prototype.iadd = function(e, t) {
                        this._verify2(e, t);
                        t = e.iadd(t);
                        return 0 <= t.cmp(this.m) && t.isub(this.m), t;
                    }, M1.prototype.sub = function(e, t) {
                        this._verify2(e, t);
                        t = e.sub(t);
                        return t.cmpn(0) < 0 && t.iadd(this.m), t._forceRed(this);
                    }, M1.prototype.isub = function(e, t) {
                        this._verify2(e, t);
                        t = e.isub(t);
                        return t.cmpn(0) < 0 && t.iadd(this.m), t;
                    }, M1.prototype.shl = function(e, t) {
                        return this._verify1(e), this.imod(e.ushln(t));
                    }, M1.prototype.imul = function(e, t) {
                        return this._verify2(e, t), this.imod(e.imul(t));
                    }, M1.prototype.mul = function(e, t) {
                        return this._verify2(e, t), this.imod(e.mul(t));
                    }, M1.prototype.isqr = function(e) {
                        return this.imul(e, e.clone());
                    }, M1.prototype.sqr = function(e) {
                        return this.mul(e, e);
                    }, M1.prototype.sqrt = function(e) {
                        if (e.isZero()) return e.clone();
                        var t = this.m.andln(3);
                        if (y1(t % 2 == 1), 3 === t) {
                            t = this.m.add(new m1(1)).iushrn(2);
                            return this.pow(e, t);
                        }
                        for(var r = this.m.subn(1), n = 0; !r.isZero() && 0 === r.andln(1);)n++, r.iushrn(1);
                        y1(!r.isZero());
                        for(var i = new m1(1).toRed(this), o = i.redNeg(), s = this.m.subn(1).iushrn(1), a = new m1(2 * (a = this.m.bitLength()) * a).toRed(this); 0 !== this.pow(a, s).cmp(o);)a.redIAdd(o);
                        for(var u = this.pow(a, r), l = this.pow(e, r.addn(1).iushrn(1)), h = this.pow(e, r), f = n; 0 !== h.cmp(i);){
                            for(var c = h, d = 0; 0 !== c.cmp(i); d++)c = c.redSqr();
                            y1(d < f);
                            var p = this.pow(u, new m1(1).iushln(f - d - 1)), l = l.redMul(p), u = p.redSqr(), h = h.redMul(u), f = d;
                        }
                        return l;
                    }, M1.prototype.invm = function(e) {
                        e = e._invmp(this.m);
                        return 0 !== e.negative ? (e.negative = 0, this.imod(e).redNeg()) : this.imod(e);
                    }, M1.prototype.pow = function(e, t) {
                        if (t.isZero()) return new m1(1).toRed(this);
                        if (0 === t.cmpn(1)) return e.clone();
                        var r = new Array(16);
                        r[0] = new m1(1).toRed(this), r[1] = e;
                        for(var n = 2; n < r.length; n++)r[n] = this.mul(r[n - 1], e);
                        var i = r[0], o = 0, s = 0, a = t.bitLength() % 26;
                        for(0 === a && (a = 26), n = t.length - 1; 0 <= n; n--){
                            for(var u = t.words[n], l = a - 1; 0 <= l; l--){
                                var h = u >> l & 1;
                                i !== r[0] && (i = this.sqr(i)), 0 != h || 0 !== o ? (o <<= 1, o |= h, (4 === ++s || 0 === n && 0 === l) && (i = this.mul(i, r[o]), o = s = 0)) : s = 0;
                            }
                            a = 26;
                        }
                        return i;
                    }, M1.prototype.convertTo = function(e) {
                        var t = e.umod(this.m);
                        return t === e ? t.clone() : t;
                    }, M1.prototype.convertFrom = function(e) {
                        e = e.clone();
                        return e.red = null, e;
                    }, m1.mont = function(e) {
                        return new A1(e);
                    }, r9(A1, M1), A1.prototype.convertTo = function(e) {
                        return this.imod(e.ushln(this.shift));
                    }, A1.prototype.convertFrom = function(e) {
                        e = this.imod(e.mul(this.rinv));
                        return e.red = null, e;
                    }, A1.prototype.imul = function(e, t) {
                        if (e.isZero() || t.isZero()) return e.words[0] = 0, e.length = 1, e;
                        e = e.imul(t), t = e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), e = e.isub(t).iushrn(this.shift), t = e;
                        return 0 <= e.cmp(this.m) ? t = e.isub(this.m) : e.cmpn(0) < 0 && (t = e.iadd(this.m)), t._forceRed(this);
                    }, A1.prototype.mul = function(e, t) {
                        if (e.isZero() || t.isZero()) return new m1(0)._forceRed(this);
                        e = e.mul(t), t = e.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), e = e.isub(t).iushrn(this.shift), t = e;
                        return 0 <= e.cmp(this.m) ? t = e.isub(this.m) : e.cmpn(0) < 0 && (t = e.iadd(this.m)), t._forceRed(this);
                    }, A1.prototype.invm = function(e) {
                        return this.imod(e._invmp(this.m).mul(this.r2))._forceRed(this);
                    };
                }(void 0 === e31 || e31, this);
            },
            {
                buffer: 11
            }
        ],
        10: [
            function(e36, r, t19) {
                (function(t) {
                    (function() {
                        r.exports = function(e) {
                            e = new Uint8Array(e);
                            return (t.crypto || t.msCrypto).getRandomValues(e), e;
                        };
                    }).call(this);
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {}
        ],
        11: [
            function(e, t, r) {},
            {}
        ],
        12: [
            function(e, t, r) {
                "use strict";
                r.version = e("../package.json").version, r.utils = e("./elliptic/utils"), r.rand = e("brorand"), r.curve = e("./elliptic/curve"), r.curves = e("./elliptic/curves"), r.ec = e("./elliptic/ec"), r.eddsa = e("./elliptic/eddsa");
            },
            {
                "../package.json": 25,
                "./elliptic/curve": 15,
                "./elliptic/curves": 18,
                "./elliptic/ec": 19,
                "./elliptic/eddsa": 22,
                "./elliptic/utils": 24,
                brorand: 10
            }
        ],
        13: [
            function(e37, t20, r12) {
                "use strict";
                var n6 = e37("bn.js"), i6 = e37("../utils"), S = i6.getNAF, k = i6.getJSF, f2 = i6.assert;
                function o6(e, t) {
                    this.type = e, this.p = new n6(t.p, 16), this.red = t.prime ? n6.red(t.prime) : n6.mont(this.p), this.zero = new n6(0).toRed(this.red), this.one = new n6(1).toRed(this.red), this.two = new n6(2).toRed(this.red), this.n = t.n && new n6(t.n, 16), this.g = t.g && this.pointFromJSON(t.g, t.gRed), this._wnafT1 = new Array(4), this._wnafT2 = new Array(4), this._wnafT3 = new Array(4), this._wnafT4 = new Array(4), this._bitLength = this.n ? this.n.bitLength() : 0;
                    t = this.n && this.p.div(this.n);
                    !t || 0 < t.cmpn(100) ? this.redN = null : (this._maxwellTrick = !0, this.redN = this.n.toRed(this.red));
                }
                function s5(e, t) {
                    this.curve = e, this.type = t, this.precomputed = null;
                }
                (t20.exports = o6).prototype.point = function() {
                    throw new Error("Not implemented");
                }, o6.prototype.validate = function() {
                    throw new Error("Not implemented");
                }, o6.prototype._fixedNafMul = function(e, t) {
                    f2(e.precomputed);
                    var r = e._getDoubles(), n = S(t, 1, this._bitLength), t = (1 << r.step + 1) - (r.step % 2 == 0 ? 2 : 1);
                    t /= 3;
                    for(var i = [], o = 0; o < n.length; o += r.step){
                        for(var s = 0, a = o + r.step - 1; o <= a; a--)s = (s << 1) + n[a];
                        i.push(s);
                    }
                    for(var u = this.jpoint(null, null, null), l = this.jpoint(null, null, null), h = t; 0 < h; h--){
                        for(o = 0; o < i.length; o++)(s = i[o]) === h ? l = l.mixedAdd(r.points[o]) : s === -h && (l = l.mixedAdd(r.points[o].neg()));
                        u = u.add(l);
                    }
                    return u.toP();
                }, o6.prototype._wnafMul = function(e, t) {
                    for(var r = e._getNAFPoints(4), n = r.wnd, i = r.points, o = S(t, n, this._bitLength), s = this.jpoint(null, null, null), a = o.length - 1; 0 <= a; a--){
                        for(var u = 0; 0 <= a && 0 === o[a]; a--)u++;
                        if (0 <= a && u++, s = s.dblp(u), a < 0) break;
                        var l = o[a];
                        f2(0 !== l), s = "affine" === e.type ? 0 < l ? s.mixedAdd(i[l - 1 >> 1]) : s.mixedAdd(i[-l - 1 >> 1].neg()) : 0 < l ? s.add(i[l - 1 >> 1]) : s.add(i[-l - 1 >> 1].neg());
                    }
                    return "affine" === e.type ? s.toP() : s;
                }, o6.prototype._wnafMulAdd = function(e, t, r, n, i) {
                    for(var o = this._wnafT1, s = this._wnafT2, a = this._wnafT3, u = 0, l = 0; l < n; l++){
                        var h, f = (h = t[l])._getNAFPoints(e);
                        o[l] = f.wnd, s[l] = f.points;
                    }
                    for(l = n - 1; 1 <= l; l -= 2){
                        var c = l - 1, d = l;
                        if (1 === o[c] && 1 === o[d]) {
                            var p = [
                                t[c],
                                null,
                                null,
                                t[d]
                            ];
                            0 === t[c].y.cmp(t[d].y) ? (p[1] = t[c].add(t[d]), p[2] = t[c].toJ().mixedAdd(t[d].neg())) : 0 === t[c].y.cmp(t[d].y.redNeg()) ? (p[1] = t[c].toJ().mixedAdd(t[d]), p[2] = t[c].add(t[d].neg())) : (p[1] = t[c].toJ().mixedAdd(t[d]), p[2] = t[c].toJ().mixedAdd(t[d].neg()));
                            var y = [
                                -3,
                                -1,
                                -5,
                                -7,
                                0,
                                7,
                                5,
                                1,
                                3
                            ], m = k(r[c], r[d]), u = Math.max(m[0].length, u);
                            for(a[c] = new Array(u), a[d] = new Array(u), A = 0; A < u; A++){
                                var g = 0 | m[0][A], v = 0 | m[1][A];
                                a[c][A] = y[3 * (1 + g) + (1 + v)], a[d][A] = 0, s[c] = p;
                            }
                        } else a[c] = S(r[c], o[c], this._bitLength), a[d] = S(r[d], o[d], this._bitLength), u = Math.max(a[c].length, u), u = Math.max(a[d].length, u);
                    }
                    var b = this.jpoint(null, null, null), w = this._wnafT4;
                    for(l = u; 0 <= l; l--){
                        for(var _ = 0; 0 <= l;){
                            for(var M = !0, A = 0; A < n; A++)w[A] = 0 | a[A][l], 0 !== w[A] && (M = !1);
                            if (!M) break;
                            _++, l--;
                        }
                        if (0 <= l && _++, b = b.dblp(_), l < 0) break;
                        for(A = 0; A < n; A++){
                            var E = w[A];
                            0 !== E && (0 < E ? h = s[A][E - 1 >> 1] : E < 0 && (h = s[A][-E - 1 >> 1].neg()), b = "affine" === h.type ? b.mixedAdd(h) : b.add(h));
                        }
                    }
                    for(l = 0; l < n; l++)s[l] = null;
                    return i ? b : b.toP();
                }, (o6.BasePoint = s5).prototype.eq = function() {
                    throw new Error("Not implemented");
                }, s5.prototype.validate = function() {
                    return this.curve.validate(this);
                }, o6.prototype.decodePoint = function(e, t) {
                    e = i6.toArray(e, t);
                    t = this.p.byteLength();
                    if ((4 === e[0] || 6 === e[0] || 7 === e[0]) && e.length - 1 == 2 * t) return 6 === e[0] ? f2(e[e.length - 1] % 2 == 0) : 7 === e[0] && f2(e[e.length - 1] % 2 == 1), this.point(e.slice(1, 1 + t), e.slice(1 + t, 1 + 2 * t));
                    if ((2 === e[0] || 3 === e[0]) && e.length - 1 === t) return this.pointFromX(e.slice(1, 1 + t), 3 === e[0]);
                    throw new Error("Unknown point format");
                }, s5.prototype.encodeCompressed = function(e) {
                    return this.encode(e, !0);
                }, s5.prototype._encode = function(e) {
                    var t = this.curve.p.byteLength(), r = this.getX().toArray("be", t);
                    return e ? [
                        this.getY().isEven() ? 2 : 3
                    ].concat(r) : [
                        4
                    ].concat(r, this.getY().toArray("be", t));
                }, s5.prototype.encode = function(e, t) {
                    return i6.encode(this._encode(t), e);
                }, s5.prototype.precompute = function(e) {
                    if (this.precomputed) return this;
                    var t = {
                        doubles: null,
                        naf: null,
                        beta: null
                    };
                    return t.naf = this._getNAFPoints(8), t.doubles = this._getDoubles(4, e), t.beta = this._getBeta(), this.precomputed = t, this;
                }, s5.prototype._hasDoubles = function(e) {
                    if (!this.precomputed) return !1;
                    var t = this.precomputed.doubles;
                    return !!t && t.points.length >= Math.ceil((e.bitLength() + 1) / t.step);
                }, s5.prototype._getDoubles = function(e, t) {
                    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
                    for(var r = [
                        this
                    ], n = this, i = 0; i < t; i += e){
                        for(var o = 0; o < e; o++)n = n.dbl();
                        r.push(n);
                    }
                    return {
                        step: e,
                        points: r
                    };
                }, s5.prototype._getNAFPoints = function(e) {
                    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
                    for(var t = [
                        this
                    ], r = (1 << e) - 1, n = 1 == r ? null : this.dbl(), i = 1; i < r; i++)t[i] = t[i - 1].add(n);
                    return {
                        wnd: e,
                        points: t
                    };
                }, s5.prototype._getBeta = function() {
                    return null;
                }, s5.prototype.dblp = function(e) {
                    for(var t = this, r = 0; r < e; r++)t = t.dbl();
                    return t;
                };
            },
            {
                "../utils": 24,
                "bn.js": 9
            }
        ],
        14: [
            function(e, t, r) {
                t.exports = {};
            },
            {}
        ],
        15: [
            function(e, t, r) {
                "use strict";
                r.base = e("./base"), r.short = e("./short"), r.mont = e("./mont"), r.edwards = e("./edwards");
            },
            {
                "./base": 13,
                "./edwards": 14,
                "./mont": 16,
                "./short": 17
            }
        ],
        16: [
            function(e, t, r) {
                arguments[4][14][0].apply(r, arguments);
            },
            {
                dup: 14
            }
        ],
        17: [
            function(e38, t21, r13) {
                "use strict";
                var n7 = e38("../utils"), b = e38("bn.js"), i7 = e38("inherits"), o7 = e38("./base"), s6 = n7.assert;
                function a5(e) {
                    o7.call(this, "short", e), this.a = new b(e.a, 16).toRed(this.red), this.b = new b(e.b, 16).toRed(this.red), this.tinv = this.two.redInvm(), this.zeroA = 0 === this.a.fromRed().cmpn(0), this.threeA = 0 === this.a.fromRed().sub(this.p).cmpn(-3), this.endo = this._getEndomorphism(e), this._endoWnafT1 = new Array(4), this._endoWnafT2 = new Array(4);
                }
                function u3(e, t, r, n) {
                    o7.BasePoint.call(this, e, "affine"), null === t && null === r ? (this.x = null, this.y = null, this.inf = !0) : (this.x = new b(t, 16), this.y = new b(r, 16), n && (this.x.forceRed(this.curve.red), this.y.forceRed(this.curve.red)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.inf = !1);
                }
                function l3(e, t, r, n) {
                    o7.BasePoint.call(this, e, "jacobian"), null === t && null === r && null === n ? (this.x = this.curve.one, this.y = this.curve.one, this.z = new b(0)) : (this.x = new b(t, 16), this.y = new b(r, 16), this.z = new b(n, 16)), this.x.red || (this.x = this.x.toRed(this.curve.red)), this.y.red || (this.y = this.y.toRed(this.curve.red)), this.z.red || (this.z = this.z.toRed(this.curve.red)), this.zOne = this.z === this.curve.one;
                }
                i7(a5, o7), (t21.exports = a5).prototype._getEndomorphism = function(e39) {
                    var t, r, n;
                    if (this.zeroA && this.g && this.n && 1 === this.p.modn(3)) return r = (e39.beta ? new b(e39.beta, 16) : r = (n = this._getEndoRoots(this.p))[0].cmp(n[1]) < 0 ? n[0] : n[1]).toRed(this.red), e39.lambda ? t = new b(e39.lambda, 16) : (n = this._getEndoRoots(this.n), 0 === this.g.mul(n[0]).x.cmp(this.g.x.redMul(r)) ? t = n[0] : (t = n[1], s6(0 === this.g.mul(t).x.cmp(this.g.x.redMul(r))))), {
                        beta: r,
                        lambda: t,
                        basis: e39.basis ? e39.basis.map(function(e) {
                            return {
                                a: new b(e.a, 16),
                                b: new b(e.b, 16)
                            };
                        }) : this._getEndoBasis(t)
                    };
                }, a5.prototype._getEndoRoots = function(e) {
                    var t = e === this.p ? this.red : b.mont(e), r = new b(2).toRed(t).redInvm(), e = r.redNeg(), r = new b(3).toRed(t).redNeg().redSqrt().redMul(r);
                    return [
                        e.redAdd(r).fromRed(),
                        e.redSub(r).fromRed()
                    ];
                }, a5.prototype._getEndoBasis = function(e) {
                    for(var t, r, n, i, o, s = this.n.ushrn(Math.floor(this.n.bitLength() / 2)), a = e, u = this.n.clone(), l = new b(1), h = new b(0), f = new b(0), c = new b(1), d = 0; 0 !== a.cmpn(0);){
                        var p = u.div(a), y = u.sub(p.mul(a)), m = f.sub(p.mul(l)), p = c.sub(p.mul(h));
                        if (!n && y.cmp(s) < 0) t = o.neg(), r = l, n = y.neg(), i = m;
                        else if (n && 2 == ++d) break;
                        u = a, a = o = y, f = l, l = m, c = h, h = p;
                    }
                    var g = y.neg(), v = m, e = n.sqr().add(i.sqr());
                    return 0 <= g.sqr().add(v.sqr()).cmp(e) && (g = t, v = r), n.negative && (n = n.neg(), i = i.neg()), g.negative && (g = g.neg(), v = v.neg()), [
                        {
                            a: n,
                            b: i
                        },
                        {
                            a: g,
                            b: v
                        }
                    ];
                }, a5.prototype._endoSplit = function(e) {
                    var t = this.endo.basis, r = t[0], n = t[1], i = n.b.mul(e).divRound(this.n), o = r.b.neg().mul(e).divRound(this.n), s = i.mul(r.a), t = o.mul(n.a), r = i.mul(r.b), n = o.mul(n.b);
                    return {
                        k1: e.sub(s).sub(t),
                        k2: r.add(n).neg()
                    };
                }, a5.prototype.pointFromX = function(e, t) {
                    var r = (e = !(e = new b(e, 16)).red ? e.toRed(this.red) : e).redSqr().redMul(e).redIAdd(e.redMul(this.a)).redIAdd(this.b), n = r.redSqrt();
                    if (0 !== n.redSqr().redSub(r).cmp(this.zero)) throw new Error("invalid point");
                    r = n.fromRed().isOdd();
                    return (t && !r || !t && r) && (n = n.redNeg()), this.point(e, n);
                }, a5.prototype.validate = function(e) {
                    if (e.inf) return !0;
                    var t = e.x, r = e.y, e = this.a.redMul(t), e = t.redSqr().redMul(t).redIAdd(e).redIAdd(this.b);
                    return 0 === r.redSqr().redISub(e).cmpn(0);
                }, a5.prototype._endoWnafMulAdd = function(e, t, r) {
                    for(var n = this._endoWnafT1, i = this._endoWnafT2, o = 0; o < e.length; o++){
                        var s = this._endoSplit(t[o]), a = e[o], u = a._getBeta();
                        s.k1.negative && (s.k1.ineg(), a = a.neg(!0)), s.k2.negative && (s.k2.ineg(), u = u.neg(!0)), n[2 * o] = a, n[2 * o + 1] = u, i[2 * o] = s.k1, i[2 * o + 1] = s.k2;
                    }
                    for(var r = this._wnafMulAdd(1, n, i, 2 * o, r), l = 0; l < 2 * o; l++)n[l] = null, i[l] = null;
                    return r;
                }, i7(u3, o7.BasePoint), a5.prototype.point = function(e, t, r) {
                    return new u3(this, e, t, r);
                }, a5.prototype.pointFromJSON = function(e, t) {
                    return u3.fromJSON(this, e, t);
                }, u3.prototype._getBeta = function() {
                    if (this.curve.endo) {
                        var e40 = this.precomputed;
                        if (e40 && e40.beta) return e40.beta;
                        var t, r, n = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
                        return e40 && (t = this.curve, r = function(e) {
                            return t.point(e.x.redMul(t.endo.beta), e.y);
                        }, (e40.beta = n).precomputed = {
                            beta: null,
                            naf: e40.naf && {
                                wnd: e40.naf.wnd,
                                points: e40.naf.points.map(r)
                            },
                            doubles: e40.doubles && {
                                step: e40.doubles.step,
                                points: e40.doubles.points.map(r)
                            }
                        }), n;
                    }
                }, u3.prototype.toJSON = function() {
                    return this.precomputed ? [
                        this.x,
                        this.y,
                        this.precomputed && {
                            doubles: this.precomputed.doubles && {
                                step: this.precomputed.doubles.step,
                                points: this.precomputed.doubles.points.slice(1)
                            },
                            naf: this.precomputed.naf && {
                                wnd: this.precomputed.naf.wnd,
                                points: this.precomputed.naf.points.slice(1)
                            }
                        }
                    ] : [
                        this.x,
                        this.y
                    ];
                }, u3.fromJSON = function(t, e42, r) {
                    "string" == typeof e42 && (e42 = JSON.parse(e42));
                    var n = t.point(e42[0], e42[1], r);
                    if (!e42[2]) return n;
                    function i(e) {
                        return t.point(e[0], e[1], r);
                    }
                    e42 = e42[2];
                    return n.precomputed = {
                        beta: null,
                        doubles: e42.doubles && {
                            step: e42.doubles.step,
                            points: [
                                n
                            ].concat(e42.doubles.points.map(i))
                        },
                        naf: e42.naf && {
                            wnd: e42.naf.wnd,
                            points: [
                                n
                            ].concat(e42.naf.points.map(i))
                        }
                    }, n;
                }, u3.prototype.inspect = function() {
                    return this.isInfinity() ? "<EC Point Infinity>" : "<EC Point x: " + this.x.fromRed().toString(16, 2) + " y: " + this.y.fromRed().toString(16, 2) + ">";
                }, u3.prototype.isInfinity = function() {
                    return this.inf;
                }, u3.prototype.add = function(e) {
                    if (this.inf) return e;
                    if (e.inf) return this;
                    if (this.eq(e)) return this.dbl();
                    if (this.neg().eq(e)) return this.curve.point(null, null);
                    if (0 === this.x.cmp(e.x)) return this.curve.point(null, null);
                    var t = this.y.redSub(e.y), e = (t = 0 !== t.cmpn(0) ? t.redMul(this.x.redSub(e.x).redInvm()) : t).redSqr().redISub(this.x).redISub(e.x), t = t.redMul(this.x.redSub(e)).redISub(this.y);
                    return this.curve.point(e, t);
                }, u3.prototype.dbl = function() {
                    if (this.inf) return this;
                    var e = this.y.redAdd(this.y);
                    if (0 === e.cmpn(0)) return this.curve.point(null, null);
                    var t = this.curve.a, r = this.x.redSqr(), e = e.redInvm(), t = r.redAdd(r).redIAdd(r).redIAdd(t).redMul(e), e = t.redSqr().redISub(this.x.redAdd(this.x)), t = t.redMul(this.x.redSub(e)).redISub(this.y);
                    return this.curve.point(e, t);
                }, u3.prototype.getX = function() {
                    return this.x.fromRed();
                }, u3.prototype.getY = function() {
                    return this.y.fromRed();
                }, u3.prototype.mul = function(e) {
                    return e = new b(e, 16), this.isInfinity() ? this : this._hasDoubles(e) ? this.curve._fixedNafMul(this, e) : this.curve.endo ? this.curve._endoWnafMulAdd([
                        this
                    ], [
                        e
                    ]) : this.curve._wnafMul(this, e);
                }, u3.prototype.mulAdd = function(e, t, r) {
                    t = [
                        this,
                        t
                    ], r = [
                        e,
                        r
                    ];
                    return this.curve.endo ? this.curve._endoWnafMulAdd(t, r) : this.curve._wnafMulAdd(1, t, r, 2);
                }, u3.prototype.jmulAdd = function(e, t, r) {
                    t = [
                        this,
                        t
                    ], r = [
                        e,
                        r
                    ];
                    return this.curve.endo ? this.curve._endoWnafMulAdd(t, r, !0) : this.curve._wnafMulAdd(1, t, r, 2, !0);
                }, u3.prototype.eq = function(e) {
                    return this === e || this.inf === e.inf && (this.inf || 0 === this.x.cmp(e.x) && 0 === this.y.cmp(e.y));
                }, u3.prototype.neg = function(e43) {
                    if (this.inf) return this;
                    var t, r = this.curve.point(this.x, this.y.redNeg());
                    return e43 && this.precomputed && (t = this.precomputed, e43 = function(e) {
                        return e.neg();
                    }, r.precomputed = {
                        naf: t.naf && {
                            wnd: t.naf.wnd,
                            points: t.naf.points.map(e43)
                        },
                        doubles: t.doubles && {
                            step: t.doubles.step,
                            points: t.doubles.points.map(e43)
                        }
                    }), r;
                }, u3.prototype.toJ = function() {
                    return this.inf ? this.curve.jpoint(null, null, null) : this.curve.jpoint(this.x, this.y, this.curve.one);
                }, i7(l3, o7.BasePoint), a5.prototype.jpoint = function(e, t, r) {
                    return new l3(this, e, t, r);
                }, l3.prototype.toP = function() {
                    if (this.isInfinity()) return this.curve.point(null, null);
                    var e = this.z.redInvm(), t = e.redSqr(), r = this.x.redMul(t), e = this.y.redMul(t).redMul(e);
                    return this.curve.point(r, e);
                }, l3.prototype.neg = function() {
                    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
                }, l3.prototype.add = function(e) {
                    if (this.isInfinity()) return e;
                    if (e.isInfinity()) return this;
                    var t = e.z.redSqr(), r = this.z.redSqr(), n = this.x.redMul(t), i = e.x.redMul(r), o = this.y.redMul(t.redMul(e.z)), s = e.y.redMul(r.redMul(this.z)), t = n.redSub(i), r = o.redSub(s);
                    if (0 === t.cmpn(0)) return 0 !== r.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                    i = t.redSqr(), s = i.redMul(t), n = n.redMul(i), i = r.redSqr().redIAdd(s).redISub(n).redISub(n), s = r.redMul(n.redISub(i)).redISub(o.redMul(s)), t = this.z.redMul(e.z).redMul(t);
                    return this.curve.jpoint(i, s, t);
                }, l3.prototype.mixedAdd = function(e) {
                    if (this.isInfinity()) return e.toJ();
                    if (e.isInfinity()) return this;
                    var t = this.z.redSqr(), r = this.x, n = e.x.redMul(t), i = this.y, o = e.y.redMul(t).redMul(this.z), e = r.redSub(n), t = i.redSub(o);
                    if (0 === e.cmpn(0)) return 0 !== t.cmpn(0) ? this.curve.jpoint(null, null, null) : this.dbl();
                    n = e.redSqr(), o = n.redMul(e), r = r.redMul(n), n = t.redSqr().redIAdd(o).redISub(r).redISub(r), o = t.redMul(r.redISub(n)).redISub(i.redMul(o)), e = this.z.redMul(e);
                    return this.curve.jpoint(n, o, e);
                }, l3.prototype.dblp = function(e) {
                    if (0 === e) return this;
                    if (this.isInfinity()) return this;
                    if (!e) return this.dbl();
                    if (this.curve.zeroA || this.curve.threeA) {
                        for(var t = this, r = 0; r < e; r++)t = t.dbl();
                        return t;
                    }
                    var n = this.curve.a, i = this.curve.tinv, o = this.x, s = this.y, a = this.z, u = a.redSqr().redSqr(), l = s.redAdd(s);
                    for(r = 0; r < e; r++){
                        var h = o.redSqr(), f = l.redSqr(), c = f.redSqr(), d = h.redAdd(h).redIAdd(h).redIAdd(n.redMul(u)), h = o.redMul(f), f = d.redSqr().redISub(h.redAdd(h)), h = h.redISub(f), d = (d = d.redMul(h)).redIAdd(d).redISub(c), h = l.redMul(a);
                        r + 1 < e && (u = u.redMul(c)), o = f, a = h, l = d;
                    }
                    return this.curve.jpoint(o, l.redMul(i), a);
                }, l3.prototype.dbl = function() {
                    return this.isInfinity() ? this : this.curve.zeroA ? this._zeroDbl() : this.curve.threeA ? this._threeDbl() : this._dbl();
                }, l3.prototype._zeroDbl = function() {
                    var e, t, r, n, i, o = this.zOne ? (r = this.x.redSqr(), e = (n = this.y.redSqr()).redSqr(), i = (i = this.x.redAdd(n).redSqr().redISub(r).redISub(e)).redIAdd(i), n = (t = r.redAdd(r).redIAdd(r)).redSqr().redISub(i).redISub(i), r = (r = (r = e.redIAdd(e)).redIAdd(r)).redIAdd(r), t = t.redMul(i.redISub(e = n)).redISub(r), this.y.redAdd(this.y)) : (i = this.x.redSqr(), o = (n = this.y.redSqr()).redSqr(), r = (r = this.x.redAdd(n).redSqr().redISub(i).redISub(o)).redIAdd(r), i = (n = i.redAdd(i).redIAdd(i)).redSqr(), o = (o = (o = o.redIAdd(o)).redIAdd(o)).redIAdd(o), e = i.redISub(r).redISub(r), t = n.redMul(r.redISub(e)).redISub(o), (o = this.y.redMul(this.z)).redIAdd(o));
                    return this.curve.jpoint(e, t, o);
                }, l3.prototype._threeDbl = function() {
                    var e, t, r, n, i, o, s, a;
                    return this.zOne ? (s = this.x.redSqr(), r = (e = this.y.redSqr()).redSqr(), o = (o = this.x.redAdd(e).redSqr().redISub(s).redISub(r)).redIAdd(o), t = n = (a = s.redAdd(s).redIAdd(s).redIAdd(this.curve.a)).redSqr().redISub(o).redISub(o), i = (i = (i = r.redIAdd(r)).redIAdd(i)).redIAdd(i), e = a.redMul(o.redISub(n)).redISub(i), s = this.y.redAdd(this.y)) : (r = this.z.redSqr(), a = this.y.redSqr(), o = this.x.redMul(a), n = (n = this.x.redSub(r).redMul(this.x.redAdd(r))).redAdd(n).redIAdd(n), o = (i = (i = o.redIAdd(o)).redIAdd(i)).redAdd(i), t = n.redSqr().redISub(o), s = this.y.redAdd(this.z).redSqr().redISub(a).redISub(r), a = (a = (a = (a = a.redSqr()).redIAdd(a)).redIAdd(a)).redIAdd(a), e = n.redMul(i.redISub(t)).redISub(a)), this.curve.jpoint(t, e, s);
                }, l3.prototype._dbl = function() {
                    var e = this.curve.a, t = this.x, r = this.y, n = this.z, i = n.redSqr().redSqr(), o = t.redSqr(), s = r.redSqr(), e = o.redAdd(o).redIAdd(o).redIAdd(e.redMul(i)), i = t.redAdd(t), t = (i = i.redIAdd(i)).redMul(s), i = e.redSqr().redISub(t.redAdd(t)), t = t.redISub(i), s = s.redSqr();
                    s = (s = (s = s.redIAdd(s)).redIAdd(s)).redIAdd(s);
                    s = e.redMul(t).redISub(s), n = r.redAdd(r).redMul(n);
                    return this.curve.jpoint(i, s, n);
                }, l3.prototype.trpl = function() {
                    if (!this.curve.zeroA) return this.dbl().add(this);
                    var e = this.x.redSqr(), t = this.y.redSqr(), r = this.z.redSqr(), n = t.redSqr(), i = e.redAdd(e).redIAdd(e), o = i.redSqr(), s = this.x.redAdd(t).redSqr().redISub(e).redISub(n), e = (s = (s = (s = s.redIAdd(s)).redAdd(s).redIAdd(s)).redISub(o)).redSqr(), n = n.redIAdd(n);
                    n = (n = (n = n.redIAdd(n)).redIAdd(n)).redIAdd(n);
                    o = i.redIAdd(s).redSqr().redISub(o).redISub(e).redISub(n), t = t.redMul(o);
                    t = (t = t.redIAdd(t)).redIAdd(t);
                    t = this.x.redMul(e).redISub(t);
                    t = (t = t.redIAdd(t)).redIAdd(t);
                    o = this.y.redMul(o.redMul(n.redISub(o)).redISub(s.redMul(e)));
                    o = (o = (o = o.redIAdd(o)).redIAdd(o)).redIAdd(o);
                    e = this.z.redAdd(s).redSqr().redISub(r).redISub(e);
                    return this.curve.jpoint(t, o, e);
                }, l3.prototype.mul = function(e, t) {
                    return e = new b(e, t), this.curve._wnafMul(this, e);
                }, l3.prototype.eq = function(e) {
                    if ("affine" === e.type) return this.eq(e.toJ());
                    if (this === e) return !0;
                    var t = this.z.redSqr(), r = e.z.redSqr();
                    if (0 !== this.x.redMul(r).redISub(e.x.redMul(t)).cmpn(0)) return !1;
                    t = t.redMul(this.z), r = r.redMul(e.z);
                    return 0 === this.y.redMul(r).redISub(e.y.redMul(t)).cmpn(0);
                }, l3.prototype.eqXToP = function(e) {
                    var t = this.z.redSqr(), r = e.toRed(this.curve.red).redMul(t);
                    if (0 === this.x.cmp(r)) return !0;
                    for(var n = e.clone(), i = this.curve.redN.redMul(t);;){
                        if (n.iadd(this.curve.n), 0 <= n.cmp(this.curve.p)) return !1;
                        if (r.redIAdd(i), 0 === this.x.cmp(r)) return !0;
                    }
                }, l3.prototype.inspect = function() {
                    return this.isInfinity() ? "<EC JPoint Infinity>" : "<EC JPoint x: " + this.x.toString(16, 2) + " y: " + this.y.toString(16, 2) + " z: " + this.z.toString(16, 2) + ">";
                }, l3.prototype.isInfinity = function() {
                    return 0 === this.z.cmpn(0);
                };
            },
            {
                "../utils": 24,
                "./base": 13,
                "bn.js": 9,
                inherits: 39
            }
        ],
        18: [
            function(e44, t22, r14) {
                "use strict";
                var n, i = r14, r14 = e44("hash.js"), o = e44("./curve"), s = e44("./utils").assert;
                function a(e) {
                    "short" === e.type ? this.curve = new o.short(e) : "edwards" === e.type ? this.curve = new o.edwards(e) : this.curve = new o.mont(e), this.g = this.curve.g, this.n = this.curve.n, this.hash = e.hash, s(this.g.validate(), "Invalid curve"), s(this.g.mul(this.n).isInfinity(), "Invalid curve, G*N != O");
                }
                function u(t, r) {
                    Object.defineProperty(i, t, {
                        configurable: !0,
                        enumerable: !0,
                        get: function() {
                            var e = new a(r);
                            return Object.defineProperty(i, t, {
                                configurable: !0,
                                enumerable: !0,
                                value: e
                            }), e;
                        }
                    });
                }
                i.PresetCurve = a, u("p192", {
                    type: "short",
                    prime: "p192",
                    p: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc",
                    b: "64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1",
                    n: "ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831",
                    hash: r14.sha256,
                    gRed: !1,
                    g: [
                        "188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012",
                        "07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811"
                    ]
                }), u("p224", {
                    type: "short",
                    prime: "p224",
                    p: "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001",
                    a: "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe",
                    b: "b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4",
                    n: "ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d",
                    hash: r14.sha256,
                    gRed: !1,
                    g: [
                        "b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21",
                        "bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34"
                    ]
                }), u("p256", {
                    type: "short",
                    prime: null,
                    p: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff",
                    a: "ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc",
                    b: "5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b",
                    n: "ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551",
                    hash: r14.sha256,
                    gRed: !1,
                    g: [
                        "6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296",
                        "4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5"
                    ]
                }), u("p384", {
                    type: "short",
                    prime: null,
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
                    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
                    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
                    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
                    hash: r14.sha384,
                    gRed: !1,
                    g: [
                        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
                        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f"
                    ]
                }), u("p521", {
                    type: "short",
                    prime: null,
                    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
                    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
                    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
                    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
                    hash: r14.sha512,
                    gRed: !1,
                    g: [
                        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
                        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650"
                    ]
                }), u("curve25519", {
                    type: "mont",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "76d06",
                    b: "1",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: r14.sha256,
                    gRed: !1,
                    g: [
                        "9"
                    ]
                }), u("ed25519", {
                    type: "edwards",
                    prime: "p25519",
                    p: "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed",
                    a: "-1",
                    c: "1",
                    d: "52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3",
                    n: "1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed",
                    hash: r14.sha256,
                    gRed: !1,
                    g: [
                        "216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a",
                        "6666666666666666666666666666666666666666666666666666666666666658"
                    ]
                });
                try {
                    n = e44("./precomputed/secp256k1");
                } catch (e) {
                    n = void 0;
                }
                u("secp256k1", {
                    type: "short",
                    prime: "k256",
                    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f",
                    a: "0",
                    b: "7",
                    n: "ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141",
                    h: "1",
                    hash: r14.sha256,
                    beta: "7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee",
                    lambda: "5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72",
                    basis: [
                        {
                            a: "3086d221a7d46bcde86c90e49284eb15",
                            b: "-e4437ed6010e88286f547fa90abfe4c3"
                        },
                        {
                            a: "114ca50f7a8e2f3f657c1108d9d44cfd8",
                            b: "3086d221a7d46bcde86c90e49284eb15"
                        }
                    ],
                    gRed: !1,
                    g: [
                        "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
                        "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8",
                        n
                    ]
                });
            },
            {
                "./curve": 15,
                "./precomputed/secp256k1": 23,
                "./utils": 24,
                "hash.js": 26
            }
        ],
        19: [
            function(e45, t23, r15) {
                "use strict";
                var c = e45("bn.js"), d = e45("hmac-drbg"), n8 = e45("../utils"), i8 = e45("../curves"), o8 = e45("brorand"), a6 = n8.assert, s7 = e45("./key"), p = e45("./signature");
                function u4(e) {
                    if (!(this instanceof u4)) return new u4(e);
                    "string" == typeof e && (a6(Object.prototype.hasOwnProperty.call(i8, e), "Unknown curve " + e), e = i8[e]), e instanceof i8.PresetCurve && (e = {
                        curve: e
                    }), this.curve = e.curve.curve, this.n = this.curve.n, this.nh = this.n.ushrn(1), this.g = this.curve.g, this.g = e.curve.g, this.g.precompute(e.curve.n.bitLength() + 1), this.hash = e.hash || e.curve.hash;
                }
                (t23.exports = u4).prototype.keyPair = function(e) {
                    return new s7(this, e);
                }, u4.prototype.keyFromPrivate = function(e, t) {
                    return s7.fromPrivate(this, e, t);
                }, u4.prototype.keyFromPublic = function(e, t) {
                    return s7.fromPublic(this, e, t);
                }, u4.prototype.genKeyPair = function(e) {
                    for(var t = new d({
                        hash: this.hash,
                        pers: (e = e || {}).pers,
                        persEnc: e.persEnc || "utf8",
                        entropy: e.entropy || o8(this.hash.hmacStrength),
                        entropyEnc: e.entropy && e.entropyEnc || "utf8",
                        nonce: this.n.toArray()
                    }), r = this.n.byteLength(), n = this.n.sub(new c(2));;){
                        var i = new c(t.generate(r));
                        if (!(0 < i.cmp(n))) return i.iaddn(1), this.keyFromPrivate(i);
                    }
                }, u4.prototype._truncateToN = function(e, t) {
                    var r = 8 * e.byteLength() - this.n.bitLength();
                    return 0 < r && (e = e.ushrn(r)), !t && 0 <= e.cmp(this.n) ? e.sub(this.n) : e;
                }, u4.prototype.sign = function(e, t, r, n) {
                    "object" == typeof r && (n = r, r = null), n = n || {}, t = this.keyFromPrivate(t, r), e = this._truncateToN(new c(e, 16));
                    for(var i = this.n.byteLength(), r = t.getPrivate().toArray("be", i), i = e.toArray("be", i), o = new d({
                        hash: this.hash,
                        entropy: r,
                        nonce: i,
                        pers: n.pers,
                        persEnc: n.persEnc || "utf8"
                    }), s = this.n.sub(new c(1)), a = 0;; a++){
                        var u = n.k ? n.k(a) : new c(o.generate(this.n.byteLength()));
                        if (!((u = this._truncateToN(u, !0)).cmpn(1) <= 0 || 0 <= u.cmp(s))) {
                            var l = this.g.mul(u);
                            if (!l.isInfinity()) {
                                var h = l.getX(), f = h.umod(this.n);
                                if (0 !== f.cmpn(0)) {
                                    u = u.invm(this.n).mul(f.mul(t.getPrivate()).iadd(e));
                                    if (0 !== (u = u.umod(this.n)).cmpn(0)) {
                                        h = (l.getY().isOdd() ? 1 : 0) | (0 !== h.cmp(f) ? 2 : 0);
                                        return n.canonical && 0 < u.cmp(this.nh) && (u = this.n.sub(u), h ^= 1), new p({
                                            r: f,
                                            s: u,
                                            recoveryParam: h
                                        });
                                    }
                                }
                            }
                        }
                    }
                }, u4.prototype.verify = function(e, t, r, n) {
                    e = this._truncateToN(new c(e, 16)), r = this.keyFromPublic(r, n);
                    n = (t = new p(t, "hex")).r, t = t.s;
                    if (n.cmpn(1) < 0 || 0 <= n.cmp(this.n)) return !1;
                    if (t.cmpn(1) < 0 || 0 <= t.cmp(this.n)) return !1;
                    var i, t = t.invm(this.n), e = t.mul(e).umod(this.n), t = t.mul(n).umod(this.n);
                    return this.curve._maxwellTrick ? !(i = this.g.jmulAdd(e, r.getPublic(), t)).isInfinity() && i.eqXToP(n) : !(i = this.g.mulAdd(e, r.getPublic(), t)).isInfinity() && 0 === i.getX().umod(this.n).cmp(n);
                }, u4.prototype.recoverPubKey = function(e, t, r, n) {
                    a6((3 & r) === r, "The recovery param is more than two bits"), t = new p(t, n);
                    var i = this.n, o = new c(e), s = t.r, n = t.s, e = 1 & r, r = r >> 1;
                    if (0 <= s.cmp(this.curve.p.umod(this.curve.n)) && r) throw new Error("Unable to find sencond key candinate");
                    s = r ? this.curve.pointFromX(s.add(this.curve.n), e) : this.curve.pointFromX(s, e), t = t.r.invm(i), o = i.sub(o).mul(t).umod(i), i = n.mul(t).umod(i);
                    return this.g.mulAdd(o, s, i);
                }, u4.prototype.getKeyRecoveryParam = function(e, t, r, n) {
                    if (null !== (t = new p(t, n)).recoveryParam) return t.recoveryParam;
                    for(var i, o = 0; o < 4; o++){
                        try {
                            i = this.recoverPubKey(e, t, o);
                        } catch (e) {
                            continue;
                        }
                        if (i.eq(r)) return o;
                    }
                    throw new Error("Unable to find valid recovery factor");
                };
            },
            {
                "../curves": 18,
                "../utils": 24,
                "./key": 20,
                "./signature": 21,
                "bn.js": 9,
                brorand: 10,
                "hmac-drbg": 38
            }
        ],
        20: [
            function(e46, t24, r16) {
                "use strict";
                var n = e46("bn.js"), i = e46("../utils").assert;
                function o(e, t) {
                    this.ec = e, this.priv = null, this.pub = null, t.priv && this._importPrivate(t.priv, t.privEnc), t.pub && this._importPublic(t.pub, t.pubEnc);
                }
                (t24.exports = o).fromPublic = function(e, t, r) {
                    return t instanceof o ? t : new o(e, {
                        pub: t,
                        pubEnc: r
                    });
                }, o.fromPrivate = function(e, t, r) {
                    return t instanceof o ? t : new o(e, {
                        priv: t,
                        privEnc: r
                    });
                }, o.prototype.validate = function() {
                    var e = this.getPublic();
                    return e.isInfinity() ? {
                        result: !1,
                        reason: "Invalid public key"
                    } : e.validate() ? e.mul(this.ec.curve.n).isInfinity() ? {
                        result: !0,
                        reason: null
                    } : {
                        result: !1,
                        reason: "Public key * N != O"
                    } : {
                        result: !1,
                        reason: "Public key is not a point"
                    };
                }, o.prototype.getPublic = function(e, t) {
                    return "string" == typeof e && (t = e, e = null), this.pub || (this.pub = this.ec.g.mul(this.priv)), t ? this.pub.encode(t, e) : this.pub;
                }, o.prototype.getPrivate = function(e) {
                    return "hex" === e ? this.priv.toString(16, 2) : this.priv;
                }, o.prototype._importPrivate = function(e, t) {
                    this.priv = new n(e, t || 16), this.priv = this.priv.umod(this.ec.curve.n);
                }, o.prototype._importPublic = function(e, t) {
                    if (e.x || e.y) return "mont" === this.ec.curve.type ? i(e.x, "Need x coordinate") : "short" !== this.ec.curve.type && "edwards" !== this.ec.curve.type || i(e.x && e.y, "Need both x and y coordinate"), void (this.pub = this.ec.curve.point(e.x, e.y));
                    this.pub = this.ec.curve.decodePoint(e, t);
                }, o.prototype.derive = function(e) {
                    return e.validate() || i(e.validate(), "public point not validated"), e.mul(this.priv).getX();
                }, o.prototype.sign = function(e, t, r) {
                    return this.ec.sign(e, this, t, r);
                }, o.prototype.verify = function(e, t) {
                    return this.ec.verify(e, t, this);
                }, o.prototype.inspect = function() {
                    return "<Key priv: " + (this.priv && this.priv.toString(16, 2)) + " pub: " + (this.pub && this.pub.inspect()) + " >";
                };
            },
            {
                "../utils": 24,
                "bn.js": 9
            }
        ],
        21: [
            function(e47, t25, r17) {
                "use strict";
                var i9 = e47("bn.js"), o9 = e47("../utils"), n9 = o9.assert;
                function s8(e, t) {
                    if (e instanceof s8) return e;
                    this._importDER(e, t) || (n9(e.r && e.s, "Signature without r or s"), this.r = new i9(e.r, 16), this.s = new i9(e.s, 16), void 0 === e.recoveryParam ? this.recoveryParam = null : this.recoveryParam = e.recoveryParam);
                }
                function a() {
                    this.place = 0;
                }
                function u(e, t) {
                    var r = e[t.place++];
                    if (!(128 & r)) return r;
                    var n = 15 & r;
                    if (0 == n || 4 < n) return !1;
                    for(var i = 0, o = 0, s = t.place; o < n; o++, s++)i <<= 8, i |= e[s], i >>>= 0;
                    return !(i <= 127) && (t.place = s, i);
                }
                function l(e) {
                    for(var t = 0, r = e.length - 1; !e[t] && !(128 & e[t + 1]) && t < r;)t++;
                    return 0 === t ? e : e.slice(t);
                }
                function h(e, t) {
                    if (t < 128) e.push(t);
                    else {
                        var r = 1 + (Math.log(t) / Math.LN2 >>> 3);
                        for(e.push(128 | r); --r;)e.push(t >>> (r << 3) & 255);
                        e.push(t);
                    }
                }
                (t25.exports = s8).prototype._importDER = function(e, t) {
                    e = o9.toArray(e, t);
                    var r = new a;
                    if (48 !== e[r.place++]) return !1;
                    var n = u(e, r);
                    if (!1 === n) return !1;
                    if (n + r.place !== e.length) return !1;
                    if (2 !== e[r.place++]) return !1;
                    t = u(e, r);
                    if (!1 === t) return !1;
                    n = e.slice(r.place, t + r.place);
                    if (r.place += t, 2 !== e[r.place++]) return !1;
                    t = u(e, r);
                    if (!1 === t) return !1;
                    if (e.length !== t + r.place) return !1;
                    r = e.slice(r.place, t + r.place);
                    if (0 === n[0]) {
                        if (!(128 & n[1])) return !1;
                        n = n.slice(1);
                    }
                    if (0 === r[0]) {
                        if (!(128 & r[1])) return !1;
                        r = r.slice(1);
                    }
                    return this.r = new i9(n), this.s = new i9(r), this.recoveryParam = null, true;
                }, s8.prototype.toDER = function(e) {
                    var t = this.r.toArray(), r = this.s.toArray();
                    for(128 & t[0] && (t = [
                        0
                    ].concat(t)), 128 & r[0] && (r = [
                        0
                    ].concat(r)), t = l(t), r = l(r); !(r[0] || 128 & r[1]);)r = r.slice(1);
                    var n = [
                        2
                    ];
                    h(n, t.length), (n = n.concat(t)).push(2), h(n, r.length);
                    t = n.concat(r), n = [
                        48
                    ];
                    return h(n, t.length), n = n.concat(t), o9.encode(n, e);
                };
            },
            {
                "../utils": 24,
                "bn.js": 9
            }
        ],
        22: [
            function(e, t, r) {
                arguments[4][14][0].apply(r, arguments);
            },
            {
                dup: 14
            }
        ],
        23: [
            function(e, t, r) {
                t.exports = void 0;
            },
            {}
        ],
        24: [
            function(e48, t26, r18) {
                "use strict";
                var n10 = r18, i10 = e48("bn.js"), r18 = e48("minimalistic-assert"), e48 = e48("minimalistic-crypto-utils");
                n10.assert = r18, n10.toArray = e48.toArray, n10.zero2 = e48.zero2, n10.toHex = e48.toHex, n10.encode = e48.encode, n10.getNAF = function(e, t, r) {
                    var n = new Array(Math.max(e.bitLength(), r) + 1);
                    n.fill(0);
                    for(var i = 1 << t + 1, o = e.clone(), s = 0; s < n.length; s++){
                        var a, u = o.andln(i - 1);
                        o.isOdd() ? o.isubn(a = (i >> 1) - 1 < u ? (i >> 1) - u : u) : a = 0, n[s] = a, o.iushrn(1);
                    }
                    return n;
                }, n10.getJSF = function(e, t) {
                    var r = [
                        [],
                        []
                    ];
                    e = e.clone(), t = t.clone();
                    for(var n, i = 0, o = 0; 0 < e.cmpn(-i) || 0 < t.cmpn(-o);){
                        var s, a = e.andln(3) + i & 3, u = t.andln(3) + o & 3;
                        3 === u && (u = -1), s = 0 == (1 & (a = 3 === a ? -1 : a)) ? 0 : 3 !== (n = e.andln(7) + i & 7) && 5 !== n || 2 !== u ? a : -a, r[0].push(s), u = 0 == (1 & u) ? 0 : 3 !== (n = t.andln(7) + o & 7) && 5 !== n || 2 !== a ? u : -u, r[1].push(u), 2 * i === s + 1 && (i = 1 - i), 2 * o === u + 1 && (o = 1 - o), e.iushrn(1), t.iushrn(1);
                    }
                    return r;
                }, n10.cachedProperty = function(e, t, r) {
                    var n = "_" + t;
                    e.prototype[t] = function() {
                        return void 0 !== this[n] ? this[n] : this[n] = r.call(this);
                    };
                }, n10.parseBytes = function(e) {
                    return "string" == typeof e ? n10.toArray(e, "hex") : e;
                }, n10.intFromLE = function(e) {
                    return new i10(e, "hex", "le");
                };
            },
            {
                "bn.js": 9,
                "minimalistic-assert": 41,
                "minimalistic-crypto-utils": 42
            }
        ],
        25: [
            function(e, t, r) {
                t.exports = {
                    version: "6.5.4"
                };
            },
            {}
        ],
        26: [
            function(e, t, r) {
                r.utils = e("./hash/utils"), r.common = e("./hash/common"), r.sha = e("./hash/sha"), r.ripemd = e("./hash/ripemd"), r.hmac = e("./hash/hmac"), r.sha1 = r.sha.sha1, r.sha256 = r.sha.sha256, r.sha224 = r.sha.sha224, r.sha384 = r.sha.sha384, r.sha512 = r.sha.sha512, r.ripemd160 = r.ripemd.ripemd160;
            },
            {
                "./hash/common": 27,
                "./hash/hmac": 28,
                "./hash/ripemd": 29,
                "./hash/sha": 30,
                "./hash/utils": 37
            }
        ],
        27: [
            function(e49, t27, r19) {
                "use strict";
                var n11 = e49("./utils"), i11 = e49("minimalistic-assert");
                function o10() {
                    this.pending = null, this.pendingTotal = 0, this.blockSize = this.constructor.blockSize, this.outSize = this.constructor.outSize, this.hmacStrength = this.constructor.hmacStrength, this.padLength = this.constructor.padLength / 8, this.endian = "big", this._delta8 = this.blockSize / 8, this._delta32 = this.blockSize / 32;
                }
                (r19.BlockHash = o10).prototype.update = function(e, t) {
                    if (e = n11.toArray(e, t), this.pending ? this.pending = this.pending.concat(e) : this.pending = e, this.pendingTotal += e.length, this.pending.length >= this._delta8) {
                        t = (e = this.pending).length % this._delta8;
                        this.pending = e.slice(e.length - t, e.length), 0 === this.pending.length && (this.pending = null), e = n11.join32(e, 0, e.length - t, this.endian);
                        for(var r = 0; r < e.length; r += this._delta32)this._update(e, r, r + this._delta32);
                    }
                    return this;
                }, o10.prototype.digest = function(e) {
                    return this.update(this._pad()), i11(null === this.pending), this._digest(e);
                }, o10.prototype._pad = function() {
                    var e = this.pendingTotal, t = this._delta8, r = t - (e + this.padLength) % t, n = new Array(r + this.padLength);
                    n[0] = 128;
                    for(var i = 1; i < r; i++)n[i] = 0;
                    if (e <<= 3, "big" === this.endian) {
                        for(var o = 8; o < this.padLength; o++)n[i++] = 0;
                        n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = e >>> 24 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 8 & 255, n[i++] = 255 & e;
                    } else for(n[i++] = 255 & e, n[i++] = e >>> 8 & 255, n[i++] = e >>> 16 & 255, n[i++] = e >>> 24 & 255, n[i++] = 0, n[i++] = 0, n[i++] = 0, n[i++] = 0, o = 8; o < this.padLength; o++)n[i++] = 0;
                    return n;
                };
            },
            {
                "./utils": 37,
                "minimalistic-assert": 41
            }
        ],
        28: [
            function(e50, t28, r20) {
                "use strict";
                var n = e50("./utils"), i = e50("minimalistic-assert");
                function o(e, t, r) {
                    if (!(this instanceof o)) return new o(e, t, r);
                    this.Hash = e, this.blockSize = e.blockSize / 8, this.outSize = e.outSize / 8, this.inner = null, this.outer = null, this._init(n.toArray(t, r));
                }
                (t28.exports = o).prototype._init = function(e) {
                    e.length > this.blockSize && (e = (new this.Hash).update(e).digest()), i(e.length <= this.blockSize);
                    for(var t = e.length; t < this.blockSize; t++)e.push(0);
                    for(t = 0; t < e.length; t++)e[t] ^= 54;
                    for(this.inner = (new this.Hash).update(e), t = 0; t < e.length; t++)e[t] ^= 106;
                    this.outer = (new this.Hash).update(e);
                }, o.prototype.update = function(e, t) {
                    return this.inner.update(e, t), this;
                }, o.prototype.digest = function(e) {
                    return this.outer.update(this.inner.digest()), this.outer.digest(e);
                };
            },
            {
                "./utils": 37,
                "minimalistic-assert": 41
            }
        ],
        29: [
            function(e51, t29, r21) {
                "use strict";
                var n12 = e51("./utils"), e51 = e51("./common"), y = n12.rotl32, m = n12.sum32, g = n12.sum32_3, v = n12.sum32_4, i12 = e51.BlockHash;
                function o11() {
                    if (!(this instanceof o11)) return new o11;
                    i12.call(this), this.h = [
                        1732584193,
                        4023233417,
                        2562383102,
                        271733878,
                        3285377520
                    ], this.endian = "little";
                }
                function b(e, t, r, n) {
                    return e <= 15 ? t ^ r ^ n : e <= 31 ? t & r | ~t & n : e <= 47 ? (t | ~r) ^ n : e <= 63 ? t & n | r & ~n : t ^ (r | ~n);
                }
                n12.inherits(o11, i12), (r21.ripemd160 = o11).blockSize = 512, o11.outSize = 160, o11.hmacStrength = 192, o11.padLength = 64, o11.prototype._update = function(e, t) {
                    for(var r, n = h = this.h[0], i = p = this.h[1], o = d = this.h[2], s = c = this.h[3], a = f = this.h[4], u = 0; u < 80; u++)var l = m(y(v(h, b(u, p, d, c), e[w[u] + t], (r = u) <= 15 ? 0 : r <= 31 ? 1518500249 : r <= 47 ? 1859775393 : r <= 63 ? 2400959708 : 2840853838), M[u]), f), h = f, f = c, c = y(d, 10), d = p, p = l, l = m(y(v(n, b(79 - u, i, o, s), e[_[u] + t], (r = u) <= 15 ? 1352829926 : r <= 31 ? 1548603684 : r <= 47 ? 1836072691 : r <= 63 ? 2053994217 : 0), A[u]), a), n = a, a = s, s = y(o, 10), o = i, i = l;
                    l = g(this.h[1], d, s), this.h[1] = g(this.h[2], c, a), this.h[2] = g(this.h[3], f, n), this.h[3] = g(this.h[4], h, i), this.h[4] = g(this.h[0], p, o), this.h[0] = l;
                }, o11.prototype._digest = function(e) {
                    return "hex" === e ? n12.toHex32(this.h, "little") : n12.split32(this.h, "little");
                };
                var w = [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    13,
                    14,
                    15,
                    7,
                    4,
                    13,
                    1,
                    10,
                    6,
                    15,
                    3,
                    12,
                    0,
                    9,
                    5,
                    2,
                    14,
                    11,
                    8,
                    3,
                    10,
                    14,
                    4,
                    9,
                    15,
                    8,
                    1,
                    2,
                    7,
                    0,
                    6,
                    13,
                    11,
                    5,
                    12,
                    1,
                    9,
                    11,
                    10,
                    0,
                    8,
                    12,
                    4,
                    13,
                    3,
                    7,
                    15,
                    14,
                    5,
                    6,
                    2,
                    4,
                    0,
                    5,
                    9,
                    7,
                    12,
                    2,
                    10,
                    14,
                    1,
                    3,
                    8,
                    11,
                    6,
                    15,
                    13
                ], _ = [
                    5,
                    14,
                    7,
                    0,
                    9,
                    2,
                    11,
                    4,
                    13,
                    6,
                    15,
                    8,
                    1,
                    10,
                    3,
                    12,
                    6,
                    11,
                    3,
                    7,
                    0,
                    13,
                    5,
                    10,
                    14,
                    15,
                    8,
                    12,
                    4,
                    9,
                    1,
                    2,
                    15,
                    5,
                    1,
                    3,
                    7,
                    14,
                    6,
                    9,
                    11,
                    8,
                    12,
                    2,
                    10,
                    0,
                    4,
                    13,
                    8,
                    6,
                    4,
                    1,
                    3,
                    11,
                    15,
                    0,
                    5,
                    12,
                    2,
                    13,
                    9,
                    7,
                    10,
                    14,
                    12,
                    15,
                    10,
                    4,
                    1,
                    5,
                    8,
                    7,
                    6,
                    2,
                    13,
                    14,
                    0,
                    3,
                    9,
                    11
                ], M = [
                    11,
                    14,
                    15,
                    12,
                    5,
                    8,
                    7,
                    9,
                    11,
                    13,
                    14,
                    15,
                    6,
                    7,
                    9,
                    8,
                    7,
                    6,
                    8,
                    13,
                    11,
                    9,
                    7,
                    15,
                    7,
                    12,
                    15,
                    9,
                    11,
                    7,
                    13,
                    12,
                    11,
                    13,
                    6,
                    7,
                    14,
                    9,
                    13,
                    15,
                    14,
                    8,
                    13,
                    6,
                    5,
                    12,
                    7,
                    5,
                    11,
                    12,
                    14,
                    15,
                    14,
                    15,
                    9,
                    8,
                    9,
                    14,
                    5,
                    6,
                    8,
                    6,
                    5,
                    12,
                    9,
                    15,
                    5,
                    11,
                    6,
                    8,
                    13,
                    12,
                    5,
                    12,
                    13,
                    14,
                    11,
                    8,
                    5,
                    6
                ], A = [
                    8,
                    9,
                    9,
                    11,
                    13,
                    15,
                    15,
                    5,
                    7,
                    7,
                    8,
                    11,
                    14,
                    14,
                    12,
                    6,
                    9,
                    13,
                    15,
                    7,
                    12,
                    8,
                    9,
                    11,
                    7,
                    7,
                    12,
                    7,
                    6,
                    15,
                    13,
                    11,
                    9,
                    7,
                    15,
                    11,
                    8,
                    6,
                    6,
                    14,
                    12,
                    13,
                    5,
                    14,
                    13,
                    13,
                    7,
                    5,
                    15,
                    5,
                    8,
                    11,
                    14,
                    14,
                    6,
                    14,
                    6,
                    9,
                    12,
                    9,
                    12,
                    5,
                    15,
                    8,
                    8,
                    5,
                    12,
                    9,
                    12,
                    5,
                    14,
                    6,
                    8,
                    13,
                    6,
                    5,
                    15,
                    13,
                    11,
                    11
                ];
            },
            {
                "./common": 27,
                "./utils": 37
            }
        ],
        30: [
            function(e, t, r) {
                "use strict";
                r.sha1 = e("./sha/1"), r.sha224 = e("./sha/224"), r.sha256 = e("./sha/256"), r.sha384 = e("./sha/384"), r.sha512 = e("./sha/512");
            },
            {
                "./sha/1": 31,
                "./sha/224": 32,
                "./sha/256": 33,
                "./sha/384": 34,
                "./sha/512": 35
            }
        ],
        31: [
            function(e, t, r) {
                arguments[4][14][0].apply(r, arguments);
            },
            {
                dup: 14
            }
        ],
        32: [
            function(e, t, r) {
                arguments[4][14][0].apply(r, arguments);
            },
            {
                dup: 14
            }
        ],
        33: [
            function(e52, t30, r22) {
                "use strict";
                var n13 = e52("../utils"), i13 = e52("../common"), o12 = e52("./common"), p = e52("minimalistic-assert"), y = n13.sum32, m = n13.sum32_4, g = n13.sum32_5, v = o12.ch32, b = o12.maj32, w = o12.s0_256, _ = o12.s1_256, M = o12.g0_256, A = o12.g1_256, s9 = i13.BlockHash, a7 = [
                    1116352408,
                    1899447441,
                    3049323471,
                    3921009573,
                    961987163,
                    1508970993,
                    2453635748,
                    2870763221,
                    3624381080,
                    310598401,
                    607225278,
                    1426881987,
                    1925078388,
                    2162078206,
                    2614888103,
                    3248222580,
                    3835390401,
                    4022224774,
                    264347078,
                    604807628,
                    770255983,
                    1249150122,
                    1555081692,
                    1996064986,
                    2554220882,
                    2821834349,
                    2952996808,
                    3210313671,
                    3336571891,
                    3584528711,
                    113926993,
                    338241895,
                    666307205,
                    773529912,
                    1294757372,
                    1396182291,
                    1695183700,
                    1986661051,
                    2177026350,
                    2456956037,
                    2730485921,
                    2820302411,
                    3259730800,
                    3345764771,
                    3516065817,
                    3600352804,
                    4094571909,
                    275423344,
                    430227734,
                    506948616,
                    659060556,
                    883997877,
                    958139571,
                    1322822218,
                    1537002063,
                    1747873779,
                    1955562222,
                    2024104815,
                    2227730452,
                    2361852424,
                    2428436474,
                    2756734187,
                    3204031479,
                    3329325298
                ];
                function u5() {
                    if (!(this instanceof u5)) return new u5;
                    s9.call(this), this.h = [
                        1779033703,
                        3144134277,
                        1013904242,
                        2773480762,
                        1359893119,
                        2600822924,
                        528734635,
                        1541459225
                    ], this.k = a7, this.W = new Array(64);
                }
                n13.inherits(u5, s9), (t30.exports = u5).blockSize = 512, u5.outSize = 256, u5.hmacStrength = 192, u5.padLength = 64, u5.prototype._update = function(e, t) {
                    for(var r = this.W, n = 0; n < 16; n++)r[n] = e[t + n];
                    for(; n < r.length; n++)r[n] = m(A(r[n - 2]), r[n - 7], M(r[n - 15]), r[n - 16]);
                    var i = this.h[0], o = this.h[1], s = this.h[2], a = this.h[3], u = this.h[4], l = this.h[5], h = this.h[6], f = this.h[7];
                    for(p(this.k.length === r.length), n = 0; n < r.length; n++)var c = g(f, _(u), v(u, l, h), this.k[n], r[n]), d = y(w(i), b(i, o, s)), f = h, h = l, l = u, u = y(a, c), a = s, s = o, o = i, i = y(c, d);
                    this.h[0] = y(this.h[0], i), this.h[1] = y(this.h[1], o), this.h[2] = y(this.h[2], s), this.h[3] = y(this.h[3], a), this.h[4] = y(this.h[4], u), this.h[5] = y(this.h[5], l), this.h[6] = y(this.h[6], h), this.h[7] = y(this.h[7], f);
                }, u5.prototype._digest = function(e) {
                    return "hex" === e ? n13.toHex32(this.h, "big") : n13.split32(this.h, "big");
                };
            },
            {
                "../common": 27,
                "../utils": 37,
                "./common": 36,
                "minimalistic-assert": 41
            }
        ],
        34: [
            function(e, t, r) {
                arguments[4][14][0].apply(r, arguments);
            },
            {
                dup: 14
            }
        ],
        35: [
            function(e53, t31, r23) {
                "use strict";
                var n14 = e53("../utils"), i14 = e53("../common"), T = e53("minimalistic-assert"), R = n14.rotr64_hi, O = n14.rotr64_lo, c2 = n14.shr64_hi, d2 = n14.shr64_lo, C = n14.sum64, L = n14.sum64_hi, B = n14.sum64_lo, p2 = n14.sum64_4_hi, y2 = n14.sum64_4_lo, D = n14.sum64_5_hi, U = n14.sum64_5_lo, o13 = i14.BlockHash, s10 = [
                    1116352408,
                    3609767458,
                    1899447441,
                    602891725,
                    3049323471,
                    3964484399,
                    3921009573,
                    2173295548,
                    961987163,
                    4081628472,
                    1508970993,
                    3053834265,
                    2453635748,
                    2937671579,
                    2870763221,
                    3664609560,
                    3624381080,
                    2734883394,
                    310598401,
                    1164996542,
                    607225278,
                    1323610764,
                    1426881987,
                    3590304994,
                    1925078388,
                    4068182383,
                    2162078206,
                    991336113,
                    2614888103,
                    633803317,
                    3248222580,
                    3479774868,
                    3835390401,
                    2666613458,
                    4022224774,
                    944711139,
                    264347078,
                    2341262773,
                    604807628,
                    2007800933,
                    770255983,
                    1495990901,
                    1249150122,
                    1856431235,
                    1555081692,
                    3175218132,
                    1996064986,
                    2198950837,
                    2554220882,
                    3999719339,
                    2821834349,
                    766784016,
                    2952996808,
                    2566594879,
                    3210313671,
                    3203337956,
                    3336571891,
                    1034457026,
                    3584528711,
                    2466948901,
                    113926993,
                    3758326383,
                    338241895,
                    168717936,
                    666307205,
                    1188179964,
                    773529912,
                    1546045734,
                    1294757372,
                    1522805485,
                    1396182291,
                    2643833823,
                    1695183700,
                    2343527390,
                    1986661051,
                    1014477480,
                    2177026350,
                    1206759142,
                    2456956037,
                    344077627,
                    2730485921,
                    1290863460,
                    2820302411,
                    3158454273,
                    3259730800,
                    3505952657,
                    3345764771,
                    106217008,
                    3516065817,
                    3606008344,
                    3600352804,
                    1432725776,
                    4094571909,
                    1467031594,
                    275423344,
                    851169720,
                    430227734,
                    3100823752,
                    506948616,
                    1363258195,
                    659060556,
                    3750685593,
                    883997877,
                    3785050280,
                    958139571,
                    3318307427,
                    1322822218,
                    3812723403,
                    1537002063,
                    2003034995,
                    1747873779,
                    3602036899,
                    1955562222,
                    1575990012,
                    2024104815,
                    1125592928,
                    2227730452,
                    2716904306,
                    2361852424,
                    442776044,
                    2428436474,
                    593698344,
                    2756734187,
                    3733110249,
                    3204031479,
                    2999351573,
                    3329325298,
                    3815920427,
                    3391569614,
                    3928383900,
                    3515267271,
                    566280711,
                    3940187606,
                    3454069534,
                    4118630271,
                    4000239992,
                    116418474,
                    1914138554,
                    174292421,
                    2731055270,
                    289380356,
                    3203993006,
                    460393269,
                    320620315,
                    685471733,
                    587496836,
                    852142971,
                    1086792851,
                    1017036298,
                    365543100,
                    1126000580,
                    2618297676,
                    1288033470,
                    3409855158,
                    1501505948,
                    4234509866,
                    1607167915,
                    987167468,
                    1816402316,
                    1246189591
                ];
                function a8() {
                    if (!(this instanceof a8)) return new a8;
                    o13.call(this), this.h = [
                        1779033703,
                        4089235720,
                        3144134277,
                        2227873595,
                        1013904242,
                        4271175723,
                        2773480762,
                        1595750129,
                        1359893119,
                        2917565137,
                        2600822924,
                        725511199,
                        528734635,
                        4215389547,
                        1541459225,
                        327033209
                    ], this.k = s10, this.W = new Array(160);
                }
                n14.inherits(a8, o13), (t31.exports = a8).blockSize = 1024, a8.outSize = 512, a8.hmacStrength = 192, a8.padLength = 128, a8.prototype._prepareBlock = function(e54, t32) {
                    for(var r24 = this.W, n15 = 0; n15 < 32; n15++)r24[n15] = e54[t32 + n15];
                    for(; n15 < r24.length; n15 += 2){
                        var i = function(e, t) {
                            var r = R(e, t, 19), n = R(t, e, 29), t = c2(e, t, 6), t = r ^ n ^ t;
                            t < 0 && (t += 4294967296);
                            return t;
                        }(r24[n15 - 4], r24[n15 - 3]), o = function(e, t) {
                            var r = O(e, t, 19), n = O(t, e, 29), t = d2(e, t, 6), t = r ^ n ^ t;
                            t < 0 && (t += 4294967296);
                            return t;
                        }(r24[n15 - 4], r24[n15 - 3]), s = r24[n15 - 14], a = r24[n15 - 13], u = function(e, t) {
                            var r = R(e, t, 1), n = R(e, t, 8), t = c2(e, t, 7), t = r ^ n ^ t;
                            t < 0 && (t += 4294967296);
                            return t;
                        }(r24[n15 - 30], r24[n15 - 29]), l = function(e, t) {
                            var r = O(e, t, 1), n = O(e, t, 8), t = d2(e, t, 7), t = r ^ n ^ t;
                            t < 0 && (t += 4294967296);
                            return t;
                        }(r24[n15 - 30], r24[n15 - 29]), h = r24[n15 - 32], f = r24[n15 - 31];
                        r24[n15] = p2(i, o, s, a, u, l, h, f), r24[n15 + 1] = y2(i, o, s, a, u, l, h, f);
                    }
                }, a8.prototype._update = function(e55, t33) {
                    this._prepareBlock(e55, t33);
                    var r25 = this.W, n16 = this.h[0], i = this.h[1], o = this.h[2], s = this.h[3], a = this.h[4], u = this.h[5], l = this.h[6], h = this.h[7], f = this.h[8], c = this.h[9], d = this.h[10], p = this.h[11], y = this.h[12], m = this.h[13], g = this.h[14], v = this.h[15];
                    T(this.k.length === r25.length);
                    for(var b = 0; b < r25.length; b += 2)var w = g, _ = v, M = function(e, t) {
                        var r = R(e, t, 14), n = R(e, t, 18), e = R(t, e, 9), e = r ^ n ^ e;
                        e < 0 && (e += 4294967296);
                        return e;
                    }(f, c), A = function(e, t) {
                        var r = O(e, t, 14), n = O(e, t, 18), e = O(t, e, 9), e = r ^ n ^ e;
                        e < 0 && (e += 4294967296);
                        return e;
                    }(f, c), E = function(e, t, r) {
                        r = e & t ^ ~e & r;
                        r < 0 && (r += 4294967296);
                        return r;
                    }(f, d, y), S = function(e, t, r) {
                        r = e & t ^ ~e & r;
                        r < 0 && (r += 4294967296);
                        return r;
                    }(c, p, m), k = this.k[b], N = this.k[b + 1], x = r25[b], P = r25[b + 1], I = D(w, _, M, A, E, S, k, N, x, P), x = U(w, _, M, A, E, S, k, N, x, P), w = function(e, t) {
                        var r = R(e, t, 28), n = R(t, e, 2), e = R(t, e, 7), e = r ^ n ^ e;
                        e < 0 && (e += 4294967296);
                        return e;
                    }(n16, i), _ = function(e, t) {
                        var r = O(e, t, 28), n = O(t, e, 2), e = O(t, e, 7), e = r ^ n ^ e;
                        e < 0 && (e += 4294967296);
                        return e;
                    }(n16, i), M = function(e, t, r) {
                        r = e & t ^ e & r ^ t & r;
                        r < 0 && (r += 4294967296);
                        return r;
                    }(n16, o, a), A = function(e, t, r) {
                        r = e & t ^ e & r ^ t & r;
                        r < 0 && (r += 4294967296);
                        return r;
                    }(i, s, u), P = L(w, _, M, A), A = B(w, _, M, A), g = y, v = m, y = d, m = p, d = f, p = c, f = L(l, h, I, x), c = B(h, h, I, x), l = a, h = u, a = o, u = s, o = n16, s = i, n16 = L(I, x, P, A), i = B(I, x, P, A);
                    C(this.h, 0, n16, i), C(this.h, 2, o, s), C(this.h, 4, a, u), C(this.h, 6, l, h), C(this.h, 8, f, c), C(this.h, 10, d, p), C(this.h, 12, y, m), C(this.h, 14, g, v);
                }, a8.prototype._digest = function(e) {
                    return "hex" === e ? n14.toHex32(this.h, "big") : n14.split32(this.h, "big");
                };
            },
            {
                "../common": 27,
                "../utils": 37,
                "minimalistic-assert": 41
            }
        ],
        36: [
            function(e56, t34, r26) {
                "use strict";
                var n17 = e56("../utils").rotr32;
                function i(e, t, r) {
                    return e & t ^ ~e & r;
                }
                function o(e, t, r) {
                    return e & t ^ e & r ^ t & r;
                }
                function s(e, t, r) {
                    return e ^ t ^ r;
                }
                r26.ft_1 = function(e, t, r, n) {
                    return 0 === e ? i(t, r, n) : 1 === e || 3 === e ? t ^ r ^ n : 2 === e ? o(t, r, n) : void 0;
                }, r26.ch32 = i, r26.maj32 = o, r26.p32 = s, r26.s0_256 = function(e) {
                    return n17(e, 2) ^ n17(e, 13) ^ n17(e, 22);
                }, r26.s1_256 = function(e) {
                    return n17(e, 6) ^ n17(e, 11) ^ n17(e, 25);
                }, r26.g0_256 = function(e) {
                    return n17(e, 7) ^ n17(e, 18) ^ e >>> 3;
                }, r26.g1_256 = function(e) {
                    return n17(e, 17) ^ n17(e, 19) ^ e >>> 10;
                };
            },
            {
                "../utils": 37
            }
        ],
        37: [
            function(e57, t35, r27) {
                "use strict";
                var u6 = e57("minimalistic-assert"), e57 = e57("inherits");
                function o14(e) {
                    return (e >>> 24 | e >>> 8 & 65280 | e << 8 & 16711680 | (255 & e) << 24) >>> 0;
                }
                function n18(e) {
                    return 1 === e.length ? "0" + e : e;
                }
                function s11(e) {
                    return 7 === e.length ? "0" + e : 6 === e.length ? "00" + e : 5 === e.length ? "000" + e : 4 === e.length ? "0000" + e : 3 === e.length ? "00000" + e : 2 === e.length ? "000000" + e : 1 === e.length ? "0000000" + e : e;
                }
                r27.inherits = e57, r27.toArray = function(e, t) {
                    if (Array.isArray(e)) return e.slice();
                    if (!e) return [];
                    var r = [];
                    if ("string" == typeof e) {
                        if (t) {
                            if ("hex" === t) for((e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e), n = 0; n < e.length; n += 2)r.push(parseInt(e[n] + e[n + 1], 16));
                        } else for(var n = 0; n < e.length; n++){
                            var i = e.charCodeAt(n), o = i >> 8, i = 255 & i;
                            o ? r.push(o, i) : r.push(i);
                        }
                    } else for(n = 0; n < e.length; n++)r[n] = 0 | e[n];
                    return r;
                }, r27.toHex = function(e) {
                    for(var t = "", r = 0; r < e.length; r++)t += n18(e[r].toString(16));
                    return t;
                }, r27.htonl = o14, r27.toHex32 = function(e, t) {
                    for(var r = "", n = 0; n < e.length; n++){
                        var i = e[n];
                        r += s11((i = "little" === t ? o14(i) : i).toString(16));
                    }
                    return r;
                }, r27.zero2 = n18, r27.zero8 = s11, r27.join32 = function(e, t, r, n) {
                    u6((r -= t) % 4 == 0);
                    for(var i = new Array(r / 4), o = 0, s = t; o < i.length; o++, s += 4){
                        var a = "big" === n ? e[s] << 24 | e[s + 1] << 16 | e[s + 2] << 8 | e[s + 3] : e[s + 3] << 24 | e[s + 2] << 16 | e[s + 1] << 8 | e[s];
                        i[o] = a >>> 0;
                    }
                    return i;
                }, r27.split32 = function(e, t) {
                    for(var r = new Array(4 * e.length), n = 0, i = 0; n < e.length; n++, i += 4){
                        var o = e[n];
                        "big" === t ? (r[i] = o >>> 24, r[i + 1] = o >>> 16 & 255, r[i + 2] = o >>> 8 & 255, r[i + 3] = 255 & o) : (r[i + 3] = o >>> 24, r[i + 2] = o >>> 16 & 255, r[i + 1] = o >>> 8 & 255, r[i] = 255 & o);
                    }
                    return r;
                }, r27.rotr32 = function(e, t) {
                    return e >>> t | e << 32 - t;
                }, r27.rotl32 = function(e, t) {
                    return e << t | e >>> 32 - t;
                }, r27.sum32 = function(e, t) {
                    return e + t >>> 0;
                }, r27.sum32_3 = function(e, t, r) {
                    return e + t + r >>> 0;
                }, r27.sum32_4 = function(e, t, r, n) {
                    return e + t + r + n >>> 0;
                }, r27.sum32_5 = function(e, t, r, n, i) {
                    return e + t + r + n + i >>> 0;
                }, r27.sum64 = function(e, t, r, n) {
                    var i = e[t], o = n + e[t + 1] >>> 0;
                    e[t] = (o < n ? 1 : 0) + r + i >>> 0, e[t + 1] = o;
                }, r27.sum64_hi = function(e, t, r, n) {
                    return (t + n >>> 0 < t ? 1 : 0) + e + r >>> 0;
                }, r27.sum64_lo = function(e, t, r, n) {
                    return t + n >>> 0;
                }, r27.sum64_4_hi = function(e, t, r, n, i, o, s, a) {
                    var u = 0, l = t;
                    return u += (l = t + n >>> 0) < t ? 1 : 0, u += (l = l + o >>> 0) < o ? 1 : 0, e + r + i + s + (u += (l = l + a >>> 0) < a ? 1 : 0) >>> 0;
                }, r27.sum64_4_lo = function(e, t, r, n, i, o, s, a) {
                    return t + n + o + a >>> 0;
                }, r27.sum64_5_hi = function(e, t, r, n, i, o, s, a, u, l) {
                    var h = 0, f = t;
                    return h += (f = t + n >>> 0) < t ? 1 : 0, h += (f = f + o >>> 0) < o ? 1 : 0, h += (f = f + a >>> 0) < a ? 1 : 0, e + r + i + s + u + (h += (f = f + l >>> 0) < l ? 1 : 0) >>> 0;
                }, r27.sum64_5_lo = function(e, t, r, n, i, o, s, a, u, l) {
                    return t + n + o + a + l >>> 0;
                }, r27.rotr64_hi = function(e, t, r) {
                    return (t << 32 - r | e >>> r) >>> 0;
                }, r27.rotr64_lo = function(e, t, r) {
                    return (e << 32 - r | t >>> r) >>> 0;
                }, r27.shr64_hi = function(e, t, r) {
                    return e >>> r;
                }, r27.shr64_lo = function(e, t, r) {
                    return (e << 32 - r | t >>> r) >>> 0;
                };
            },
            {
                inherits: 39,
                "minimalistic-assert": 41
            }
        ],
        38: [
            function(e58, t36, r28) {
                "use strict";
                var n19 = e58("hash.js"), o = e58("minimalistic-crypto-utils"), i15 = e58("minimalistic-assert");
                function s(e) {
                    if (!(this instanceof s)) return new s(e);
                    this.hash = e.hash, this.predResist = !!e.predResist, this.outLen = this.hash.outSize, this.minEntropy = e.minEntropy || this.hash.hmacStrength, this._reseed = null, this.reseedInterval = null, this.K = null, this.V = null;
                    var t = o.toArray(e.entropy, e.entropyEnc || "hex"), r = o.toArray(e.nonce, e.nonceEnc || "hex"), e = o.toArray(e.pers, e.persEnc || "hex");
                    i15(t.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._init(t, r, e);
                }
                (t36.exports = s).prototype._init = function(e, t, r) {
                    r = e.concat(t).concat(r);
                    this.K = new Array(this.outLen / 8), this.V = new Array(this.outLen / 8);
                    for(var n = 0; n < this.V.length; n++)this.K[n] = 0, this.V[n] = 1;
                    this._update(r), this._reseed = 1, this.reseedInterval = 281474976710656;
                }, s.prototype._hmac = function() {
                    return new n19.hmac(this.hash, this.K);
                }, s.prototype._update = function(e) {
                    var t = this._hmac().update(this.V).update([
                        0
                    ]);
                    e && (t = t.update(e)), this.K = t.digest(), this.V = this._hmac().update(this.V).digest(), e && (this.K = this._hmac().update(this.V).update([
                        1
                    ]).update(e).digest(), this.V = this._hmac().update(this.V).digest());
                }, s.prototype.reseed = function(e, t, r, n) {
                    "string" != typeof t && (n = r, r = t, t = null), e = o.toArray(e, t), r = o.toArray(r, n), i15(e.length >= this.minEntropy / 8, "Not enough entropy. Minimum is: " + this.minEntropy + " bits"), this._update(e.concat(r || [])), this._reseed = 1;
                }, s.prototype.generate = function(e, t, r, n) {
                    if (this._reseed > this.reseedInterval) throw new Error("Reseed is required");
                    "string" != typeof t && (n = r, r = t, t = null), r && (r = o.toArray(r, n || "hex"), this._update(r));
                    for(var i = []; i.length < e;)this.V = this._hmac().update(this.V).digest(), i = i.concat(this.V);
                    n = i.slice(0, e);
                    return this._update(r), this._reseed++, o.encode(n, t);
                };
            },
            {
                "hash.js": 26,
                "minimalistic-assert": 41,
                "minimalistic-crypto-utils": 42
            }
        ],
        39: [
            function(e59, t37, r29) {
                "function" == typeof Object.create ? t37.exports = function(e, t) {
                    t && (e.super_ = t, e.prototype = Object.create(t.prototype, {
                        constructor: {
                            value: e,
                            enumerable: !1,
                            writable: !0,
                            configurable: !0
                        }
                    }));
                } : t37.exports = function(e, t) {
                    var r;
                    t && (e.super_ = t, (r = function() {}).prototype = t.prototype, e.prototype = new r, e.prototype.constructor = e);
                };
            },
            {}
        ],
        40: [
            function(e60, _2, t38) {
                (function(b2, w2) {
                    (function() {
                        !function() {
                            for(var e61 = "object" == typeof window ? window : {}, t39 = !(e61 = !e61.JS_SHA3_NO_NODE_JS && "object" == typeof b2 && b2.versions && b2.versions.node ? w2 : e61).JS_SHA3_NO_COMMON_JS && "object" == typeof _2 && _2.exports, u7 = "0123456789abcdef".split(""), h3 = [
                                0,
                                8,
                                16,
                                24
                            ], Q = [
                                1,
                                0,
                                32898,
                                0,
                                32906,
                                2147483648,
                                2147516416,
                                2147483648,
                                32907,
                                0,
                                2147483649,
                                0,
                                2147516545,
                                2147483648,
                                32777,
                                2147483648,
                                138,
                                0,
                                136,
                                0,
                                2147516425,
                                0,
                                2147483658,
                                0,
                                2147516555,
                                0,
                                139,
                                2147483648,
                                32905,
                                2147483648,
                                32771,
                                2147483648,
                                32770,
                                2147483648,
                                128,
                                2147483648,
                                32778,
                                0,
                                2147483658,
                                2147483648,
                                2147516545,
                                2147483648,
                                32896,
                                2147483648,
                                2147483649,
                                0,
                                2147516424,
                                2147483648
                            ], r30 = [
                                224,
                                256,
                                384,
                                512
                            ], o15 = [
                                "hex",
                                "buffer",
                                "arrayBuffer",
                                "array"
                            ], s12 = function(t, r, n) {
                                return function(e) {
                                    return new g2(t, r, t).update(e)[n]();
                                };
                            }, a9 = function(r, n, i) {
                                return function(e, t) {
                                    return new g2(r, n, t).update(e)[i]();
                                };
                            }, n20 = function(e62, t) {
                                var r = s12(e62, t, "hex");
                                r.create = function() {
                                    return new g2(e62, t, e62);
                                }, r.update = function(e) {
                                    return r.create().update(e);
                                };
                                for(var n = 0; n < o15.length; ++n){
                                    var i = o15[n];
                                    r[i] = s12(e62, t, i);
                                }
                                return r;
                            }, i16 = [
                                {
                                    name: "keccak",
                                    padding: [
                                        1,
                                        256,
                                        65536,
                                        16777216
                                    ],
                                    bits: r30,
                                    createMethod: n20
                                },
                                {
                                    name: "sha3",
                                    padding: [
                                        6,
                                        1536,
                                        393216,
                                        100663296
                                    ],
                                    bits: r30,
                                    createMethod: n20
                                },
                                {
                                    name: "shake",
                                    padding: [
                                        31,
                                        7936,
                                        2031616,
                                        520093696
                                    ],
                                    bits: [
                                        128,
                                        256
                                    ],
                                    createMethod: function(t40, r) {
                                        var n = a9(t40, r, "hex");
                                        n.create = function(e) {
                                            return new g2(t40, r, e);
                                        }, n.update = function(e, t) {
                                            return n.create(t).update(e);
                                        };
                                        for(var e63 = 0; e63 < o15.length; ++e63){
                                            var i = o15[e63];
                                            n[i] = a9(t40, r, i);
                                        }
                                        return n;
                                    }
                                }
                            ], l4 = {}, f3 = [], c3 = 0; c3 < i16.length; ++c3)for(var d3 = i16[c3], p3 = d3.bits, y3 = 0; y3 < p3.length; ++y3){
                                var m = d3.name + "_" + p3[y3];
                                f3.push(m), l4[m] = d3.createMethod(p3[y3], d3.padding);
                            }
                            function g2(e, t, r) {
                                this.blocks = [], this.s = [], this.padding = t, this.outputBits = r, this.reset = !0, this.block = 0, this.start = 0, this.blockCount = 1600 - (e << 1) >> 5, this.byteCount = this.blockCount << 2, this.outputBlocks = r >> 5, this.extraBytes = (31 & r) >> 3;
                                for(var n = 0; n < 50; ++n)this.s[n] = 0;
                            }
                            g2.prototype.update = function(e) {
                                for(var t, r, n = "string" != typeof e, i = (e = n && e.constructor === ArrayBuffer ? new Uint8Array(e) : e).length, o = this.blocks, s = this.byteCount, a = this.blockCount, u = 0, l = this.s; u < i;){
                                    if (this.reset) for(this.reset = !1, o[0] = this.block, t = 1; t < a + 1; ++t)o[t] = 0;
                                    if (n) for(t = this.start; u < i && t < s; ++u)o[t >> 2] |= e[u] << h3[3 & t++];
                                    else for(t = this.start; u < i && t < s; ++u)(r = e.charCodeAt(u)) < 128 ? o[t >> 2] |= r << h3[3 & t++] : (r < 2048 ? o[t >> 2] |= (192 | r >> 6) << h3[3 & t++] : (r < 55296 || 57344 <= r ? o[t >> 2] |= (224 | r >> 12) << h3[3 & t++] : (r = 65536 + ((1023 & r) << 10 | 1023 & e.charCodeAt(++u)), o[t >> 2] |= (240 | r >> 18) << h3[3 & t++], o[t >> 2] |= (128 | r >> 12 & 63) << h3[3 & t++]), o[t >> 2] |= (128 | r >> 6 & 63) << h3[3 & t++]), o[t >> 2] |= (128 | 63 & r) << h3[3 & t++]);
                                    if (s <= (this.lastByteIndex = t)) {
                                        for(this.start = t - s, this.block = o[a], t = 0; t < a; ++t)l[t] ^= o[t];
                                        v2(l), this.reset = !0;
                                    } else this.start = t;
                                }
                                return this;
                            }, g2.prototype.finalize = function() {
                                var e = this.blocks, t = this.lastByteIndex, r = this.blockCount, n = this.s;
                                if (e[t >> 2] |= this.padding[3 & t], this.lastByteIndex === this.byteCount) for(e[0] = e[r], t = 1; t < r + 1; ++t)e[t] = 0;
                                for(e[r - 1] |= 2147483648, t = 0; t < r; ++t)n[t] ^= e[t];
                                v2(n);
                            }, g2.prototype.toString = g2.prototype.hex = function() {
                                this.finalize();
                                for(var e, t = this.blockCount, r = this.s, n = this.outputBlocks, i = this.extraBytes, o = 0, s = 0, a = ""; s < n;){
                                    for(o = 0; o < t && s < n; ++o, ++s)e = r[o], a += u7[e >> 4 & 15] + u7[15 & e] + u7[e >> 12 & 15] + u7[e >> 8 & 15] + u7[e >> 20 & 15] + u7[e >> 16 & 15] + u7[e >> 28 & 15] + u7[e >> 24 & 15];
                                    s % t == 0 && (v2(r), o = 0);
                                }
                                return i && (e = r[o], 0 < i && (a += u7[e >> 4 & 15] + u7[15 & e]), 1 < i && (a += u7[e >> 12 & 15] + u7[e >> 8 & 15]), 2 < i && (a += u7[e >> 20 & 15] + u7[e >> 16 & 15])), a;
                            }, g2.prototype.arrayBuffer = function() {
                                this.finalize();
                                for(var e = this.blockCount, t = this.s, r = this.outputBlocks, n = this.extraBytes, i = 0, o = 0, s = this.outputBits >> 3, a = n ? new ArrayBuffer(r + 1 << 2) : new ArrayBuffer(s), u = new Uint32Array(a); o < r;){
                                    for(i = 0; i < e && o < r; ++i, ++o)u[o] = t[i];
                                    o % e == 0 && v2(t);
                                }
                                return n && (u[i] = t[i], a = a.slice(0, s)), a;
                            }, g2.prototype.buffer = g2.prototype.arrayBuffer, g2.prototype.digest = g2.prototype.array = function() {
                                this.finalize();
                                for(var e, t, r = this.blockCount, n = this.s, i = this.outputBlocks, o = this.extraBytes, s = 0, a = 0, u = []; a < i;){
                                    for(s = 0; s < r && a < i; ++s, ++a)t = n[s], u[e = a << 2] = 255 & t, u[e + 1] = t >> 8 & 255, u[e + 2] = t >> 16 & 255, u[e + 3] = t >> 24 & 255;
                                    a % r == 0 && v2(n);
                                }
                                return o && (e = a << 2, t = n[s], 0 < o && (u[e] = 255 & t), 1 < o && (u[e + 1] = t >> 8 & 255), 2 < o && (u[e + 2] = t >> 16 & 255)), u;
                            };
                            var v2 = function(e) {
                                for(var t, r, n, i, o, s, a, u, l, h, f, c, d, p, y, m, g, v, b, w, _, M, A, E, S, k, N, x, P, I, T, R, O, C, L, B, D, U, F, j, G, H, z, V, K, q, W, Z, J, X, $ = 0; $ < 48; $ += 2)N = e[0] ^ e[10] ^ e[20] ^ e[30] ^ e[40], x = e[1] ^ e[11] ^ e[21] ^ e[31] ^ e[41], j = e[2] ^ e[12] ^ e[22] ^ e[32] ^ e[42], F = e[3] ^ e[13] ^ e[23] ^ e[33] ^ e[43], R = e[4] ^ e[14] ^ e[24] ^ e[34] ^ e[44], T = e[5] ^ e[15] ^ e[25] ^ e[35] ^ e[45], q = e[6] ^ e[16] ^ e[26] ^ e[36] ^ e[46], K = e[7] ^ e[17] ^ e[27] ^ e[37] ^ e[47], d = e[8] ^ e[18] ^ e[28] ^ e[38] ^ e[48], h = (p = e[9] ^ e[19] ^ e[29] ^ e[39] ^ e[49]) ^ (F << 1 | j >>> 31), e[0] ^= l = d ^ (j << 1 | F >>> 31), e[1] ^= h, e[10] ^= l, e[11] ^= h, e[20] ^= l, e[21] ^= h, e[30] ^= l, e[31] ^= h, e[40] ^= l, e[41] ^= h, h = x ^ (T << 1 | R >>> 31), e[2] ^= l = N ^ (R << 1 | T >>> 31), e[3] ^= h, e[12] ^= l, e[13] ^= h, e[22] ^= l, e[23] ^= h, e[32] ^= l, e[33] ^= h, e[42] ^= l, e[43] ^= h, h = F ^ (K << 1 | q >>> 31), e[4] ^= l = j ^ (q << 1 | K >>> 31), e[5] ^= h, e[14] ^= l, e[15] ^= h, e[24] ^= l, e[25] ^= h, e[34] ^= l, e[35] ^= h, e[44] ^= l, e[45] ^= h, h = T ^ (p << 1 | d >>> 31), e[6] ^= l = R ^ (d << 1 | p >>> 31), e[7] ^= h, e[16] ^= l, e[17] ^= h, e[26] ^= l, e[27] ^= h, e[36] ^= l, e[37] ^= h, e[46] ^= l, e[47] ^= h, h = K ^ (x << 1 | N >>> 31), e[8] ^= l = q ^ (N << 1 | x >>> 31), e[9] ^= h, e[18] ^= l, e[19] ^= h, e[28] ^= l, e[29] ^= h, e[38] ^= l, e[39] ^= h, e[48] ^= l, e[49] ^= h, t = e[0], r = e[1], O = e[11] << 4 | e[10] >>> 28, C = e[10] << 4 | e[11] >>> 28, y = e[20] << 3 | e[21] >>> 29, m = e[21] << 3 | e[20] >>> 29, W = e[31] << 9 | e[30] >>> 23, Z = e[30] << 9 | e[31] >>> 23, P = e[40] << 18 | e[41] >>> 14, I = e[41] << 18 | e[40] >>> 14, _ = e[2] << 1 | e[3] >>> 31, M = e[3] << 1 | e[2] >>> 31, n = e[13] << 12 | e[12] >>> 20, i = e[12] << 12 | e[13] >>> 20, L = e[22] << 10 | e[23] >>> 22, B = e[23] << 10 | e[22] >>> 22, g = e[33] << 13 | e[32] >>> 19, v = e[32] << 13 | e[33] >>> 19, J = e[42] << 2 | e[43] >>> 30, X = e[43] << 2 | e[42] >>> 30, G = e[5] << 30 | e[4] >>> 2, H = e[4] << 30 | e[5] >>> 2, A = e[14] << 6 | e[15] >>> 26, E = e[15] << 6 | e[14] >>> 26, o = e[25] << 11 | e[24] >>> 21, s = e[24] << 11 | e[25] >>> 21, D = e[34] << 15 | e[35] >>> 17, U = e[35] << 15 | e[34] >>> 17, b = e[45] << 29 | e[44] >>> 3, w = e[44] << 29 | e[45] >>> 3, f = e[6] << 28 | e[7] >>> 4, c = e[7] << 28 | e[6] >>> 4, z = e[17] << 23 | e[16] >>> 9, V = e[16] << 23 | e[17] >>> 9, S = e[26] << 25 | e[27] >>> 7, k = e[27] << 25 | e[26] >>> 7, a = e[36] << 21 | e[37] >>> 11, u = e[37] << 21 | e[36] >>> 11, F = e[47] << 24 | e[46] >>> 8, j = e[46] << 24 | e[47] >>> 8, T = e[8] << 27 | e[9] >>> 5, R = e[9] << 27 | e[8] >>> 5, d = e[18] << 20 | e[19] >>> 12, p = e[19] << 20 | e[18] >>> 12, K = e[29] << 7 | e[28] >>> 25, q = e[28] << 7 | e[29] >>> 25, N = e[38] << 8 | e[39] >>> 24, x = e[39] << 8 | e[38] >>> 24, l = e[48] << 14 | e[49] >>> 18, h = e[49] << 14 | e[48] >>> 18, e[0] = t ^ ~n & o, e[1] = r ^ ~i & s, e[10] = f ^ ~d & y, e[11] = c ^ ~p & m, e[20] = _ ^ ~A & S, e[21] = M ^ ~E & k, e[30] = T ^ ~O & L, e[31] = R ^ ~C & B, e[40] = G ^ ~z & K, e[41] = H ^ ~V & q, e[2] = n ^ ~o & a, e[3] = i ^ ~s & u, e[12] = d ^ ~y & g, e[13] = p ^ ~m & v, e[22] = A ^ ~S & N, e[23] = E ^ ~k & x, e[32] = O ^ ~L & D, e[33] = C ^ ~B & U, e[42] = z ^ ~K & W, e[43] = V ^ ~q & Z, e[4] = o ^ ~a & l, e[5] = s ^ ~u & h, e[14] = y ^ ~g & b, e[15] = m ^ ~v & w, e[24] = S ^ ~N & P, e[25] = k ^ ~x & I, e[34] = L ^ ~D & F, e[35] = B ^ ~U & j, e[44] = K ^ ~W & J, e[45] = q ^ ~Z & X, e[6] = a ^ ~l & t, e[7] = u ^ ~h & r, e[16] = g ^ ~b & f, e[17] = v ^ ~w & c, e[26] = N ^ ~P & _, e[27] = x ^ ~I & M, e[36] = D ^ ~F & T, e[37] = U ^ ~j & R, e[46] = W ^ ~J & G, e[47] = Z ^ ~X & H, e[8] = l ^ ~t & n, e[9] = h ^ ~r & i, e[18] = b ^ ~f & d, e[19] = w ^ ~c & p, e[28] = P ^ ~_ & A, e[29] = I ^ ~M & E, e[38] = F ^ ~T & O, e[39] = j ^ ~R & C, e[48] = J ^ ~G & z, e[49] = X ^ ~H & V, e[0] ^= Q[$], e[1] ^= Q[$ + 1];
                            };
                            if (t39) _2.exports = l4;
                            else for(c3 = 0; c3 < f3.length; ++c3)e61[f3[c3]] = l4[f3[c3]];
                        }();
                    }).call(this);
                }).call(this, e60("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {
                _process: 43
            }
        ],
        41: [
            function(e64, t41, r31) {
                function n(e, t) {
                    if (!e) throw new Error(t || "Assertion failed");
                }
                (t41.exports = n).equal = function(e, t, r) {
                    if (e != t) throw new Error(r || "Assertion failed: " + e + " != " + t);
                };
            },
            {}
        ],
        42: [
            function(e65, t42, r32) {
                "use strict";
                function n21(e) {
                    return 1 === e.length ? "0" + e : e;
                }
                function i17(e) {
                    for(var t = "", r = 0; r < e.length; r++)t += n21(e[r].toString(16));
                    return t;
                }
                r32.toArray = function(e, t) {
                    if (Array.isArray(e)) return e.slice();
                    if (!e) return [];
                    var r = [];
                    if ("string" != typeof e) {
                        for(var n = 0; n < e.length; n++)r[n] = 0 | e[n];
                        return r;
                    }
                    if ("hex" === t) {
                        (e = e.replace(/[^a-z0-9]+/gi, "")).length % 2 != 0 && (e = "0" + e);
                        for(n = 0; n < e.length; n += 2)r.push(parseInt(e[n] + e[n + 1], 16));
                    } else for(n = 0; n < e.length; n++){
                        var i = e.charCodeAt(n), o = i >> 8, i = 255 & i;
                        o ? r.push(o, i) : r.push(i);
                    }
                    return r;
                }, r32.zero2 = n21, r32.toHex = i17, r32.encode = function(e, t) {
                    return "hex" === t ? i17(e) : e;
                };
            },
            {}
        ],
        43: [
            function(e, t, r) {
                t.exports = {
                    browser: !0
                };
            },
            {}
        ],
        44: [
            function(e66, r33, i18) {
                (function(C) {
                    (function() {
                        function l5(e68) {
                            var m = [
                                1116352408,
                                1899447441,
                                3049323471,
                                3921009573,
                                961987163,
                                1508970993,
                                2453635748,
                                2870763221,
                                3624381080,
                                310598401,
                                607225278,
                                1426881987,
                                1925078388,
                                2162078206,
                                2614888103,
                                3248222580,
                                3835390401,
                                4022224774,
                                264347078,
                                604807628,
                                770255983,
                                1249150122,
                                1555081692,
                                1996064986,
                                2554220882,
                                2821834349,
                                2952996808,
                                3210313671,
                                3336571891,
                                3584528711,
                                113926993,
                                338241895,
                                666307205,
                                773529912,
                                1294757372,
                                1396182291,
                                1695183700,
                                1986661051,
                                2177026350,
                                2456956037,
                                2730485921,
                                2820302411,
                                3259730800,
                                3345764771,
                                3516065817,
                                3600352804,
                                4094571909,
                                275423344,
                                430227734,
                                506948616,
                                659060556,
                                883997877,
                                958139571,
                                1322822218,
                                1537002063,
                                1747873779,
                                1955562222,
                                2024104815,
                                2227730452,
                                2361852424,
                                2428436474,
                                2756734187,
                                3204031479,
                                3329325298
                            ], g = 1779033703, v = 3144134277, b = 1013904242, w = 2773480762, _ = 1359893119, M = 2600822924, A = 528734635, E = 1541459225, S = new Array(64);
                            function t44(e) {
                                for(var t = 0, r = e.length; 64 <= r;){
                                    for(var n, i, o, s, a = g, u = v, l = b, h = w, f = _, c = M, d = A, p = E, y = 0; y < 16; y++)S[y] = (255 & e[i = t + 4 * y]) << 24 | (255 & e[i + 1]) << 16 | (255 & e[i + 2]) << 8 | 255 & e[i + 3];
                                    for(y = 16; y < 64; y++)o = ((n = S[y - 2]) >>> 17 | n << 15) ^ (n >>> 19 | n << 13) ^ n >>> 10, n = S[y - 15], S[y] = (o + S[y - 7] | 0) + ((s = (n >>> 7 | n << 25) ^ (n >>> 18 | n << 14) ^ n >>> 3) + S[y - 16] | 0) | 0;
                                    for(y = 0; y < 64; y++)o = (((f >>> 6 | f << 26) ^ (f >>> 11 | f << 21) ^ (f >>> 25 | f << 7)) + (f & c ^ ~f & d) | 0) + (p + (m[y] + S[y] | 0) | 0) | 0, s = ((a >>> 2 | a << 30) ^ (a >>> 13 | a << 19) ^ (a >>> 22 | a << 10)) + (a & u ^ a & l ^ u & l) | 0, p = d, d = c, c = f, f = h + o | 0, h = l, l = u, u = a, a = o + s | 0;
                                    g = g + a | 0, v = v + u | 0, b = b + l | 0, w = w + h | 0, _ = _ + f | 0, M = M + c | 0, A = A + d | 0, E = E + p | 0, t += 64, r -= 64;
                                }
                            }
                            t44(e68);
                            var r34, n23 = e68.length % 64, i19 = e68.length / 536870912 | 0, o16 = e68.length << 3, s14 = n23 < 56 ? 56 : 120, a10 = e68.slice(e68.length - n23, e68.length);
                            for(a10.push(128), r34 = 1 + n23; r34 < s14; r34++)a10.push(0);
                            return a10.push(i19 >>> 24 & 255), a10.push(i19 >>> 16 & 255), a10.push(i19 >>> 8 & 255), a10.push(i19 >>> 0 & 255), a10.push(o16 >>> 24 & 255), a10.push(o16 >>> 16 & 255), a10.push(o16 >>> 8 & 255), a10.push(o16 >>> 0 & 255), t44(a10), [
                                g >>> 24 & 255,
                                g >>> 16 & 255,
                                g >>> 8 & 255,
                                g >>> 0 & 255,
                                v >>> 24 & 255,
                                v >>> 16 & 255,
                                v >>> 8 & 255,
                                v >>> 0 & 255,
                                b >>> 24 & 255,
                                b >>> 16 & 255,
                                b >>> 8 & 255,
                                b >>> 0 & 255,
                                w >>> 24 & 255,
                                w >>> 16 & 255,
                                w >>> 8 & 255,
                                w >>> 0 & 255,
                                _ >>> 24 & 255,
                                _ >>> 16 & 255,
                                _ >>> 8 & 255,
                                _ >>> 0 & 255,
                                M >>> 24 & 255,
                                M >>> 16 & 255,
                                M >>> 8 & 255,
                                M >>> 0 & 255,
                                A >>> 24 & 255,
                                A >>> 16 & 255,
                                A >>> 8 & 255,
                                A >>> 0 & 255,
                                E >>> 24 & 255,
                                E >>> 16 & 255,
                                E >>> 8 & 255,
                                E >>> 0 & 255
                            ];
                        }
                        function x(e69, t, r) {
                            e69 = e69.length <= 64 ? e69 : l5(e69);
                            for(var n = 64 + t.length + 4, i = new Array(n), o = new Array(64), s = [], a = 0; a < 64; a++)i[a] = 54;
                            for(a = 0; a < e69.length; a++)i[a] ^= e69[a];
                            for(a = 0; a < t.length; a++)i[64 + a] = t[a];
                            for(a = n - 4; a < n; a++)i[a] = 0;
                            for(a = 0; a < 64; a++)o[a] = 92;
                            for(a = 0; a < e69.length; a++)o[a] ^= e69[a];
                            function u() {
                                for(var e = n - 1; n - 4 <= e; e--){
                                    if (i[e]++, i[e] <= 255) return;
                                    i[e] = 0;
                                }
                            }
                            for(; 32 <= r;)u(), s = s.concat(l5(o.concat(l5(i)))), r -= 32;
                            return 0 < r && (u(), s = s.concat(l5(o.concat(l5(i))).slice(0, r))), s;
                        }
                        function P(e70, t45, r35, n, i) {
                            var o;
                            for(T(e70, 16 * (2 * r35 - 1), i, 0, 16), o = 0; o < 2 * r35; o++)I(e70, 16 * o, i, 16), function(e, t) {
                                T(e, 0, t, 0, 16);
                                for(var r = 8; 0 < r; r -= 2)t[4] ^= s13(t[0] + t[12], 7), t[8] ^= s13(t[4] + t[0], 9), t[12] ^= s13(t[8] + t[4], 13), t[0] ^= s13(t[12] + t[8], 18), t[9] ^= s13(t[5] + t[1], 7), t[13] ^= s13(t[9] + t[5], 9), t[1] ^= s13(t[13] + t[9], 13), t[5] ^= s13(t[1] + t[13], 18), t[14] ^= s13(t[10] + t[6], 7), t[2] ^= s13(t[14] + t[10], 9), t[6] ^= s13(t[2] + t[14], 13), t[10] ^= s13(t[6] + t[2], 18), t[3] ^= s13(t[15] + t[11], 7), t[7] ^= s13(t[3] + t[15], 9), t[11] ^= s13(t[7] + t[3], 13), t[15] ^= s13(t[11] + t[7], 18), t[1] ^= s13(t[0] + t[3], 7), t[2] ^= s13(t[1] + t[0], 9), t[3] ^= s13(t[2] + t[1], 13), t[0] ^= s13(t[3] + t[2], 18), t[6] ^= s13(t[5] + t[4], 7), t[7] ^= s13(t[6] + t[5], 9), t[4] ^= s13(t[7] + t[6], 13), t[5] ^= s13(t[4] + t[7], 18), t[11] ^= s13(t[10] + t[9], 7), t[8] ^= s13(t[11] + t[10], 9), t[9] ^= s13(t[8] + t[11], 13), t[10] ^= s13(t[9] + t[8], 18), t[12] ^= s13(t[15] + t[14], 7), t[13] ^= s13(t[12] + t[15], 9), t[14] ^= s13(t[13] + t[12], 13), t[15] ^= s13(t[14] + t[13], 18);
                                for(r = 0; r < 16; ++r)e[r] += t[r];
                            }(i, n), T(i, 0, e70, t45 + 16 * o, 16);
                            for(o = 0; o < r35; o++)T(e70, t45 + 2 * o * 16, e70, 16 * o, 16);
                            for(o = 0; o < r35; o++)T(e70, t45 + 16 * (2 * o + 1), e70, 16 * (o + r35), 16);
                        }
                        function s13(e, t) {
                            return e << t | e >>> 32 - t;
                        }
                        function I(e, t, r, n) {
                            for(var i = 0; i < n; i++)r[i] ^= e[t + i];
                        }
                        function T(e, t, r, n, i) {
                            for(; i--;)r[n++] = e[t++];
                        }
                        function n22(e) {
                            if (e && "number" == typeof e.length) {
                                for(var t = 0; t < e.length; t++){
                                    if ("number" != typeof e[t]) return;
                                    var r = parseInt(e[t]);
                                    if (r != e[t] || r < 0 || 256 <= r) return;
                                }
                                return 1;
                            }
                        }
                        function R(e, t) {
                            var r = parseInt(e);
                            if (e != r) throw new Error("invalid " + t);
                            return r;
                        }
                        function e67(i, e71, o, s, a, u, l) {
                            if (!l) throw new Error("missing callback");
                            if (o = R(o, "N"), s = R(s, "r"), a = R(a, "p"), u = R(u, "dkLen"), 0 === o || 0 != (o & o - 1)) throw new Error("N must be power of 2");
                            if (O / 128 / s < o) throw new Error("N too large");
                            if (O / 128 / a < s) throw new Error("r too large");
                            if (!n22(i)) throw new Error("password must be an array or buffer");
                            if (i = Array.prototype.slice.call(i), !n22(e71)) throw new Error("salt must be an array or buffer");
                            e71 = Array.prototype.slice.call(e71);
                            for(var h = x(i, e71, 128 * a * s), f = new Uint32Array(32 * a * s), t46 = 0; t46 < f.length; t46++){
                                var r = 4 * t46;
                                f[t46] = (255 & h[3 + r]) << 24 | (255 & h[2 + r]) << 16 | (255 & h[1 + r]) << 8 | (255 & h[0 + r]) << 0;
                            }
                            var c, d, p = new Uint32Array(64 * s), y = new Uint32Array(32 * s * o), m = 32 * s, g = new Uint32Array(16), v = new Uint32Array(16), b = a * o * 2, w = 0, _ = null, M = !1, A = 0, E = 0, S = parseInt(1e3 / s), k = void 0 !== C ? C : setTimeout, N = function() {
                                if (M) return l(new Error("cancelled"), w / b);
                                switch(A){
                                    case 0:
                                        T(f, d = 32 * E * s, p, 0, m), A = 1, c = 0;
                                    case 1:
                                        S < (t = o - c) && (t = S);
                                        for(var e = 0; e < t; e++)T(p, 0, y, (c + e) * m, m), P(p, m, s, g, v);
                                        if (c += t, w += t, (n = parseInt(1e3 * w / b)) !== _) {
                                            if (M = l(null, w / b)) break;
                                            _ = n;
                                        }
                                        if (c < o) break;
                                        c = 0, A = 2;
                                    case 2:
                                        var t;
                                        S < (t = o - c) && (t = S);
                                        for(e = 0; e < t; e++){
                                            var r = p[16 * (2 * s - 1)] & o - 1;
                                            I(y, r * m, p, m), P(p, m, s, g, v);
                                        }
                                        if (c += t, w += t, (n = parseInt(1e3 * w / b)) !== _) {
                                            if (M = l(null, w / b)) break;
                                            _ = n;
                                        }
                                        if (c < o) break;
                                        if (T(p, 0, f, d, m), ++E < a) {
                                            A = 0;
                                            break;
                                        }
                                        h = [];
                                        for(e = 0; e < f.length; e++)h.push(f[e] >> 0 & 255), h.push(f[e] >> 8 & 255), h.push(f[e] >> 16 & 255), h.push(f[e] >> 24 & 255);
                                        var n = x(i, h, u);
                                        return l(null, 1, n);
                                }
                                k(N);
                            };
                            N();
                        }
                        var t43, O;
                        t43 = this, O = 2147483647, void 0 !== i18 ? r33.exports = e67 : t43 && (t43.scrypt && (t43._scrypt = t43.scrypt), t43.scrypt = e67);
                    }).call(this);
                }).call(this, e66("timers").setImmediate);
            },
            {
                timers: 46
            }
        ],
        45: [
            function(e72, t47, r36) {
                (function(y, e73, t48) {
                    (function() {
                        !function(r, n) {
                            var t49, i, o, s, a, u, l, e74;
                            function h(e) {
                                return i[t49] = f.apply(n, e), t49++;
                            }
                            function f(e) {
                                var t = [].slice.call(arguments, 1);
                                return function() {
                                    "function" == typeof e ? e.apply(n, t) : new Function("" + e)();
                                };
                            }
                            function c(e) {
                                if (o) setTimeout(f(c, e), 0);
                                else {
                                    var t = i[e];
                                    if (t) {
                                        o = !0;
                                        try {
                                            t();
                                        } finally{
                                            d(e), o = !1;
                                        }
                                    }
                                }
                            }
                            function d(e) {
                                delete i[e];
                            }
                            function p() {
                                function e75(e) {
                                    e.source === r && "string" == typeof e.data && 0 === e.data.indexOf(t) && c(+e.data.slice(t.length));
                                }
                                var t = "setImmediate$" + Math.random() + "$";
                                r.addEventListener ? r.addEventListener("message", e75, !1) : r.attachEvent("onmessage", e75), a = function() {
                                    var e = h(arguments);
                                    return r.postMessage(t + e, "*"), e;
                                };
                            }
                            r.setImmediate || (t49 = 1, o = (i = {}, false), s = r.document, e74 = (e74 = Object.getPrototypeOf && Object.getPrototypeOf(r)) && e74.setTimeout ? e74 : r, "[object process]" === ({}).toString.call(r.process) ? a = function() {
                                var e = h(arguments);
                                return y.nextTick(f(c, e)), e;
                            } : !function() {
                                if (r.postMessage && !r.importScripts) {
                                    var e = !0, t = r.onmessage;
                                    return r.onmessage = function() {
                                        e = !1;
                                    }, r.postMessage("", "*"), r.onmessage = t, e;
                                }
                            }() ? a = r.MessageChannel ? ((l = new MessageChannel).port1.onmessage = function(e) {
                                c(e.data);
                            }, function() {
                                var e = h(arguments);
                                return l.port2.postMessage(e), e;
                            }) : s && "onreadystatechange" in s.createElement("script") ? (u = s.documentElement, function() {
                                var e = h(arguments), t = s.createElement("script");
                                return t.onreadystatechange = function() {
                                    c(e), t.onreadystatechange = null, u.removeChild(t), t = null;
                                }, u.appendChild(t), e;
                            }) : function() {
                                var e = h(arguments);
                                return setTimeout(f(c, e), 0), e;
                            } : p(), e74.setImmediate = a, e74.clearImmediate = d);
                        }("undefined" == typeof self ? void 0 === e73 ? this : e73 : self);
                    }).call(this);
                }).call(this, e72("_process"), "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {}, e72("timers").clearImmediate);
            },
            {
                _process: 43,
                timers: 46
            }
        ],
        46: [
            function(e76, t, r) {
                (function(e) {
                    (function() {
                        t.exports = {
                            setImmediate: e.setImmediate
                        };
                    }).call(this);
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {}
        ],
        47: [
            function(e77, i, t50) {
                (function(n) {
                    (function() {
                        var e78, t51, r;
                        n.crypto && crypto.getRandomValues && (e78 = new Uint8Array(16), t51 = function() {
                            return crypto.getRandomValues(e78), e78;
                        }), t51 || (r = new Array(16), t51 = function() {
                            for(var e, t = 0; t < 16; t++)0 == (3 & t) && (e = 4294967296 * Math.random()), r[t] = e >>> ((3 & t) << 3) & 255;
                            return r;
                        }), i.exports = t51;
                    }).call(this);
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {}
        ],
        48: [
            function(e79, t52, r37) {
                for(var s15 = e79("./rng"), n24 = [], o17 = {}, i20 = 0; i20 < 256; i20++)n24[i20] = (i20 + 256).toString(16).substr(1), o17[n24[i20]] = i20;
                function h(e, t) {
                    t = t || 0;
                    return n24[e[t++]] + n24[e[t++]] + n24[e[t++]] + n24[e[t++]] + "-" + n24[e[t++]] + n24[e[t++]] + "-" + n24[e[t++]] + n24[e[t++]] + "-" + n24[e[t++]] + n24[e[t++]] + "-" + n24[e[t++]] + n24[e[t++]] + n24[e[t++]] + n24[e[t++]] + n24[e[t++]] + n24[e[t++]];
                }
                var e79 = s15(), f = [
                    1 | e79[0],
                    e79[1],
                    e79[2],
                    e79[3],
                    e79[4],
                    e79[5]
                ], c = 16383 & (e79[6] << 8 | e79[7]), d = 0, p = 0;
                function a11(e, t, r) {
                    var n = t && r || 0;
                    "string" == typeof e && (t = "binary" == e ? new Array(16) : null, e = null);
                    var i = (e = e || {}).random || (e.rng || s15)();
                    if (i[6] = 15 & i[6] | 64, i[8] = 63 & i[8] | 128, t) for(var o = 0; o < 16; o++)t[n + o] = i[o];
                    return t || h(i);
                }
                e79 = a11;
                e79.v1 = function(e, t, r) {
                    var n = t && r || 0, i = t || [], o = void 0 !== (e = e || {}).clockseq ? e.clockseq : c, s = void 0 !== e.msecs ? e.msecs : (new Date).getTime(), a = void 0 !== e.nsecs ? e.nsecs : p + 1;
                    if ((r = s - d + (a - p) / 1e4) < 0 && void 0 === e.clockseq && (o = o + 1 & 16383), 1e4 <= (a = (r < 0 || d < s) && void 0 === e.nsecs ? 0 : a)) throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
                    d = s, c = o, a = (1e4 * (268435455 & (s += 122192928e5)) + (p = a)) % 4294967296, i[n++] = a >>> 24 & 255, i[n++] = a >>> 16 & 255, i[n++] = a >>> 8 & 255, i[n++] = 255 & a, s = s / 4294967296 * 1e4 & 268435455, i[n++] = s >>> 8 & 255, i[n++] = 255 & s, i[n++] = s >>> 24 & 15 | 16, i[n++] = s >>> 16 & 255, i[n++] = o >>> 8 | 128, i[n++] = 255 & o;
                    for(var u = e.node || f, l = 0; l < 6; l++)i[n + l] = u[l];
                    return t || h(i);
                }, e79.v4 = a11, e79.parse = function(e80, t, r) {
                    var n = t && r || 0, i = 0;
                    for(t = t || [], e80.toLowerCase().replace(/[0-9a-f]{2}/g, function(e) {
                        i < 16 && (t[n + i++] = o17[e]);
                    }); i < 16;)t[n + i++] = 0;
                    return t;
                }, e79.unparse = h, t52.exports = e79;
            },
            {
                "./rng": 47
            }
        ],
        49: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                try {
                    t.exports.XMLHttpRequest = XMLHttpRequest;
                } catch (e81) {
                    console.log("Warning: XMLHttpRequest is not defined"), t.exports.XMLHttpRequest = null;
                }
            },
            {}
        ],
        50: [
            function(e82, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                var n = e82("../utils/properties"), e82 = (i.isProvider = function(e) {
                    return n.isType(e, "Provider");
                }, i);
                function i() {
                    n.setType(this, "Provider");
                }
                r.Provider = e82;
            },
            {
                "../utils/properties": 74
            }
        ],
        51: [
            function(e83, t53, r38) {
                "use strict";
                var n25, i21 = this && this.__extends || (n25 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n25(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o18 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r38, "__esModule", {
                    value: !0
                });
                var s16 = e83("../utils/address"), a12 = e83("../utils/bignumber"), u8 = e83("../utils/bytes"), l = e83("../constants"), h = e83("../utils/hash"), f = e83("../utils/networks"), c = e83("../utils/properties"), d = e83("../utils/rlp"), p = e83("../utils/transaction"), y = e83("../utils/utf8"), m = e83("../utils/web"), g = o18(e83("../errors")), v = e83("./abstract-provider");
                function b(e, t) {
                    var r, n = {};
                    for(r in e)try {
                        var i = e[r](t[r]);
                        void 0 !== i && (n[r] = i);
                    } catch (e84) {
                        throw e84.checkKey = r, e84.checkValue = t[r], e84;
                    }
                    return n;
                }
                function w(t, r) {
                    return function(e) {
                        return null == e ? r : t(e);
                    };
                }
                function _(r) {
                    return function(e85) {
                        if (!Array.isArray(e85)) throw new Error("not an array");
                        var t = [];
                        return e85.forEach(function(e) {
                            t.push(r(e));
                        }), t;
                    };
                }
                function M(e, t) {
                    return "string" == typeof e && (t || "0x" === e.substring(0, 2) || (e = "0x" + e), 32 === u8.hexDataLength(e)) ? e.toLowerCase() : (g.throwError("invalid hash", g.INVALID_ARGUMENT, {
                        arg: "hash",
                        value: e
                    }), null);
                }
                function A(e) {
                    return a12.bigNumberify(e).toNumber();
                }
                function E(e) {
                    if (!u8.isHexString(e)) throw new Error("invalid uint256");
                    for(; e.length < 66;)e = "0x0" + e.substring(2);
                    return e;
                }
                function S(e) {
                    if (null == e) return "latest";
                    if ("earliest" === e) return "0x0";
                    if ("latest" === e || "pending" === e) return e;
                    if ("number" == typeof e) return u8.hexStripZeros(u8.hexlify(e));
                    if (u8.isHexString(e)) return u8.hexStripZeros(e);
                    throw new Error("invalid blockTag");
                }
                var k = {
                    hash: M,
                    blockHash: w(M, null),
                    blockNumber: w(A, null),
                    transactionIndex: w(A, null),
                    confirmations: w(A, null),
                    from: s16.getAddress,
                    gasPrice: a12.bigNumberify,
                    gasLimit: a12.bigNumberify,
                    to: w(s16.getAddress, null),
                    value: a12.bigNumberify,
                    nonce: A,
                    data: u8.hexlify,
                    r: w(E),
                    s: w(E),
                    v: w(A),
                    creates: w(s16.getAddress, null),
                    raw: w(u8.hexlify)
                };
                function N(e) {
                    null != e.gas && null == e.gasLimit && (e.gasLimit = e.gas), e.to && a12.bigNumberify(e.to).isZero() && (e.to = "0x0000000000000000000000000000000000000000"), null != e.input && null == e.data && (e.data = e.input), null == e.to && null == e.creates && (e.creates = s16.getContractAddress(e)), e.raw || e.v && e.r && e.s && (r = [
                        u8.stripZeros(u8.hexlify(e.nonce)),
                        u8.stripZeros(u8.hexlify(e.gasPrice)),
                        u8.stripZeros(u8.hexlify(e.gasLimit)),
                        e.to || "0x",
                        u8.stripZeros(u8.hexlify(e.value || "0x")),
                        u8.hexlify(e.data || "0x"),
                        u8.stripZeros(u8.hexlify(e.v || "0x")),
                        u8.stripZeros(u8.hexlify(e.r)),
                        u8.stripZeros(u8.hexlify(e.s))
                    ], e.raw = d.encode(r));
                    var t = b(k, e), r = e.networkId;
                    return null != e.chainId && null == r && null == t.v && (r = e.chainId), "number" != typeof (r = u8.isHexString(r) ? a12.bigNumberify(r).toNumber() : r) && null != t.v && ((r = (t.v - 35) / 2) < 0 && (r = 0), r = parseInt(r)), t.networkId = r = "number" != typeof r ? 0 : r, null == t.chainId && null != r && (t.chainId = r), t.blockHash && "x" === t.blockHash.replace(/0/g, "") && (t.blockHash = null), t;
                }
                var x = {
                    hash: M,
                    parentHash: M,
                    number: A,
                    timestamp: A,
                    nonce: w(u8.hexlify),
                    difficulty: function(e) {
                        e = a12.bigNumberify(e);
                        try {
                            return e.toNumber();
                        } catch (e86) {}
                        return null;
                    },
                    gasLimit: a12.bigNumberify,
                    gasUsed: a12.bigNumberify,
                    miner: s16.getAddress,
                    extraData: u8.hexlify,
                    transactions: w(_(M))
                }, P = c.shallowCopy(x);
                function I(e, t) {
                    return null != e.author && null == e.miner && (e.miner = e.author), b(t ? P : x, e);
                }
                P.transactions = w(_(N));
                var T = {
                    from: w(s16.getAddress),
                    nonce: w(A),
                    gasLimit: w(a12.bigNumberify),
                    gasPrice: w(a12.bigNumberify),
                    to: w(s16.getAddress),
                    value: w(a12.bigNumberify),
                    data: w(u8.hexlify)
                };
                function R(e) {
                    return b(T, e);
                }
                var O = {
                    transactionLogIndex: w(A),
                    transactionIndex: A,
                    blockNumber: A,
                    transactionHash: M,
                    address: s16.getAddress,
                    topics: _(M),
                    data: u8.hexlify,
                    logIndex: A,
                    blockHash: M
                };
                var C = {
                    to: w(s16.getAddress, null),
                    from: w(s16.getAddress, null),
                    contractAddress: w(s16.getAddress, null),
                    transactionIndex: A,
                    root: w(M),
                    gasUsed: a12.bigNumberify,
                    logsBloom: w(u8.hexlify),
                    blockHash: M,
                    transactionHash: M,
                    logs: _(function(e) {
                        return b(O, e);
                    }),
                    blockNumber: A,
                    confirmations: w(A, null),
                    cumulativeGasUsed: a12.bigNumberify,
                    status: w(A)
                };
                function L(e87) {
                    return Array.isArray(e87) ? e87.forEach(function(e) {
                        L(e);
                    }) : null != e87 && M(e87), e87;
                }
                var B = {
                    fromBlock: w(S, void 0),
                    toBlock: w(S, void 0),
                    address: w(s16.getAddress, void 0),
                    topics: w(L, void 0)
                }, D = {
                    blockHash: w(M, void 0),
                    address: w(s16.getAddress, void 0),
                    topics: w(L, void 0)
                };
                var U, F, j = {
                    blockNumber: w(A),
                    blockHash: w(M),
                    transactionIndex: A,
                    removed: w(function(e) {
                        if ("boolean" == typeof e) return e;
                        if ("string" == typeof e) {
                            if ("true" === e) return !0;
                            if ("false" === e) return !1;
                        }
                        throw new Error("invaid boolean - " + e);
                    }),
                    address: s16.getAddress,
                    data: (U = u8.hexlify, F = "0x", function(e) {
                        return e ? U(e) : F;
                    }),
                    topics: _(M),
                    transactionHash: M,
                    logIndex: A
                };
                function G(e) {
                    return b(j, e);
                }
                function H(e88) {
                    return e88.map(function(e89) {
                        return "string" == typeof e89 ? e89 : Array.isArray(e89) ? (e89.forEach(function(e) {
                            null !== e && 32 !== u8.hexDataLength(e) && g.throwError("invalid topic", g.INVALID_ARGUMENT, {
                                argument: "topic",
                                value: e
                            });
                        }), e89.join(",")) : null === e89 ? "" : g.throwError("invalid topic value", g.INVALID_ARGUMENT, {
                            argument: "topic",
                            value: e89
                        });
                    }).join("&");
                }
                function z(e) {
                    if ("string" == typeof e) {
                        if (20 === u8.hexDataLength(e)) return "address:" + s16.getAddress(e);
                        if (e = e.toLowerCase(), 32 === u8.hexDataLength(e)) return "tx:" + e;
                        if (-1 === e.indexOf(":")) return e;
                    } else {
                        if (Array.isArray(e)) return "filter::" + H(e);
                        if (e && "object" == typeof e) return "filter:" + (e.address || "") + ":" + H(e.topics || []);
                    }
                    throw new Error("invalid event - " + e);
                }
                function V() {
                    return (new Date).getTime();
                }
                var K, i21 = (K = v.Provider, i21(q, K), q.prototype._doPoll = function() {
                    var u = this;
                    this.getBlockNumber().then(function(s) {
                        if (u.polling && (u._setFastBlockNumber(s), s !== u._lastBlockNumber)) {
                            -2 === u._emitted.block && (u._emitted.block = s - 1);
                            for(var e90 = u._emitted.block + 1; e90 <= s; e90++)u.emit("block", e90);
                            u._emitted.block !== s && (u._emitted.block = s, Object.keys(u._emitted).forEach(function(e) {
                                var t;
                                "block" === e || "pending" !== (t = u._emitted[e]) && 12 < s - t && delete u._emitted[e];
                            })), -2 === u._lastBlockNumber && (u._lastBlockNumber = s - 1);
                            var a = {}, t54 = {};
                            return u._events.forEach(function(e) {
                                t54[e.tag] = !0;
                            }), Object.keys(t54).forEach(function(e92) {
                                var t56 = e92.split(":");
                                switch(t56[0]){
                                    case "tx":
                                        var r = t56[1];
                                        u.getTransactionReceipt(r).then(function(e) {
                                            return e && null != e.blockNumber && (u._emitted["t:" + r] = e.blockNumber, u.emit(r, e)), null;
                                        }).catch(function(e) {
                                            u.emit("error", e);
                                        });
                                        break;
                                    case "address":
                                        var n = t56[1];
                                        u._balances[n] && (a[n] = u._balances[n]), u.getBalance(n, "latest").then(function(e) {
                                            var t = u._balances[n];
                                            if (!t || !e.eq(t)) return u._balances[n] = e, u.emit(n, e), null;
                                        }).catch(function(e) {
                                            u.emit("error", e);
                                        });
                                        break;
                                    case "filter":
                                        var i = t56[2].split(/&/g).map(function(e93) {
                                            var t = e93.split(",");
                                            return 1 === t.length ? "" === t[0] ? null : e93 : t.map(function(e) {
                                                return "" === e ? null : e;
                                            });
                                        }), o = {
                                            address: t56[1],
                                            fromBlock: u._lastBlockNumber + 1,
                                            toBlock: s,
                                            topics: i
                                        };
                                        o.address || delete o.address, u.getLogs(o).then(function(e94) {
                                            if (0 !== e94.length) return e94.forEach(function(e) {
                                                u._emitted["b:" + e.blockHash] = e.blockNumber, u._emitted["t:" + e.transactionHash] = e.blockNumber, u.emit(o, e);
                                            }), null;
                                        }).catch(function(e) {
                                            u.emit("error", e);
                                        });
                                }
                            }), u._lastBlockNumber = s, u._balances = a, null;
                        }
                    }).catch(function(e) {}), this.doPoll();
                }, q.prototype.resetEventsBlock = function(e) {
                    this._lastBlockNumber = e - 1, this.polling && this._doPoll();
                }, Object.defineProperty(q.prototype, "network", {
                    get: function() {
                        return this._network;
                    },
                    enumerable: !0,
                    configurable: !0
                }), q.prototype.getNetwork = function() {
                    return this.ready;
                }, Object.defineProperty(q.prototype, "blockNumber", {
                    get: function() {
                        return this._fastBlockNumber;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(q.prototype, "polling", {
                    get: function() {
                        return null != this._poller;
                    },
                    set: function(e) {
                        var t = this;
                        setTimeout(function() {
                            e && !t._poller ? (t._poller = setInterval(t._doPoll.bind(t), t.pollingInterval), t._doPoll()) : !e && t._poller && (clearInterval(t._poller), t._poller = null);
                        }, 0);
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(q.prototype, "pollingInterval", {
                    get: function() {
                        return this._pollingInterval;
                    },
                    set: function(e) {
                        var t = this;
                        if ("number" != typeof e || e <= 0 || parseInt(String(e)) != e) throw new Error("invalid polling interval");
                        this._pollingInterval = e, this._poller && (clearInterval(this._poller), this._poller = setInterval(function() {
                            t._doPoll();
                        }, this._pollingInterval));
                    },
                    enumerable: !0,
                    configurable: !0
                }), q.prototype._getFastBlockNumber = function() {
                    var t = this, e95 = V();
                    return e95 - this._fastQueryDate > 2 * this._pollingInterval && (this._fastQueryDate = e95, this._fastBlockNumberPromise = this.getBlockNumber().then(function(e) {
                        return (null == t._fastBlockNumber || e > t._fastBlockNumber) && (t._fastBlockNumber = e), t._fastBlockNumber;
                    })), this._fastBlockNumberPromise;
                }, q.prototype._setFastBlockNumber = function(e) {
                    null != this._fastBlockNumber && e < this._fastBlockNumber || (this._fastQueryDate = V(), (null == this._fastBlockNumber || e > this._fastBlockNumber) && (this._fastBlockNumber = e, this._fastBlockNumberPromise = Promise.resolve(e)));
                }, q.prototype.waitForTransaction = function(n, i) {
                    var o = this;
                    return null == i && (i = 1), this.getTransactionReceipt(n).then(function(e96) {
                        return 0 === i || e96 && e96.confirmations >= i ? e96 : new Promise(function(t) {
                            var r = function(e) {
                                e.confirmations < i || (o.removeListener(n, r), t(e));
                            };
                            o.on(n, r);
                        });
                    });
                }, q.prototype.getBlockNumber = function() {
                    var r = this;
                    return this.ready.then(function() {
                        return r.perform("getBlockNumber", {}).then(function(e) {
                            var t = parseInt(e);
                            if (t != e) throw new Error("invalid response - getBlockNumber");
                            return r._setFastBlockNumber(t), t;
                        });
                    });
                }, q.prototype.getGasPrice = function() {
                    var e97 = this;
                    return this.ready.then(function() {
                        return e97.perform("getGasPrice", {}).then(function(e) {
                            return a12.bigNumberify(e);
                        });
                    });
                }, q.prototype.getBalance = function(e98, t57) {
                    var n = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            addressOrName: e98,
                            blockTag: t57
                        }).then(function(e99) {
                            var t = e99.addressOrName, r = e99.blockTag;
                            return n._getAddress(t).then(function(e100) {
                                e100 = {
                                    address: e100,
                                    blockTag: S(r)
                                };
                                return n.perform("getBalance", e100).then(function(e) {
                                    return a12.bigNumberify(e);
                                });
                            });
                        });
                    });
                }, q.prototype.getTransactionCount = function(e101, t58) {
                    var n = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            addressOrName: e101,
                            blockTag: t58
                        }).then(function(e102) {
                            var t = e102.addressOrName, r = e102.blockTag;
                            return n._getAddress(t).then(function(e103) {
                                e103 = {
                                    address: e103,
                                    blockTag: S(r)
                                };
                                return n.perform("getTransactionCount", e103).then(function(e) {
                                    return a12.bigNumberify(e).toNumber();
                                });
                            });
                        });
                    });
                }, q.prototype.getCode = function(e104, t59) {
                    var n = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            addressOrName: e104,
                            blockTag: t59
                        }).then(function(e105) {
                            var t = e105.addressOrName, r = e105.blockTag;
                            return n._getAddress(t).then(function(e106) {
                                e106 = {
                                    address: e106,
                                    blockTag: S(r)
                                };
                                return n.perform("getCode", e106).then(function(e) {
                                    return u8.hexlify(e);
                                });
                            });
                        });
                    });
                }, q.prototype.getStorageAt = function(e107, t60, r39) {
                    var i = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            addressOrName: e107,
                            position: t60,
                            blockTag: r39
                        }).then(function(e108) {
                            var t = e108.addressOrName, r = e108.position, n = e108.blockTag;
                            return i._getAddress(t).then(function(e109) {
                                e109 = {
                                    address: e109,
                                    blockTag: S(n),
                                    position: u8.hexStripZeros(u8.hexlify(r))
                                };
                                return i.perform("getStorageAt", e109).then(function(e) {
                                    return u8.hexlify(e);
                                });
                            });
                        });
                    });
                }, q.prototype.sendTransaction = function(e110) {
                    var r = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            signedTransaction: e110
                        }).then(function(e111) {
                            var t = e111.signedTransaction, e111 = {
                                signedTransaction: u8.hexlify(t)
                            };
                            return r.perform("sendTransaction", e111).then(function(e) {
                                return r._wrapTransaction(p.parse(t), e);
                            }, function(e) {
                                throw e.transaction = p.parse(t), e.transaction.hash && (e.transactionHash = e.transaction.hash), e;
                            });
                        });
                    });
                }, q.prototype._wrapTransaction = function(r, e112) {
                    var n = this;
                    if (null != e112 && 32 !== u8.hexDataLength(e112)) throw new Error("invalid response - sendTransaction");
                    var t61 = r;
                    return null != e112 && r.hash !== e112 && g.throwError("Transaction hash mismatch from Provider.sendTransaction.", g.UNKNOWN_ERROR, {
                        expectedHash: r.hash,
                        returnedHash: e112
                    }), t61.wait = function(t) {
                        return 0 !== t && (n._emitted["t:" + r.hash] = "pending"), n.waitForTransaction(r.hash, t).then(function(e) {
                            return null == e && 0 === t ? null : (n._emitted["t:" + r.hash] = e.blockNumber, 0 === e.status && g.throwError("transaction failed", g.CALL_EXCEPTION, {
                                transactionHash: r.hash,
                                transaction: r
                            }), e);
                        });
                    }, t61;
                }, q.prototype.call = function(e113, t62) {
                    var r = this, n = c.shallowCopy(e113);
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            blockTag: t62,
                            tx: n
                        }).then(function(e114) {
                            var t = e114.blockTag, e114 = e114.tx;
                            return r._resolveNames(e114, [
                                "to",
                                "from"
                            ]).then(function(e115) {
                                e115 = {
                                    blockTag: S(t),
                                    transaction: R(e115)
                                };
                                return r.perform("call", e115).then(function(e) {
                                    return u8.hexlify(e);
                                });
                            });
                        });
                    });
                }, q.prototype.estimateGas = function(e116) {
                    var t = this, r = {
                        to: e116.to,
                        from: e116.from,
                        data: e116.data,
                        gasPrice: e116.gasPrice,
                        value: e116.value
                    };
                    return this.ready.then(function() {
                        return c.resolveProperties(r).then(function(e117) {
                            return t._resolveNames(e117, [
                                "to",
                                "from"
                            ]).then(function(e118) {
                                e118 = {
                                    transaction: R(e118)
                                };
                                return t.perform("estimateGas", e118).then(function(e) {
                                    return a12.bigNumberify(e);
                                });
                            });
                        });
                    });
                }, q.prototype.getBlock = function(e119, i) {
                    var o = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            blockHashOrBlockTag: e119
                        }).then(function(e120) {
                            e120 = e120.blockHashOrBlockTag;
                            try {
                                var t = u8.hexlify(e120);
                                if (32 === u8.hexDataLength(t)) return m.poll(function() {
                                    return o.perform("getBlock", {
                                        blockHash: t,
                                        includeTransactions: !!i
                                    }).then(function(e) {
                                        return null == e ? null == o._emitted["b:" + t] ? null : void 0 : I(e, i);
                                    });
                                }, {
                                    onceBlock: o
                                });
                            } catch (e121) {}
                            try {
                                var r = -128, n = S(e120);
                                return u8.isHexString(n) && (r = parseInt(n.substring(2), 16)), m.poll(function() {
                                    return o.perform("getBlock", {
                                        blockTag: n,
                                        includeTransactions: !!i
                                    }).then(function(e) {
                                        return null == e ? r <= o._emitted.block ? void 0 : null : I(e, i);
                                    });
                                }, {
                                    onceBlock: o
                                });
                            } catch (e) {}
                            throw new Error("invalid block hash or block tag");
                        });
                    });
                }, q.prototype.getTransaction = function(e122) {
                    var n = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            transactionHash: e122
                        }).then(function(e123) {
                            var r = e123.transactionHash, t63 = {
                                transactionHash: M(r, !0)
                            };
                            return m.poll(function() {
                                return n.perform("getTransaction", t63).then(function(e124) {
                                    if (null == e124) return null == n._emitted["t:" + r] ? null : void 0;
                                    var t = q.checkTransactionResponse(e124);
                                    if (null == t.blockNumber) t.confirmations = 0;
                                    else if (null == t.confirmations) return n._getFastBlockNumber().then(function(e) {
                                        e = e - t.blockNumber + 1;
                                        return t.confirmations = e = e <= 0 ? 1 : e, n._wrapTransaction(t);
                                    });
                                    return n._wrapTransaction(t);
                                });
                            }, {
                                onceBlock: n
                            });
                        });
                    });
                }, q.prototype.getTransactionReceipt = function(e125) {
                    var i = this;
                    return this.ready.then(function() {
                        return c.resolveProperties({
                            transactionHash: e125
                        }).then(function(e126) {
                            var n = e126.transactionHash, t64 = {
                                transactionHash: M(n, !0)
                            };
                            return m.poll(function() {
                                return i.perform("getTransactionReceipt", t64).then(function(e127) {
                                    if (null == e127) return null == i._emitted["t:" + n] ? null : void 0;
                                    if (null != e127.blockHash) {
                                        var t65, r = ((e127 = b(C, t65 = e127)).logs.forEach(function(e, t) {
                                            null == e.transactionLogIndex && (e.transactionLogIndex = t);
                                        }), null != t65.status && (e127.byzantium = !0), e127);
                                        if (null == r.blockNumber) r.confirmations = 0;
                                        else if (null == r.confirmations) return i._getFastBlockNumber().then(function(e) {
                                            e = e - r.blockNumber + 1;
                                            return r.confirmations = e = e <= 0 ? 1 : e, r;
                                        });
                                        return r;
                                    }
                                });
                            }, {
                                onceBlock: i
                            });
                        });
                    });
                }, q.prototype.getLogs = function(e128) {
                    var t = this;
                    return this.ready.then(function() {
                        return c.resolveProperties(e128).then(function(e129) {
                            return t._resolveNames(e129, [
                                "address"
                            ]).then(function(e130) {
                                e130 = {
                                    filter: e130 && e130.blockHash ? b(D, e130) : b(B, e130)
                                };
                                return t.perform("getLogs", e130).then(function(e) {
                                    return _(G)(e);
                                });
                            });
                        });
                    });
                }, q.prototype.getEtherPrice = function() {
                    var e131 = this;
                    return this.ready.then(function() {
                        return e131.perform("getEtherPrice", {}).then(function(e) {
                            return e;
                        });
                    });
                }, q.prototype._getAddress = function(t) {
                    return this.resolveName(t).then(function(e) {
                        return null == e && g.throwError("ENS name not configured", g.UNSUPPORTED_OPERATION, {
                            operation: "resolveName(" + JSON.stringify(t) + ")"
                        }), e;
                    });
                }, q.prototype._resolveNames = function(e132, t67) {
                    var r = [], n = c.shallowCopy(e132);
                    return t67.forEach(function(t) {
                        null != n[t] && r.push(this._getAddress(n[t]).then(function(e) {
                            n[t] = e;
                        }));
                    }, this), Promise.all(r).then(function() {
                        return n;
                    });
                }, q.prototype._getResolver = function(r) {
                    var n = this;
                    return this.getNetwork().then(function(e133) {
                        e133.ensAddress || g.throwError("network does not support ENS", g.UNSUPPORTED_OPERATION, {
                            operation: "ENS",
                            network: e133.name
                        });
                        var t = "0x0178b8bf" + h.namehash(r).substring(2), t = {
                            to: e133.ensAddress,
                            data: t
                        };
                        return n.call(t).then(function(e) {
                            if (32 !== u8.hexDataLength(e)) return null;
                            e = s16.getAddress(u8.hexDataSlice(e, 12));
                            return e === l.AddressZero ? null : e;
                        });
                    });
                }, q.prototype.resolveName = function(t68) {
                    var r = this;
                    if (t68 instanceof Promise) return t68.then(function(e) {
                        return r.resolveName(e);
                    });
                    try {
                        return Promise.resolve(s16.getAddress(t68));
                    } catch (e134) {
                        if (u8.isHexString(t68)) throw e134;
                    }
                    var n = this, i = h.namehash(t68);
                    return this._getResolver(t68).then(function(e) {
                        if (null == e) return null;
                        var t = "0x3b3b57de" + i.substring(2);
                        return n.call({
                            to: e,
                            data: t
                        });
                    }).then(function(e) {
                        if (32 !== u8.hexDataLength(e)) return null;
                        e = s16.getAddress(u8.hexDataSlice(e, 12));
                        return e === l.AddressZero ? null : e;
                    });
                }, q.prototype.lookupAddress = function(n) {
                    var t69 = this;
                    if (n instanceof Promise) return n.then(function(e) {
                        return t69.lookupAddress(e);
                    });
                    var e135 = (n = s16.getAddress(n)).substring(2) + ".addr.reverse", r40 = h.namehash(e135), i = this;
                    return this._getResolver(e135).then(function(e) {
                        if (!e) return null;
                        var t = "0x691f3431" + r40.substring(2);
                        return i.call({
                            to: e,
                            data: t
                        });
                    }).then(function(e136) {
                        if (null == e136) return null;
                        if ((e136 = e136.substring(2)).length < 64) return null;
                        if ((e136 = e136.substring(64)).length < 64) return null;
                        var t = a12.bigNumberify("0x" + e136.substring(0, 64)).toNumber();
                        if (2 * t > (e136 = e136.substring(64)).length) return null;
                        var r = y.toUtf8String("0x" + e136.substring(0, 2 * t));
                        return i.resolveName(r).then(function(e) {
                            return e != n ? null : r;
                        });
                    });
                }, q.checkTransactionResponse = N, q.prototype.doPoll = function() {}, q.prototype.perform = function(e, t) {
                    return g.throwError(e + " not implemented", g.NOT_IMPLEMENTED, {
                        operation: e
                    }), null;
                }, q.prototype._startPending = function() {
                    g.warn("WARNING: this provider does not support pending events");
                }, q.prototype._stopPending = function() {}, q.prototype._addEventListener = function(e, t, r) {
                    this._events.push({
                        tag: z(e),
                        listener: t,
                        once: r
                    }), "pending" === e && this._startPending(), this.polling = !0;
                }, q.prototype.on = function(e, t) {
                    return this._addEventListener(e, t, !1), this;
                }, q.prototype.once = function(e, t) {
                    return this._addEventListener(e, t, !0), this;
                }, q.prototype.addEventListener = function(e, t) {
                    return this.on(e, t);
                }, q.prototype.emit = function(e137) {
                    for(var t = this, r = [], n = 1; n < arguments.length; n++)r[n - 1] = arguments[n];
                    var i = !1, o = z(e137);
                    return this._events = this._events.filter(function(e) {
                        return e.tag !== o || (setTimeout(function() {
                            e.listener.apply(t, r);
                        }, 0), i = !0, !e.once);
                    }), 0 === this.listenerCount() && (this.polling = !1), i;
                }, q.prototype.listenerCount = function(e138) {
                    if (!e138) return this._events.length;
                    var t = z(e138);
                    return this._events.filter(function(e) {
                        return e.tag === t;
                    }).length;
                }, q.prototype.listeners = function(e139) {
                    var t = z(e139);
                    return this._events.filter(function(e) {
                        return e.tag === t;
                    }).map(function(e) {
                        return e.listener;
                    });
                }, q.prototype.removeAllListeners = function(e140) {
                    var t;
                    return null == e140 ? (this._events = [], this._stopPending()) : (t = z(e140), this._events = this._events.filter(function(e) {
                        return e.tag !== t;
                    }), "pending" === e140 && this._stopPending()), 0 === this._events.length && (this.polling = !1), this;
                }, q.prototype.removeListener = function(e141, t) {
                    var r = !1, n = z(e141);
                    return this._events = this._events.filter(function(e) {
                        return e.tag !== n || e.listener != t || !!r || (r = !0, false);
                    }), "pending" === e141 && 0 === this.listenerCount("pending") && this._stopPending(), 0 === this.listenerCount() && (this.polling = !1), this;
                }, q);
                function q(e142) {
                    var t, r = K.call(this) || this;
                    return g.checkNew(r, v.Provider), e142 instanceof Promise ? (c.defineReadOnly(r, "ready", e142.then(function(e) {
                        return c.defineReadOnly(r, "_network", e), e;
                    })), r.ready.catch(function(e) {})) : (t = f.getNetwork(null == e142 ? "homestead" : e142)) ? (c.defineReadOnly(r, "_network", t), c.defineReadOnly(r, "ready", Promise.resolve(r._network))) : g.throwError("invalid network", g.INVALID_ARGUMENT, {
                        arg: "network",
                        value: e142
                    }), r._lastBlockNumber = -2, r._balances = {}, r._events = [], r._pollingInterval = 4e3, r._emitted = {
                        block: -2
                    }, r._fastQueryDate = 0, r;
                }
                r38.BaseProvider = i21, c.defineReadOnly(v.Provider, "inherits", c.inheritable(v.Provider));
            },
            {
                "../constants": 3,
                "../errors": 5,
                "../utils/address": 60,
                "../utils/bignumber": 63,
                "../utils/bytes": 64,
                "../utils/hash": 65,
                "../utils/networks": 72,
                "../utils/properties": 74,
                "../utils/rlp": 76,
                "../utils/transaction": 83,
                "../utils/utf8": 85,
                "../utils/web": 86,
                "./abstract-provider": 50
            }
        ],
        52: [
            function(e143, t70, r41) {
                "use strict";
                var n26, i22 = this && this.__extends || (n26 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n26(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o19 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r41, "__esModule", {
                    value: !0
                });
                var s17 = e143("./base-provider"), a13 = e143("../utils/bytes"), u9 = e143("../utils/properties"), l = e143("../utils/web"), h = o19(e143("../errors"));
                function f(e) {
                    var t, r, n = [];
                    for(t in e)null != e[t] && (r = a13.hexlify(e[t]), ({
                        gasLimit: !0,
                        gasPrice: !0,
                        nonce: !0,
                        value: !0
                    })[t] && (r = a13.hexStripZeros(r)), n.push(t + "=" + r));
                    return n.join("&");
                }
                function c(e) {
                    if (0 == e.status && ("No records found" === e.message || "No transactions found" === e.message)) return e.result;
                    if (1 == e.status && "OK" == e.message) return e.result;
                    var t = new Error("invalid response");
                    throw t.result = JSON.stringify(e), t;
                }
                function d(e) {
                    if ("2.0" != e.jsonrpc) throw (t = new Error("invalid response")).result = JSON.stringify(e), t;
                    if (e.error) {
                        var t = new Error(e.error.message || "unknown error");
                        throw e.error.code && (t.code = e.error.code), e.error.data && (t.data = e.error.data), t;
                    }
                    return e.result;
                }
                function p(e) {
                    if ("pending" === e) throw new Error("pending not supported");
                    return "latest" === e ? e : parseInt(e.substring(2), 16);
                }
                var y, m = "8FG3JMZ9USS4NTA6YKEKHINU56SEPPVBJR", i22 = (y = s17.BaseProvider, i22(g, y), g.prototype.perform = function(e144, t71) {
                    var r42 = this, n27 = this.baseUrl, i = "";
                    this.apiKey && (i += "&apikey=" + this.apiKey);
                    function o(t, e145) {
                        return l.fetchJson(t, null, e145 || d).then(function(e) {
                            return r42.emit("debug", {
                                action: "perform",
                                request: t,
                                response: e,
                                provider: r42
                            }), e;
                        });
                    }
                    var s;
                    switch(e144){
                        case "getBlockNumber":
                            return o(n27 += "/api?module=proxy&action=eth_blockNumber" + i);
                        case "getGasPrice":
                            return o(n27 += "/api?module=proxy&action=eth_gasPrice" + i);
                        case "getBalance":
                            return n27 += "/api?module=account&action=balance&address=" + t71.address, o(n27 += "&tag=" + t71.blockTag + i, c);
                        case "getTransactionCount":
                            return n27 += "/api?module=proxy&action=eth_getTransactionCount&address=" + t71.address, o(n27 += "&tag=" + t71.blockTag + i);
                        case "getCode":
                            return n27 += "/api?module=proxy&action=eth_getCode&address=" + t71.address, o(n27 += "&tag=" + t71.blockTag + i, d);
                        case "getStorageAt":
                            return n27 += "/api?module=proxy&action=eth_getStorageAt&address=" + t71.address, n27 += "&position=" + t71.position, o(n27 += "&tag=" + t71.blockTag + i, d);
                        case "sendTransaction":
                            return n27 += "/api?module=proxy&action=eth_sendRawTransaction&hex=" + t71.signedTransaction, o(n27 += i).catch(function(e) {
                                throw e.responseText && (0 <= e.responseText.toLowerCase().indexOf("insufficient funds") && h.throwError("insufficient funds", h.INSUFFICIENT_FUNDS, {}), 0 <= e.responseText.indexOf("same hash was already imported") && h.throwError("nonce has already been used", h.NONCE_EXPIRED, {}), 0 <= e.responseText.indexOf("another transaction with same nonce") && h.throwError("replacement fee too low", h.REPLACEMENT_UNDERPRICED, {})), e;
                            });
                        case "getBlock":
                            return t71.blockTag ? (n27 += "/api?module=proxy&action=eth_getBlockByNumber&tag=" + t71.blockTag, t71.includeTransactions ? n27 += "&boolean=true" : n27 += "&boolean=false", o(n27 += i)) : Promise.reject(new Error("getBlock by blockHash not implemeneted"));
                        case "getTransaction":
                            return n27 += "/api?module=proxy&action=eth_getTransactionByHash&txhash=" + t71.transactionHash, o(n27 += i);
                        case "getTransactionReceipt":
                            return n27 += "/api?module=proxy&action=eth_getTransactionReceipt&txhash=" + t71.transactionHash, o(n27 += i);
                        case "call":
                            return (n27 += "/api?module=proxy&action=eth_call" + (s = (s = f(t71.transaction)) && "&" + s), "latest" !== t71.blockTag) ? Promise.reject(new Error("EtherscanProvider does not support blockTag for call")) : o(n27 += i);
                        case "estimateGas":
                            return n27 += "/api?module=proxy&action=eth_estimateGas&" + (s = (s = f(t71.transaction)) && "&" + s), o(n27 += i);
                        case "getLogs":
                            n27 += "/api?module=logs&action=getLogs";
                            try {
                                if (t71.filter.fromBlock && (n27 += "&fromBlock=" + p(t71.filter.fromBlock)), t71.filter.toBlock && (n27 += "&toBlock=" + p(t71.filter.toBlock)), t71.filter.blockHash) try {
                                    h.throwError("Etherscan does not support blockHash filters", h.UNSUPPORTED_OPERATION, {
                                        operation: "getLogs(blockHash)"
                                    });
                                } catch (e) {
                                    return Promise.reject(e);
                                }
                                if (t71.filter.address && (n27 += "&address=" + t71.filter.address), t71.filter.topics && 0 < t71.filter.topics.length) {
                                    if (1 < t71.filter.topics.length) throw new Error("unsupported topic format");
                                    var a = t71.filter.topics[0];
                                    if ("string" != typeof a || 66 !== a.length) throw new Error("unsupported topic0 format");
                                    n27 += "&topic0=" + a;
                                }
                            } catch (e146) {
                                return Promise.reject(e146);
                            }
                            var u = this;
                            return o(n27 += i, c).then(function(e147) {
                                var r = {}, n = Promise.resolve();
                                return e147.forEach(function(t) {
                                    n = n.then(function() {
                                        return null != t.blockHash ? null : (t.blockHash = r[t.transactionHash], null == t.blockHash ? u.getTransaction(t.transactionHash).then(function(e) {
                                            return r[t.transactionHash] = e.blockHash, t.blockHash = e.blockHash, null;
                                        }) : null);
                                    });
                                }), n.then(function() {
                                    return e147;
                                });
                            });
                        case "getEtherPrice":
                            return "homestead" !== this.network.name ? Promise.resolve(0) : (n27 += "/api?module=stats&action=ethprice", o(n27 += i, c).then(function(e) {
                                return parseFloat(e.ethusd);
                            }));
                    }
                    return y.prototype.perform.call(this, e144, t71);
                }, g.prototype.getHistory = function(e148, t72, r43) {
                    var n = this, i = this.baseUrl, o = "";
                    return this.apiKey && (o += "&apikey=" + this.apiKey), null == t72 && (t72 = 0), null == r43 && (r43 = 99999999), this.resolveName(e148).then(function(e149) {
                        return i += "/api?module=account&action=txlist&address=" + e149, i += "&startblock=" + t72, i += "&endblock=" + r43, i += "&sort=asc" + o, l.fetchJson(i, null, c).then(function(e150) {
                            n.emit("debug", {
                                action: "getHistory",
                                request: i,
                                response: e150,
                                provider: n
                            });
                            var r = [];
                            return e150.forEach(function(t) {
                                [
                                    "contractAddress",
                                    "to"
                                ].forEach(function(e) {
                                    "" == t[e] && delete t[e];
                                }), null == t.creates && null != t.contractAddress && (t.creates = t.contractAddress);
                                var e151 = s17.BaseProvider.checkTransactionResponse(t);
                                t.timeStamp && (e151.timestamp = parseInt(t.timeStamp)), r.push(e151);
                            }), r;
                        });
                    });
                }, g);
                function g(e, t) {
                    var r = y.call(this, e) || this;
                    h.checkNew(r, g);
                    var e = "invalid", n = null;
                    switch(e = r.network ? r.network.name : e){
                        case "homestead":
                            n = "https://api.etherscan.io";
                            break;
                        case "ropsten":
                            n = "https://api-ropsten.etherscan.io";
                            break;
                        case "rinkeby":
                            n = "https://api-rinkeby.etherscan.io";
                            break;
                        case "kovan":
                            n = "https://api-kovan.etherscan.io";
                            break;
                        case "goerli":
                            n = "https://api-goerli.etherscan.io";
                            break;
                        default:
                            throw new Error("unsupported network");
                    }
                    return u9.defineReadOnly(r, "baseUrl", n), u9.defineReadOnly(r, "apiKey", t || m), r;
                }
                r41.EtherscanProvider = i22;
            },
            {
                "../errors": 5,
                "../utils/bytes": 64,
                "../utils/properties": 74,
                "../utils/web": 86,
                "./base-provider": 51
            }
        ],
        53: [
            function(e152, t73, r44) {
                "use strict";
                var n28, i23 = this && this.__extends || (n28 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n28(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o20 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r44, "__esModule", {
                    value: !0
                });
                var s18 = e152("./base-provider"), a = o20(e152("../errors"));
                function u(t) {
                    var r = !0, n = null;
                    return t.forEach(function(e) {
                        null != e ? null != n ? n.name === e.name && n.chainId === e.chainId && (n.ensAddress === e.ensAddress || null == n.ensAddress && null == e.ensAddress) || a.throwError("provider mismatch", a.INVALID_ARGUMENT, {
                            arg: "networks",
                            value: t
                        }) : n = e : r = !1;
                    }), r;
                }
                var l, i23 = (l = s18.BaseProvider, i23(h, l), Object.defineProperty(h.prototype, "providers", {
                    get: function() {
                        return this._providers.slice(0);
                    },
                    enumerable: !0,
                    configurable: !0
                }), h.prototype.perform = function(i, o) {
                    var s = this.providers;
                    return new Promise(function(r, e153) {
                        var n = null;
                        !function t() {
                            s.length ? s.shift().perform(i, o).then(function(e) {
                                return r(e);
                            }).catch(function(e) {
                                n = n || e, setTimeout(t, 0);
                            }) : e153(n);
                        }();
                    });
                }, h);
                function h(e154) {
                    var t, r = this;
                    if (0 === e154.length) throw new Error("no providers");
                    return r = u(e154.map(function(e) {
                        return e.network;
                    })) ? l.call(this, e154[0].network) || this : (t = Promise.all(e154.map(function(e) {
                        return e.getNetwork();
                    })).then(function(e) {
                        return u(e) || a.throwError("getNetwork returned null", a.UNKNOWN_ERROR, {}), e[0];
                    }), l.call(this, t) || this), a.checkNew(r, h), r._providers = e154.slice(0), r;
                }
                r44.FallbackProvider = i23;
            },
            {
                "../errors": 5,
                "./base-provider": 51
            }
        ],
        54: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                var n = e("./abstract-provider");
                r.Provider = n.Provider;
                n = e("./base-provider");
                r.BaseProvider = n.BaseProvider;
                n = e("./etherscan-provider");
                r.EtherscanProvider = n.EtherscanProvider;
                n = e("./fallback-provider");
                r.FallbackProvider = n.FallbackProvider;
                n = e("./ipc-provider");
                r.IpcProvider = n.IpcProvider;
                n = e("./infura-provider");
                r.InfuraProvider = n.InfuraProvider;
                n = e("./json-rpc-provider");
                r.JsonRpcProvider = n.JsonRpcProvider, r.JsonRpcSigner = n.JsonRpcSigner;
                e = e("./web3-provider");
                r.Web3Provider = e.Web3Provider;
            },
            {
                "./abstract-provider": 50,
                "./base-provider": 51,
                "./etherscan-provider": 52,
                "./fallback-provider": 53,
                "./infura-provider": 55,
                "./ipc-provider": 56,
                "./json-rpc-provider": 57,
                "./web3-provider": 58
            }
        ],
        55: [
            function(e155, t74, r45) {
                "use strict";
                var n29, i24 = this && this.__extends || (n29 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n29(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r45, "__esModule", {
                    value: !0
                });
                var s, a = e155("./json-rpc-provider"), u = e155("../utils/bytes"), l = e155("../utils/networks"), h = e155("../utils/properties"), f = o(e155("../errors")), c = "7d0d81d0919f4f05b9ab6634be01ee73", i24 = (s = a.JsonRpcProvider, i24(d, s), d.prototype._startPending = function() {
                    f.warn("WARNING: INFURA does not support pending filters");
                }, d.prototype.getSigner = function(e) {
                    return f.throwError("INFURA does not support signing", f.UNSUPPORTED_OPERATION, {
                        operation: "getSigner"
                    });
                }, d.prototype.listAccounts = function() {
                    return Promise.resolve([]);
                }, d);
                function d(e, t) {
                    var r = this, n = l.getNetwork(null == e ? "homestead" : e);
                    null == t && (t = c);
                    var i = null;
                    switch(n.name){
                        case "homestead":
                            i = "mainnet.infura.io";
                            break;
                        case "ropsten":
                            i = "ropsten.infura.io";
                            break;
                        case "rinkeby":
                            i = "rinkeby.infura.io";
                            break;
                        case "goerli":
                            i = "goerli.infura.io";
                            break;
                        case "kovan":
                            i = "kovan.infura.io";
                            break;
                        default:
                            f.throwError("unsupported network", f.INVALID_ARGUMENT, {
                                argument: "network",
                                value: e
                            });
                    }
                    return u.isHexString("0x" + t, 16) ? (r = s.call(this, "https://" + i + "/v3/" + t, n) || this, h.defineReadOnly(r, "apiAccessToken", null), h.defineReadOnly(r, "projectId", t)) : (f.warn("The legacy INFURA apiAccesToken API is deprecated; please upgrade to a Project ID instead (see INFURA dshboard; https://infura.io)"), r = s.call(this, "https://" + i + "/" + t, n) || this, h.defineReadOnly(r, "apiAccessToken", t), h.defineReadOnly(r, "projectId", null)), f.checkNew(r, d), r;
                }
                r45.InfuraProvider = i24;
            },
            {
                "../errors": 5,
                "../utils/bytes": 64,
                "../utils/networks": 72,
                "../utils/properties": 74,
                "./json-rpc-provider": 57
            }
        ],
        56: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
            },
            {}
        ],
        57: [
            function(e156, t75, r46) {
                "use strict";
                var n30, i25 = this && this.__extends || (n30 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n30(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r46, "__esModule", {
                    value: !0
                });
                var s = e156("./base-provider"), a = e156("../abstract-signer"), u = o(e156("../errors")), l = e156("../utils/address"), h = e156("../utils/bytes"), f = e156("../utils/networks"), c = e156("../utils/properties"), d = e156("../utils/utf8"), p = e156("../utils/web");
                function y(e) {
                    if (e.error) {
                        var t = new Error(e.error.message);
                        throw t.code = e.error.code, t.data = e.error.data, t;
                    }
                    return e.result;
                }
                function m(e) {
                    return e && e.toLowerCase();
                }
                var g, v = {}, b = 42, w = (g = a.Signer, i25(_, g), _.prototype.getAddress = function() {
                    var t = this;
                    return this._address ? Promise.resolve(this._address) : this.provider.send("eth_accounts", []).then(function(e) {
                        return e.length <= t._index && u.throwError("unknown account #" + t._index, u.UNSUPPORTED_OPERATION, {
                            operation: "getAddress"
                        }), t._address = l.getAddress(e[t._index]), t._address;
                    });
                }, _.prototype.getBalance = function(e) {
                    return this.provider.getBalance(this.getAddress(), e);
                }, _.prototype.getTransactionCount = function(e) {
                    return this.provider.getTransactionCount(this.getAddress(), e);
                }, _.prototype.sendUncheckedTransaction = function(e157) {
                    var n = this;
                    e157 = c.shallowCopy(e157);
                    var t76, r47 = this.getAddress().then(function(e) {
                        return e = e && e.toLowerCase();
                    });
                    return null == e157.gasLimit && ((t76 = c.shallowCopy(e157)).from = r47, e157.gasLimit = this.provider.estimateGas(t76)), Promise.all([
                        c.resolveProperties(e157),
                        r47
                    ]).then(function(e158) {
                        var t = e158[0], r = E.hexlifyTransaction(t);
                        return r.from = e158[1], n.provider.send("eth_sendTransaction", [
                            r
                        ]).then(function(e) {
                            return e;
                        }, function(e) {
                            throw e.responseText && (0 <= e.responseText.indexOf("insufficient funds") && u.throwError("insufficient funds", u.INSUFFICIENT_FUNDS, {
                                transaction: t
                            }), 0 <= e.responseText.indexOf("nonce too low") && u.throwError("nonce has already been used", u.NONCE_EXPIRED, {
                                transaction: t
                            }), 0 <= e.responseText.indexOf("replacement transaction underpriced") && u.throwError("replacement fee too low", u.REPLACEMENT_UNDERPRICED, {
                                transaction: t
                            })), e;
                        });
                    });
                }, _.prototype.sendTransaction = function(e159) {
                    var r = this;
                    return this.sendUncheckedTransaction(e159).then(function(t) {
                        return p.poll(function() {
                            return r.provider.getTransaction(t).then(function(e) {
                                if (null !== e) return r.provider._wrapTransaction(e, t);
                            });
                        }, {
                            fastRetry: 250,
                            onceBlock: r.provider
                        }).catch(function(e) {
                            throw e.transactionHash = t, e;
                        });
                    });
                }, _.prototype.signMessage = function(e160) {
                    var t = this, r = "string" == typeof e160 ? d.toUtf8Bytes(e160) : e160;
                    return this.getAddress().then(function(e) {
                        return t.provider.send("eth_sign", [
                            e.toLowerCase(),
                            h.hexlify(r)
                        ]);
                    });
                }, _.prototype.unlock = function(t) {
                    var r = this.provider;
                    return this.getAddress().then(function(e) {
                        return r.send("personal_unlockAccount", [
                            e.toLowerCase(),
                            t,
                            null
                        ]);
                    });
                }, _);
                function _(e, t, r) {
                    var n = g.call(this) || this;
                    if (u.checkNew(n, _), e !== v) throw new Error("do not call the JsonRpcSigner constructor directly; use provider.getSigner");
                    return c.defineReadOnly(n, "provider", t), r ? "string" == typeof r ? c.defineReadOnly(n, "_address", l.getAddress(r)) : "number" == typeof r ? c.defineReadOnly(n, "_index", r) : u.throwError("invalid address or index", u.INVALID_ARGUMENT, {
                        argument: "addressOrIndex",
                        value: r
                    }) : c.defineReadOnly(n, "_index", 0), n;
                }
                r46.JsonRpcSigner = w;
                var M, A = {
                    chainId: !0,
                    data: !0,
                    gasLimit: !0,
                    gasPrice: !0,
                    nonce: !0,
                    to: !0,
                    value: !0
                }, E = (M = s.BaseProvider, i25(S, M), S.prototype.getSigner = function(e) {
                    return new w(v, this, e);
                }, S.prototype.listAccounts = function() {
                    return this.send("eth_accounts", []).then(function(e161) {
                        return e161.map(function(e) {
                            return l.getAddress(e);
                        });
                    });
                }, S.prototype.send = function(e162, t) {
                    var r = this, n = {
                        method: e162,
                        params: t,
                        id: b++,
                        jsonrpc: "2.0"
                    };
                    return p.fetchJson(this.connection, JSON.stringify(n), y).then(function(e) {
                        return r.emit("debug", {
                            action: "send",
                            request: n,
                            response: e,
                            provider: r
                        }), e;
                    });
                }, S.prototype.perform = function(e163, t) {
                    switch(e163){
                        case "getBlockNumber":
                            return this.send("eth_blockNumber", []);
                        case "getGasPrice":
                            return this.send("eth_gasPrice", []);
                        case "getBalance":
                            return this.send("eth_getBalance", [
                                m(t.address),
                                t.blockTag
                            ]);
                        case "getTransactionCount":
                            return this.send("eth_getTransactionCount", [
                                m(t.address),
                                t.blockTag
                            ]);
                        case "getCode":
                            return this.send("eth_getCode", [
                                m(t.address),
                                t.blockTag
                            ]);
                        case "getStorageAt":
                            return this.send("eth_getStorageAt", [
                                m(t.address),
                                t.position,
                                t.blockTag
                            ]);
                        case "sendTransaction":
                            return this.send("eth_sendRawTransaction", [
                                t.signedTransaction
                            ]).catch(function(e) {
                                throw e.responseText && (0 < e.responseText.indexOf("insufficient funds") && u.throwError("insufficient funds", u.INSUFFICIENT_FUNDS, {}), 0 < e.responseText.indexOf("nonce too low") && u.throwError("nonce has already been used", u.NONCE_EXPIRED, {}), 0 < e.responseText.indexOf("replacement transaction underpriced") && u.throwError("replacement fee too low", u.REPLACEMENT_UNDERPRICED, {})), e;
                            });
                        case "getBlock":
                            return t.blockTag ? this.send("eth_getBlockByNumber", [
                                t.blockTag,
                                !!t.includeTransactions
                            ]) : t.blockHash ? this.send("eth_getBlockByHash", [
                                t.blockHash,
                                !!t.includeTransactions
                            ]) : Promise.reject(new Error("invalid block tag or block hash"));
                        case "getTransaction":
                            return this.send("eth_getTransactionByHash", [
                                t.transactionHash
                            ]);
                        case "getTransactionReceipt":
                            return this.send("eth_getTransactionReceipt", [
                                t.transactionHash
                            ]);
                        case "call":
                            return this.send("eth_call", [
                                S.hexlifyTransaction(t.transaction, {
                                    from: !0
                                }),
                                t.blockTag
                            ]);
                        case "estimateGas":
                            return this.send("eth_estimateGas", [
                                S.hexlifyTransaction(t.transaction, {
                                    from: !0
                                })
                            ]);
                        case "getLogs":
                            return t.filter && null != t.filter.address && (t.filter.address = m(t.filter.address)), this.send("eth_getLogs", [
                                t.filter
                            ]);
                    }
                    return u.throwError(e163 + " not implemented", u.NOT_IMPLEMENTED, {
                        operation: e163
                    }), null;
                }, S.prototype._startPending = function() {
                    var r, n;
                    null == this._pendingFilter && (n = (r = this).send("eth_newPendingTransactionFilter", []), (this._pendingFilter = n).then(function(t77) {
                        return function e164() {
                            r.send("eth_getFilterChanges", [
                                t77
                            ]).then(function(e165) {
                                if (r._pendingFilter != n) return null;
                                var t78 = Promise.resolve();
                                return e165.forEach(function(e166) {
                                    r._emitted["t:" + e166.toLowerCase()] = "pending", t78 = t78.then(function() {
                                        return r.getTransaction(e166).then(function(e) {
                                            return r.emit("pending", e), null;
                                        });
                                    });
                                }), t78.then(function() {
                                    var t;
                                    return t = 1e3, new Promise(function(e) {
                                        setTimeout(function() {
                                            e();
                                        }, t);
                                    });
                                });
                            }).then(function() {
                                return r._pendingFilter == n ? (setTimeout(function() {
                                    e164();
                                }, 0), null) : void r.send("eth_uninstallFilter", [
                                    t77
                                ]);
                            }).catch(function(e) {});
                        }(), t77;
                    }).catch(function(e) {}));
                }, S.prototype._stopPending = function() {
                    this._pendingFilter = null;
                }, S.hexlifyTransaction = function(r, e167) {
                    var t79 = c.shallowCopy(A);
                    if (e167) for(var n in e167)e167[n] && (t79[n] = !0);
                    c.checkProperties(r, t79);
                    var i = {};
                    return [
                        "gasLimit",
                        "gasPrice",
                        "nonce",
                        "value"
                    ].forEach(function(e) {
                        var t;
                        null != r[e] && (t = h.hexStripZeros(h.hexlify(r[e])), i[e = "gasLimit" === e ? "gas" : e] = t);
                    }), [
                        "from",
                        "to",
                        "data"
                    ].forEach(function(e) {
                        null != r[e] && (i[e] = h.hexlify(r[e]));
                    }), i;
                }, S);
                function S(e168, t80) {
                    var n = this;
                    return "string" == typeof e168 && null === t80 && f.getNetwork(e168) && (t80 = e168, e168 = null), n = t80 ? M.call(this, t80) || this : (t80 = new Promise(function(t, r) {
                        setTimeout(function() {
                            n.send("net_version", []).then(function(e) {
                                return t(f.getNetwork(parseInt(e)));
                            }).catch(function(e) {
                                r(e);
                            });
                        });
                    }), M.call(this, t80) || this), u.checkNew(n, S), n.connection = "string" == typeof (e168 = e168 || "http://localhost:8545") ? {
                        url: e168
                    } : e168, n;
                }
                r46.JsonRpcProvider = E;
            },
            {
                "../abstract-signer": 2,
                "../errors": 5,
                "../utils/address": 60,
                "../utils/bytes": 64,
                "../utils/networks": 72,
                "../utils/properties": 74,
                "../utils/utf8": 85,
                "../utils/web": 86,
                "./base-provider": 51
            }
        ],
        58: [
            function(e169, t81, r48) {
                "use strict";
                var n31, i26 = this && this.__extends || (n31 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n31(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o21 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r48, "__esModule", {
                    value: !0
                });
                var s, a = e169("./json-rpc-provider"), u = e169("../utils/properties"), l = o21(e169("../errors")), h = 42, i26 = (s = a.JsonRpcProvider, i26(f, s), f.prototype.send = function(t82, i) {
                    var o = this;
                    return "eth_sign" == t82 && this._web3Provider.isMetaMask && (t82 = "personal_sign", i = [
                        i[1],
                        i[0]
                    ]), new Promise(function(r, n) {
                        var e170 = {
                            method: t82,
                            params: i,
                            id: h++,
                            jsonrpc: "2.0"
                        };
                        o._sendAsync(e170, function(e, t) {
                            if (e) n(e);
                            else {
                                if (t.error) {
                                    e = new Error(t.error.message);
                                    return e.code = t.error.code, e.data = t.error.data, void n(e);
                                }
                                r(t.result);
                            }
                        });
                    });
                }, f);
                function f(e, t) {
                    t = s.call(this, e.host || e.path || "", t) || this;
                    return l.checkNew(t, f), e && (e.sendAsync ? t._sendAsync = e.sendAsync.bind(e) : e.send && (t._sendAsync = e.send.bind(e))), e && t._sendAsync || l.throwError("invalid web3Provider", l.INVALID_ARGUMENT, {
                        arg: "web3Provider",
                        value: e
                    }), u.defineReadOnly(t, "_web3Provider", e), u.defineReadOnly(t, "provider", e), t;
                }
                r48.Web3Provider = i26;
            },
            {
                "../errors": 5,
                "../utils/properties": 74,
                "./json-rpc-provider": 57
            }
        ],
        59: [
            function(e171, t83, r49) {
                "use strict";
                var n32, i27 = this && this.__extends || (n32 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n32(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o22 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r49, "__esModule", {
                    value: !0
                });
                var s19 = e171("../constants"), l = o22(e171("../errors")), a14 = e171("./address"), u10 = e171("./bignumber"), h = e171("./bytes"), f = e171("./utf8"), c = e171("./properties"), d = new RegExp(/^bytes([0-9]*)$/), p = new RegExp(/^(u?int)([0-9]*)$/), y = new RegExp(/^(.*)\[([0-9]*)\]$/);
                r49.defaultCoerceFunc = function(e, t) {
                    e = e.match(p);
                    return e && parseInt(e[2]) <= 48 ? t.toNumber() : t;
                };
                var m = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$"), g = new RegExp("^[A-Za-z_][A-Za-z0-9_]*$");
                function v(e) {
                    return e.match(/^uint($|[^1-9])/) ? e = "uint256" + e.substring(4) : e.match(/^int($|[^1-9])/) && (e = "int256" + e.substring(3)), e;
                }
                function b(e172, t) {
                    var r = e172;
                    function n(e) {
                        throw new Error('unexpected character "' + r[e] + '" at position ' + e + ' in "' + r + '"');
                    }
                    e172 = e172.replace(/\s/g, " ");
                    for(var i = {
                        type: "",
                        name: "",
                        state: {
                            allowType: !0
                        }
                    }, o = i, s = 0; s < e172.length; s++){
                        var a = e172[s];
                        switch(a){
                            case "(":
                                o.state.allowParams || n(s), o.state.allowType = !1, o.type = v(o.type), o.components = [
                                    {
                                        type: "",
                                        name: "",
                                        parent: o,
                                        state: {
                                            allowType: !0
                                        }
                                    }
                                ], o = o.components[0];
                                break;
                            case ")":
                                delete o.state, t && "indexed" === o.name && (o.indexed = !0, o.name = ""), o.type = v(o.type);
                                var u = o;
                                (o = o.parent) || n(s), delete u.parent, o.state.allowParams = !1, o.state.allowName = !0, o.state.allowArray = !0;
                                break;
                            case ",":
                                delete o.state, t && "indexed" === o.name && (o.indexed = !0, o.name = ""), o.type = v(o.type);
                                u = {
                                    type: "",
                                    name: "",
                                    parent: o.parent,
                                    state: {
                                        allowType: !0
                                    }
                                };
                                o.parent.components.push(u), delete o.parent, o = u;
                                break;
                            case " ":
                                o.state.allowType && "" !== o.type && (o.type = v(o.type), delete o.state.allowType, o.state.allowName = !0, o.state.allowParams = !0), o.state.allowName && "" !== o.name && (t && "indexed" === o.name ? (o.indexed = !0, o.name = "") : o.state.allowName = !1);
                                break;
                            case "[":
                                o.state.allowArray || n(s), o.type += a, o.state.allowArray = !1, o.state.allowName = !1, o.state.readArray = !0;
                                break;
                            case "]":
                                o.state.readArray || n(s), o.type += a, o.state.readArray = !1, o.state.allowArray = !0, o.state.allowName = !0;
                                break;
                            default:
                                o.state.allowType ? (o.type += a, o.state.allowParams = !0, o.state.allowArray = !0) : o.state.allowName ? (o.name += a, delete o.state.allowArray) : o.state.readArray ? o.type += a : n(s);
                        }
                    }
                    if (o.parent) throw new Error("unexpected eof");
                    return delete i.state, t && "indexed" === o.name && (o.indexed = !0, o.name = ""), i.type = v(i.type), i;
                }
                function w(e) {
                    return ie(r49.defaultCoerceFunc, e).type;
                }
                r49.parseParamType = function(e) {
                    return b(e, !0);
                }, r49.formatParamType = w, r49.formatSignature = function(e) {
                    return e.name + "(" + e.inputs.map(w).join(",") + ")";
                }, r49.parseSignature = function(e173) {
                    if ("string" == typeof e173) return "event " === (e173 = (e173 = (e173 = e173.replace(/\s/g, " ")).replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ")).trim()).substring(0, 6) ? function(e174) {
                        var t = {
                            anonymous: !1,
                            inputs: [],
                            name: "",
                            type: "event"
                        }, r = e174.match(m);
                        if (!r) throw new Error("invalid event: " + e174);
                        if (t.name = r[1].trim(), re(r[2]).forEach(function(e) {
                            (e = b(e, !0)).indexed = !!e.indexed, t.inputs.push(e);
                        }), r[3].split(" ").forEach(function(e) {
                            switch(e){
                                case "anonymous":
                                    t.anonymous = !0;
                                    break;
                                case "":
                                    break;
                                default:
                                    l.info("unknown modifier: " + e);
                            }
                        }), t.name && !t.name.match(g)) throw new Error('invalid identifier: "' + t.name + '"');
                        return t;
                    }(e173.substring(6).trim()) : function(e175) {
                        var t = {
                            constant: !1,
                            gas: null,
                            inputs: [],
                            name: "",
                            outputs: [],
                            payable: !1,
                            stateMutability: null,
                            type: "function"
                        }, r = e175.split("@");
                        if (1 !== r.length) {
                            if (2 < r.length) throw new Error("invalid signature");
                            if (!r[1].match(/^[0-9]+$/)) throw new Error("invalid signature gas");
                            t.gas = u10.bigNumberify(r[1]), e175 = r[0];
                        }
                        if (!(e175 = (r = e175.split(" returns "))[0].match(m))) throw new Error("invalid signature");
                        if (t.name = e175[1].trim(), !t.name.match(g)) throw new Error('invalid identifier: "' + e175[1] + '"');
                        if (re(e175[2]).forEach(function(e) {
                            t.inputs.push(b(e));
                        }), e175[3].split(" ").forEach(function(e) {
                            switch(e){
                                case "constant":
                                    t.constant = !0;
                                    break;
                                case "payable":
                                    t.payable = !0, t.stateMutability = "payable";
                                    break;
                                case "pure":
                                    t.constant = !0, t.stateMutability = "pure";
                                    break;
                                case "view":
                                    t.constant = !0, t.stateMutability = "view";
                                    break;
                                case "external":
                                case "public":
                                case "":
                                    break;
                                default:
                                    l.info("unknown modifier: " + e);
                            }
                        }), 1 < r.length) {
                            r = r[1].match(m);
                            if ("" != r[1].trim() || "" != r[3].trim()) throw new Error("unexpected tokens");
                            re(r[2]).forEach(function(e) {
                                t.outputs.push(b(e));
                            });
                        }
                        if ("constructor" === t.name) {
                            if (t.type = "constructor", t.outputs.length) throw new Error("constructor may not have outputs");
                            delete t.name, delete t.outputs;
                        }
                        return t;
                    }((e173 = "function " === e173.substring(0, 9) ? e173.substring(9) : e173).trim());
                    throw new Error("unknown signature");
                };
                function _(e, t, r, n, i) {
                    this.coerceFunc = e, this.name = t, this.type = r, this.localName = n, this.dynamic = i;
                }
                var M, A = (i27(E, M = _), E.prototype.encode = function(e) {
                    return this.coder.encode(e);
                }, E.prototype.decode = function(e, t) {
                    return this.coder.decode(e, t);
                }, E);
                function E(e) {
                    var t = M.call(this, e.coerceFunc, e.name, e.type, void 0, e.dynamic) || this;
                    return c.defineReadOnly(t, "coder", e), t;
                }
                var S, k = (i27(N, S = _), N.prototype.encode = function(e) {
                    return h.arrayify([]);
                }, N.prototype.decode = function(e, t) {
                    if (t > e.length) throw new Error("invalid null");
                    return {
                        consumed: 0,
                        value: this.coerceFunc("null", void 0)
                    };
                }, N);
                function N(e, t) {
                    return S.call(this, e, "null", "", t, !1) || this;
                }
                var x, P = (i27(I, x = _), I.prototype.encode = function(t) {
                    try {
                        var e = u10.bigNumberify(t);
                        if (this.signed) {
                            var r = s19.MaxUint256.maskn(8 * this.size - 1);
                            if (e.gt(r)) throw new Error("out-of-bounds");
                            if (r = r.add(s19.One).mul(s19.NegativeOne), e.lt(r)) throw new Error("out-of-bounds");
                        } else if (e.lt(s19.Zero) || e.gt(s19.MaxUint256.maskn(8 * this.size))) throw new Error("out-of-bounds");
                        return e = e.toTwos(8 * this.size).maskn(8 * this.size), this.signed && (e = e.fromTwos(8 * this.size).toTwos(256)), h.padZeros(h.arrayify(e), 32);
                    } catch (e) {
                        l.throwError("invalid number value", l.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: this.name,
                            value: t
                        });
                    }
                    return null;
                }, I.prototype.decode = function(e, t) {
                    e.length < t + 32 && l.throwError("insufficient data for " + this.name + " type", l.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: this.name,
                        value: h.hexlify(e.slice(t, t + 32))
                    });
                    var r = 32 - this.size, t = u10.bigNumberify(e.slice(t + r, t + 32)), t = this.signed ? t.fromTwos(8 * this.size) : t.maskn(8 * this.size);
                    return {
                        consumed: 32,
                        value: this.coerceFunc(this.name, t)
                    };
                }, I);
                function I(e, t, r, n) {
                    var i = this, o = (r ? "int" : "uint") + 8 * t;
                    return (i = x.call(this, e, o, o, n, !1) || this).size = t, i.signed = r, i;
                }
                var T, R = new P(function(e, t) {
                    return t;
                }, 32, !1, "none"), O = (i27(C, T = _), C.prototype.encode = function(e) {
                    return R.encode(e ? 1 : 0);
                }, C.prototype.decode = function(e, t) {
                    try {
                        var r = R.decode(e, t);
                    } catch (e176) {
                        throw "insufficient data for uint256 type" === e176.reason && l.throwError("insufficient data for boolean type", l.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: "boolean",
                            value: e176.value
                        }), e176;
                    }
                    return {
                        consumed: r.consumed,
                        value: this.coerceFunc("bool", !r.value.isZero())
                    };
                }, C);
                function C(e, t) {
                    return T.call(this, e, "bool", "bool", t, !1) || this;
                }
                var L, B = (i27(D, L = _), D.prototype.encode = function(t) {
                    var e = new Uint8Array(32);
                    try {
                        var r = h.arrayify(t);
                        if (r.length !== this.length) throw new Error("incorrect data length");
                        e.set(r);
                    } catch (e177) {
                        l.throwError("invalid " + this.name + " value", l.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: this.name,
                            value: e177.value || t
                        });
                    }
                    return e;
                }, D.prototype.decode = function(e, t) {
                    return e.length < t + 32 && l.throwError("insufficient data for " + this.name + " type", l.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: this.name,
                        value: h.hexlify(e.slice(t, t + 32))
                    }), {
                        consumed: 32,
                        value: this.coerceFunc(this.name, h.hexlify(e.slice(t, t + this.length)))
                    };
                }, D);
                function D(e, t, r) {
                    var n = this, i = "bytes" + t;
                    return (n = L.call(this, e, i, i, r, !1) || this).length = t, n;
                }
                var U, F = (i27(j, U = _), j.prototype.encode = function(t) {
                    var e = new Uint8Array(32);
                    try {
                        e.set(h.arrayify(a14.getAddress(t)), 12);
                    } catch (e178) {
                        l.throwError("invalid address", l.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: "address",
                            value: t
                        });
                    }
                    return e;
                }, j.prototype.decode = function(e, t) {
                    return e.length < t + 32 && l.throwError("insufficient data for address type", l.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: "address",
                        value: h.hexlify(e.slice(t, t + 32))
                    }), {
                        consumed: 32,
                        value: this.coerceFunc("address", a14.getAddress(h.hexlify(e.slice(t + 12, t + 32))))
                    };
                }, j);
                function j(e, t) {
                    return U.call(this, e, "address", "address", t, !1) || this;
                }
                function G(e) {
                    var t = 32 * Math.ceil(e.length / 32), t = new Uint8Array(t - e.length);
                    return h.concat([
                        R.encode(e.length),
                        e,
                        t
                    ]);
                }
                function H(e, t, r) {
                    e.length < t + 32 && l.throwError("insufficient data for dynamicBytes length", l.INVALID_ARGUMENT, {
                        arg: r,
                        coderType: "dynamicBytes",
                        value: h.hexlify(e.slice(t, t + 32))
                    });
                    var n = R.decode(e, t).value;
                    try {
                        n = n.toNumber();
                    } catch (e179) {
                        l.throwError("dynamic bytes count too large", l.INVALID_ARGUMENT, {
                            arg: r,
                            coderType: "dynamicBytes",
                            value: n.toString()
                        });
                    }
                    return e.length < t + 32 + n && l.throwError("insufficient data for dynamicBytes type", l.INVALID_ARGUMENT, {
                        arg: r,
                        coderType: "dynamicBytes",
                        value: h.hexlify(e.slice(t, t + 32 + n))
                    }), {
                        consumed: 32 + 32 * Math.ceil(n / 32),
                        value: e.slice(t + 32, t + 32 + n)
                    };
                }
                var z, o22 = (i27(V, z = _), V.prototype.encode = function(e) {
                    try {
                        return G(h.arrayify(e));
                    } catch (e180) {
                        l.throwError("invalid bytes value", l.INVALID_ARGUMENT, {
                            arg: this.localName,
                            coderType: "bytes",
                            value: e180.value
                        });
                    }
                    return null;
                }, V.prototype.decode = function(e, t) {
                    t = H(e, t, this.localName);
                    return t.value = this.coerceFunc("bytes", h.hexlify(t.value)), t;
                }, V);
                function V(e, t) {
                    return z.call(this, e, "bytes", "bytes", t, !0) || this;
                }
                var K, e171 = (i27(q, K = _), q.prototype.encode = function(e) {
                    return "string" != typeof e && l.throwError("invalid string value", l.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: "string",
                        value: e
                    }), G(f.toUtf8Bytes(e));
                }, q.prototype.decode = function(e, t) {
                    t = H(e, t, this.localName);
                    return t.value = this.coerceFunc("string", f.toUtf8String(t.value)), t;
                }, q);
                function q(e, t) {
                    return K.call(this, e, "string", "string", t, !0) || this;
                }
                function W(e) {
                    return 32 * Math.ceil(e / 32);
                }
                function Z(e181, r) {
                    var t84;
                    Array.isArray(r) || (r && "object" == typeof r ? (t84 = [], e181.forEach(function(e) {
                        t84.push(r[e.localName]);
                    }), r = t84) : l.throwError("invalid tuple value", l.INVALID_ARGUMENT, {
                        coderType: "tuple",
                        value: r
                    })), e181.length !== r.length && l.throwError("types/value length mismatch", l.INVALID_ARGUMENT, {
                        coderType: "tuple",
                        value: r
                    });
                    var n = [];
                    e181.forEach(function(e, t) {
                        n.push({
                            dynamic: e.dynamic,
                            value: e.encode(r[t])
                        });
                    });
                    var i = 0, o = 0;
                    n.forEach(function(e) {
                        e.dynamic ? (i += 32, o += W(e.value.length)) : i += W(e.value.length);
                    });
                    var s = 0, a = i, u = new Uint8Array(i + o);
                    return n.forEach(function(e) {
                        e.dynamic ? (u.set(R.encode(a), s), s += 32, u.set(e.value, a), a += W(e.value.length)) : (u.set(e.value, s), s += W(e.value.length));
                    }), u;
                }
                function J(e182, n, i) {
                    var o = i, s = 0, a = [];
                    return e182.forEach(function(e) {
                        var t, r;
                        e.dynamic ? (t = R.decode(n, i), (r = e.decode(n, o + t.value.toNumber())).consumed = t.consumed) : r = e.decode(n, i), null != r.value && a.push(r.value), i += r.consumed, s += r.consumed;
                    }), e182.forEach(function(e, t) {
                        e = e.localName;
                        e && null == a[e = "length" === e ? "_length" : e] && (a[e] = a[t]);
                    }), {
                        value: a,
                        consumed: s
                    };
                }
                var X, $ = (i27(Q, X = _), Q.prototype.encode = function(e) {
                    Array.isArray(e) || l.throwError("expected array value", l.INVALID_ARGUMENT, {
                        arg: this.localName,
                        coderType: "array",
                        value: e
                    });
                    var t = this.length, r = new Uint8Array(0);
                    -1 === t && (t = e.length, r = R.encode(t)), l.checkArgumentCount(t, e.length, " in coder array" + (this.localName ? " " + this.localName : ""));
                    for(var n = [], i = 0; i < e.length; i++)n.push(this.coder);
                    return h.concat([
                        r,
                        Z(n, e)
                    ]);
                }, Q.prototype.decode = function(e, t) {
                    var r = 0, n = this.length;
                    if (-1 === n) {
                        try {
                            var i = R.decode(e, t);
                        } catch (e) {
                            l.throwError("insufficient data for dynamic array length", l.INVALID_ARGUMENT, {
                                arg: this.localName,
                                coderType: "array",
                                value: e.value
                            });
                        }
                        try {
                            n = i.value.toNumber();
                        } catch (e183) {
                            l.throwError("array count too large", l.INVALID_ARGUMENT, {
                                arg: this.localName,
                                coderType: "array",
                                value: i.value.toString()
                            });
                        }
                        r += i.consumed, t += i.consumed;
                    }
                    for(var o = [], s = 0; s < n; s++)o.push(new A(this.coder));
                    t = J(o, e, t);
                    return t.consumed += r, t.value = this.coerceFunc(this.type, t.value), t;
                }, Q);
                function Q(e, t, r, n) {
                    var i = this, o = t.type + "[" + (0 <= r ? r : "") + "]", s = -1 === r || t.dynamic;
                    return (i = X.call(this, e, "array", o, n, s) || this).coder = t, i.length = r, i;
                }
                var Y, ee = (i27(te, Y = _), te.prototype.encode = function(e) {
                    return Z(this.coders, e);
                }, te.prototype.decode = function(e, t) {
                    t = J(this.coders, e, t);
                    return t.value = this.coerceFunc(this.type, t.value), t;
                }, te);
                function te(e184, t, r) {
                    var n = this, i = !1, o = [];
                    t.forEach(function(e) {
                        e.dynamic && (i = !0), o.push(e.type);
                    });
                    var s = "tuple(" + o.join(",") + ")";
                    return (n = Y.call(this, e184, "tuple", s, r, i) || this).coders = t, n;
                }
                function re(e) {
                    e = e.trim();
                    for(var t = [], r = "", n = 0, i = 0; i < e.length; i++){
                        var o = e[i];
                        if ("," === o && 0 === n) t.push(r), r = "";
                        else if (r += o, "(" === o) n++;
                        else if (")" === o && -1 === --n) throw new Error("unbalanced parenthsis");
                    }
                    return r && t.push(r), t;
                }
                var ne = {
                    address: F,
                    bool: O,
                    string: e171,
                    bytes: o22
                };
                function ie(e185, t) {
                    var r = ne[t.type];
                    if (r) return new r(e185, t.name);
                    r = t.type.match(p);
                    if (r) return (0 === (o = parseInt(r[2] || "256")) || 256 < o || o % 8 != 0) && l.throwError("invalid " + r[1] + " bit length", l.INVALID_ARGUMENT, {
                        arg: "param",
                        value: t
                    }), new P(e185, o / 8, "int" === r[1], t.name);
                    var n, i, r = t.type.match(d);
                    if (r) return (0 === (o = parseInt(r[1])) || 32 < o) && l.throwError("invalid bytes length", l.INVALID_ARGUMENT, {
                        arg: "param",
                        value: t
                    }), new B(e185, o, t.name);
                    if (r = t.type.match(y)) {
                        var o = parseInt(r[2] || "-1");
                        return (t = c.shallowCopy(t)).type = r[1], t = c.deepCopy(t), new $(e185, ie(e185, t), o, t.name);
                    }
                    return "tuple" === t.type.substring(0, 5) ? (n = e185, r = t.components, o = t.name, i = [], (r = r || []).forEach(function(e) {
                        i.push(ie(n, e));
                    }), new ee(n, i, o)) : "" === t.type ? new k(e185, t.name) : (l.throwError("invalid type", l.INVALID_ARGUMENT, {
                        arg: "type",
                        value: t.type
                    }), null);
                }
                oe.prototype.encode = function(e186, t85) {
                    e186.length !== t85.length && l.throwError("types/values length mismatch", l.INVALID_ARGUMENT, {
                        count: {
                            types: e186.length,
                            values: t85.length
                        },
                        value: {
                            types: e186,
                            values: t85
                        }
                    });
                    var r = [];
                    return e186.forEach(function(e) {
                        var t = null, t = "string" == typeof e ? b(e) : e;
                        r.push(ie(this.coerceFunc, t));
                    }, this), h.hexlify(new ee(this.coerceFunc, r, "_").encode(t85));
                }, oe.prototype.decode = function(e187, t86) {
                    var r = [];
                    return e187.forEach(function(e) {
                        var t = null, t = "string" == typeof e ? b(e) : c.deepCopy(e);
                        r.push(ie(this.coerceFunc, t));
                    }, this), new ee(this.coerceFunc, r, "_").decode(h.arrayify(t86), 0).value;
                }, o22 = oe;
                function oe(e) {
                    l.checkNew(this, oe), e = e || r49.defaultCoerceFunc, c.defineReadOnly(this, "coerceFunc", e);
                }
                r49.AbiCoder = o22, r49.defaultAbiCoder = new o22;
            },
            {
                "../constants": 3,
                "../errors": 5,
                "./address": 60,
                "./bignumber": 63,
                "./bytes": 64,
                "./properties": 74,
                "./utf8": 85
            }
        ],
        60: [
            function(e188, t87, r50) {
                "use strict";
                var n33 = this && this.__importDefault || function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                };
                Object.defineProperty(r50, "__esModule", {
                    value: !0
                });
                var i28 = n33(e188("bn.js")), o = e188("./bytes"), s = e188("./keccak256"), a = e188("./rlp"), u = e188("../errors");
                function l(e) {
                    "string" == typeof e && e.match(/^0x[0-9A-Fa-f]{40}$/) || u.throwError("invalid address", u.INVALID_ARGUMENT, {
                        arg: "address",
                        value: e
                    });
                    for(var t = (e = e.toLowerCase()).substring(2).split(""), r = new Uint8Array(40), n = 0; n < 40; n++)r[n] = t[n].charCodeAt(0);
                    for(var r = o.arrayify(s.keccak256(r)), i = 0; i < 40; i += 2)8 <= r[i >> 1] >> 4 && (t[i] = t[i].toUpperCase()), 8 <= (15 & r[i >> 1]) && (t[i + 1] = t[i + 1].toUpperCase());
                    return "0x" + t.join("");
                }
                for(var h = {}, f = 0; f < 10; f++)h[String(f)] = String(f);
                for(f = 0; f < 26; f++)h[String.fromCharCode(65 + f)] = String(10 + f);
                var c, d = Math.floor((c = 9007199254740991, Math.log10 ? Math.log10(c) : Math.log(c) / Math.LN10));
                function p(e189) {
                    e189 = (e189 = e189.toUpperCase()).substring(4) + e189.substring(0, 2) + "00";
                    var t = "";
                    for(e189.split("").forEach(function(e) {
                        t += h[e];
                    }); t.length >= d;)var r = t.substring(0, d), t = parseInt(r, 10) % 97 + t.substring(r.length);
                    for(var n = String(98 - parseInt(t, 10) % 97); n.length < 2;)n = "0" + n;
                    return n;
                }
                function y(e) {
                    var t = null;
                    if ("string" != typeof e && u.throwError("invalid address", u.INVALID_ARGUMENT, {
                        arg: "address",
                        value: e
                    }), e.match(/^(0x)?[0-9a-fA-F]{40}$/)) t = l(e = "0x" !== e.substring(0, 2) ? "0x" + e : e), e.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && t !== e && u.throwError("bad address checksum", u.INVALID_ARGUMENT, {
                        arg: "address",
                        value: e
                    });
                    else if (e.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
                        for(e.substring(2, 4) !== p(e) && u.throwError("bad icap checksum", u.INVALID_ARGUMENT, {
                            arg: "address",
                            value: e
                        }), t = new i28.default.BN(e.substring(4), 36).toString(16); t.length < 40;)t = "0" + t;
                        t = l("0x" + t);
                    } else u.throwError("invalid address", u.INVALID_ARGUMENT, {
                        arg: "address",
                        value: e
                    });
                    return t;
                }
                r50.getAddress = y, r50.getIcapAddress = function(e) {
                    for(var t = new i28.default.BN(y(e).substring(2), 16).toString(36).toUpperCase(); t.length < 30;)t = "0" + t;
                    return "XE" + p("XE00" + t) + t;
                }, r50.getContractAddress = function(e) {
                    if (!e.from) throw new Error("missing from address");
                    var t = e.nonce;
                    return y("0x" + s.keccak256(a.encode([
                        y(e.from),
                        o.stripZeros(o.hexlify(t))
                    ])).substring(26));
                }, r50.getCreate2Address = function(e) {
                    var t = e.initCodeHash;
                    e.initCode && (t ? s.keccak256(e.initCode) !== t && u.throwError("initCode/initCodeHash mismatch", u.INVALID_ARGUMENT, {
                        arg: "options",
                        value: e
                    }) : t = s.keccak256(e.initCode)), t || u.throwError("missing initCode or initCodeHash", u.INVALID_ARGUMENT, {
                        arg: "options",
                        value: e
                    });
                    var r = y(e.from), n = o.arrayify(e.salt);
                    return 32 !== n.length && u.throwError("invalid salt", u.INVALID_ARGUMENT, {
                        arg: "options",
                        value: e
                    }), y("0x" + s.keccak256(o.concat([
                        "0xff",
                        r,
                        n,
                        t
                    ])).substring(26));
                };
            },
            {
                "../errors": 5,
                "./bytes": 64,
                "./keccak256": 71,
                "./rlp": 76,
                "bn.js": 9
            }
        ],
        61: [
            function(e190, t88, r51) {
                "use strict";
                Object.defineProperty(r51, "__esModule", {
                    value: !0
                });
                var n = e190("../utils/bytes");
                t88.exports = {
                    decode: function(e) {
                        e = atob(e);
                        for(var t = [], r = 0; r < e.length; r++)t.push(e.charCodeAt(r));
                        return n.arrayify(t);
                    },
                    encode: function(e) {
                        e = n.arrayify(e);
                        for(var t = "", r = 0; r < e.length; r++)t += String.fromCharCode(e[r]);
                        return btoa(t);
                    }
                };
            },
            {
                "../utils/bytes": 64
            }
        ],
        62: [
            function(e191, t89, r52) {
                "use strict";
                Object.defineProperty(r52, "__esModule", {
                    value: !0
                });
                var l = e191("./bytes"), n34 = e191("./properties"), i29 = (o23.prototype.encode = function(e) {
                    var t = l.arrayify(e);
                    if (0 === t.length) return "";
                    for(var r = [
                        0
                    ], n = 0; n < t.length; ++n){
                        for(var i = t[n], o = 0; o < r.length; ++o)i += r[o] << 8, r[o] = i % this.base, i = i / this.base | 0;
                        for(; 0 < i;)r.push(i % this.base), i = i / this.base | 0;
                    }
                    for(var s = "", a = 0; 0 === t[a] && a < t.length - 1; ++a)s += this._leader;
                    for(var u = r.length - 1; 0 <= u; --u)s += this.alphabet[r[u]];
                    return s;
                }, o23.prototype.decode = function(e) {
                    if ("string" != typeof e) throw new TypeError("Expected String");
                    var t = [];
                    if (0 === e.length) return new Uint8Array(t);
                    t.push(0);
                    for(var r = 0; r < e.length; r++){
                        var n = this._alphabetMap[e[r]];
                        if (void 0 === n) throw new Error("Non-base" + this.base + " character");
                        for(var i = n, o = 0; o < t.length; ++o)i += t[o] * this.base, t[o] = 255 & i, i >>= 8;
                        for(; 0 < i;)t.push(255 & i), i >>= 8;
                    }
                    for(var s = 0; e[s] === this._leader && s < e.length - 1; ++s)t.push(0);
                    return l.arrayify(new Uint8Array(t.reverse()));
                }, o23);
                function o23(e) {
                    n34.defineReadOnly(this, "alphabet", e), n34.defineReadOnly(this, "base", e.length), n34.defineReadOnly(this, "_alphabetMap", {}), n34.defineReadOnly(this, "_leader", e.charAt(0));
                    for(var t = 0; t < e.length; t++)this._alphabetMap[e.charAt(t)] = t;
                }
                e191 = new (r52.BaseX = i29)("abcdefghijklmnopqrstuvwxyz234567");
                r52.Base32 = e191;
                i29 = new i29("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz");
                r52.Base58 = i29;
            },
            {
                "./bytes": 64,
                "./properties": 74
            }
        ],
        63: [
            function(e192, t90, r53) {
                "use strict";
                var n = this && this.__importDefault || function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }, i = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r53, "__esModule", {
                    value: !0
                });
                var o = n(e192("bn.js")), s = e192("./bytes"), a = e192("./properties"), u = i(e192("../errors")), l = new o.default.BN(-1);
                function h(e) {
                    e = e.toString(16);
                    return "-" === e[0] ? e.length % 2 == 0 ? "-0x0" + e.substring(1) : "-0x" + e.substring(1) : e.length % 2 == 1 ? "0x0" + e : "0x" + e;
                }
                function f(e) {
                    return d(m(e));
                }
                function c(e) {
                    return new p(h(e));
                }
                function d(e) {
                    e = e._hex;
                    return "-" === e[0] ? new o.default.BN(e.substring(3), 16).mul(l) : new o.default.BN(e.substring(2), 16);
                }
                var p = (y.prototype.fromTwos = function(e) {
                    return c(d(this).fromTwos(e));
                }, y.prototype.toTwos = function(e) {
                    return c(d(this).toTwos(e));
                }, y.prototype.abs = function() {
                    return "-" === this._hex[0] ? c(d(this).mul(l)) : this;
                }, y.prototype.add = function(e) {
                    return c(d(this).add(f(e)));
                }, y.prototype.sub = function(e) {
                    return c(d(this).sub(f(e)));
                }, y.prototype.div = function(e) {
                    return m(e).isZero() && u.throwError("division by zero", u.NUMERIC_FAULT, {
                        operation: "divide",
                        fault: "division by zero"
                    }), c(d(this).div(f(e)));
                }, y.prototype.mul = function(e) {
                    return c(d(this).mul(f(e)));
                }, y.prototype.mod = function(e) {
                    return c(d(this).mod(f(e)));
                }, y.prototype.pow = function(e) {
                    return c(d(this).pow(f(e)));
                }, y.prototype.maskn = function(e) {
                    return c(d(this).maskn(e));
                }, y.prototype.eq = function(e) {
                    return d(this).eq(f(e));
                }, y.prototype.lt = function(e) {
                    return d(this).lt(f(e));
                }, y.prototype.lte = function(e) {
                    return d(this).lte(f(e));
                }, y.prototype.gt = function(e) {
                    return d(this).gt(f(e));
                }, y.prototype.gte = function(e) {
                    return d(this).gte(f(e));
                }, y.prototype.isZero = function() {
                    return d(this).isZero();
                }, y.prototype.toNumber = function() {
                    try {
                        return d(this).toNumber();
                    } catch (e) {
                        u.throwError("overflow", u.NUMERIC_FAULT, {
                            operation: "setValue",
                            fault: "overflow",
                            details: e.message
                        });
                    }
                    return null;
                }, y.prototype.toString = function() {
                    return d(this).toString(10);
                }, y.prototype.toHexString = function() {
                    return this._hex;
                }, y.isBigNumber = function(e) {
                    return a.isType(e, "BigNumber");
                }, y);
                function y(e) {
                    if (u.checkNew(this, y), a.setType(this, "BigNumber"), "string" == typeof e) s.isHexString(e) ? a.defineReadOnly(this, "_hex", e = "0x" == e ? "0x0" : e) : "-" === e[0] && s.isHexString(e.substring(1)) ? a.defineReadOnly(this, "_hex", e) : e.match(/^-?[0-9]*$/) ? a.defineReadOnly(this, "_hex", h(new o.default.BN(e = "" == e ? "0" : e))) : u.throwError("invalid BigNumber string value", u.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    });
                    else if ("number" == typeof e) {
                        parseInt(String(e)) !== e && u.throwError("underflow", u.NUMERIC_FAULT, {
                            operation: "setValue",
                            fault: "underflow",
                            value: e,
                            outputValue: parseInt(String(e))
                        });
                        try {
                            a.defineReadOnly(this, "_hex", h(new o.default.BN(e)));
                        } catch (e) {
                            u.throwError("overflow", u.NUMERIC_FAULT, {
                                operation: "setValue",
                                fault: "overflow",
                                details: e.message
                            });
                        }
                    } else e instanceof y ? a.defineReadOnly(this, "_hex", e._hex) : e.toHexString ? a.defineReadOnly(this, "_hex", h(f(e.toHexString()))) : e._hex && s.isHexString(e._hex) ? a.defineReadOnly(this, "_hex", e._hex) : s.isArrayish(e) ? a.defineReadOnly(this, "_hex", h(new o.default.BN(s.hexlify(e).substring(2), 16))) : u.throwError("invalid BigNumber value", u.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    });
                }
                function m(e) {
                    return p.isBigNumber(e) ? e : new p(e);
                }
                r53.BigNumber = p, r53.bigNumberify = m;
            },
            {
                "../errors": 5,
                "./bytes": 64,
                "./properties": 74,
                "bn.js": 9
            }
        ],
        64: [
            function(e193, t91, r54) {
                "use strict";
                var n35 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r54, "__esModule", {
                    value: !0
                });
                var s20 = n35(e193("../errors"));
                function a(e) {
                    return !!e.toHexString;
                }
                function u(t) {
                    return t.slice || (t.slice = function() {
                        var e = Array.prototype.slice.call(arguments);
                        return u(new Uint8Array(Array.prototype.slice.apply(t, e)));
                    }), t;
                }
                function l(e) {
                    if (!e || parseInt(String(e.length)) != e.length || "string" == typeof e) return !1;
                    for(var t = 0; t < e.length; t++){
                        var r = e[t];
                        if (r < 0 || 256 <= r || parseInt(String(r)) != r) return !1;
                    }
                    return !0;
                }
                function h(e) {
                    if (null == e && s20.throwError("cannot convert null value to array", s20.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }), "string" != typeof (e = a(e) ? e.toHexString() : e)) return l(e) ? u(new Uint8Array(e)) : (s20.throwError("invalid arrayify value", null, {
                        arg: "value",
                        value: e,
                        type: typeof e
                    }), null);
                    var t = e.match(/^(0x)?[0-9a-fA-F]*$/);
                    t || s20.throwError("invalid hexidecimal string", s20.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }), "0x" !== t[1] && s20.throwError("hex string must have 0x prefix", s20.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }), (e = e.substring(2)).length % 2 && (e = "0" + e);
                    for(var r = [], n = 0; n < e.length; n += 2)r.push(parseInt(e.substr(n, 2), 16));
                    return u(new Uint8Array(r));
                }
                function i30(e) {
                    for(var t = [], r = 0, n = 0; n < e.length; n++){
                        var i = h(e[n]);
                        t.push(i), r += i.length;
                    }
                    for(var o = new Uint8Array(r), s = 0, n = 0; n < t.length; n++)o.set(t[n], s), s += t[n].length;
                    return u(o);
                }
                function o24(e, t) {
                    return !("string" != typeof e || !e.match(/^0x[0-9A-Fa-f]*$/)) && (!t || e.length === 2 + 2 * t);
                }
                r54.isHexable = a, r54.isArrayish = l, r54.arrayify = h, r54.concat = i30, r54.stripZeros = function(e) {
                    var t = h(e);
                    if (0 === t.length) return t;
                    for(var r = 0; 0 === t[r];)r++;
                    return t = r ? t.slice(r) : t;
                }, r54.padZeros = function(e, t) {
                    if (t < (e = h(e)).length) throw new Error("cannot pad");
                    var r = new Uint8Array(t);
                    return r.set(e, t - e.length), u(r);
                }, r54.isHexString = o24;
                var f = "0123456789abcdef";
                function c(e) {
                    if (a(e)) return e.toHexString();
                    if ("number" == typeof e) {
                        e < 0 && s20.throwError("cannot hexlify negative value", s20.INVALID_ARGUMENT, {
                            arg: "value",
                            value: e
                        }), 9007199254740991 <= e && s20.throwError("out-of-range", s20.NUMERIC_FAULT, {
                            operartion: "hexlify",
                            fault: "out-of-safe-range"
                        });
                        for(var t = ""; e;)t = f[15 & e] + t, e = Math.floor(e / 16);
                        return t.length ? "0x" + (t = t.length % 2 ? "0" + t : t) : "0x00";
                    }
                    if ("string" == typeof e) {
                        var r = e.match(/^(0x)?[0-9a-fA-F]*$/);
                        return r || s20.throwError("invalid hexidecimal string", s20.INVALID_ARGUMENT, {
                            arg: "value",
                            value: e
                        }), "0x" !== r[1] && s20.throwError("hex string must have 0x prefix", s20.INVALID_ARGUMENT, {
                            arg: "value",
                            value: e
                        }), e = e.length % 2 ? "0x0" + e.substring(2) : e;
                    }
                    if (l(e)) {
                        for(var n = [], i = 0; i < e.length; i++){
                            var o = e[i];
                            n.push(f[(240 & o) >> 4] + f[15 & o]);
                        }
                        return "0x" + n.join("");
                    }
                    return s20.throwError("invalid hexlify value", null, {
                        arg: "value",
                        value: e
                    }), "never";
                }
                function d(e, t) {
                    for(o24(e) || s20.throwError("invalid hex string", s20.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }); e.length < 2 * t + 2;)e = "0x0" + e.substring(2);
                    return e;
                }
                function p(e) {
                    var t = 0, r = "0x", n = "0x";
                    if ((i = e) && null != i.r && null != i.s) {
                        null == e.v && null == e.recoveryParam && s20.throwError("at least on of recoveryParam or v must be specified", s20.INVALID_ARGUMENT, {
                            argument: "signature",
                            value: e
                        }), r = d(e.r, 32), n = d(e.s, 32), "string" == typeof (t = e.v) && (t = parseInt(t, 16));
                        var i = e.recoveryParam, t = 27 + (i = null == i && null != e.v ? 1 - t % 2 : i);
                    } else {
                        e = h(e);
                        if (65 !== e.length) throw new Error("invalid signature");
                        r = c(e.slice(0, 32)), n = c(e.slice(32, 64)), 27 !== (t = e[64]) && 28 !== t && (t = 27 + t % 2);
                    }
                    return {
                        r: r,
                        s: n,
                        recoveryParam: t - 27,
                        v: t
                    };
                }
                r54.hexlify = c, r54.hexDataLength = function(e) {
                    return o24(e) && e.length % 2 == 0 ? (e.length - 2) / 2 : null;
                }, r54.hexDataSlice = function(e, t, r) {
                    return o24(e) || s20.throwError("invalid hex data", s20.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }), e.length % 2 != 0 && s20.throwError("hex data length must be even", s20.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }), t = 2 + 2 * t, null != r ? "0x" + e.substring(t, 2 + 2 * r) : "0x" + e.substring(t);
                }, r54.hexStripZeros = function(e) {
                    for(o24(e) || s20.throwError("invalid hex string", s20.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }); 3 < e.length && "0x0" === e.substring(0, 3);)e = "0x" + e.substring(3);
                    return e;
                }, r54.hexZeroPad = d, r54.splitSignature = p, r54.joinSignature = function(e) {
                    return c(i30([
                        (e = p(e)).r,
                        e.s,
                        e.recoveryParam ? "0x1c" : "0x1b"
                    ]));
                };
            },
            {
                "../errors": 5
            }
        ],
        65: [
            function(e194, t92, r55) {
                "use strict";
                var n36 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r55, "__esModule", {
                    value: !0
                });
                var i = n36(e194("../errors")), o = e194("./bytes"), s = e194("./utf8"), a = e194("./keccak256"), u = new Uint8Array([
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]), l = new RegExp("^((.*)\\.)?([^.]+)$"), h = new RegExp("^[a-z0-9.-]*$");
                r55.namehash = function(e) {
                    "string" != typeof e && i.throwError("invalid address - " + String(e), i.INVALID_ARGUMENT, {
                        argument: "name",
                        value: e
                    }), (e = e.toLowerCase()).match(h) || i.throwError("contains invalid UseSTD3ASCIIRules characters", i.INVALID_ARGUMENT, {
                        argument: "name",
                        value: e
                    });
                    for(var t = u; e.length;){
                        var r = e.match(l), n = s.toUtf8Bytes(r[3]), t = a.keccak256(o.concat([
                            t,
                            a.keccak256(n)
                        ]));
                        e = r[2] || "";
                    }
                    return o.hexlify(t);
                }, r55.id = function(e) {
                    return a.keccak256(s.toUtf8Bytes(e));
                }, r55.hashMessage = function(e) {
                    return a.keccak256(o.concat([
                        s.toUtf8Bytes("\x19Ethereum Signed Message:\n"),
                        s.toUtf8Bytes(String(e.length)),
                        "string" == typeof e ? s.toUtf8Bytes(e) : e
                    ]));
                };
            },
            {
                "../errors": 5,
                "./bytes": 64,
                "./keccak256": 71,
                "./utf8": 85
            }
        ],
        66: [
            function(e195, t93, r56) {
                "use strict";
                var n37 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r56, "__esModule", {
                    value: !0
                });
                var h = n37(e195("../errors")), f = e195("../wordlists/lang-en"), a15 = e195("./basex"), c = e195("./bytes"), u11 = e195("./bignumber"), i31 = e195("./utf8"), o25 = e195("./pbkdf2"), l6 = e195("./hmac"), d = e195("./properties"), p = e195("./secp256k1"), y = e195("./sha2"), m = u11.bigNumberify("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), s21 = i31.toUtf8Bytes("Bitcoin seed"), g = 2147483648;
                function v(e) {
                    return (1 << e) - 1 << 8 - e;
                }
                function b(e) {
                    return c.hexZeroPad(c.hexlify(e), 32);
                }
                function w(e) {
                    var t = c.hexDataSlice(y.sha256(y.sha256(e)), 0, 4);
                    return a15.Base58.encode(c.concat([
                        e,
                        t
                    ]));
                }
                var _ = {};
                r56.defaultPath = "m/44'/60'/0'/0/0";
                var M = (Object.defineProperty(A.prototype, "extendedKey", {
                    get: function() {
                        if (256 <= this.depth) throw new Error("Depth too large!");
                        return w(c.concat([
                            null != this.privateKey ? "0x0488ADE4" : "0x0488B21E",
                            c.hexlify(this.depth),
                            this.parentFingerprint,
                            c.hexZeroPad(c.hexlify(this.index), 4),
                            this.chainCode,
                            null != this.privateKey ? c.concat([
                                "0x00",
                                this.privateKey
                            ]) : this.publicKey
                        ]));
                    },
                    enumerable: !0,
                    configurable: !0
                }), A.prototype.neuter = function() {
                    return new A(_, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, null, this.path);
                }, A.prototype._derive = function(e) {
                    if (4294967295 < e) throw new Error("invalid index - " + String(e));
                    var t = this.path;
                    t && (t += "/" + (e & ~g));
                    var r = new Uint8Array(37);
                    if (e & g) {
                        if (!this.privateKey) throw new Error("cannot derive child of neutered node");
                        r.set(c.arrayify(this.privateKey), 1), t && (t += "'");
                    } else r.set(c.arrayify(this.publicKey));
                    for(var n = 24; 0 <= n; n -= 8)r[33 + (n >> 3)] = e >> 24 - n & 255;
                    var i = l6.computeHmac(l6.SupportedAlgorithms.sha512, this.chainCode, r), o = i.slice(0, 32), s = i.slice(32), a = null, i = null;
                    return this.privateKey ? a = b(u11.bigNumberify(o).add(this.privateKey).mod(m)) : i = new p.KeyPair(c.hexlify(o))._addPoint(this.publicKey), new A(_, a, i, this.fingerprint, b(s), e, this.depth + 1, this.mnemonic, t);
                }, A.prototype.derivePath = function(e) {
                    var t = e.split("/");
                    if (0 === t.length || "m" === t[0] && 0 !== this.depth) throw new Error("invalid path - " + e);
                    "m" === t[0] && t.shift();
                    for(var r = this, n = 0; n < t.length; n++){
                        var i = t[n];
                        if (i.match(/^[0-9]+'$/)) {
                            var o = parseInt(i.substring(0, i.length - 1));
                            if (g <= o) throw new Error("invalid path index - " + i);
                            r = r._derive(g + o);
                        } else {
                            if (!i.match(/^[0-9]+$/)) throw new Error("invalid path component - " + i);
                            o = parseInt(i);
                            if (g <= o) throw new Error("invalid path index - " + i);
                            r = r._derive(o);
                        }
                    }
                    return r;
                }, A.isHDNode = function(e) {
                    return d.isType(e, "HDNode");
                }, A);
                function A(e, t, r, n, i, o, s, a, u) {
                    if (h.checkNew(this, A), e !== _) throw new Error("HDNode constructor cannot be called directly");
                    t ? (t = new p.KeyPair(t), d.defineReadOnly(this, "privateKey", t.privateKey), d.defineReadOnly(this, "publicKey", t.compressedPublicKey)) : (d.defineReadOnly(this, "privateKey", null), d.defineReadOnly(this, "publicKey", c.hexlify(r))), d.defineReadOnly(this, "parentFingerprint", n), d.defineReadOnly(this, "fingerprint", c.hexDataSlice(y.ripemd160(y.sha256(this.publicKey)), 0, 4)), d.defineReadOnly(this, "address", p.computeAddress(this.publicKey)), d.defineReadOnly(this, "chainCode", i), d.defineReadOnly(this, "index", o), d.defineReadOnly(this, "depth", s), d.defineReadOnly(this, "mnemonic", a), d.defineReadOnly(this, "path", u), d.setType(this, "HDNode");
                }
                function E(e, t) {
                    e = c.arrayify(e);
                    if (e.length < 16 || 64 < e.length) throw new Error("invalid seed");
                    e = c.arrayify(l6.computeHmac(l6.SupportedAlgorithms.sha512, s21, e));
                    return new M(_, b(e.slice(0, 32)), null, "0x00000000", b(e.slice(32)), 0, 0, t, "m");
                }
                function S(e, t) {
                    t = i31.toUtf8Bytes("mnemonic" + (t = t || ""), i31.UnicodeNormalizationForm.NFKD);
                    return c.hexlify(o25.pbkdf2(i31.toUtf8Bytes(e, i31.UnicodeNormalizationForm.NFKD), t, 2048, 64, "sha512"));
                }
                function k(e, t) {
                    t = t || f.langEn, h.checkNormalize();
                    var r = t.split(e);
                    if (r.length % 3 != 0) throw new Error("invalid mnemonic");
                    for(var n = c.arrayify(new Uint8Array(Math.ceil(11 * r.length / 8))), i = 0, o = 0; o < r.length; o++){
                        var s = t.getWordIndex(r[o].normalize("NFKD"));
                        if (-1 === s) throw new Error("invalid mnemonic");
                        for(var a = 0; a < 11; a++)s & 1 << 10 - a && (n[i >> 3] |= 1 << 7 - i % 8), i++;
                    }
                    var u = 32 * r.length / 3, l = v(r.length / 3), e = c.arrayify(y.sha256(n.slice(0, u / 8)))[0];
                    if ((e &= l) != (n[n.length - 1] & l)) throw new Error("invalid checksum");
                    return c.hexlify(n.slice(0, u / 8));
                }
                function N(e196, t) {
                    if ((e196 = c.arrayify(e196)).length % 4 != 0 || e196.length < 16 || 32 < e196.length) throw new Error("invalid entropy");
                    for(var r = [
                        0
                    ], n = 11, i = 0; i < e196.length; i++)8 < n ? (r[r.length - 1] <<= 8, r[r.length - 1] |= e196[i], n -= 8) : (r[r.length - 1] <<= n, r[r.length - 1] |= e196[i] >> 8 - n, r.push(e196[i] & (1 << 8 - n) - 1), n += 3);
                    var o = c.arrayify(y.sha256(e196))[0], s = e196.length / 4;
                    return o &= v(s), r[r.length - 1] <<= s, r[r.length - 1] |= o >> 8 - s, (t = t || f.langEn).join(r.map(function(e) {
                        return t.getWord(e);
                    }));
                }
                r56.HDNode = M, r56.fromExtendedKey = function(e) {
                    var t = a15.Base58.decode(e);
                    82 === t.length && w(t.slice(0, 78)) === e || h.throwError("invalid extended key", h.INVALID_ARGUMENT, {
                        argument: "extendedKey",
                        value: "[REDACTED]"
                    });
                    var r = t[4], n = c.hexlify(t.slice(5, 9)), i = parseInt(c.hexlify(t.slice(9, 13)).substring(2), 16), o = c.hexlify(t.slice(13, 45)), s = t.slice(45, 78);
                    switch(c.hexlify(t.slice(0, 4))){
                        case "0x0488b21e":
                        case "0x043587cf":
                            return new M(_, null, c.hexlify(s), n, o, i, r, null, null);
                        case "0x0488ade4":
                        case "0x04358394":
                            if (0 !== s[0]) break;
                            return new M(_, c.hexlify(s.slice(1)), null, n, o, i, r, null, null);
                    }
                    return h.throwError("invalid extended key", h.INVALID_ARGUMENT, {
                        argument: "extendedKey",
                        value: "[REDACTED]"
                    });
                }, r56.fromMnemonic = function(e, t, r) {
                    return E(S(e = N(k(e, t), t), r), e);
                }, r56.fromSeed = function(e) {
                    return E(e, null);
                }, r56.mnemonicToSeed = S, r56.mnemonicToEntropy = k, r56.entropyToMnemonic = N, r56.isValidMnemonic = function(e, t) {
                    try {
                        return k(e, t), !0;
                    } catch (e197) {}
                    return !1;
                };
            },
            {
                "../errors": 5,
                "../wordlists/lang-en": 90,
                "./basex": 62,
                "./bignumber": 63,
                "./bytes": 64,
                "./hmac": 67,
                "./pbkdf2": 73,
                "./properties": 74,
                "./secp256k1": 77,
                "./sha2": 79,
                "./utf8": 85
            }
        ],
        67: [
            function(e198, t94, r57) {
                "use strict";
                var n = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r57, "__esModule", {
                    value: !0
                });
                var i, o = n(e198("hash.js")), s = e198("../utils/bytes"), a = n(e198("../errors"));
                (e198 = i = r57.SupportedAlgorithms || (r57.SupportedAlgorithms = {})).sha256 = "sha256", e198.sha512 = "sha512", r57.computeHmac = function(e, t, r) {
                    return i[e] || a.throwError("unsupported algorithm " + e, a.UNSUPPORTED_OPERATION, {
                        operation: "hmac",
                        algorithm: e
                    }), s.arrayify(o.hmac(o[e], s.arrayify(t)).update(s.arrayify(r)).digest());
                };
            },
            {
                "../errors": 5,
                "../utils/bytes": 64,
                "hash.js": 26
            }
        ],
        68: [
            function(e199, t95, r58) {
                "use strict";
                var n = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r58, "__esModule", {
                    value: !0
                });
                var i = e199("./abi-coder");
                r58.AbiCoder = i.AbiCoder, r58.defaultAbiCoder = i.defaultAbiCoder, r58.formatSignature = i.formatSignature, r58.formatParamType = i.formatParamType, r58.parseSignature = i.parseSignature, r58.parseParamType = i.parseParamType;
                i = e199("./address");
                r58.getAddress = i.getAddress, r58.getContractAddress = i.getContractAddress, r58.getCreate2Address = i.getCreate2Address, r58.getIcapAddress = i.getIcapAddress;
                i = n(e199("./base64"));
                r58.base64 = i;
                i = e199("./bignumber");
                r58.BigNumber = i.BigNumber, r58.bigNumberify = i.bigNumberify;
                i = e199("./bytes");
                r58.arrayify = i.arrayify, r58.concat = i.concat, r58.hexDataSlice = i.hexDataSlice, r58.hexDataLength = i.hexDataLength, r58.hexlify = i.hexlify, r58.hexStripZeros = i.hexStripZeros, r58.hexZeroPad = i.hexZeroPad, r58.isHexString = i.isHexString, r58.joinSignature = i.joinSignature, r58.padZeros = i.padZeros, r58.splitSignature = i.splitSignature, r58.stripZeros = i.stripZeros;
                i = e199("./hash");
                r58.hashMessage = i.hashMessage, r58.id = i.id, r58.namehash = i.namehash;
                i = n(e199("./hdnode"));
                r58.HDNode = i;
                i = e199("./interface");
                r58.Interface = i.Interface;
                i = e199("./json-wallet");
                r58.getJsonWalletAddress = i.getJsonWalletAddress;
                i = e199("./keccak256");
                r58.keccak256 = i.keccak256;
                i = e199("./sha2");
                r58.sha256 = i.sha256;
                i = e199("./solidity");
                r58.solidityKeccak256 = i.keccak256, r58.solidityPack = i.pack, r58.soliditySha256 = i.sha256;
                i = e199("./random-bytes");
                r58.randomBytes = i.randomBytes;
                i = e199("./networks");
                r58.getNetwork = i.getNetwork;
                i = e199("./properties");
                r58.checkProperties = i.checkProperties, r58.deepCopy = i.deepCopy, r58.defineReadOnly = i.defineReadOnly, r58.resolveProperties = i.resolveProperties, r58.shallowCopy = i.shallowCopy;
                n = n(e199("./rlp"));
                r58.RLP = n;
                n = e199("./secp256k1");
                r58.computeAddress = n.computeAddress, r58.computePublicKey = n.computePublicKey, r58.recoverAddress = n.recoverAddress, r58.recoverPublicKey = n.recoverPublicKey, r58.verifyMessage = n.verifyMessage;
                n = e199("./signing-key");
                r58.SigningKey = n.SigningKey;
                n = e199("./transaction");
                r58.populateTransaction = n.populateTransaction;
                n = e199("./transaction");
                r58.parseTransaction = n.parse, r58.serializeTransaction = n.serialize;
                n = e199("./utf8");
                r58.formatBytes32String = n.formatBytes32String, r58.parseBytes32String = n.parseBytes32String, r58.toUtf8Bytes = n.toUtf8Bytes, r58.toUtf8String = n.toUtf8String;
                n = e199("./units");
                r58.commify = n.commify, r58.formatEther = n.formatEther, r58.parseEther = n.parseEther, r58.formatUnits = n.formatUnits, r58.parseUnits = n.parseUnits;
                n = e199("./web");
                r58.fetchJson = n.fetchJson, r58.poll = n.poll;
                n = e199("./hmac");
                r58.SupportedAlgorithms = n.SupportedAlgorithms;
                n = e199("./utf8");
                r58.UnicodeNormalizationForm = n.UnicodeNormalizationForm;
                e199 = e199("./wordlist");
                r58.Wordlist = e199.Wordlist;
            },
            {
                "./abi-coder": 59,
                "./address": 60,
                "./base64": 61,
                "./bignumber": 63,
                "./bytes": 64,
                "./hash": 65,
                "./hdnode": 66,
                "./hmac": 67,
                "./interface": 69,
                "./json-wallet": 70,
                "./keccak256": 71,
                "./networks": 72,
                "./properties": 74,
                "./random-bytes": 75,
                "./rlp": 76,
                "./secp256k1": 77,
                "./sha2": 79,
                "./signing-key": 81,
                "./solidity": 82,
                "./transaction": 83,
                "./units": 84,
                "./utf8": 85,
                "./web": 86,
                "./wordlist": 87
            }
        ],
        69: [
            function(e200, t96, r59) {
                "use strict";
                var n38, i32 = this && this.__extends || (n38 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n38(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o26 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r59, "__esModule", {
                    value: !0
                });
                var s22, a16 = e200("./address"), f = e200("./abi-coder"), u12 = e200("./bignumber"), c = e200("./bytes"), l7 = e200("./hash"), h4 = e200("./keccak256"), d = e200("./properties"), p = o26(e200("../errors")), y = function(e) {
                    d.setType(this, "Indexed"), d.defineReadOnly(this, "hash", e);
                }, e200 = function(e) {
                    for(var t in d.setType(this, "Description"), e)d.defineReadOnly(this, t, d.deepCopy(e[t], !0));
                    Object.freeze(this);
                }, m = (i32(g, s22 = e200), g.prototype.encode = function(e, t) {
                    c.isHexString(e) || p.throwError("invalid contract bytecode", p.INVALID_ARGUMENT, {
                        arg: "bytecode",
                        value: e
                    }), p.checkArgumentCount(t.length, this.inputs.length, " in Interface constructor");
                    try {
                        return e + f.defaultAbiCoder.encode(this.inputs, t).substring(2);
                    } catch (e201) {
                        p.throwError("invalid constructor argument", p.INVALID_ARGUMENT, {
                            arg: e201.arg,
                            reason: e201.reason,
                            value: e201.value
                        });
                    }
                    return null;
                }, g);
                function g() {
                    return null !== s22 && s22.apply(this, arguments) || this;
                }
                var v, b = (i32(w, v = e200), w.prototype.encode = function(e) {
                    p.checkArgumentCount(e.length, this.inputs.length, " in interface function " + this.name);
                    try {
                        return this.sighash + f.defaultAbiCoder.encode(this.inputs, e).substring(2);
                    } catch (e202) {
                        p.throwError("invalid input argument", p.INVALID_ARGUMENT, {
                            arg: e202.arg,
                            reason: e202.reason,
                            value: e202.value
                        });
                    }
                    return null;
                }, w.prototype.decode = function(t) {
                    try {
                        return f.defaultAbiCoder.decode(this.outputs, c.arrayify(t));
                    } catch (e) {
                        p.throwError("invalid data for function output", p.INVALID_ARGUMENT, {
                            arg: "data",
                            errorArg: e.arg,
                            errorValue: e.value,
                            value: t,
                            reason: e.reason
                        });
                    }
                }, w);
                function w() {
                    return null !== v && v.apply(this, arguments) || this;
                }
                var _, M = (i32(A, _ = e200), A);
                function A() {
                    return null !== _ && _.apply(this, arguments) || this;
                }
                var E, S = (i32(k, E = e200), k.prototype.encodeTopics = function(e203) {
                    var n = this;
                    e203.length > this.inputs.length && p.throwError("too many arguments for " + this.name, p.UNEXPECTED_ARGUMENT, {
                        maxCount: e203.length,
                        expectedCount: this.inputs.length
                    });
                    var i = [];
                    for(this.anonymous || i.push(this.topic), e203.forEach(function(e, t) {
                        var r = n.inputs[t];
                        r.indexed ? null == e ? i.push(null) : "string" === r.type ? i.push(l7.id(e)) : "bytes" === r.type ? i.push(h4.keccak256(e)) : -1 !== r.type.indexOf("[") || "tuple" === r.type.substring(0, 5) ? p.throwError("filtering with tuples or arrays not implemented yet; bug us on GitHub", p.NOT_IMPLEMENTED, {
                            operation: "filter(array|tuple)"
                        }) : ("address" === r.type && a16.getAddress(e), i.push(c.hexZeroPad(c.hexlify(e), 32).toLowerCase())) : null != e && p.throwError("cannot filter non-indexed parameters; must be null", p.INVALID_ARGUMENT, {
                            argument: r.name || t,
                            value: e
                        });
                    }); i.length && null === i[i.length - 1];)i.pop();
                    return i;
                }, k.prototype.decode = function(e204, r) {
                    null == r || this.anonymous || (r = r.slice(1));
                    var n, i = [], o = [], s = [];
                    this.inputs.forEach(function(e, t) {
                        e.indexed ? "string" === e.type || "bytes" === e.type || 0 <= e.type.indexOf("[") || "tuple" === e.type.substring(0, 5) ? (i.push({
                            type: "bytes32",
                            name: e.name || ""
                        }), s.push(!0)) : (i.push(e), s.push(!1)) : (o.push(e), s.push(!1));
                    }), null != r && (n = f.defaultAbiCoder.decode(i, c.concat(r)));
                    var a = f.defaultAbiCoder.decode(o, c.arrayify(e204)), u = {}, l = 0, h = 0;
                    return this.inputs.forEach(function(e, t) {
                        e.indexed ? null == r ? u[t] = new y(null) : s[t] ? u[t] = new y(n[h++]) : u[t] = n[h++] : u[t] = a[l++], e.name && (u[e.name] = u[t]);
                    }), u.length = this.inputs.length, new M(u);
                }, k);
                function k() {
                    return null !== E && E.apply(this, arguments) || this;
                }
                var N, x = (i32(P, N = e200), P);
                function P() {
                    return null !== N && N.apply(this, arguments) || this;
                }
                var I, T = (i32(R, I = e200), R);
                function R() {
                    return null !== I && I.apply(this, arguments) || this;
                }
                function O(e) {
                    switch(e.type){
                        case "constructor":
                            var t = new m({
                                inputs: e.inputs,
                                payable: null == e.payable || !!e.payable
                            });
                            this.deployFunction || (this.deployFunction = t);
                            break;
                        case "function":
                            var r = f.formatSignature(e).replace(/tuple/g, ""), n = l7.id(r).substring(0, 10), i = !1;
                            null != e.constant ? i = e.constant : null != e.stateMutability && (i = "view" == e.stateMutability || "pure" == e.stateMutability);
                            t = new b({
                                inputs: e.inputs,
                                outputs: e.outputs,
                                gas: e.gas,
                                payable: null == e.payable || !!e.payable,
                                type: i ? "call" : "transaction",
                                name: e.name,
                                signature: r,
                                sighash: n
                            });
                            e.name && (null == this.functions[e.name] ? d.defineReadOnly(this.functions, e.name, t) : p.warn("WARNING: Multiple definitions for " + e.name)), null == this.functions[t.signature] && d.defineReadOnly(this.functions, t.signature, t);
                            break;
                        case "event":
                            r = f.formatSignature(e).replace(/tuple/g, ""), t = new S({
                                name: e.name,
                                signature: r,
                                inputs: e.inputs,
                                topic: l7.id(r),
                                anonymous: !!e.anonymous
                            });
                            e.name && null == this.events[e.name] && d.defineReadOnly(this.events, e.name, t), null == this.events[t.signature] && d.defineReadOnly(this.events, t.signature, t);
                            break;
                        case "receive":
                        case "fallback":
                            break;
                        default:
                            p.warn("WARNING: unsupported ABI type - " + e.type);
                    }
                }
                C.prototype.parseTransaction = function(e) {
                    var t, r = e.data.substring(0, 10).toLowerCase();
                    for(t in this.functions)if (-1 !== t.indexOf("(")) {
                        var n = this.functions[t];
                        if (n.sighash === r) {
                            var i = f.defaultAbiCoder.decode(n.inputs, "0x" + e.data.substring(10));
                            return new x({
                                args: i,
                                decode: n.decode,
                                name: n.name,
                                signature: n.signature,
                                sighash: n.sighash,
                                value: u12.bigNumberify(e.value || "0")
                            });
                        }
                    }
                    return null;
                }, C.prototype.parseLog = function(e) {
                    for(var t in this.events)if (-1 !== t.indexOf("(")) {
                        t = this.events[t];
                        if (!t.anonymous && t.topic === e.topics[0]) return new T({
                            decode: t.decode,
                            name: t.name,
                            signature: t.signature,
                            topic: t.topic,
                            values: t.decode(e.data, e.topics)
                        });
                    }
                    return null;
                }, C.isInterface = function(e) {
                    return d.isType(e, "Interface");
                }, C.isIndexed = function(e) {
                    return d.isType(e, "Indexed");
                }, e200 = C;
                function C(t) {
                    if (p.checkNew(this, C), "string" == typeof t) {
                        try {
                            t = JSON.parse(t);
                        } catch (e) {
                            p.throwError("could not parse ABI JSON", p.INVALID_ARGUMENT, {
                                arg: "abi",
                                errorMessage: e.message,
                                value: t
                            });
                        }
                        if (!Array.isArray(t)) return p.throwError("invalid abi", p.INVALID_ARGUMENT, {
                            arg: "abi",
                            value: t
                        }), null;
                    }
                    d.defineReadOnly(this, "functions", {}), d.defineReadOnly(this, "events", {});
                    var r = [];
                    t.forEach(function(e) {
                        "string" == typeof e && (e = f.parseSignature(e)), r.push(e);
                    }), d.defineReadOnly(this, "abi", d.deepCopy(r, !0)), r.forEach(O, this), this.deployFunction || O.call(this, {
                        type: "constructor",
                        inputs: []
                    }), d.setType(this, "Interface");
                }
                r59.Interface = e200;
            },
            {
                "../errors": 5,
                "./abi-coder": 59,
                "./address": 60,
                "./bignumber": 63,
                "./bytes": 64,
                "./hash": 65,
                "./keccak256": 71,
                "./properties": 74
            }
        ],
        70: [
            function(e205, t97, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                var n = e205("./address");
                function i(e) {
                    try {
                        var t = JSON.parse(e);
                    } catch (e206) {
                        return !1;
                    }
                    return t.encseed && t.ethaddr;
                }
                function o(e) {
                    try {
                        var t = JSON.parse(e);
                    } catch (e207) {
                        return !1;
                    }
                    return !(!t.version || parseInt(t.version) !== t.version || 3 !== parseInt(t.version));
                }
                r.isCrowdsaleWallet = i, r.isSecretStorageWallet = o, r.getJsonWalletAddress = function(e) {
                    if (i(e)) try {
                        return n.getAddress(JSON.parse(e).ethaddr);
                    } catch (e208) {
                        return null;
                    }
                    if (o(e)) try {
                        return n.getAddress(JSON.parse(e).address);
                    } catch (e209) {
                        return null;
                    }
                    return null;
                };
            },
            {
                "./address": 60
            }
        ],
        71: [
            function(e210, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                var n = e210("js-sha3"), i = e210("./bytes");
                r.keccak256 = function(e) {
                    return "0x" + n.keccak_256(i.arrayify(e));
                };
            },
            {
                "./bytes": 64,
                "js-sha3": 40
            }
        ],
        72: [
            function(e211, t98, r60) {
                "use strict";
                var n = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r60, "__esModule", {
                    value: !0
                });
                var i = n(e211("../errors"));
                function o(r) {
                    return function(e) {
                        var t = [];
                        return e.InfuraProvider && t.push(new e.InfuraProvider(r)), e.EtherscanProvider && t.push(new e.EtherscanProvider(r)), 0 === t.length ? null : e.FallbackProvider ? new e.FallbackProvider(t) : t[0];
                    };
                }
                function s(t, r) {
                    return function(e) {
                        return e.JsonRpcProvider ? new e.JsonRpcProvider(t, r) : null;
                    };
                }
                var n = {
                    chainId: 1,
                    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                    name: "homestead",
                    _defaultProvider: o("homestead")
                }, e211 = {
                    chainId: 3,
                    ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                    name: "ropsten",
                    _defaultProvider: o("ropsten")
                }, a = {
                    unspecified: {
                        chainId: 0,
                        name: "unspecified"
                    },
                    homestead: n,
                    mainnet: n,
                    morden: {
                        chainId: 2,
                        name: "morden"
                    },
                    ropsten: e211,
                    testnet: e211,
                    rinkeby: {
                        chainId: 4,
                        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                        name: "rinkeby",
                        _defaultProvider: o("rinkeby")
                    },
                    goerli: {
                        chainId: 5,
                        ensAddress: "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e",
                        name: "goerli",
                        _defaultProvider: o("goerli")
                    },
                    kovan: {
                        chainId: 42,
                        name: "kovan",
                        _defaultProvider: o("kovan")
                    },
                    classic: {
                        chainId: 61,
                        name: "classic",
                        _defaultProvider: s("https://web3.gastracker.io", "classic")
                    },
                    classicTestnet: {
                        chainId: 62,
                        name: "classicTestnet",
                        _defaultProvider: s("https://web3.gastracker.io/morden", "classicTestnet")
                    }
                };
                r60.getNetwork = function(e) {
                    if (null == e) return null;
                    if ("number" == typeof e) {
                        for(var t in a){
                            t = a[t];
                            if (t.chainId === e) return {
                                name: t.name,
                                chainId: t.chainId,
                                ensAddress: t.ensAddress || null,
                                _defaultProvider: t._defaultProvider || null
                            };
                        }
                        return {
                            chainId: e,
                            name: "unknown"
                        };
                    }
                    if ("string" != typeof e) return (r = a[e.name]) ? (0 !== e.chainId && e.chainId !== r.chainId && i.throwError("network chainId mismatch", i.INVALID_ARGUMENT, {
                        arg: "network",
                        value: e
                    }), {
                        name: e.name,
                        chainId: r.chainId,
                        ensAddress: e.ensAddress || r.ensAddress || null,
                        _defaultProvider: e._defaultProvider || r._defaultProvider || null
                    }) : ("number" != typeof e.chainId && i.throwError("invalid network chainId", i.INVALID_ARGUMENT, {
                        arg: "network",
                        value: e
                    }), e);
                    var r = a[e];
                    return null == r ? null : {
                        name: r.name,
                        chainId: r.chainId,
                        ensAddress: r.ensAddress,
                        _defaultProvider: r._defaultProvider || null
                    };
                };
            },
            {
                "../errors": 5
            }
        ],
        73: [
            function(e212, t99, r61) {
                "use strict";
                Object.defineProperty(r61, "__esModule", {
                    value: !0
                });
                var g = e212("../utils/bytes"), v = e212("./hmac");
                r61.pbkdf2 = function(e, t, r, n, i) {
                    var o;
                    e = g.arrayify(e), t = g.arrayify(t);
                    var s, a, u = 1, l = new Uint8Array(n), h = new Uint8Array(t.length + 4);
                    h.set(t);
                    for(var f = 1; f <= u; f++){
                        h[t.length] = f >> 24 & 255, h[t.length + 1] = f >> 16 & 255, h[t.length + 2] = f >> 8 & 255, h[t.length + 3] = 255 & f;
                        var c = v.computeHmac(i, e, h);
                        o || (o = c.length, a = new Uint8Array(o), s = n - ((u = Math.ceil(n / o)) - 1) * o), a.set(c);
                        for(var d = 1; d < r; d++)for(var c = v.computeHmac(i, e, c), p = 0; p < o; p++)a[p] ^= c[p];
                        var y = (f - 1) * o, m = f === u ? s : o;
                        l.set(g.arrayify(a).slice(0, m), y);
                    }
                    return g.arrayify(l);
                };
            },
            {
                "../utils/bytes": 64,
                "./hmac": 67
            }
        ],
        74: [
            function(e213, t100, r62) {
                "use strict";
                var n39 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r62, "__esModule", {
                    value: !0
                });
                var i33 = n39(e213("../errors"));
                function s(e, t, r) {
                    Object.defineProperty(e, t, {
                        enumerable: !0,
                        value: r,
                        writable: !1
                    });
                }
                function a(e, t) {
                    return e && e._ethersType === t;
                }
                r62.defineReadOnly = s, r62.setType = function(e, t) {
                    Object.defineProperty(e, "_ethersType", {
                        configurable: !1,
                        value: t,
                        writable: !1
                    });
                }, r62.isType = a, r62.resolveProperties = function(r) {
                    var n = {}, i = [];
                    return Object.keys(r).forEach(function(t) {
                        var e214 = r[t];
                        e214 instanceof Promise ? i.push(e214.then(function(e) {
                            return n[t] = e, null;
                        })) : n[t] = e214;
                    }), Promise.all(i).then(function() {
                        return n;
                    });
                }, r62.checkProperties = function(t, r) {
                    t && "object" == typeof t || i33.throwError("invalid object", i33.INVALID_ARGUMENT, {
                        argument: "object",
                        value: t
                    }), Object.keys(t).forEach(function(e) {
                        r[e] || i33.throwError("invalid object key - " + e, i33.INVALID_ARGUMENT, {
                            argument: "transaction",
                            value: t,
                            key: e
                        });
                    });
                }, r62.shallowCopy = function(e) {
                    var t, r = {};
                    for(t in e)r[t] = e[t];
                    return r;
                };
                var u = {
                    boolean: !0,
                    number: !0,
                    string: !0
                };
                r62.deepCopy = function t(e215, r) {
                    if (null == e215 || u[typeof e215]) return e215;
                    if (Array.isArray(e215)) {
                        var n = e215.map(function(e) {
                            return t(e, r);
                        });
                        return r && Object.freeze(n), n;
                    }
                    if ("object" == typeof e215) {
                        if (a(e215, "BigNumber")) return e215;
                        if (a(e215, "Description")) return e215;
                        if (a(e215, "Indexed")) return e215;
                        var i, n = {};
                        for(i in e215){
                            var o = e215[i];
                            void 0 !== o && s(n, i, t(o, r));
                        }
                        return r && Object.freeze(n), n;
                    }
                    if ("function" == typeof e215) return e215;
                    throw new Error("Cannot deepCopy " + typeof e215);
                }, r62.inheritable = function n(i) {
                    return function(e) {
                        var t, r;
                        r = i, (t = e).super_ = r, t.prototype = Object.create(r.prototype, {
                            constructor: {
                                value: t,
                                enumerable: !1,
                                writable: !0,
                                configurable: !0
                            }
                        }), s(e, "inherits", n(e));
                    };
                };
            },
            {
                "../errors": 5
            }
        ],
        75: [
            function(o, e216, s) {
                (function(i) {
                    (function() {
                        Object.defineProperty(s, "__esModule", {
                            value: !0
                        });
                        var t101 = o("../utils/bytes"), e217 = o("../utils/properties"), r63 = i.crypto || i.msCrypto;
                        function n(e) {
                            if (e <= 0 || 1024 < e || parseInt(String(e)) != e) throw new Error("invalid length");
                            e = new Uint8Array(e);
                            return r63.getRandomValues(e), t101.arrayify(e);
                        }
                        r63 && r63.getRandomValues || (console.log("WARNING: Missing strong random number source; using weak randomBytes"), r63 = {
                            getRandomValues: function(e) {
                                for(var t = 0; t < 20; t++)for(var r = 0; r < e.length; r++)t ? e[r] ^= Math.trunc(256 * Math.random()) : e[r] = Math.trunc(256 * Math.random());
                                return e;
                            },
                            _weakCrypto: !0
                        }), s.randomBytes = n, !0 === r63._weakCrypto && e217.defineReadOnly(n, "_weakCrypto", !0);
                    }).call(this);
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {
                "../utils/bytes": 64,
                "../utils/properties": 74
            }
        ],
        76: [
            function(e218, t102, r64) {
                "use strict";
                Object.defineProperty(r64, "__esModule", {
                    value: !0
                });
                var i34 = e218("./bytes");
                function o27(e) {
                    for(var t = []; e;)t.unshift(255 & e), e >>= 8;
                    return t;
                }
                function s(e, t, r) {
                    for(var n = 0, i = 0; i < r; i++)n = 256 * n + e[t + i];
                    return n;
                }
                function a(e, t, r, n) {
                    for(var i = []; r < t + 1 + n;){
                        var o = u(e, r);
                        if (i.push(o.result), t + 1 + n < (r += o.consumed)) throw new Error("invalid rlp");
                    }
                    return {
                        consumed: 1 + n,
                        result: i
                    };
                }
                function u(e, t) {
                    if (0 === e.length) throw new Error("invalid rlp data");
                    if (248 <= e[t]) {
                        if (t + 1 + (r = e[t] - 247) > e.length) throw new Error("too short");
                        if (t + 1 + r + (n = s(e, t + 1, r)) > e.length) throw new Error("to short");
                        return a(e, t, t + 1 + r, r + n);
                    }
                    if (192 <= e[t]) {
                        if (t + 1 + (n = e[t] - 192) > e.length) throw new Error("invalid rlp data");
                        return a(e, t, t + 1, n);
                    }
                    if (184 <= e[t]) {
                        var r;
                        if (t + 1 + (r = e[t] - 183) > e.length) throw new Error("invalid rlp data");
                        if (t + 1 + r + (n = s(e, t + 1, r)) > e.length) throw new Error("invalid rlp data");
                        return {
                            consumed: 1 + r + n,
                            result: i34.hexlify(e.slice(t + 1 + r, t + 1 + r + n))
                        };
                    }
                    if (128 <= e[t]) {
                        var n;
                        if (t + 1 + (n = e[t] - 128) > e.length) throw new Error("invalid rlp data");
                        return {
                            consumed: 1 + n,
                            result: i34.hexlify(e.slice(t + 1, t + 1 + n))
                        };
                    }
                    return {
                        consumed: 1,
                        result: i34.hexlify(e[t])
                    };
                }
                r64.encode = function(e219) {
                    return i34.hexlify(function t(e220) {
                        if (Array.isArray(e220)) {
                            var r = [];
                            return e220.forEach(function(e) {
                                r = r.concat(t(e));
                            }), r.length <= 55 ? (r.unshift(192 + r.length), r) : ((n = o27(r.length)).unshift(247 + n.length), n.concat(r));
                        }
                        var n, e220 = Array.prototype.slice.call(i34.arrayify(e220));
                        return 1 === e220.length && e220[0] <= 127 ? e220 : e220.length <= 55 ? (e220.unshift(128 + e220.length), e220) : ((n = o27(e220.length)).unshift(183 + n.length), n.concat(e220));
                    }(e219));
                }, r64.decode = function(e) {
                    var t = i34.arrayify(e);
                    if ((e = u(t, 0)).consumed !== t.length) throw new Error("invalid rlp data");
                    return e.result;
                };
            },
            {
                "./bytes": 64
            }
        ],
        77: [
            function(e221, t103, r65) {
                "use strict";
                var n = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r65, "__esModule", {
                    value: !0
                });
                var i = e221("elliptic"), o = e221("./address"), s = e221("./bytes"), a = e221("./hash"), u = e221("./keccak256"), l = e221("./properties"), h = n(e221("../errors")), f = null;
                function c() {
                    return f = f || new i.ec("secp256k1");
                }
                var d = (p.prototype.sign = function(e) {
                    e = c().keyFromPrivate(s.arrayify(this.privateKey)).sign(s.arrayify(e), {
                        canonical: !0
                    });
                    return {
                        recoveryParam: e.recoveryParam,
                        r: s.hexZeroPad("0x" + e.r.toString(16), 32),
                        s: s.hexZeroPad("0x" + e.s.toString(16), 32),
                        v: 27 + e.recoveryParam
                    };
                }, p.prototype.computeSharedSecret = function(e) {
                    var t = c().keyFromPrivate(s.arrayify(this.privateKey)), e = c().keyFromPublic(s.arrayify(y(e)));
                    return s.hexZeroPad("0x" + t.derive(e.getPublic()).toString(16), 32);
                }, p.prototype._addPoint = function(e) {
                    var t = c().keyFromPublic(s.arrayify(this.publicKey)), e = c().keyFromPublic(s.arrayify(e));
                    return "0x" + t.pub.add(e.pub).encodeCompressed("hex");
                }, p);
                function p(e) {
                    e = c().keyFromPrivate(s.arrayify(e));
                    l.defineReadOnly(this, "privateKey", s.hexlify(e.priv.toArray("be", 32))), l.defineReadOnly(this, "publicKey", "0x" + e.getPublic(!1, "hex")), l.defineReadOnly(this, "compressedPublicKey", "0x" + e.getPublic(!0, "hex")), l.defineReadOnly(this, "publicKeyBytes", e.getPublic().encode(null, !0));
                }
                function y(e, t) {
                    e = s.arrayify(e);
                    if (32 !== e.length) return 33 === e.length ? t ? s.hexlify(e) : "0x" + c().keyFromPublic(e).getPublic(!1, "hex") : 65 === e.length ? t ? "0x" + c().keyFromPublic(e).getPublic(!0, "hex") : s.hexlify(e) : (h.throwError("invalid public or private key", h.INVALID_ARGUMENT, {
                        arg: "key",
                        value: "[REDACTED]"
                    }), null);
                    e = new d(e);
                    return t ? e.compressedPublicKey : e.publicKey;
                }
                function m(e) {
                    e = "0x" + y(e).slice(4);
                    return o.getAddress("0x" + u.keccak256(e).substring(26));
                }
                function g(e, t) {
                    var r = s.splitSignature(t), t = {
                        r: s.arrayify(r.r),
                        s: s.arrayify(r.s)
                    };
                    return "0x" + c().recoverPubKey(s.arrayify(e), t, r.recoveryParam).encode("hex", !1);
                }
                function v(e, t) {
                    return m(g(s.arrayify(e), t));
                }
                r65.KeyPair = d, r65.computePublicKey = y, r65.computeAddress = m, r65.recoverPublicKey = g, r65.recoverAddress = v, r65.verifyMessage = function(e, t) {
                    return v(a.hashMessage(e), t);
                };
            },
            {
                "../errors": 5,
                "./address": 60,
                "./bytes": 64,
                "./hash": 65,
                "./keccak256": 71,
                "./properties": 74,
                elliptic: 12
            }
        ],
        78: [
            function(e222, t104, r66) {
                "use strict";
                var n40 = this && this.__importDefault || function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                }, i35 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r66, "__esModule", {
                    value: !0
                });
                var w = n40(e222("aes-js")), _ = n40(e222("scrypt-js")), M = n40(e222("uuid")), A = e222("./signing-key"), s23 = i35(e222("./hdnode")), a17 = e222("./address"), E = e222("./bytes"), c4 = e222("./pbkdf2"), S = e222("./keccak256"), u13 = e222("./utf8"), k = e222("./random-bytes");
                function d4(e) {
                    return "string" == typeof e && "0x" !== e.substring(0, 2) && (e = "0x" + e), E.arrayify(e);
                }
                function N(e, t) {
                    for(e = String(e); e.length < t;)e = "0" + e;
                    return e;
                }
                function x(e) {
                    return "string" == typeof e ? u13.toUtf8Bytes(e, u13.UnicodeNormalizationForm.NFKC) : E.arrayify(e);
                }
                function p4(e, t) {
                    for(var r = e, n = t.toLowerCase().split("/"), i = 0; i < n.length; i++){
                        var o, s = null;
                        for(o in r)if (o.toLowerCase() === n[i]) {
                            s = r[o];
                            break;
                        }
                        if (null === s) return null;
                        r = s;
                    }
                    return r;
                }
                r66.decryptCrowdsale = function(e, t) {
                    var r = JSON.parse(e);
                    t = x(t);
                    var n = a17.getAddress(p4(r, "ethaddr"));
                    if (!(e = d4(p4(r, "encseed"))) || e.length % 16 != 0) throw new Error("invalid encseed");
                    for(var r = c4.pbkdf2(t, t, 2e3, 32, "sha256").slice(0, 16), t = e.slice(0, 16), e = e.slice(16), t = new w.default.ModeOfOperation.cbc(r, t), i = E.arrayify(t.decrypt(e)), i = w.default.padding.pkcs7.strip(i), o = "", s = 0; s < i.length; s++)o += String.fromCharCode(i[s]);
                    if (e = u13.toUtf8Bytes(o), (e = new A.SigningKey(S.keccak256(e))).address !== n) throw new Error("corrupt crowdsale wallet");
                    return e;
                }, r66.decrypt = function(e223, t105, u) {
                    function l(e224, t106) {
                        var r67 = d4(p4(h, "crypto/ciphertext"));
                        if (E.hexlify((o = e224.slice(16, 32), S.keccak256(E.concat([
                            o,
                            r67
                        ])))).substring(2) !== p4(h, "crypto/mac").toLowerCase()) return t106(new Error("invalid password")), null;
                        var n = function(e, t) {
                            if ("aes-128-ctr" !== p4(h, "crypto/cipher")) return null;
                            var r = d4(p4(h, "crypto/cipherparams/iv")), r = new w.default.Counter(r), r = new w.default.ModeOfOperation.ctr(e, r);
                            return E.arrayify(r.decrypt(t));
                        }(e224.slice(0, 16), r67), i = e224.slice(32, 64);
                        if (!n) return t106(new Error("unsupported cipher")), null;
                        var o = new A.SigningKey(n);
                        if (h.address && o.address !== a17.getAddress(h.address)) return t106(new Error("address mismatch")), null;
                        if (r67 = p4(h, "x-ethers/locale"), "0.1" === p4(h, "x-ethers/version") && (null == r67 || "en" === r67)) {
                            e224 = d4(p4(h, "x-ethers/mnemonicCiphertext")), r67 = d4(p4(h, "x-ethers/mnemonicCounter")), r67 = new w.default.Counter(r67), i = new w.default.ModeOfOperation.ctr(i, r67), r67 = p4(h, "x-ethers/path") || s23.defaultPath, e224 = E.arrayify(i.decrypt(e224)), e224 = s23.entropyToMnemonic(e224), r67 = s23.fromMnemonic(e224).derivePath(r67);
                            if (r67.privateKey != E.hexlify(n)) return t106(new Error("mnemonic mismatch")), null;
                            o = new A.SigningKey(r67);
                        }
                        return o;
                    }
                    var h = JSON.parse(e223), f = x(t105);
                    return new Promise(function(n, i) {
                        var e225 = p4(h, "crypto/kdf");
                        if (e225 && "string" == typeof e225) {
                            if ("scrypt" === e225.toLowerCase()) {
                                var t107 = d4(p4(h, "crypto/kdfparams/salt")), r68 = parseInt(p4(h, "crypto/kdfparams/n")), o = parseInt(p4(h, "crypto/kdfparams/r")), s = parseInt(p4(h, "crypto/kdfparams/p"));
                                r68 && o && s ? 0 == (r68 & r68 - 1) ? 32 === (a = parseInt(p4(h, "crypto/kdfparams/dklen"))) ? (u && u(0), _.default(f, t107, r68, o, s, 64, function(e, t, r) {
                                    if (e) e.progress = t, i(e);
                                    else if (r) {
                                        r = E.arrayify(r);
                                        r = l(r, i);
                                        r && (u && u(1), n(r));
                                    } else if (u) return u(t);
                                })) : i(new Error("unsupported key-derivation derived-key length")) : i(new Error("unsupported key-derivation function parameter value for N")) : i(new Error("unsupported key-derivation function parameters"));
                            } else if ("pbkdf2" === e225.toLowerCase()) {
                                t107 = d4(p4(h, "crypto/kdfparams/salt")), s = null, e225 = p4(h, "crypto/kdfparams/prf");
                                if ("hmac-sha256" === e225) s = "sha256";
                                else {
                                    if ("hmac-sha512" !== e225) return void i(new Error("unsupported prf"));
                                    s = "sha512";
                                }
                                var a, e225 = parseInt(p4(h, "crypto/kdfparams/c"));
                                32 === (a = parseInt(p4(h, "crypto/kdfparams/dklen"))) ? (s = c4.pbkdf2(f, t107, e225, a, s), (s = l(s, i)) && n(s)) : i(new Error("unsupported key-derivation derived-key length"));
                            } else i(new Error("unsupported key-derivation function"));
                        } else i(new Error("unsupported key-derivation function"));
                    });
                }, r66.encrypt = function(e227, t110, u, l) {
                    "function" != typeof u || l || (l = u, u = {}), u = u || {};
                    var h = null;
                    if (32 !== (h = A.SigningKey.isSigningKey(e227) ? E.arrayify(e227.privateKey) : E.arrayify(e227)).length) throw new Error("invalid private key");
                    var r71 = x(t110), f = null;
                    if (u.entropy && (f = E.arrayify(u.entropy)), u.mnemonic) {
                        if (f) {
                            if (s23.entropyToMnemonic(f) !== u.mnemonic) throw new Error("entropy and mnemonic mismatch");
                        } else f = E.arrayify(s23.mnemonicToEntropy(u.mnemonic, u.wordlist));
                    }
                    var c = u.path;
                    f && !c && (c = s23.defaultPath);
                    var d = (d = u.client) || "ethers.js", p = null, p = u.salt ? E.arrayify(u.salt) : k.randomBytes(32), y = null;
                    if (u.iv) {
                        if (16 !== (y = E.arrayify(u.iv)).length) throw new Error("invalid iv");
                    } else y = k.randomBytes(16);
                    var m = null;
                    if (u.uuid) {
                        if (16 !== (m = E.arrayify(u.uuid)).length) throw new Error("invalid uuid");
                    } else m = k.randomBytes(16);
                    var g = 131072, v = 8, b = 1;
                    return u.scrypt && (u.scrypt.N && (g = u.scrypt.N), u.scrypt.r && (v = u.scrypt.r), u.scrypt.p && (b = u.scrypt.p)), new Promise(function(s, a) {
                        l && l(0), _.default(r71, p, g, v, b, 64, function(e, t, r) {
                            if (e) e.progress = t, a(e);
                            else if (r) {
                                var n = (r = E.arrayify(r)).slice(0, 16), i = r.slice(16, 32), o = r.slice(32, 64), e = new A.SigningKey(h).address, r = new w.default.Counter(y), r = new w.default.ModeOfOperation.ctr(n, r), r = E.arrayify(r.encrypt(h)), i = S.keccak256(E.concat([
                                    i,
                                    r
                                ])), e = {
                                    address: e.substring(2).toLowerCase(),
                                    id: M.default.v4({
                                        random: m
                                    }),
                                    version: 3,
                                    Crypto: {
                                        cipher: "aes-128-ctr",
                                        cipherparams: {
                                            iv: E.hexlify(y).substring(2)
                                        },
                                        ciphertext: E.hexlify(r).substring(2),
                                        kdf: "scrypt",
                                        kdfparams: {
                                            salt: E.hexlify(p).substring(2),
                                            n: g,
                                            dklen: 32,
                                            p: b,
                                            r: v
                                        },
                                        mac: i.substring(2)
                                    }
                                };
                                f && (r = k.randomBytes(16), i = new w.default.Counter(r), o = new w.default.ModeOfOperation.ctr(o, i), i = E.arrayify(o.encrypt(f)), o = (o = new Date).getUTCFullYear() + "-" + N(o.getUTCMonth() + 1, 2) + "-" + N(o.getUTCDate(), 2) + "T" + N(o.getUTCHours(), 2) + "-" + N(o.getUTCMinutes(), 2) + "-" + N(o.getUTCSeconds(), 2) + ".0Z", e["x-ethers"] = {
                                    client: d,
                                    gethFilename: "UTC--" + o + "--" + e.address,
                                    mnemonicCounter: E.hexlify(r).substring(2),
                                    mnemonicCiphertext: E.hexlify(i).substring(2),
                                    path: c,
                                    version: "0.1"
                                }, u.wordlist && "string" == typeof u.wordlist.locale && (e["x-ethers"].locale = u.wordlist.locale)), l && l(1), s(JSON.stringify(e));
                            } else if (l) return l(t);
                        });
                    });
                };
            },
            {
                "./address": 60,
                "./bytes": 64,
                "./hdnode": 66,
                "./keccak256": 71,
                "./pbkdf2": 73,
                "./random-bytes": 75,
                "./signing-key": 81,
                "./utf8": 85,
                "aes-js": 8,
                "scrypt-js": 44,
                uuid: 48
            }
        ],
        79: [
            function(e228, t, r) {
                "use strict";
                var n = this && this.__importDefault || function(e) {
                    return e && e.__esModule ? e : {
                        default: e
                    };
                };
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                var i = n(e228("hash.js")), o = e228("./bytes");
                r.ripemd160 = function(e) {
                    return "0x" + i.default.ripemd160().update(o.arrayify(e)).digest("hex");
                }, r.sha256 = function(e) {
                    return "0x" + i.default.sha256().update(o.arrayify(e)).digest("hex");
                }, r.sha512 = function(e) {
                    return "0x" + i.default.sha512().update(o.arrayify(e)).digest("hex");
                };
            },
            {
                "./bytes": 64,
                "hash.js": 26
            }
        ],
        80: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                }), e("setimmediate"), r.platform = "browser";
            },
            {
                setimmediate: 45
            }
        ],
        81: [
            function(e229, t111, r72) {
                "use strict";
                var n = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r72, "__esModule", {
                    value: !0
                });
                var i = e229("./hdnode"), o = e229("./bytes"), s = e229("./properties"), a = e229("./secp256k1"), u = n(e229("../errors")), e229 = (l.prototype.signDigest = function(e) {
                    return this.keyPair.sign(e);
                }, l.prototype.computeSharedSecret = function(e) {
                    return this.keyPair.computeSharedSecret(o.arrayify(e));
                }, l.isSigningKey = function(e) {
                    return s.isType(e, "SigningKey");
                }, l);
                function l(t) {
                    u.checkNew(this, l);
                    var e = null, e = i.HDNode.isHDNode(t) ? (s.defineReadOnly(this, "mnemonic", t.mnemonic), s.defineReadOnly(this, "path", t.path), o.arrayify(t.privateKey)) : ("string" == typeof t && t.match(/^[0-9a-f]*$/i) && 64 === t.length && (t = "0x" + t), o.arrayify(t));
                    try {
                        32 !== e.length && u.throwError("exactly 32 bytes required", u.INVALID_ARGUMENT, {
                            arg: "privateKey",
                            value: "[REDACTED]"
                        });
                    } catch (e230) {
                        t = {
                            arg: "privateKey",
                            reason: e230.reason,
                            value: "[REDACTED]"
                        };
                        e230.value && ("number" == typeof e230.value.length && (t.length = e230.value.length), t.type = typeof e230.value), u.throwError("invalid private key", e230.code, t);
                    }
                    s.defineReadOnly(this, "privateKey", o.hexlify(e)), s.defineReadOnly(this, "keyPair", new a.KeyPair(e)), s.defineReadOnly(this, "publicKey", this.keyPair.publicKey), s.defineReadOnly(this, "address", a.computeAddress(this.keyPair.publicKey)), s.setType(this, "SigningKey");
                }
                r72.SigningKey = e229;
            },
            {
                "../errors": 5,
                "./bytes": 64,
                "./hdnode": 66,
                "./properties": 74,
                "./secp256k1": 77
            }
        ],
        82: [
            function(e231, t112, r73) {
                "use strict";
                Object.defineProperty(r73, "__esModule", {
                    value: !0
                });
                var u = e231("./bignumber"), l = e231("./bytes"), h = e231("./utf8"), n41 = e231("./keccak256"), i36 = e231("./sha2"), f = new RegExp("^bytes([0-9]+)$"), c = new RegExp("^(u?int)([0-9]*)$"), d = new RegExp("^(.*)\\[([0-9]*)\\]$"), p = "0000000000000000000000000000000000000000000000000000000000000000";
                function o28(e232, r74) {
                    if (e232.length != r74.length) throw new Error("type/value count mismatch");
                    var n42 = [];
                    return e232.forEach(function(e233, t113) {
                        n42.push(function t(e234, r, n) {
                            switch(e234){
                                case "address":
                                    return n ? l.padZeros(r, 32) : l.arrayify(r);
                                case "string":
                                    return h.toUtf8Bytes(r);
                                case "bytes":
                                    return l.arrayify(r);
                                case "bool":
                                    return r = r ? "0x01" : "0x00", n ? l.padZeros(r, 32) : l.arrayify(r);
                            }
                            var i = e234.match(c);
                            if (i) {
                                if ((o = parseInt(i[2] || "256")) % 8 != 0 || 0 === o || 256 < o) throw new Error("invalid number type - " + e234);
                                return n && (o = 256), r = u.bigNumberify(r).toTwos(o), l.padZeros(r, o / 8);
                            }
                            if (i = e234.match(f)) {
                                var o = parseInt(i[1]);
                                if (String(o) != i[1] || 0 === o || 32 < o) throw new Error("invalid number type - " + e234);
                                if (l.arrayify(r).byteLength !== o) throw new Error("invalid value for " + e234);
                                return n ? l.arrayify((r + p).substring(0, 66)) : r;
                            }
                            if ((i = e234.match(d)) && Array.isArray(r)) {
                                var s = i[1];
                                if (parseInt(i[2] || String(r.length)) != r.length) throw new Error("invalid value for " + e234);
                                var a = [];
                                return r.forEach(function(e) {
                                    a.push(t(s, e, !0));
                                }), l.concat(a);
                            }
                            throw new Error("unknown type - " + e234);
                        }(e233, r74[t113]));
                    }), l.hexlify(l.concat(n42));
                }
                r73.pack = o28, r73.keccak256 = function(e, t) {
                    return n41.keccak256(o28(e, t));
                }, r73.sha256 = function(e, t) {
                    return i36.sha256(o28(e, t));
                };
            },
            {
                "./bignumber": 63,
                "./bytes": 64,
                "./keccak256": 71,
                "./sha2": 79,
                "./utf8": 85
            }
        ],
        83: [
            function(e235, t114, r75) {
                "use strict";
                var n43 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r75, "__esModule", {
                    value: !0
                });
                var i = e235("../constants"), o = n43(e235("../errors")), s = e235("./secp256k1"), a = e235("./address"), u = e235("./bignumber"), l = e235("./bytes"), h = e235("./keccak256"), f = e235("./properties"), c = n43(e235("./rlp")), d = e235("../providers/abstract-provider");
                function p(e) {
                    return "0x" === e ? i.Zero : u.bigNumberify(e);
                }
                var y = [
                    {
                        name: "nonce",
                        maxLength: 32
                    },
                    {
                        name: "gasPrice",
                        maxLength: 32
                    },
                    {
                        name: "gasLimit",
                        maxLength: 32
                    },
                    {
                        name: "to",
                        length: 20
                    },
                    {
                        name: "value",
                        maxLength: 32
                    },
                    {
                        name: "data"
                    }
                ], m = {
                    chainId: !0,
                    data: !0,
                    gasLimit: !0,
                    gasPrice: !0,
                    nonce: !0,
                    to: !0,
                    value: !0
                };
                r75.serialize = function(r, e236) {
                    f.checkProperties(r, m);
                    var n = [];
                    y.forEach(function(e) {
                        var t = r[e.name] || [], t = l.arrayify(l.hexlify(t));
                        e.length && t.length !== e.length && 0 < t.length && o.throwError("invalid length for " + e.name, o.INVALID_ARGUMENT, {
                            arg: "transaction" + e.name,
                            value: t
                        }), e.maxLength && (t = l.stripZeros(t)).length > e.maxLength && o.throwError("invalid length for " + e.name, o.INVALID_ARGUMENT, {
                            arg: "transaction" + e.name,
                            value: t
                        }), n.push(l.hexlify(t));
                    }), null != r.chainId && 0 !== r.chainId && (n.push(l.hexlify(r.chainId)), n.push("0x"), n.push("0x"));
                    var t115 = c.encode(n);
                    return e236 ? (t115 = l.splitSignature(e236), e236 = 27 + t115.recoveryParam, 9 === n.length && (n.pop(), n.pop(), n.pop(), e236 += 2 * r.chainId + 8), n.push(l.hexlify(e236)), n.push(l.stripZeros(l.arrayify(t115.r))), n.push(l.stripZeros(l.arrayify(t115.s))), c.encode(n)) : t115;
                }, r75.parse = function(e) {
                    9 !== (n = c.decode(e)).length && 6 !== n.length && o.throwError("invalid raw transaction", o.INVALID_ARGUMENT, {
                        arg: "rawTransactin",
                        value: e
                    });
                    var t = {
                        nonce: p(n[0]).toNumber(),
                        gasPrice: p(n[1]),
                        gasLimit: p(n[2]),
                        to: "0x" === (r = n[3]) ? null : a.getAddress(r),
                        value: p(n[4]),
                        data: n[5],
                        chainId: 0
                    };
                    if (6 === n.length) return t;
                    try {
                        t.v = u.bigNumberify(n[6]).toNumber();
                    } catch (e237) {
                        return o.info(e237), t;
                    }
                    if (t.r = l.hexZeroPad(n[7], 32), t.s = l.hexZeroPad(n[8], 32), u.bigNumberify(t.r).isZero() && u.bigNumberify(t.s).isZero()) t.chainId = t.v, t.v = 0;
                    else {
                        t.chainId = Math.floor((t.v - 35) / 2), t.chainId < 0 && (t.chainId = 0);
                        var r = t.v - 27, n = n.slice(0, 6);
                        0 !== t.chainId && (n.push(l.hexlify(t.chainId)), n.push("0x"), n.push("0x"), r -= 2 * t.chainId + 8);
                        n = h.keccak256(c.encode(n));
                        try {
                            t.from = s.recoverAddress(n, {
                                r: l.hexlify(t.r),
                                s: l.hexlify(t.s),
                                recoveryParam: r
                            });
                        } catch (e238) {
                            o.info(e238);
                        }
                        t.hash = h.keccak256(e);
                    }
                    return t;
                }, r75.populateTransaction = function(e239, t, r) {
                    d.Provider.isProvider(t) || o.throwError("missing provider", o.INVALID_ARGUMENT, {
                        argument: "provider",
                        value: t
                    }), f.checkProperties(e239, m);
                    var n = f.shallowCopy(e239);
                    return null != n.to && (n.to = t.resolveName(n.to)), null == n.gasPrice && (n.gasPrice = t.getGasPrice()), null == n.nonce && (n.nonce = t.getTransactionCount(r)), null == n.gasLimit && ((e239 = f.shallowCopy(n)).from = r, n.gasLimit = t.estimateGas(e239)), null == n.chainId && (n.chainId = t.getNetwork().then(function(e) {
                        return e.chainId;
                    })), f.resolveProperties(n);
                };
            },
            {
                "../constants": 3,
                "../errors": 5,
                "../providers/abstract-provider": 50,
                "./address": 60,
                "./bignumber": 63,
                "./bytes": 64,
                "./keccak256": 71,
                "./properties": 74,
                "./rlp": 76,
                "./secp256k1": 77
            }
        ],
        84: [
            function(e240, t116, r76) {
                "use strict";
                var n44 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r76, "__esModule", {
                    value: !0
                });
                var i37, o29 = e240("../constants"), s = n44(e240("../errors")), a = e240("./bignumber"), u = {};
                function l(e) {
                    return {
                        decimals: e.length - 1,
                        tenPower: a.bigNumberify(e)
                    };
                }
                function h(e) {
                    var t = u[String(e).toLowerCase()];
                    if (!t && "number" == typeof e && parseInt(String(e)) == e && 0 <= e && e <= 256) {
                        for(var r = "1", n = 0; n < e; n++)r += "0";
                        t = l(r);
                    }
                    return t || s.throwError("invalid unitType", s.INVALID_ARGUMENT, {
                        argument: "name",
                        value: e
                    }), t;
                }
                function f(e, t) {
                    for(var r = h(t), t = (e = a.bigNumberify(e)).lt(o29.Zero), n = (e = t ? e.mul(o29.NegativeOne) : e).mod(r.tenPower).toString(); n.length < r.decimals;)n = "0" + n;
                    n = n.match(/^([0-9]*[1-9]|0)(0*)/)[1];
                    return e = e.div(r.tenPower).toString() + "." + n, e = t ? "-" + e : e;
                }
                function c(e, t) {
                    var r = h(t = null == t ? 18 : t);
                    if ("string" == typeof e && e.match(/^-?[0-9.,]+$/) || s.throwError("invalid decimal value", s.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    }), 0 === r.decimals) return a.bigNumberify(e);
                    var n = "-" === e.substring(0, 1);
                    "." === (e = n ? e.substring(1) : e) && s.throwError("missing value", s.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    });
                    t = e.split(".");
                    2 < t.length && s.throwError("too many decimal points", s.INVALID_ARGUMENT, {
                        arg: "value",
                        value: e
                    });
                    var e = t[0], i = t[1], e = e || "0";
                    for((i = i || "0").length > r.decimals && s.throwError("underflow occurred", s.NUMERIC_FAULT, {
                        operation: "division",
                        fault: "underflow"
                    }); i.length < r.decimals;)i += "0";
                    t = a.bigNumberify(e), e = a.bigNumberify(i), e = t.mul(r.tenPower).add(e);
                    return e = n ? e.mul(o29.NegativeOne) : e;
                }
                i37 = "1", [
                    "wei",
                    "kwei",
                    "Mwei",
                    "Gwei",
                    "szabo",
                    "finney",
                    "ether"
                ].forEach(function(e) {
                    var t = l(i37);
                    u[e.toLowerCase()] = t, u[String(t.decimals)] = t, i37 += "000";
                }), r76.commify = function(e) {
                    var t = String(e).split(".");
                    (2 < t.length || !t[0].match(/^-?[0-9]*$/) || t[1] && !t[1].match(/^[0-9]*$/) || "." === e || "-." === e) && s.throwError("invalid value", s.INVALID_ARGUMENT, {
                        argument: "value",
                        value: e
                    });
                    var r = t[0], n = "";
                    for("-" === r.substring(0, 1) && (n = "-", r = r.substring(1)); "0" === r.substring(0, 1);)r = r.substring(1);
                    "" === r && (r = "0"), e = "", 2 === t.length && (e = "." + (t[1] || "0"));
                    for(var i = []; r.length;){
                        if (r.length <= 3) {
                            i.unshift(r);
                            break;
                        }
                        var o = r.length - 3;
                        i.unshift(r.substring(o)), r = r.substring(0, o);
                    }
                    return n + i.join(",") + e;
                }, r76.formatUnits = f, r76.parseUnits = c, r76.formatEther = function(e) {
                    return f(e, 18);
                }, r76.parseEther = function(e) {
                    return c(e, 18);
                };
            },
            {
                "../constants": 3,
                "../errors": 5,
                "./bignumber": 63
            }
        ],
        85: [
            function(e241, t117, r77) {
                "use strict";
                Object.defineProperty(r77, "__esModule", {
                    value: !0
                });
                var s24, n45 = e241("../constants"), a18 = e241("../errors"), h = e241("./bytes");
                function i38(e, t) {
                    (t = void 0 === t ? s24.current : t) != s24.current && (a18.checkNormalize(), e = e.normalize(t));
                    for(var r = [], n = 0; n < e.length; n++){
                        var i = e.charCodeAt(n);
                        if (i < 128) r.push(i);
                        else if (i < 2048) r.push(i >> 6 | 192), r.push(63 & i | 128);
                        else if (55296 == (64512 & i)) {
                            n++;
                            var o = e.charCodeAt(n);
                            if (n >= e.length || 56320 != (64512 & o)) throw new Error("invalid utf-8 string");
                            r.push((i = 65536 + ((1023 & i) << 10) + (1023 & o)) >> 18 | 240), r.push(i >> 12 & 63 | 128), r.push(i >> 6 & 63 | 128), r.push(63 & i | 128);
                        } else r.push(i >> 12 | 224), r.push(i >> 6 & 63 | 128), r.push(63 & i | 128);
                    }
                    return h.arrayify(r);
                }
                function o30(e, t) {
                    e = h.arrayify(e);
                    for(var r = "", n = 0; n < e.length;){
                        var i = e[n++];
                        if (i >> 7 != 0) {
                            var o = null, s = null;
                            if (192 == (224 & i)) o = 1, s = 127;
                            else if (224 == (240 & i)) o = 2, s = 2047;
                            else {
                                if (240 != (248 & i)) {
                                    if (t) continue;
                                    if (128 == (192 & i)) throw new Error("invalid utf8 byte sequence; unexpected continuation byte");
                                    throw new Error("invalid utf8 byte sequence; invalid prefix");
                                }
                                o = 3, s = 65535;
                            }
                            if (n + o > e.length) {
                                if (!t) throw new Error("invalid utf8 byte sequence; too short");
                                for(; n < e.length && e[n] >> 6 == 2; n++);
                            } else {
                                for(var a = i & (1 << 8 - o - 1) - 1, u = 0; u < o; u++){
                                    var l = e[n];
                                    if (128 != (192 & l)) {
                                        a = null;
                                        break;
                                    }
                                    a = a << 6 | 63 & l, n++;
                                }
                                if (null !== a) {
                                    if (a <= s) {
                                        if (!t) throw new Error("invalid utf8 byte sequence; overlong");
                                    } else if (1114111 < a) {
                                        if (!t) throw new Error("invalid utf8 byte sequence; out-of-range");
                                    } else if (55296 <= a && a <= 57343) {
                                        if (!t) throw new Error("invalid utf8 byte sequence; utf-16 surrogate");
                                    } else a <= 65535 ? r += String.fromCharCode(a) : (a -= 65536, r += String.fromCharCode(55296 + (a >> 10 & 1023), 56320 + (1023 & a)));
                                } else if (!t) throw new Error("invalid utf8 byte sequence; invalid continuation byte");
                            }
                        } else r += String.fromCharCode(i);
                    }
                    return r;
                }
                (e241 = s24 = r77.UnicodeNormalizationForm || (r77.UnicodeNormalizationForm = {})).current = "", e241.NFC = "NFC", e241.NFD = "NFD", e241.NFKC = "NFKC", e241.NFKD = "NFKD", r77.toUtf8Bytes = i38, r77.toUtf8String = o30, r77.formatBytes32String = function(e) {
                    if (31 < (e = i38(e)).length) throw new Error("bytes32 string must be less than 32 bytes");
                    return h.hexlify(h.concat([
                        e,
                        n45.HashZero
                    ]).slice(0, 32));
                }, r77.parseBytes32String = function(e) {
                    var t = h.arrayify(e);
                    if (32 !== t.length) throw new Error("invalid bytes32 - not 32 bytes long");
                    if (0 !== t[31]) throw new Error("invalid bytes32 string - no null terminator");
                    for(var r = 31; 0 === t[r - 1];)r--;
                    return o30(t.slice(0, r));
                };
            },
            {
                "../constants": 3,
                "../errors": 5,
                "./bytes": 64
            }
        ],
        86: [
            function(e242, t118, r78) {
                "use strict";
                var n46 = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r78, "__esModule", {
                    value: !0
                });
                var f = e242("xmlhttprequest"), i39 = e242("./base64"), o31 = e242("./properties"), s25 = e242("./utf8"), c = n46(e242("../errors"));
                r78.fetchJson = function(e243, a, u) {
                    var t119, r79 = {}, l = null, h = 12e4;
                    if ("string" == typeof e243) l = e243;
                    else if ("object" == typeof e243) {
                        if (null == e243.url && c.throwError("missing URL", c.MISSING_ARGUMENT, {
                            arg: "url"
                        }), l = e243.url, "number" == typeof e243.timeout && 0 < e243.timeout && (h = e243.timeout), e243.headers) for(var n in e243.headers)r79[n.toLowerCase()] = {
                            key: n,
                            value: String(e243.headers[n])
                        };
                        null != e243.user && null != e243.password && ("https:" !== l.substring(0, 6) && !0 !== e243.allowInsecure && c.throwError("basic authentication requires a secure https url", c.INVALID_ARGUMENT, {
                            arg: "url",
                            url: l,
                            user: e243.user,
                            password: "[REDACTED]"
                        }), t119 = e243.user + ":" + e243.password, r79.authorization = {
                            key: "Authorization",
                            value: "Basic " + i39.encode(s25.toUtf8Bytes(t119))
                        });
                    }
                    return new Promise(function(n, i) {
                        function o() {
                            null != e244 && (clearTimeout(e244), e244 = null);
                        }
                        var s = new f.XMLHttpRequest, e244 = null, e244 = setTimeout(function() {
                            null != e244 && (e244 = null, i(new Error("timeout")), setTimeout(function() {
                                s.abort();
                            }, 0));
                        }, h);
                        a ? (s.open("POST", l, !0), r79["content-type"] = {
                            key: "Content-Type",
                            value: "application/json"
                        }) : s.open("GET", l, !0), Object.keys(r79).forEach(function(e) {
                            e = r79[e];
                            s.setRequestHeader(e.key, e.value);
                        }), s.onreadystatechange = function() {
                            if (4 === s.readyState) {
                                if (200 != s.status) {
                                    o();
                                    var e = new Error("invalid response - " + s.status);
                                    return e.statusCode = s.status, s.responseText && (e.responseText = s.responseText), void i(e);
                                }
                                var t = null;
                                try {
                                    t = JSON.parse(s.responseText);
                                } catch (e) {
                                    o();
                                    var r = new Error("invalid json response");
                                    return r.orginialError = e, r.responseText = s.responseText, null != a && (r.requestBody = a), r.url = l, void i(r);
                                }
                                if (u) try {
                                    t = u(t);
                                } catch (e245) {
                                    return o(), e245.url = l, e245.body = a, e245.responseText = s.responseText, void i(e245);
                                }
                                o(), n(t);
                            }
                        }, s.onerror = function(e) {
                            o(), i(e);
                        };
                        try {
                            null != a ? s.send(a) : s.send();
                        } catch (e) {
                            o();
                            var t120 = new Error("connection error");
                            t120.error = e, i(t120);
                        }
                    });
                }, r78.poll = function(u, l) {
                    return l = l || {}, null == (l = o31.shallowCopy(l)).floor && (l.floor = 0), null == l.ceiling && (l.ceiling = 1e4), null == l.interval && (l.interval = 250), new Promise(function(r, n) {
                        var e246 = null, i = !1, o = function() {
                            return !i && (i = !0, e246 && clearTimeout(e246), !0);
                        };
                        l.timeout && (e246 = setTimeout(function() {
                            o() && n(new Error("timeout"));
                        }, l.timeout));
                        var s = l.fastRetry || null, a = 0;
                        !function t() {
                            return u().then(function(e) {
                                return void 0 !== e ? o() && r(e) : l.onceBlock ? l.onceBlock.once("block", t) : i || (a++, (e = (e = l.interval * parseInt(String(Math.random() * Math.pow(2, a)))) < l.floor ? l.floor : e) > l.ceiling && (e = l.ceiling), s && (a--, e = s, s = null), setTimeout(t, e)), null;
                            }, function(e) {
                                o() && n(e);
                            });
                        }();
                    });
                };
            },
            {
                "../errors": 5,
                "./base64": 61,
                "./properties": 74,
                "./utf8": 85,
                xmlhttprequest: 49
            }
        ],
        87: [
            function(n47, e247, o) {
                (function(e248) {
                    (function() {
                        Object.defineProperty(o, "__esModule", {
                            value: !0
                        });
                        var i = n47("../utils/hash"), t121 = n47("../utils/properties");
                        o.check = function(e) {
                            for(var t = [], r = 0; r < 2048; r++){
                                var n = e.getWord(r);
                                if (r !== e.getWordIndex(n)) return "0x";
                                t.push(n);
                            }
                            return i.id(t.join("\n") + "\n");
                        };
                        var e249 = (r80.prototype.split = function(e) {
                            return e.toLowerCase().split(/ +/g);
                        }, r80.prototype.join = function(e) {
                            return e.join(" ");
                        }, r80);
                        function r80(e) {
                            t121.defineReadOnly(this, "locale", e);
                        }
                        o.Wordlist = e249, o.register = function(e, t) {
                            t = t || e.locale;
                        };
                    }).call(this);
                }).call(this, "undefined" != typeof global ? global : "undefined" != typeof self ? self : "undefined" != typeof window ? window : {});
            },
            {
                "../utils/hash": 65,
                "../utils/properties": 74
            }
        ],
        88: [
            function(e250, t122, r81) {
                "use strict";
                var n48, i = this && this.__extends || (n48 = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n48(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                }), o = this && this.__importStar || function(e) {
                    if (e && e.__esModule) return e;
                    var t = {};
                    if (null != e) for(var r in e)Object.hasOwnProperty.call(e, r) && (t[r] = e[r]);
                    return t.default = e, t;
                };
                Object.defineProperty(r81, "__esModule", {
                    value: !0
                });
                var s, a = e250("./utils/bytes"), u = e250("./utils/hash"), l = e250("./utils/hdnode"), h = e250("./utils/json-wallet"), f = e250("./utils/keccak256"), c = e250("./utils/properties"), d = e250("./utils/random-bytes"), p = o(e250("./utils/secret-storage")), y = e250("./utils/signing-key"), m = e250("./utils/transaction"), g = e250("./abstract-signer"), v = e250("./providers/abstract-provider"), b = o(e250("./errors")), i = (s = g.Signer, i(w, s), Object.defineProperty(w.prototype, "address", {
                    get: function() {
                        return this.signingKey.address;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(w.prototype, "mnemonic", {
                    get: function() {
                        return this.signingKey.mnemonic;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(w.prototype, "path", {
                    get: function() {
                        return this.signingKey.path;
                    },
                    enumerable: !0,
                    configurable: !0
                }), Object.defineProperty(w.prototype, "privateKey", {
                    get: function() {
                        return this.signingKey.privateKey;
                    },
                    enumerable: !0,
                    configurable: !0
                }), w.prototype.connect = function(e) {
                    return v.Provider.isProvider(e) || b.throwError("invalid provider", b.INVALID_ARGUMENT, {
                        argument: "provider",
                        value: e
                    }), new w(this.signingKey, e);
                }, w.prototype.getAddress = function() {
                    return Promise.resolve(this.address);
                }, w.prototype.sign = function(e251) {
                    var r = this;
                    return c.resolveProperties(e251).then(function(e) {
                        var t = m.serialize(e), t = r.signingKey.signDigest(f.keccak256(t));
                        return m.serialize(e, t);
                    });
                }, w.prototype.signMessage = function(e) {
                    return Promise.resolve(a.joinSignature(this.signingKey.signDigest(u.hashMessage(e))));
                }, w.prototype.getBalance = function(e) {
                    if (!this.provider) throw new Error("missing provider");
                    return this.provider.getBalance(this.address, e);
                }, w.prototype.getTransactionCount = function(e) {
                    if (!this.provider) throw new Error("missing provider");
                    return this.provider.getTransactionCount(this.address, e);
                }, w.prototype.sendTransaction = function(e252) {
                    var t = this;
                    if (!this.provider) throw new Error("missing provider");
                    return null == e252.nonce && ((e252 = c.shallowCopy(e252)).nonce = this.getTransactionCount("pending")), m.populateTransaction(e252, this.provider, this.address).then(function(e253) {
                        return t.sign(e253).then(function(e) {
                            return t.provider.sendTransaction(e);
                        });
                    });
                }, w.prototype.encrypt = function(e, t, r) {
                    if ("function" != typeof t || r || (r = t, t = {}), r && "function" != typeof r) throw new Error("invalid callback");
                    return t = t || {}, this.mnemonic && ((t = c.shallowCopy(t)).mnemonic = this.mnemonic, t.path = this.path), p.encrypt(this.privateKey, e, t, r);
                }, w.createRandom = function(e) {
                    var t = d.randomBytes(16);
                    (e = e || {}).extraEntropy && (t = a.arrayify(f.keccak256(a.concat([
                        t,
                        e.extraEntropy
                    ])).substring(0, 34)));
                    t = l.entropyToMnemonic(t, e.locale);
                    return w.fromMnemonic(t, e.path, e.locale);
                }, w.fromEncryptedJson = function(e255, t, r) {
                    if (h.isCrowdsaleWallet(e255)) try {
                        r && r(0);
                        var n = p.decryptCrowdsale(e255, t);
                        return r && r(1), Promise.resolve(new w(n));
                    } catch (e254) {
                        return Promise.reject(e254);
                    }
                    else if (h.isSecretStorageWallet(e255)) return p.decrypt(e255, t, r).then(function(e) {
                        return new w(e);
                    });
                    return Promise.reject("invalid wallet JSON");
                }, w.fromMnemonic = function(e, t, r) {
                    return t = t || l.defaultPath, new w(l.fromMnemonic(e, r).derivePath(t));
                }, w);
                function w(e, t) {
                    var r = s.call(this) || this;
                    return b.checkNew(r, w), y.SigningKey.isSigningKey(e) ? c.defineReadOnly(r, "signingKey", e) : c.defineReadOnly(r, "signingKey", new y.SigningKey(e)), c.defineReadOnly(r, "provider", t), r;
                }
                r81.Wallet = i;
            },
            {
                "./abstract-signer": 2,
                "./errors": 5,
                "./providers/abstract-provider": 50,
                "./utils/bytes": 64,
                "./utils/hash": 65,
                "./utils/hdnode": 66,
                "./utils/json-wallet": 70,
                "./utils/keccak256": 71,
                "./utils/properties": 74,
                "./utils/random-bytes": 75,
                "./utils/secret-storage": 78,
                "./utils/signing-key": 81,
                "./utils/transaction": 83
            }
        ],
        89: [
            function(e, t, r) {
                "use strict";
                Object.defineProperty(r, "__esModule", {
                    value: !0
                });
                e = e("../wordlists/lang-en").langEn;
                r.en = e;
            },
            {
                "../wordlists/lang-en": 90
            }
        ],
        90: [
            function(e256, t123, r82) {
                "use strict";
                var n, i = this && this.__extends || (n = Object.setPrototypeOf || ({
                    __proto__: []
                }) instanceof Array && function(e, t) {
                    e.__proto__ = t;
                } || function(e, t) {
                    for(var r in t)t.hasOwnProperty(r) && (e[r] = t[r]);
                }, function(e, t) {
                    function r() {
                        this.constructor = e;
                    }
                    n(e, t), e.prototype = null === t ? Object.create(t) : (r.prototype = t.prototype, new r);
                });
                Object.defineProperty(r82, "__esModule", {
                    value: !0
                });
                var o, s = e256("../utils/wordlist"), a = "AbandonAbilityAbleAboutAboveAbsentAbsorbAbstractAbsurdAbuseAccessAccidentAccountAccuseAchieveAcidAcousticAcquireAcrossActActionActorActressActualAdaptAddAddictAddressAdjustAdmitAdultAdvanceAdviceAerobicAffairAffordAfraidAgainAgeAgentAgreeAheadAimAirAirportAisleAlarmAlbumAlcoholAlertAlienAllAlleyAllowAlmostAloneAlphaAlreadyAlsoAlterAlwaysAmateurAmazingAmongAmountAmusedAnalystAnchorAncientAngerAngleAngryAnimalAnkleAnnounceAnnualAnotherAnswerAntennaAntiqueAnxietyAnyApartApologyAppearAppleApproveAprilArchArcticAreaArenaArgueArmArmedArmorArmyAroundArrangeArrestArriveArrowArtArtefactArtistArtworkAskAspectAssaultAssetAssistAssumeAsthmaAthleteAtomAttackAttendAttitudeAttractAuctionAuditAugustAuntAuthorAutoAutumnAverageAvocadoAvoidAwakeAwareAwayAwesomeAwfulAwkwardAxisBabyBachelorBaconBadgeBagBalanceBalconyBallBambooBananaBannerBarBarelyBargainBarrelBaseBasicBasketBattleBeachBeanBeautyBecauseBecomeBeefBeforeBeginBehaveBehindBelieveBelowBeltBenchBenefitBestBetrayBetterBetweenBeyondBicycleBidBikeBindBiologyBirdBirthBitterBlackBladeBlameBlanketBlastBleakBlessBlindBloodBlossomBlouseBlueBlurBlushBoardBoatBodyBoilBombBoneBonusBookBoostBorderBoringBorrowBossBottomBounceBoxBoyBracketBrainBrandBrassBraveBreadBreezeBrickBridgeBriefBrightBringBriskBroccoliBrokenBronzeBroomBrotherBrownBrushBubbleBuddyBudgetBuffaloBuildBulbBulkBulletBundleBunkerBurdenBurgerBurstBusBusinessBusyButterBuyerBuzzCabbageCabinCableCactusCageCakeCallCalmCameraCampCanCanalCancelCandyCannonCanoeCanvasCanyonCapableCapitalCaptainCarCarbonCardCargoCarpetCarryCartCaseCashCasinoCastleCasualCatCatalogCatchCategoryCattleCaughtCauseCautionCaveCeilingCeleryCementCensusCenturyCerealCertainChairChalkChampionChangeChaosChapterChargeChaseChatCheapCheckCheeseChefCherryChestChickenChiefChildChimneyChoiceChooseChronicChuckleChunkChurnCigarCinnamonCircleCitizenCityCivilClaimClapClarifyClawClayCleanClerkCleverClickClientCliffClimbClinicClipClockClogCloseClothCloudClownClubClumpClusterClutchCoachCoastCoconutCodeCoffeeCoilCoinCollectColorColumnCombineComeComfortComicCommonCompanyConcertConductConfirmCongressConnectConsiderControlConvinceCookCoolCopperCopyCoralCoreCornCorrectCostCottonCouchCountryCoupleCourseCousinCoverCoyoteCrackCradleCraftCramCraneCrashCraterCrawlCrazyCreamCreditCreekCrewCricketCrimeCrispCriticCropCrossCrouchCrowdCrucialCruelCruiseCrumbleCrunchCrushCryCrystalCubeCultureCupCupboardCuriousCurrentCurtainCurveCushionCustomCuteCycleDadDamageDampDanceDangerDaringDashDaughterDawnDayDealDebateDebrisDecadeDecemberDecideDeclineDecorateDecreaseDeerDefenseDefineDefyDegreeDelayDeliverDemandDemiseDenialDentistDenyDepartDependDepositDepthDeputyDeriveDescribeDesertDesignDeskDespairDestroyDetailDetectDevelopDeviceDevoteDiagramDialDiamondDiaryDiceDieselDietDifferDigitalDignityDilemmaDinnerDinosaurDirectDirtDisagreeDiscoverDiseaseDishDismissDisorderDisplayDistanceDivertDivideDivorceDizzyDoctorDocumentDogDollDolphinDomainDonateDonkeyDonorDoorDoseDoubleDoveDraftDragonDramaDrasticDrawDreamDressDriftDrillDrinkDripDriveDropDrumDryDuckDumbDuneDuringDustDutchDutyDwarfDynamicEagerEagleEarlyEarnEarthEasilyEastEasyEchoEcologyEconomyEdgeEditEducateEffortEggEightEitherElbowElderElectricElegantElementElephantElevatorEliteElseEmbarkEmbodyEmbraceEmergeEmotionEmployEmpowerEmptyEnableEnactEndEndlessEndorseEnemyEnergyEnforceEngageEngineEnhanceEnjoyEnlistEnoughEnrichEnrollEnsureEnterEntireEntryEnvelopeEpisodeEqualEquipEraEraseErodeErosionErrorEruptEscapeEssayEssenceEstateEternalEthicsEvidenceEvilEvokeEvolveExactExampleExcessExchangeExciteExcludeExcuseExecuteExerciseExhaustExhibitExileExistExitExoticExpandExpectExpireExplainExposeExpressExtendExtraEyeEyebrowFabricFaceFacultyFadeFaintFaithFallFalseFameFamilyFamousFanFancyFantasyFarmFashionFatFatalFatherFatigueFaultFavoriteFeatureFebruaryFederalFeeFeedFeelFemaleFenceFestivalFetchFeverFewFiberFictionFieldFigureFileFilmFilterFinalFindFineFingerFinishFireFirmFirstFiscalFishFitFitnessFixFlagFlameFlashFlatFlavorFleeFlightFlipFloatFlockFloorFlowerFluidFlushFlyFoamFocusFogFoilFoldFollowFoodFootForceForestForgetForkFortuneForumForwardFossilFosterFoundFoxFragileFrameFrequentFreshFriendFringeFrogFrontFrostFrownFrozenFruitFuelFunFunnyFurnaceFuryFutureGadgetGainGalaxyGalleryGameGapGarageGarbageGardenGarlicGarmentGasGaspGateGatherGaugeGazeGeneralGeniusGenreGentleGenuineGestureGhostGiantGiftGiggleGingerGiraffeGirlGiveGladGlanceGlareGlassGlideGlimpseGlobeGloomGloryGloveGlowGlueGoatGoddessGoldGoodGooseGorillaGospelGossipGovernGownGrabGraceGrainGrantGrapeGrassGravityGreatGreenGridGriefGritGroceryGroupGrowGruntGuardGuessGuideGuiltGuitarGunGymHabitHairHalfHammerHamsterHandHappyHarborHardHarshHarvestHatHaveHawkHazardHeadHealthHeartHeavyHedgehogHeightHelloHelmetHelpHenHeroHiddenHighHillHintHipHireHistoryHobbyHockeyHoldHoleHolidayHollowHomeHoneyHoodHopeHornHorrorHorseHospitalHostHotelHourHoverHubHugeHumanHumbleHumorHundredHungryHuntHurdleHurryHurtHusbandHybridIceIconIdeaIdentifyIdleIgnoreIllIllegalIllnessImageImitateImmenseImmuneImpactImposeImproveImpulseInchIncludeIncomeIncreaseIndexIndicateIndoorIndustryInfantInflictInformInhaleInheritInitialInjectInjuryInmateInnerInnocentInputInquiryInsaneInsectInsideInspireInstallIntactInterestIntoInvestInviteInvolveIronIslandIsolateIssueItemIvoryJacketJaguarJarJazzJealousJeansJellyJewelJobJoinJokeJourneyJoyJudgeJuiceJumpJungleJuniorJunkJustKangarooKeenKeepKetchupKeyKickKidKidneyKindKingdomKissKitKitchenKiteKittenKiwiKneeKnifeKnockKnowLabLabelLaborLadderLadyLakeLampLanguageLaptopLargeLaterLatinLaughLaundryLavaLawLawnLawsuitLayerLazyLeaderLeafLearnLeaveLectureLeftLegLegalLegendLeisureLemonLendLengthLensLeopardLessonLetterLevelLiarLibertyLibraryLicenseLifeLiftLightLikeLimbLimitLinkLionLiquidListLittleLiveLizardLoadLoanLobsterLocalLockLogicLonelyLongLoopLotteryLoudLoungeLoveLoyalLuckyLuggageLumberLunarLunchLuxuryLyricsMachineMadMagicMagnetMaidMailMainMajorMakeMammalManManageMandateMangoMansionManualMapleMarbleMarchMarginMarineMarketMarriageMaskMassMasterMatchMaterialMathMatrixMatterMaximumMazeMeadowMeanMeasureMeatMechanicMedalMediaMelodyMeltMemberMemoryMentionMenuMercyMergeMeritMerryMeshMessageMetalMethodMiddleMidnightMilkMillionMimicMindMinimumMinorMinuteMiracleMirrorMiseryMissMistakeMixMixedMixtureMobileModelModifyMomMomentMonitorMonkeyMonsterMonthMoonMoralMoreMorningMosquitoMotherMotionMotorMountainMouseMoveMovieMuchMuffinMuleMultiplyMuscleMuseumMushroomMusicMustMutualMyselfMysteryMythNaiveNameNapkinNarrowNastyNationNatureNearNeckNeedNegativeNeglectNeitherNephewNerveNestNetNetworkNeutralNeverNewsNextNiceNightNobleNoiseNomineeNoodleNormalNorthNoseNotableNoteNothingNoticeNovelNowNuclearNumberNurseNutOakObeyObjectObligeObscureObserveObtainObviousOccurOceanOctoberOdorOffOfferOfficeOftenOilOkayOldOliveOlympicOmitOnceOneOnionOnlineOnlyOpenOperaOpinionOpposeOptionOrangeOrbitOrchardOrderOrdinaryOrganOrientOriginalOrphanOstrichOtherOutdoorOuterOutputOutsideOvalOvenOverOwnOwnerOxygenOysterOzonePactPaddlePagePairPalacePalmPandaPanelPanicPantherPaperParadeParentParkParrotPartyPassPatchPathPatientPatrolPatternPausePavePaymentPeacePeanutPearPeasantPelicanPenPenaltyPencilPeoplePepperPerfectPermitPersonPetPhonePhotoPhrasePhysicalPianoPicnicPicturePiecePigPigeonPillPilotPinkPioneerPipePistolPitchPizzaPlacePlanetPlasticPlatePlayPleasePledgePluckPlugPlungePoemPoetPointPolarPolePolicePondPonyPoolPopularPortionPositionPossiblePostPotatoPotteryPovertyPowderPowerPracticePraisePredictPreferPreparePresentPrettyPreventPricePridePrimaryPrintPriorityPrisonPrivatePrizeProblemProcessProduceProfitProgramProjectPromoteProofPropertyProsperProtectProudProvidePublicPuddingPullPulpPulsePumpkinPunchPupilPuppyPurchasePurityPurposePursePushPutPuzzlePyramidQualityQuantumQuarterQuestionQuickQuitQuizQuoteRabbitRaccoonRaceRackRadarRadioRailRainRaiseRallyRampRanchRandomRangeRapidRareRateRatherRavenRawRazorReadyRealReasonRebelRebuildRecallReceiveRecipeRecordRecycleReduceReflectReformRefuseRegionRegretRegularRejectRelaxReleaseReliefRelyRemainRememberRemindRemoveRenderRenewRentReopenRepairRepeatReplaceReportRequireRescueResembleResistResourceResponseResultRetireRetreatReturnReunionRevealReviewRewardRhythmRibRibbonRiceRichRideRidgeRifleRightRigidRingRiotRippleRiskRitualRivalRiverRoadRoastRobotRobustRocketRomanceRoofRookieRoomRoseRotateRoughRoundRouteRoyalRubberRudeRugRuleRunRunwayRuralSadSaddleSadnessSafeSailSaladSalmonSalonSaltSaluteSameSampleSandSatisfySatoshiSauceSausageSaveSayScaleScanScareScatterSceneSchemeSchoolScienceScissorsScorpionScoutScrapScreenScriptScrubSeaSearchSeasonSeatSecondSecretSectionSecuritySeedSeekSegmentSelectSellSeminarSeniorSenseSentenceSeriesServiceSessionSettleSetupSevenShadowShaftShallowShareShedShellSheriffShieldShiftShineShipShiverShockShoeShootShopShortShoulderShoveShrimpShrugShuffleShySiblingSickSideSiegeSightSignSilentSilkSillySilverSimilarSimpleSinceSingSirenSisterSituateSixSizeSkateSketchSkiSkillSkinSkirtSkullSlabSlamSleepSlenderSliceSlideSlightSlimSloganSlotSlowSlushSmallSmartSmileSmokeSmoothSnackSnakeSnapSniffSnowSoapSoccerSocialSockSodaSoftSolarSoldierSolidSolutionSolveSomeoneSongSoonSorrySortSoulSoundSoupSourceSouthSpaceSpareSpatialSpawnSpeakSpecialSpeedSpellSpendSphereSpiceSpiderSpikeSpinSpiritSplitSpoilSponsorSpoonSportSpotSpraySpreadSpringSpySquareSqueezeSquirrelStableStadiumStaffStageStairsStampStandStartStateStaySteakSteelStemStepStereoStickStillStingStockStomachStoneStoolStoryStoveStrategyStreetStrikeStrongStruggleStudentStuffStumbleStyleSubjectSubmitSubwaySuccessSuchSuddenSufferSugarSuggestSuitSummerSunSunnySunsetSuperSupplySupremeSureSurfaceSurgeSurpriseSurroundSurveySuspectSustainSwallowSwampSwapSwarmSwearSweetSwiftSwimSwingSwitchSwordSymbolSymptomSyrupSystemTableTackleTagTailTalentTalkTankTapeTargetTaskTasteTattooTaxiTeachTeamTellTenTenantTennisTentTermTestTextThankThatThemeThenTheoryThereTheyThingThisThoughtThreeThriveThrowThumbThunderTicketTideTigerTiltTimberTimeTinyTipTiredTissueTitleToastTobaccoTodayToddlerToeTogetherToiletTokenTomatoTomorrowToneTongueTonightToolToothTopTopicToppleTorchTornadoTortoiseTossTotalTouristTowardTowerTownToyTrackTradeTrafficTragicTrainTransferTrapTrashTravelTrayTreatTreeTrendTrialTribeTrickTriggerTrimTripTrophyTroubleTruckTrueTrulyTrumpetTrustTruthTryTubeTuitionTumbleTunaTunnelTurkeyTurnTurtleTwelveTwentyTwiceTwinTwistTwoTypeTypicalUglyUmbrellaUnableUnawareUncleUncoverUnderUndoUnfairUnfoldUnhappyUniformUniqueUnitUniverseUnknownUnlockUntilUnusualUnveilUpdateUpgradeUpholdUponUpperUpsetUrbanUrgeUsageUseUsedUsefulUselessUsualUtilityVacantVacuumVagueValidValleyValveVanVanishVaporVariousVastVaultVehicleVelvetVendorVentureVenueVerbVerifyVersionVeryVesselVeteranViableVibrantViciousVictoryVideoViewVillageVintageViolinVirtualVirusVisaVisitVisualVitalVividVocalVoiceVoidVolcanoVolumeVoteVoyageWageWagonWaitWalkWallWalnutWantWarfareWarmWarriorWashWaspWasteWaterWaveWayWealthWeaponWearWeaselWeatherWebWeddingWeekendWeirdWelcomeWestWetWhaleWhatWheatWheelWhenWhereWhipWhisperWideWidthWifeWildWillWinWindowWineWingWinkWinnerWinterWireWisdomWiseWishWitnessWolfWomanWonderWoodWoolWordWorkWorldWorryWorthWrapWreckWrestleWristWriteWrongYardYearYellowYouYoungYouthZebraZeroZoneZoo", u = null;
                function l(e) {
                    if (null == u && (u = a.replace(/([A-Z])/g, " $1").toLowerCase().substring(1).split(" "), "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60" !== s.check(e))) throw u = null, new Error("BIP39 Wordlist for en (English) FAILED");
                }
                function h() {
                    return o.call(this, "en") || this;
                }
                i = new (o = s.Wordlist, i(h, o), h.prototype.getWord = function(e) {
                    return l(this), u[e];
                }, h.prototype.getWordIndex = function(e) {
                    return l(this), u.indexOf(e);
                }, h);
                r82.langEn = i, s.register(i);
            },
            {
                "../utils/wordlist": 87
            }
        ]
    }, {}, [
        7
    ])(7);
});

},{}],"d8EQP":[function(require,module,exports) {
"use strict";
var process = require("process");
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
var __spread = this && this.__spread || function() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var chalk_1 = require("chalk");
var _ = require("lodash");
var DEFAULT_TERMINAL_WIDTH = 80;
var TERMINAL_WIDTH = _.get(process, 'stdout.columns') || DEFAULT_TERMINAL_WIDTH;
exports.logUtils = {
    log: function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        console.log.apply(console, __spread(args)); // tslint:disable-line:no-console
    },
    header: function(text, padStr) {
        if (padStr === void 0) padStr = '=';
        var padLength = TERMINAL_WIDTH - text.length;
        var padLengthEnd = (padLength + 1) / 2;
        var leftPadded = text.padStart(TERMINAL_WIDTH - padLengthEnd, padStr);
        var padded = leftPadded.padEnd(TERMINAL_WIDTH, padStr);
        console.log(padded); // tslint:disable-line:no-console
    },
    warn: function() {
        var args = [];
        for(var _i = 0; _i < arguments.length; _i++)args[_i] = arguments[_i];
        console.warn.apply(console, __spread(args)); // tslint:disable-line:no-console
    },
    table: function(columnarData) {
        var formattedColumnarData = _.mapValues(columnarData, function(columnOrColumns, _rowName) {
            return _.isNumber(columnOrColumns) ? columnOrColumns.toLocaleString() : columnOrColumns;
        });
        console.table(formattedColumnarData); // tslint:disable-line:no-console
    },
    logWithTime: function(arg) {
        exports.logUtils.log("[" + chalk_1.default.gray(new Date().toLocaleTimeString()) + "] " + arg);
    }
};

},{"process":"d5jf4","chalk":"8pwCl","lodash":"3qBDj"}],"8pwCl":[function(require,module,exports) {
'use strict';
var process = require("process");
const escapeStringRegexp = require('escape-string-regexp');
const ansiStyles = require('ansi-styles');
const stdoutColor = require('supports-color').stdout;
const template = require('./templates.js');
const isSimpleWindowsTerm = process.platform === 'win32' && !''.toLowerCase().startsWith('xterm');
// `supportsColor.level` → `ansiStyles.color[name]` mapping
const levelMapping = [
    'ansi',
    'ansi',
    'ansi256',
    'ansi16m'
];
// `color-convert` models to exclude from the Chalk API due to conflicts and such
const skipModels = new Set([
    'gray'
]);
const styles = Object.create(null);
function applyOptions(obj, options) {
    options = options || {};
    // Detect level if not set manually
    const scLevel = stdoutColor ? stdoutColor.level : 0;
    obj.level = options.level === undefined ? scLevel : options.level;
    obj.enabled = 'enabled' in options ? options.enabled : obj.level > 0;
}
function Chalk(options) {
    // We check for this.template here since calling `chalk.constructor()`
    // by itself will have a `this` of a previously constructed chalk object
    if (!this || !(this instanceof Chalk) || this.template) {
        const chalk = {};
        applyOptions(chalk, options);
        chalk.template = function() {
            const args = [].slice.call(arguments);
            return chalkTag.apply(null, [
                chalk.template
            ].concat(args));
        };
        Object.setPrototypeOf(chalk, Chalk.prototype);
        Object.setPrototypeOf(chalk.template, chalk);
        chalk.template.constructor = Chalk;
        return chalk.template;
    }
    applyOptions(this, options);
}
// Use bright blue on Windows as the normal blue color is illegible
if (isSimpleWindowsTerm) ansiStyles.blue.open = '\u001B[94m';
for (const key of Object.keys(ansiStyles)){
    ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');
    styles[key] = {
        get () {
            const codes = ansiStyles[key];
            return build.call(this, this._styles ? this._styles.concat(codes) : [
                codes
            ], this._empty, key);
        }
    };
}
styles.visible = {
    get () {
        return build.call(this, this._styles || [], true, 'visible');
    }
};
ansiStyles.color.closeRe = new RegExp(escapeStringRegexp(ansiStyles.color.close), 'g');
for (const model of Object.keys(ansiStyles.color.ansi)){
    if (skipModels.has(model)) continue;
    styles[model] = {
        get () {
            const level = this.level;
            return function() {
                const open = ansiStyles.color[levelMapping[level]][model].apply(null, arguments);
                const codes = {
                    open,
                    close: ansiStyles.color.close,
                    closeRe: ansiStyles.color.closeRe
                };
                return build.call(this, this._styles ? this._styles.concat(codes) : [
                    codes
                ], this._empty, model);
            };
        }
    };
}
ansiStyles.bgColor.closeRe = new RegExp(escapeStringRegexp(ansiStyles.bgColor.close), 'g');
for (const model1 of Object.keys(ansiStyles.bgColor.ansi)){
    if (skipModels.has(model1)) continue;
    const bgModel = 'bg' + model1[0].toUpperCase() + model1.slice(1);
    styles[bgModel] = {
        get () {
            const level = this.level;
            return function() {
                const open = ansiStyles.bgColor[levelMapping[level]][model1].apply(null, arguments);
                const codes = {
                    open,
                    close: ansiStyles.bgColor.close,
                    closeRe: ansiStyles.bgColor.closeRe
                };
                return build.call(this, this._styles ? this._styles.concat(codes) : [
                    codes
                ], this._empty, model1);
            };
        }
    };
}
const proto = Object.defineProperties(()=>{}, styles);
function build(_styles, _empty, key1) {
    const builder = function() {
        return applyStyle.apply(builder, arguments);
    };
    builder._styles = _styles;
    builder._empty = _empty;
    const self = this;
    Object.defineProperty(builder, 'level', {
        enumerable: true,
        get () {
            return self.level;
        },
        set (level) {
            self.level = level;
        }
    });
    Object.defineProperty(builder, 'enabled', {
        enumerable: true,
        get () {
            return self.enabled;
        },
        set (enabled) {
            self.enabled = enabled;
        }
    });
    // See below for fix regarding invisible grey/dim combination on Windows
    builder.hasGrey = this.hasGrey || key1 === 'gray' || key1 === 'grey';
    // `__proto__` is used because we must return a function, but there is
    // no way to create a function with a different prototype
    builder.__proto__ = proto; // eslint-disable-line no-proto
    return builder;
}
function applyStyle() {
    // Support varags, but simply cast to string in case there's only one arg
    const args = arguments;
    const argsLen = args.length;
    let str = String(arguments[0]);
    if (argsLen === 0) return '';
    if (argsLen > 1) // Don't slice `arguments`, it prevents V8 optimizations
    for(let a = 1; a < argsLen; a++)str += ' ' + args[a];
    if (!this.enabled || this.level <= 0 || !str) return this._empty ? '' : str;
    // Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
    // see https://github.com/chalk/chalk/issues/58
    // If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
    const originalDim = ansiStyles.dim.open;
    if (isSimpleWindowsTerm && this.hasGrey) ansiStyles.dim.open = '';
    for (const code of this._styles.slice().reverse()){
        // Replace any instances already present with a re-opening code
        // otherwise only the part of the string until said closing code
        // will be colored, and the rest will simply be 'plain'.
        str = code.open + str.replace(code.closeRe, code.open) + code.close;
        // Close the styling before a linebreak and reopen
        // after next line to fix a bleed issue on macOS
        // https://github.com/chalk/chalk/pull/92
        str = str.replace(/\r?\n/g, `${code.close}$&${code.open}`);
    }
    // Reset the original `dim` if we changed it to work around the Windows dimmed gray issue
    ansiStyles.dim.open = originalDim;
    return str;
}
function chalkTag(chalk, strings) {
    if (!Array.isArray(strings)) // If chalk() was called by itself or with a string,
    // return the string itself as a string.
    return [].slice.call(arguments, 1).join(' ');
    const args = [].slice.call(arguments, 2);
    const parts = [
        strings.raw[0]
    ];
    for(let i = 1; i < strings.length; i++){
        parts.push(String(args[i - 1]).replace(/[{}\\]/g, '\\$&'));
        parts.push(String(strings.raw[i]));
    }
    return template(chalk, parts.join(''));
}
Object.defineProperties(Chalk.prototype, styles);
module.exports = Chalk(); // eslint-disable-line new-cap
module.exports.supportsColor = stdoutColor;
module.exports.default = module.exports; // For TypeScript

},{"process":"d5jf4","escape-string-regexp":"kqFAt","ansi-styles":"et7fe","supports-color":"BcaM6","./templates.js":"9Km3r"}],"kqFAt":[function(require,module,exports) {
'use strict';
var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;
module.exports = function(str) {
    if (typeof str !== 'string') throw new TypeError('Expected a string');
    return str.replace(matchOperatorsRe, '\\$&');
};

},{}],"et7fe":[function(require,module,exports) {
'use strict';
const colorConvert = require('color-convert');
const wrapAnsi16 = (fn, offset)=>function() {
        const code = fn.apply(colorConvert, arguments);
        return `\u001B[${code + offset}m`;
    }
;
const wrapAnsi256 = (fn, offset)=>function() {
        const code = fn.apply(colorConvert, arguments);
        return `\u001B[${38 + offset};5;${code}m`;
    }
;
const wrapAnsi16m = (fn, offset)=>function() {
        const rgb = fn.apply(colorConvert, arguments);
        return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    }
;
function assembleStyles() {
    const codes = new Map();
    const styles = {
        modifier: {
            reset: [
                0,
                0
            ],
            // 21 isn't widely supported and 22 does the same thing
            bold: [
                1,
                22
            ],
            dim: [
                2,
                22
            ],
            italic: [
                3,
                23
            ],
            underline: [
                4,
                24
            ],
            inverse: [
                7,
                27
            ],
            hidden: [
                8,
                28
            ],
            strikethrough: [
                9,
                29
            ]
        },
        color: {
            black: [
                30,
                39
            ],
            red: [
                31,
                39
            ],
            green: [
                32,
                39
            ],
            yellow: [
                33,
                39
            ],
            blue: [
                34,
                39
            ],
            magenta: [
                35,
                39
            ],
            cyan: [
                36,
                39
            ],
            white: [
                37,
                39
            ],
            gray: [
                90,
                39
            ],
            // Bright color
            redBright: [
                91,
                39
            ],
            greenBright: [
                92,
                39
            ],
            yellowBright: [
                93,
                39
            ],
            blueBright: [
                94,
                39
            ],
            magentaBright: [
                95,
                39
            ],
            cyanBright: [
                96,
                39
            ],
            whiteBright: [
                97,
                39
            ]
        },
        bgColor: {
            bgBlack: [
                40,
                49
            ],
            bgRed: [
                41,
                49
            ],
            bgGreen: [
                42,
                49
            ],
            bgYellow: [
                43,
                49
            ],
            bgBlue: [
                44,
                49
            ],
            bgMagenta: [
                45,
                49
            ],
            bgCyan: [
                46,
                49
            ],
            bgWhite: [
                47,
                49
            ],
            // Bright color
            bgBlackBright: [
                100,
                49
            ],
            bgRedBright: [
                101,
                49
            ],
            bgGreenBright: [
                102,
                49
            ],
            bgYellowBright: [
                103,
                49
            ],
            bgBlueBright: [
                104,
                49
            ],
            bgMagentaBright: [
                105,
                49
            ],
            bgCyanBright: [
                106,
                49
            ],
            bgWhiteBright: [
                107,
                49
            ]
        }
    };
    // Fix humans
    styles.color.grey = styles.color.gray;
    for (const groupName of Object.keys(styles)){
        const group = styles[groupName];
        for (const styleName of Object.keys(group)){
            const style = group[styleName];
            styles[styleName] = {
                open: `\u001B[${style[0]}m`,
                close: `\u001B[${style[1]}m`
            };
            group[styleName] = styles[styleName];
            codes.set(style[0], style[1]);
        }
        Object.defineProperty(styles, groupName, {
            value: group,
            enumerable: false
        });
        Object.defineProperty(styles, 'codes', {
            value: codes,
            enumerable: false
        });
    }
    const ansi2ansi = (n)=>n
    ;
    const rgb2rgb = (r, g, b)=>[
            r,
            g,
            b
        ]
    ;
    styles.color.close = '\u001B[39m';
    styles.bgColor.close = '\u001B[49m';
    styles.color.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 0)
    };
    styles.color.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 0)
    };
    styles.color.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 0)
    };
    styles.bgColor.ansi = {
        ansi: wrapAnsi16(ansi2ansi, 10)
    };
    styles.bgColor.ansi256 = {
        ansi256: wrapAnsi256(ansi2ansi, 10)
    };
    styles.bgColor.ansi16m = {
        rgb: wrapAnsi16m(rgb2rgb, 10)
    };
    for (let key of Object.keys(colorConvert)){
        if (typeof colorConvert[key] !== 'object') continue;
        const suite = colorConvert[key];
        if (key === 'ansi16') key = 'ansi';
        if ('ansi16' in suite) {
            styles.color.ansi[key] = wrapAnsi16(suite.ansi16, 0);
            styles.bgColor.ansi[key] = wrapAnsi16(suite.ansi16, 10);
        }
        if ('ansi256' in suite) {
            styles.color.ansi256[key] = wrapAnsi256(suite.ansi256, 0);
            styles.bgColor.ansi256[key] = wrapAnsi256(suite.ansi256, 10);
        }
        if ('rgb' in suite) {
            styles.color.ansi16m[key] = wrapAnsi16m(suite.rgb, 0);
            styles.bgColor.ansi16m[key] = wrapAnsi16m(suite.rgb, 10);
        }
    }
    return styles;
}
// Make the export immutable
Object.defineProperty(module, 'exports', {
    enumerable: true,
    get: assembleStyles
});

},{"color-convert":"bvUlS"}],"bvUlS":[function(require,module,exports) {
var conversions = require('./conversions');
var route = require('./route');
var convert = {};
var models = Object.keys(conversions);
function wrapRaw(fn) {
    var wrappedFn = function(args) {
        if (args === undefined || args === null) return args;
        if (arguments.length > 1) args = Array.prototype.slice.call(arguments);
        return fn(args);
    };
    // preserve .conversion property if there is one
    if ('conversion' in fn) wrappedFn.conversion = fn.conversion;
    return wrappedFn;
}
function wrapRounded(fn) {
    var wrappedFn = function(args) {
        if (args === undefined || args === null) return args;
        if (arguments.length > 1) args = Array.prototype.slice.call(arguments);
        var result = fn(args);
        // we're assuming the result is an array here.
        // see notice in conversions.js; don't use box types
        // in conversion functions.
        if (typeof result === 'object') for(var len = result.length, i = 0; i < len; i++)result[i] = Math.round(result[i]);
        return result;
    };
    // preserve .conversion property if there is one
    if ('conversion' in fn) wrappedFn.conversion = fn.conversion;
    return wrappedFn;
}
models.forEach(function(fromModel) {
    convert[fromModel] = {};
    Object.defineProperty(convert[fromModel], 'channels', {
        value: conversions[fromModel].channels
    });
    Object.defineProperty(convert[fromModel], 'labels', {
        value: conversions[fromModel].labels
    });
    var routes = route(fromModel);
    var routeModels = Object.keys(routes);
    routeModels.forEach(function(toModel) {
        var fn = routes[toModel];
        convert[fromModel][toModel] = wrapRounded(fn);
        convert[fromModel][toModel].raw = wrapRaw(fn);
    });
});
module.exports = convert;

},{"./conversions":"C4O54","./route":"iJmBL"}],"C4O54":[function(require,module,exports) {
/* MIT license */ var cssKeywords = require('color-name');
// NOTE: conversions should only return primitive values (i.e. arrays, or
//       values that give correct `typeof` results).
//       do not use box values types (i.e. Number(), String(), etc.)
var reverseKeywords = {};
for(var key in cssKeywords)if (cssKeywords.hasOwnProperty(key)) reverseKeywords[cssKeywords[key]] = key;
var convert = module.exports = {
    rgb: {
        channels: 3,
        labels: 'rgb'
    },
    hsl: {
        channels: 3,
        labels: 'hsl'
    },
    hsv: {
        channels: 3,
        labels: 'hsv'
    },
    hwb: {
        channels: 3,
        labels: 'hwb'
    },
    cmyk: {
        channels: 4,
        labels: 'cmyk'
    },
    xyz: {
        channels: 3,
        labels: 'xyz'
    },
    lab: {
        channels: 3,
        labels: 'lab'
    },
    lch: {
        channels: 3,
        labels: 'lch'
    },
    hex: {
        channels: 1,
        labels: [
            'hex'
        ]
    },
    keyword: {
        channels: 1,
        labels: [
            'keyword'
        ]
    },
    ansi16: {
        channels: 1,
        labels: [
            'ansi16'
        ]
    },
    ansi256: {
        channels: 1,
        labels: [
            'ansi256'
        ]
    },
    hcg: {
        channels: 3,
        labels: [
            'h',
            'c',
            'g'
        ]
    },
    apple: {
        channels: 3,
        labels: [
            'r16',
            'g16',
            'b16'
        ]
    },
    gray: {
        channels: 1,
        labels: [
            'gray'
        ]
    }
};
// hide .channels and .labels properties
for(var model in convert)if (convert.hasOwnProperty(model)) {
    if (!('channels' in convert[model])) throw new Error('missing channels property: ' + model);
    if (!('labels' in convert[model])) throw new Error('missing channel labels property: ' + model);
    if (convert[model].labels.length !== convert[model].channels) throw new Error('channel and label counts mismatch: ' + model);
    var channels = convert[model].channels;
    var labels = convert[model].labels;
    delete convert[model].channels;
    delete convert[model].labels;
    Object.defineProperty(convert[model], 'channels', {
        value: channels
    });
    Object.defineProperty(convert[model], 'labels', {
        value: labels
    });
}
convert.rgb.hsl = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var min = Math.min(r, g, b);
    var max = Math.max(r, g, b);
    var delta = max - min;
    var h;
    var s;
    var l;
    if (max === min) h = 0;
    else if (r === max) h = (g - b) / delta;
    else if (g === max) h = 2 + (b - r) / delta;
    else if (b === max) h = 4 + (r - g) / delta;
    h = Math.min(h * 60, 360);
    if (h < 0) h += 360;
    l = (min + max) / 2;
    if (max === min) s = 0;
    else if (l <= 0.5) s = delta / (max + min);
    else s = delta / (2 - max - min);
    return [
        h,
        s * 100,
        l * 100
    ];
};
convert.rgb.hsv = function(rgb) {
    var rdif;
    var gdif;
    var bdif;
    var h;
    var s;
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var v = Math.max(r, g, b);
    var diff = v - Math.min(r, g, b);
    var diffc = function(c) {
        return (v - c) / 6 / diff + 0.5;
    };
    if (diff === 0) h = s = 0;
    else {
        s = diff / v;
        rdif = diffc(r);
        gdif = diffc(g);
        bdif = diffc(b);
        if (r === v) h = bdif - gdif;
        else if (g === v) h = 1 / 3 + rdif - bdif;
        else if (b === v) h = 2 / 3 + gdif - rdif;
        if (h < 0) h += 1;
        else if (h > 1) h -= 1;
    }
    return [
        h * 360,
        s * 100,
        v * 100
    ];
};
convert.rgb.hwb = function(rgb) {
    var r = rgb[0];
    var g = rgb[1];
    var b = rgb[2];
    var h = convert.rgb.hsl(rgb)[0];
    var w = 1 / 255 * Math.min(r, Math.min(g, b));
    b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));
    return [
        h,
        w * 100,
        b * 100
    ];
};
convert.rgb.cmyk = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var c;
    var m;
    var y;
    var k;
    k = Math.min(1 - r, 1 - g, 1 - b);
    c = (1 - r - k) / (1 - k) || 0;
    m = (1 - g - k) / (1 - k) || 0;
    y = (1 - b - k) / (1 - k) || 0;
    return [
        c * 100,
        m * 100,
        y * 100,
        k * 100
    ];
};
/**
 * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
 * */ function comparativeDistance(x, y) {
    return Math.pow(x[0] - y[0], 2) + Math.pow(x[1] - y[1], 2) + Math.pow(x[2] - y[2], 2);
}
convert.rgb.keyword = function(rgb) {
    var reversed = reverseKeywords[rgb];
    if (reversed) return reversed;
    var currentClosestDistance = Infinity;
    var currentClosestKeyword;
    for(var keyword in cssKeywords)if (cssKeywords.hasOwnProperty(keyword)) {
        var value = cssKeywords[keyword];
        // Compute comparative distance
        var distance = comparativeDistance(rgb, value);
        // Check if its less, if so set as closest
        if (distance < currentClosestDistance) {
            currentClosestDistance = distance;
            currentClosestKeyword = keyword;
        }
    }
    return currentClosestKeyword;
};
convert.keyword.rgb = function(keyword) {
    return cssKeywords[keyword];
};
convert.rgb.xyz = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    // assume sRGB
    r = r > 0.04045 ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92;
    g = g > 0.04045 ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92;
    b = b > 0.04045 ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92;
    var x = r * 0.4124 + g * 0.3576 + b * 0.1805;
    var y = r * 0.2126 + g * 0.7152 + b * 0.0722;
    var z = r * 0.0193 + g * 0.1192 + b * 0.9505;
    return [
        x * 100,
        y * 100,
        z * 100
    ];
};
convert.rgb.lab = function(rgb) {
    var xyz = convert.rgb.xyz(rgb);
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
convert.hsl.rgb = function(hsl) {
    var h = hsl[0] / 360;
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var t1;
    var t2;
    var t3;
    var rgb;
    var val;
    if (s === 0) {
        val = l * 255;
        return [
            val,
            val,
            val
        ];
    }
    if (l < 0.5) t2 = l * (1 + s);
    else t2 = l + s - l * s;
    t1 = 2 * l - t2;
    rgb = [
        0,
        0,
        0
    ];
    for(var i = 0; i < 3; i++){
        t3 = h + 1 / 3 * -(i - 1);
        if (t3 < 0) t3++;
        if (t3 > 1) t3--;
        if (6 * t3 < 1) val = t1 + (t2 - t1) * 6 * t3;
        else if (2 * t3 < 1) val = t2;
        else if (3 * t3 < 2) val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        else val = t1;
        rgb[i] = val * 255;
    }
    return rgb;
};
convert.hsl.hsv = function(hsl) {
    var h = hsl[0];
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var smin = s;
    var lmin = Math.max(l, 0.01);
    var sv;
    var v;
    l *= 2;
    s *= l <= 1 ? l : 2 - l;
    smin *= lmin <= 1 ? lmin : 2 - lmin;
    v = (l + s) / 2;
    sv = l === 0 ? 2 * smin / (lmin + smin) : 2 * s / (l + s);
    return [
        h,
        sv * 100,
        v * 100
    ];
};
convert.hsv.rgb = function(hsv) {
    var h = hsv[0] / 60;
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var hi = Math.floor(h) % 6;
    var f = h - Math.floor(h);
    var p = 255 * v * (1 - s);
    var q = 255 * v * (1 - s * f);
    var t = 255 * v * (1 - s * (1 - f));
    v *= 255;
    switch(hi){
        case 0:
            return [
                v,
                t,
                p
            ];
        case 1:
            return [
                q,
                v,
                p
            ];
        case 2:
            return [
                p,
                v,
                t
            ];
        case 3:
            return [
                p,
                q,
                v
            ];
        case 4:
            return [
                t,
                p,
                v
            ];
        case 5:
            return [
                v,
                p,
                q
            ];
    }
};
convert.hsv.hsl = function(hsv) {
    var h = hsv[0];
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var vmin = Math.max(v, 0.01);
    var lmin;
    var sl;
    var l;
    l = (2 - s) * v;
    lmin = (2 - s) * vmin;
    sl = s * vmin;
    sl /= lmin <= 1 ? lmin : 2 - lmin;
    sl = sl || 0;
    l /= 2;
    return [
        h,
        sl * 100,
        l * 100
    ];
};
// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
convert.hwb.rgb = function(hwb) {
    var h = hwb[0] / 360;
    var wh = hwb[1] / 100;
    var bl = hwb[2] / 100;
    var ratio = wh + bl;
    var i;
    var v;
    var f;
    var n;
    // wh + bl cant be > 1
    if (ratio > 1) {
        wh /= ratio;
        bl /= ratio;
    }
    i = Math.floor(6 * h);
    v = 1 - bl;
    f = 6 * h - i;
    if ((i & 0x01) !== 0) f = 1 - f;
    n = wh + f * (v - wh); // linear interpolation
    var r;
    var g;
    var b;
    switch(i){
        default:
        case 6:
        case 0:
            r = v;
            g = n;
            b = wh;
            break;
        case 1:
            r = n;
            g = v;
            b = wh;
            break;
        case 2:
            r = wh;
            g = v;
            b = n;
            break;
        case 3:
            r = wh;
            g = n;
            b = v;
            break;
        case 4:
            r = n;
            g = wh;
            b = v;
            break;
        case 5:
            r = v;
            g = wh;
            b = n;
            break;
    }
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert.cmyk.rgb = function(cmyk) {
    var c = cmyk[0] / 100;
    var m = cmyk[1] / 100;
    var y = cmyk[2] / 100;
    var k = cmyk[3] / 100;
    var r;
    var g;
    var b;
    r = 1 - Math.min(1, c * (1 - k) + k);
    g = 1 - Math.min(1, m * (1 - k) + k);
    b = 1 - Math.min(1, y * (1 - k) + k);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert.xyz.rgb = function(xyz) {
    var x = xyz[0] / 100;
    var y = xyz[1] / 100;
    var z = xyz[2] / 100;
    var r;
    var g;
    var b;
    r = x * 3.2406 + y * -1.5372 + z * -0.4986;
    g = x * -0.9689 + y * 1.8758 + z * 0.0415;
    b = x * 0.0557 + y * -0.204 + z * 1.0570;
    // assume sRGB
    r = r > 0.0031308 ? 1.055 * Math.pow(r, 1.0 / 2.4) - 0.055 : r * 12.92;
    g = g > 0.0031308 ? 1.055 * Math.pow(g, 1.0 / 2.4) - 0.055 : g * 12.92;
    b = b > 0.0031308 ? 1.055 * Math.pow(b, 1.0 / 2.4) - 0.055 : b * 12.92;
    r = Math.min(Math.max(0, r), 1);
    g = Math.min(Math.max(0, g), 1);
    b = Math.min(Math.max(0, b), 1);
    return [
        r * 255,
        g * 255,
        b * 255
    ];
};
convert.xyz.lab = function(xyz) {
    var x = xyz[0];
    var y = xyz[1];
    var z = xyz[2];
    var l;
    var a;
    var b;
    x /= 95.047;
    y /= 100;
    z /= 108.883;
    x = x > 0.008856 ? Math.pow(x, 1 / 3) : 7.787 * x + 16 / 116;
    y = y > 0.008856 ? Math.pow(y, 1 / 3) : 7.787 * y + 16 / 116;
    z = z > 0.008856 ? Math.pow(z, 1 / 3) : 7.787 * z + 16 / 116;
    l = 116 * y - 16;
    a = 500 * (x - y);
    b = 200 * (y - z);
    return [
        l,
        a,
        b
    ];
};
convert.lab.xyz = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var x;
    var y;
    var z;
    y = (l + 16) / 116;
    x = a / 500 + y;
    z = y - b / 200;
    var y2 = Math.pow(y, 3);
    var x2 = Math.pow(x, 3);
    var z2 = Math.pow(z, 3);
    y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;
    x *= 95.047;
    y *= 100;
    z *= 108.883;
    return [
        x,
        y,
        z
    ];
};
convert.lab.lch = function(lab) {
    var l = lab[0];
    var a = lab[1];
    var b = lab[2];
    var hr;
    var h;
    var c;
    hr = Math.atan2(b, a);
    h = hr * 360 / 2 / Math.PI;
    if (h < 0) h += 360;
    c = Math.sqrt(a * a + b * b);
    return [
        l,
        c,
        h
    ];
};
convert.lch.lab = function(lch) {
    var l = lch[0];
    var c = lch[1];
    var h = lch[2];
    var a;
    var b;
    var hr;
    hr = h / 360 * 2 * Math.PI;
    a = c * Math.cos(hr);
    b = c * Math.sin(hr);
    return [
        l,
        a,
        b
    ];
};
convert.rgb.ansi16 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization
    value = Math.round(value / 50);
    if (value === 0) return 30;
    var ansi = 30 + (Math.round(b / 255) << 2 | Math.round(g / 255) << 1 | Math.round(r / 255));
    if (value === 2) ansi += 60;
    return ansi;
};
convert.hsv.ansi16 = function(args) {
    // optimization here; we already know the value and don't need to get
    // it converted for us.
    return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
};
convert.rgb.ansi256 = function(args) {
    var r = args[0];
    var g = args[1];
    var b = args[2];
    // we use the extended greyscale palette here, with the exception of
    // black and white. normal palette only has 4 greyscale shades.
    if (r === g && g === b) {
        if (r < 8) return 16;
        if (r > 248) return 231;
        return Math.round((r - 8) / 247 * 24) + 232;
    }
    var ansi = 16 + 36 * Math.round(r / 255 * 5) + 6 * Math.round(g / 255 * 5) + Math.round(b / 255 * 5);
    return ansi;
};
convert.ansi16.rgb = function(args) {
    var color = args % 10;
    // handle greyscale
    if (color === 0 || color === 7) {
        if (args > 50) color += 3.5;
        color = color / 10.5 * 255;
        return [
            color,
            color,
            color
        ];
    }
    var mult = (~~(args > 50) + 1) * 0.5;
    var r = (color & 1) * mult * 255;
    var g = (color >> 1 & 1) * mult * 255;
    var b = (color >> 2 & 1) * mult * 255;
    return [
        r,
        g,
        b
    ];
};
convert.ansi256.rgb = function(args) {
    // handle greyscale
    if (args >= 232) {
        var c = (args - 232) * 10 + 8;
        return [
            c,
            c,
            c
        ];
    }
    args -= 16;
    var rem;
    var r = Math.floor(args / 36) / 5 * 255;
    var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    var b = rem % 6 / 5 * 255;
    return [
        r,
        g,
        b
    ];
};
convert.rgb.hex = function(args) {
    var integer = ((Math.round(args[0]) & 0xFF) << 16) + ((Math.round(args[1]) & 0xFF) << 8) + (Math.round(args[2]) & 0xFF);
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
};
convert.hex.rgb = function(args) {
    var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    if (!match) return [
        0,
        0,
        0
    ];
    var colorString = match[0];
    if (match[0].length === 3) colorString = colorString.split('').map(function(char) {
        return char + char;
    }).join('');
    var integer = parseInt(colorString, 16);
    var r = integer >> 16 & 0xFF;
    var g = integer >> 8 & 0xFF;
    var b = integer & 0xFF;
    return [
        r,
        g,
        b
    ];
};
convert.rgb.hcg = function(rgb) {
    var r = rgb[0] / 255;
    var g = rgb[1] / 255;
    var b = rgb[2] / 255;
    var max = Math.max(Math.max(r, g), b);
    var min = Math.min(Math.min(r, g), b);
    var chroma = max - min;
    var grayscale;
    var hue;
    if (chroma < 1) grayscale = min / (1 - chroma);
    else grayscale = 0;
    if (chroma <= 0) hue = 0;
    else if (max === r) hue = (g - b) / chroma % 6;
    else if (max === g) hue = 2 + (b - r) / chroma;
    else hue = 4 + (r - g) / chroma + 4;
    hue /= 6;
    hue %= 1;
    return [
        hue * 360,
        chroma * 100,
        grayscale * 100
    ];
};
convert.hsl.hcg = function(hsl) {
    var s = hsl[1] / 100;
    var l = hsl[2] / 100;
    var c = 1;
    var f = 0;
    if (l < 0.5) c = 2.0 * s * l;
    else c = 2.0 * s * (1.0 - l);
    if (c < 1.0) f = (l - 0.5 * c) / (1.0 - c);
    return [
        hsl[0],
        c * 100,
        f * 100
    ];
};
convert.hsv.hcg = function(hsv) {
    var s = hsv[1] / 100;
    var v = hsv[2] / 100;
    var c = s * v;
    var f = 0;
    if (c < 1.0) f = (v - c) / (1 - c);
    return [
        hsv[0],
        c * 100,
        f * 100
    ];
};
convert.hcg.rgb = function(hcg) {
    var h = hcg[0] / 360;
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    if (c === 0.0) return [
        g * 255,
        g * 255,
        g * 255
    ];
    var pure = [
        0,
        0,
        0
    ];
    var hi = h % 1 * 6;
    var v = hi % 1;
    var w = 1 - v;
    var mg = 0;
    switch(Math.floor(hi)){
        case 0:
            pure[0] = 1;
            pure[1] = v;
            pure[2] = 0;
            break;
        case 1:
            pure[0] = w;
            pure[1] = 1;
            pure[2] = 0;
            break;
        case 2:
            pure[0] = 0;
            pure[1] = 1;
            pure[2] = v;
            break;
        case 3:
            pure[0] = 0;
            pure[1] = w;
            pure[2] = 1;
            break;
        case 4:
            pure[0] = v;
            pure[1] = 0;
            pure[2] = 1;
            break;
        default:
            pure[0] = 1;
            pure[1] = 0;
            pure[2] = w;
    }
    mg = (1.0 - c) * g;
    return [
        (c * pure[0] + mg) * 255,
        (c * pure[1] + mg) * 255,
        (c * pure[2] + mg) * 255
    ];
};
convert.hcg.hsv = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    var f = 0;
    if (v > 0.0) f = c / v;
    return [
        hcg[0],
        f * 100,
        v * 100
    ];
};
convert.hcg.hsl = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var l = g * (1.0 - c) + 0.5 * c;
    var s = 0;
    if (l > 0.0 && l < 0.5) s = c / (2 * l);
    else if (l >= 0.5 && l < 1.0) s = c / (2 * (1 - l));
    return [
        hcg[0],
        s * 100,
        l * 100
    ];
};
convert.hcg.hwb = function(hcg) {
    var c = hcg[1] / 100;
    var g = hcg[2] / 100;
    var v = c + g * (1.0 - c);
    return [
        hcg[0],
        (v - c) * 100,
        (1 - v) * 100
    ];
};
convert.hwb.hcg = function(hwb) {
    var w = hwb[1] / 100;
    var b = hwb[2] / 100;
    var v = 1 - b;
    var c = v - w;
    var g = 0;
    if (c < 1) g = (v - c) / (1 - c);
    return [
        hwb[0],
        c * 100,
        g * 100
    ];
};
convert.apple.rgb = function(apple) {
    return [
        apple[0] / 65535 * 255,
        apple[1] / 65535 * 255,
        apple[2] / 65535 * 255
    ];
};
convert.rgb.apple = function(rgb) {
    return [
        rgb[0] / 255 * 65535,
        rgb[1] / 255 * 65535,
        rgb[2] / 255 * 65535
    ];
};
convert.gray.rgb = function(args) {
    return [
        args[0] / 100 * 255,
        args[0] / 100 * 255,
        args[0] / 100 * 255
    ];
};
convert.gray.hsl = convert.gray.hsv = function(args) {
    return [
        0,
        0,
        args[0]
    ];
};
convert.gray.hwb = function(gray) {
    return [
        0,
        100,
        gray[0]
    ];
};
convert.gray.cmyk = function(gray) {
    return [
        0,
        0,
        0,
        gray[0]
    ];
};
convert.gray.lab = function(gray) {
    return [
        gray[0],
        0,
        0
    ];
};
convert.gray.hex = function(gray) {
    var val = Math.round(gray[0] / 100 * 255) & 0xFF;
    var integer = (val << 16) + (val << 8) + val;
    var string = integer.toString(16).toUpperCase();
    return '000000'.substring(string.length) + string;
};
convert.rgb.gray = function(rgb) {
    var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    return [
        val / 255 * 100
    ];
};

},{"color-name":"js5TI"}],"js5TI":[function(require,module,exports) {
'use strict';
module.exports = {
    "aliceblue": [
        240,
        248,
        255
    ],
    "antiquewhite": [
        250,
        235,
        215
    ],
    "aqua": [
        0,
        255,
        255
    ],
    "aquamarine": [
        127,
        255,
        212
    ],
    "azure": [
        240,
        255,
        255
    ],
    "beige": [
        245,
        245,
        220
    ],
    "bisque": [
        255,
        228,
        196
    ],
    "black": [
        0,
        0,
        0
    ],
    "blanchedalmond": [
        255,
        235,
        205
    ],
    "blue": [
        0,
        0,
        255
    ],
    "blueviolet": [
        138,
        43,
        226
    ],
    "brown": [
        165,
        42,
        42
    ],
    "burlywood": [
        222,
        184,
        135
    ],
    "cadetblue": [
        95,
        158,
        160
    ],
    "chartreuse": [
        127,
        255,
        0
    ],
    "chocolate": [
        210,
        105,
        30
    ],
    "coral": [
        255,
        127,
        80
    ],
    "cornflowerblue": [
        100,
        149,
        237
    ],
    "cornsilk": [
        255,
        248,
        220
    ],
    "crimson": [
        220,
        20,
        60
    ],
    "cyan": [
        0,
        255,
        255
    ],
    "darkblue": [
        0,
        0,
        139
    ],
    "darkcyan": [
        0,
        139,
        139
    ],
    "darkgoldenrod": [
        184,
        134,
        11
    ],
    "darkgray": [
        169,
        169,
        169
    ],
    "darkgreen": [
        0,
        100,
        0
    ],
    "darkgrey": [
        169,
        169,
        169
    ],
    "darkkhaki": [
        189,
        183,
        107
    ],
    "darkmagenta": [
        139,
        0,
        139
    ],
    "darkolivegreen": [
        85,
        107,
        47
    ],
    "darkorange": [
        255,
        140,
        0
    ],
    "darkorchid": [
        153,
        50,
        204
    ],
    "darkred": [
        139,
        0,
        0
    ],
    "darksalmon": [
        233,
        150,
        122
    ],
    "darkseagreen": [
        143,
        188,
        143
    ],
    "darkslateblue": [
        72,
        61,
        139
    ],
    "darkslategray": [
        47,
        79,
        79
    ],
    "darkslategrey": [
        47,
        79,
        79
    ],
    "darkturquoise": [
        0,
        206,
        209
    ],
    "darkviolet": [
        148,
        0,
        211
    ],
    "deeppink": [
        255,
        20,
        147
    ],
    "deepskyblue": [
        0,
        191,
        255
    ],
    "dimgray": [
        105,
        105,
        105
    ],
    "dimgrey": [
        105,
        105,
        105
    ],
    "dodgerblue": [
        30,
        144,
        255
    ],
    "firebrick": [
        178,
        34,
        34
    ],
    "floralwhite": [
        255,
        250,
        240
    ],
    "forestgreen": [
        34,
        139,
        34
    ],
    "fuchsia": [
        255,
        0,
        255
    ],
    "gainsboro": [
        220,
        220,
        220
    ],
    "ghostwhite": [
        248,
        248,
        255
    ],
    "gold": [
        255,
        215,
        0
    ],
    "goldenrod": [
        218,
        165,
        32
    ],
    "gray": [
        128,
        128,
        128
    ],
    "green": [
        0,
        128,
        0
    ],
    "greenyellow": [
        173,
        255,
        47
    ],
    "grey": [
        128,
        128,
        128
    ],
    "honeydew": [
        240,
        255,
        240
    ],
    "hotpink": [
        255,
        105,
        180
    ],
    "indianred": [
        205,
        92,
        92
    ],
    "indigo": [
        75,
        0,
        130
    ],
    "ivory": [
        255,
        255,
        240
    ],
    "khaki": [
        240,
        230,
        140
    ],
    "lavender": [
        230,
        230,
        250
    ],
    "lavenderblush": [
        255,
        240,
        245
    ],
    "lawngreen": [
        124,
        252,
        0
    ],
    "lemonchiffon": [
        255,
        250,
        205
    ],
    "lightblue": [
        173,
        216,
        230
    ],
    "lightcoral": [
        240,
        128,
        128
    ],
    "lightcyan": [
        224,
        255,
        255
    ],
    "lightgoldenrodyellow": [
        250,
        250,
        210
    ],
    "lightgray": [
        211,
        211,
        211
    ],
    "lightgreen": [
        144,
        238,
        144
    ],
    "lightgrey": [
        211,
        211,
        211
    ],
    "lightpink": [
        255,
        182,
        193
    ],
    "lightsalmon": [
        255,
        160,
        122
    ],
    "lightseagreen": [
        32,
        178,
        170
    ],
    "lightskyblue": [
        135,
        206,
        250
    ],
    "lightslategray": [
        119,
        136,
        153
    ],
    "lightslategrey": [
        119,
        136,
        153
    ],
    "lightsteelblue": [
        176,
        196,
        222
    ],
    "lightyellow": [
        255,
        255,
        224
    ],
    "lime": [
        0,
        255,
        0
    ],
    "limegreen": [
        50,
        205,
        50
    ],
    "linen": [
        250,
        240,
        230
    ],
    "magenta": [
        255,
        0,
        255
    ],
    "maroon": [
        128,
        0,
        0
    ],
    "mediumaquamarine": [
        102,
        205,
        170
    ],
    "mediumblue": [
        0,
        0,
        205
    ],
    "mediumorchid": [
        186,
        85,
        211
    ],
    "mediumpurple": [
        147,
        112,
        219
    ],
    "mediumseagreen": [
        60,
        179,
        113
    ],
    "mediumslateblue": [
        123,
        104,
        238
    ],
    "mediumspringgreen": [
        0,
        250,
        154
    ],
    "mediumturquoise": [
        72,
        209,
        204
    ],
    "mediumvioletred": [
        199,
        21,
        133
    ],
    "midnightblue": [
        25,
        25,
        112
    ],
    "mintcream": [
        245,
        255,
        250
    ],
    "mistyrose": [
        255,
        228,
        225
    ],
    "moccasin": [
        255,
        228,
        181
    ],
    "navajowhite": [
        255,
        222,
        173
    ],
    "navy": [
        0,
        0,
        128
    ],
    "oldlace": [
        253,
        245,
        230
    ],
    "olive": [
        128,
        128,
        0
    ],
    "olivedrab": [
        107,
        142,
        35
    ],
    "orange": [
        255,
        165,
        0
    ],
    "orangered": [
        255,
        69,
        0
    ],
    "orchid": [
        218,
        112,
        214
    ],
    "palegoldenrod": [
        238,
        232,
        170
    ],
    "palegreen": [
        152,
        251,
        152
    ],
    "paleturquoise": [
        175,
        238,
        238
    ],
    "palevioletred": [
        219,
        112,
        147
    ],
    "papayawhip": [
        255,
        239,
        213
    ],
    "peachpuff": [
        255,
        218,
        185
    ],
    "peru": [
        205,
        133,
        63
    ],
    "pink": [
        255,
        192,
        203
    ],
    "plum": [
        221,
        160,
        221
    ],
    "powderblue": [
        176,
        224,
        230
    ],
    "purple": [
        128,
        0,
        128
    ],
    "rebeccapurple": [
        102,
        51,
        153
    ],
    "red": [
        255,
        0,
        0
    ],
    "rosybrown": [
        188,
        143,
        143
    ],
    "royalblue": [
        65,
        105,
        225
    ],
    "saddlebrown": [
        139,
        69,
        19
    ],
    "salmon": [
        250,
        128,
        114
    ],
    "sandybrown": [
        244,
        164,
        96
    ],
    "seagreen": [
        46,
        139,
        87
    ],
    "seashell": [
        255,
        245,
        238
    ],
    "sienna": [
        160,
        82,
        45
    ],
    "silver": [
        192,
        192,
        192
    ],
    "skyblue": [
        135,
        206,
        235
    ],
    "slateblue": [
        106,
        90,
        205
    ],
    "slategray": [
        112,
        128,
        144
    ],
    "slategrey": [
        112,
        128,
        144
    ],
    "snow": [
        255,
        250,
        250
    ],
    "springgreen": [
        0,
        255,
        127
    ],
    "steelblue": [
        70,
        130,
        180
    ],
    "tan": [
        210,
        180,
        140
    ],
    "teal": [
        0,
        128,
        128
    ],
    "thistle": [
        216,
        191,
        216
    ],
    "tomato": [
        255,
        99,
        71
    ],
    "turquoise": [
        64,
        224,
        208
    ],
    "violet": [
        238,
        130,
        238
    ],
    "wheat": [
        245,
        222,
        179
    ],
    "white": [
        255,
        255,
        255
    ],
    "whitesmoke": [
        245,
        245,
        245
    ],
    "yellow": [
        255,
        255,
        0
    ],
    "yellowgreen": [
        154,
        205,
        50
    ]
};

},{}],"iJmBL":[function(require,module,exports) {
var conversions = require('./conversions');
/*
	this function routes a model to all other models.

	all functions that are routed have a property `.conversion` attached
	to the returned synthetic function. This property is an array
	of strings, each with the steps in between the 'from' and 'to'
	color models (inclusive).

	conversions that are not possible simply are not included.
*/ function buildGraph() {
    var graph = {};
    // https://jsperf.com/object-keys-vs-for-in-with-closure/3
    var models = Object.keys(conversions);
    for(var len = models.length, i = 0; i < len; i++)graph[models[i]] = {
        // http://jsperf.com/1-vs-infinity
        // micro-opt, but this is simple.
        distance: -1,
        parent: null
    };
    return graph;
}
// https://en.wikipedia.org/wiki/Breadth-first_search
function deriveBFS(fromModel) {
    var graph = buildGraph();
    var queue = [
        fromModel
    ]; // unshift -> queue -> pop
    graph[fromModel].distance = 0;
    while(queue.length){
        var current = queue.pop();
        var adjacents = Object.keys(conversions[current]);
        for(var len = adjacents.length, i = 0; i < len; i++){
            var adjacent = adjacents[i];
            var node = graph[adjacent];
            if (node.distance === -1) {
                node.distance = graph[current].distance + 1;
                node.parent = current;
                queue.unshift(adjacent);
            }
        }
    }
    return graph;
}
function link(from, to) {
    return function(args) {
        return to(from(args));
    };
}
function wrapConversion(toModel, graph) {
    var path = [
        graph[toModel].parent,
        toModel
    ];
    var fn = conversions[graph[toModel].parent][toModel];
    var cur = graph[toModel].parent;
    while(graph[cur].parent){
        path.unshift(graph[cur].parent);
        fn = link(conversions[graph[cur].parent][cur], fn);
        cur = graph[cur].parent;
    }
    fn.conversion = path;
    return fn;
}
module.exports = function(fromModel) {
    var graph = deriveBFS(fromModel);
    var conversion = {};
    var models = Object.keys(graph);
    for(var len = models.length, i = 0; i < len; i++){
        var toModel = models[i];
        var node = graph[toModel];
        if (node.parent === null) continue;
        conversion[toModel] = wrapConversion(toModel, graph);
    }
    return conversion;
};

},{"./conversions":"C4O54"}],"BcaM6":[function(require,module,exports) {
'use strict';
module.exports = {
    stdout: false,
    stderr: false
};

},{}],"9Km3r":[function(require,module,exports) {
'use strict';
const TEMPLATE_REGEX = /(?:\\(u[a-f\d]{4}|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
const ESCAPE_REGEX = /\\(u[a-f\d]{4}|x[a-f\d]{2}|.)|([^\\])/gi;
const ESCAPES = new Map([
    [
        'n',
        '\n'
    ],
    [
        'r',
        '\r'
    ],
    [
        't',
        '\t'
    ],
    [
        'b',
        '\b'
    ],
    [
        'f',
        '\f'
    ],
    [
        'v',
        '\v'
    ],
    [
        '0',
        '\0'
    ],
    [
        '\\',
        '\\'
    ],
    [
        'e',
        '\u001B'
    ],
    [
        'a',
        '\u0007'
    ]
]);
function unescape(c) {
    if (c[0] === 'u' && c.length === 5 || c[0] === 'x' && c.length === 3) return String.fromCharCode(parseInt(c.slice(1), 16));
    return ESCAPES.get(c) || c;
}
function parseArguments(name, args) {
    const results = [];
    const chunks = args.trim().split(/\s*,\s*/g);
    let matches;
    for (const chunk of chunks){
        if (!isNaN(chunk)) results.push(Number(chunk));
        else if (matches = chunk.match(STRING_REGEX)) results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, chr)=>escape ? unescape(escape) : chr
        ));
        else throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
    }
    return results;
}
function parseStyle(style) {
    STYLE_REGEX.lastIndex = 0;
    const results = [];
    let matches;
    while((matches = STYLE_REGEX.exec(style)) !== null){
        const name = matches[1];
        if (matches[2]) {
            const args = parseArguments(name, matches[2]);
            results.push([
                name
            ].concat(args));
        } else results.push([
            name
        ]);
    }
    return results;
}
function buildStyle(chalk, styles) {
    const enabled = {};
    for (const layer of styles)for (const style of layer.styles)enabled[style[0]] = layer.inverse ? null : style.slice(1);
    let current = chalk;
    for (const styleName of Object.keys(enabled))if (Array.isArray(enabled[styleName])) {
        if (!(styleName in current)) throw new Error(`Unknown Chalk style: ${styleName}`);
        if (enabled[styleName].length > 0) current = current[styleName].apply(current, enabled[styleName]);
        else current = current[styleName];
    }
    return current;
}
module.exports = (chalk, tmp)=>{
    const styles = [];
    const chunks = [];
    let chunk = [];
    // eslint-disable-next-line max-params
    tmp.replace(TEMPLATE_REGEX, (m, escapeChar, inverse, style, close, chr)=>{
        if (escapeChar) chunk.push(unescape(escapeChar));
        else if (style) {
            const str = chunk.join('');
            chunk = [];
            chunks.push(styles.length === 0 ? str : buildStyle(chalk, styles)(str));
            styles.push({
                inverse,
                styles: parseStyle(style)
            });
        } else if (close) {
            if (styles.length === 0) throw new Error('Found extraneous } in Chalk template literal');
            chunks.push(buildStyle(chalk, styles)(chunk.join('')));
            chunk = [];
            styles.pop();
        } else chunk.push(chr);
    });
    chunks.push(chunk.join(''));
    if (styles.length > 0) {
        const errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
        throw new Error(errMsg);
    }
    return chunks.join('');
};

},{}],"8ADxj":[function(require,module,exports) {
"use strict";
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var _ = require("lodash");
var configured_bignumber_1 = require("./configured_bignumber");
// Note(albrow): This function is unexported in ethers.js. Copying it here for
// now.
// Source: https://github.com/ethers-io/ethers.js/blob/884593ab76004a808bf8097e9753fb5f8dcc3067/contracts/interface.js#L30
function parseEthersParams(params) {
    var names = [];
    var types = [];
    params.forEach(function(param) {
        if (param.components != null) {
            var suffix = '';
            var arrayBracket = param.type.indexOf('[');
            if (arrayBracket >= 0) suffix = param.type.substring(arrayBracket);
            var result = parseEthersParams(param.components);
            names.push({
                name: param.name || null,
                names: result.names
            });
            types.push("tuple(" + result.types.join(',') + ")" + suffix);
        } else {
            names.push(param.name || null);
            types.push(param.type);
        }
    });
    return {
        names: names,
        types: types
    };
}
// returns true if x is equal to y and false otherwise. Performs some minimal
// type conversion and data massaging for x and y, depending on type. name and
// type should typically be derived from parseEthersParams.
function isAbiDataEqual(name, type, x, y) {
    if (x === undefined && y === undefined) return true;
    else if (x === undefined && y !== undefined) return false;
    else if (x !== undefined && y === undefined) return false;
    if (_.endsWith(type, '[]')) {
        // For array types, we iterate through the elements and check each one
        // individually. Strangely, name does not need to be changed in this
        // case.
        if (x.length !== y.length) return false;
        var newType = _.trimEnd(type, '[]');
        for(var i = 0; i < x.length; i++){
            if (!isAbiDataEqual(name, newType, x[i], y[i])) return false;
        }
        return true;
    }
    if (_.startsWith(type, 'tuple(')) {
        if (_.isString(name)) throw new Error('Internal error: type was tuple but names was a string');
        else if (name === null) throw new Error('Internal error: type was tuple but names was null');
        // For tuples, we iterate through the underlying values and check each
        // one individually.
        var types = splitTupleTypes(type);
        if (types.length !== name.names.length) throw new Error("Internal error: parameter types/names length mismatch (" + types.length + " != " + name.names.length + ")");
        for(var i = 0; i < types.length; i++){
            // For tuples, name is an object with a names property that is an
            // array. As an example, for orders, name looks like:
            //
            //  {
            //      name: 'orders',
            //      names: [
            //          'makerAddress',
            //          // ...
            //          'takerAssetData'
            //      ]
            //  }
            //
            var nestedName = _.isString(name.names[i]) ? name.names[i] : name.names[i].name;
            if (!isAbiDataEqual(name.names[i], types[i], x[nestedName], y[nestedName])) return false;
        }
        return true;
    } else if (type === 'address' || type === 'bytes') // HACK(albrow): ethers.js returns the checksummed address even when
    // initially passed in a non-checksummed address. To account for that,
    // we convert to lowercase before comparing.
    return _.isEqual(_.toLower(x), _.toLower(y));
    else if (_.startsWith(type, 'uint') || _.startsWith(type, 'int')) return new configured_bignumber_1.BigNumber(x).eq(new configured_bignumber_1.BigNumber(y));
    return _.isEqual(x, y);
}
// splitTupleTypes splits a tuple type string (of the form `tuple(X)` where X is
// any other type or list of types) into its component types. It works with
// nested tuples, so, e.g., `tuple(tuple(uint256,address),bytes32)` will yield:
// `['tuple(uint256,address)', 'bytes32']`. It expects exactly one tuple type as
// an argument (not an array).
function splitTupleTypes(type) {
    var e_1, _a;
    if (_.endsWith(type, '[]')) throw new Error('Internal error: array types are not supported');
    else if (!_.startsWith(type, 'tuple(')) throw new Error("Internal error: expected tuple type but got non-tuple type: " + type);
    // Trim the outtermost tuple().
    var trimmedType = type.substring(6, type.length - 1);
    var types = [];
    var currToken = '';
    var parenCount = 0;
    try {
        // Tokenize the type string while keeping track of parentheses.
        for(var trimmedType_1 = __values(trimmedType), trimmedType_1_1 = trimmedType_1.next(); !trimmedType_1_1.done; trimmedType_1_1 = trimmedType_1.next()){
            var char = trimmedType_1_1.value;
            switch(char){
                case '(':
                    parenCount += 1;
                    currToken += char;
                    break;
                case ')':
                    parenCount -= 1;
                    currToken += char;
                    break;
                case ',':
                    if (parenCount === 0) {
                        types.push(currToken);
                        currToken = '';
                        break;
                    } else {
                        currToken += char;
                        break;
                    }
                default:
                    currToken += char;
                    break;
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (trimmedType_1_1 && !trimmedType_1_1.done && (_a = trimmedType_1.return)) _a.call(trimmedType_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    types.push(currToken);
    return types;
}
exports.abiUtils = {
    parseEthersParams: parseEthersParams,
    isAbiDataEqual: isAbiDataEqual,
    splitTupleTypes: splitTupleTypes,
    parseFunctionParam: function(param) {
        if (param.type === 'tuple') {
            // Parse out tuple types into {type_1, type_2, ..., type_N}
            var tupleComponents = param.components;
            var paramString = _.map(tupleComponents, function(component) {
                return exports.abiUtils.parseFunctionParam(component);
            });
            var tupleParamString = "{" + paramString + "}";
            return tupleParamString;
        }
        return param.type;
    },
    getFunctionSignature: function(methodAbi) {
        var functionName = methodAbi.name;
        var parameterTypeList = _.map(methodAbi.inputs, function(param) {
            return exports.abiUtils.parseFunctionParam(param);
        });
        var functionSignature = functionName + "(" + parameterTypeList + ")";
        return functionSignature;
    },
    /**
     * Solidity supports function overloading whereas TypeScript does not.
     * See: https://solidity.readthedocs.io/en/v0.4.21/contracts.html?highlight=overload#function-overloading
     * In order to support overloaded functions, we suffix overloaded function names with an index.
     * This index should be deterministic, regardless of function ordering within the smart contract. To do so,
     * we assign indexes based on the alphabetical order of function signatures.
     *
     * E.g
     * ['f(uint)', 'f(uint,byte32)']
     * Should always be renamed to:
     * ['f1(uint)', 'f2(uint,byte32)']
     * Regardless of the order in which these these overloaded functions are declared within the contract ABI.
     */ renameOverloadedMethods: function(inputContractAbi) {
        var contractAbi = _.cloneDeep(inputContractAbi);
        var methodAbis = contractAbi.filter(function(abi) {
            return abi.type === ethereum_types_1.AbiType.Function;
        });
        // Sort method Abis into alphabetical order, by function signature
        var methodAbisOrdered = _.sortBy(methodAbis, [
            function(methodAbi) {
                var functionSignature = exports.abiUtils.getFunctionSignature(methodAbi);
                return functionSignature;
            }, 
        ]);
        // Group method Abis by name (overloaded methods will be grouped together, in alphabetical order)
        var methodAbisByName = {};
        _.each(methodAbisOrdered, function(methodAbi) {
            (methodAbisByName[methodAbi.name] || (methodAbisByName[methodAbi.name] = [])).push(methodAbi);
        });
        // Rename overloaded methods to overloadedMethodName1, overloadedMethodName2, ...
        _.each(methodAbisByName, function(methodAbisWithSameName) {
            _.each(methodAbisWithSameName, function(methodAbi, i) {
                if (methodAbisWithSameName.length > 1) {
                    var overloadedMethodId = i + 1;
                    var sanitizedMethodName_1 = "" + methodAbi.name + overloadedMethodId;
                    var indexOfExistingAbiWithSanitizedMethodNameIfExists = _.findIndex(methodAbis, function(currentMethodAbi) {
                        return currentMethodAbi.name === sanitizedMethodName_1;
                    });
                    if (indexOfExistingAbiWithSanitizedMethodNameIfExists >= 0) {
                        var methodName = methodAbi.name;
                        throw new Error("Failed to rename overloaded method '" + methodName + "' to '" + sanitizedMethodName_1 + "'. A method with this name already exists.");
                    }
                    methodAbi.name = sanitizedMethodName_1;
                }
            });
        });
        return contractAbi;
    }
};

},{"ethereum-types":"i8oCe","lodash":"3qBDj","./configured_bignumber":"TutUZ"}],"4dOex":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.NULL_BYTES = '0x';

},{}],"4voiD":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.errorUtils = {
    spawnSwitchErr: function(name, value) {
        return new Error("Unexpected switch value: " + value + " encountered for " + name);
    }
};

},{}],"g4gpI":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", {
    value: true
});
var isNode = require("detect-node");
require("isomorphic-fetch");
// WARNING: This needs to be imported after isomorphic-fetch: https://github.com/mo/abortcontroller-polyfill#using-it-on-browsers-without-fetch
// tslint:disable-next-line:ordered-imports
require("abortcontroller-polyfill/dist/abortcontroller-polyfill-only");
exports.fetchAsync = function(endpoint, options, timeoutMs) {
    if (options === void 0) options = {};
    if (timeoutMs === void 0) timeoutMs = 20000;
    return __awaiter(_this, void 0, void 0, function() {
        var optionsWithAbortParam, controller_1, signal, response;
        return __generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    if (options.signal || options.timeout) throw new Error('Cannot call fetchAsync with options.signal or options.timeout. To set a timeout, please use the supplied "timeoutMs" parameter.');
                    if (!isNode) {
                        controller_1 = new AbortController();
                        signal = controller_1.signal;
                        setTimeout(function() {
                            controller_1.abort();
                        }, timeoutMs);
                        optionsWithAbortParam = __assign({
                            signal: signal
                        }, options);
                    } else // HACK: the `timeout` param only exists in `node-fetch`, and not on the `isomorphic-fetch`
                    // `RequestInit` type. Since `isomorphic-fetch` conditionally wraps `node-fetch` when the
                    // execution environment is `Node.js`, we need to cast it to `any` in that scenario.
                    optionsWithAbortParam = __assign({
                        timeout: timeoutMs
                    }, options);
                    return [
                        4 /*yield*/ ,
                        fetch(endpoint, optionsWithAbortParam)
                    ];
                case 1:
                    response = _a.sent();
                    return [
                        2 /*return*/ ,
                        response
                    ];
            }
        });
    });
};

},{"detect-node":"jZQET","isomorphic-fetch":"fy50b","abortcontroller-polyfill/dist/abortcontroller-polyfill-only":"8wzf3"}],"fy50b":[function(require,module,exports) {
// the whatwg-fetch polyfill installs the fetch() function
// on the global object (window or self)
//
// Return that as the export for use in Webpack, Browserify etc.
require('whatwg-fetch');
module.exports = self.fetch.bind(self);

},{"whatwg-fetch":"gnRxb"}],"gnRxb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Headers", ()=>Headers
);
parcelHelpers.export(exports, "Request", ()=>Request
);
parcelHelpers.export(exports, "Response", ()=>Response
);
parcelHelpers.export(exports, "DOMException", ()=>DOMException
);
parcelHelpers.export(exports, "fetch", ()=>fetch
);
var global = typeof globalThis !== 'undefined' && globalThis || typeof self !== 'undefined' && self || typeof global !== 'undefined' && global;
var support = {
    searchParams: 'URLSearchParams' in global,
    iterable: 'Symbol' in global && 'iterator' in Symbol,
    blob: 'FileReader' in global && 'Blob' in global && function() {
        try {
            new Blob();
            return true;
        } catch (e) {
            return false;
        }
    }(),
    formData: 'FormData' in global,
    arrayBuffer: 'ArrayBuffer' in global
};
function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj);
}
if (support.arrayBuffer) {
    var viewClasses = [
        '[object Int8Array]',
        '[object Uint8Array]',
        '[object Uint8ClampedArray]',
        '[object Int16Array]',
        '[object Uint16Array]',
        '[object Int32Array]',
        '[object Uint32Array]',
        '[object Float32Array]',
        '[object Float64Array]'
    ];
    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
}
function normalizeName(name) {
    if (typeof name !== 'string') name = String(name);
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') throw new TypeError('Invalid character in header field name: "' + name + '"');
    return name.toLowerCase();
}
function normalizeValue(value) {
    if (typeof value !== 'string') value = String(value);
    return value;
}
// Build a destructive iterator for the value list
function iteratorFor(items) {
    var iterator = {
        next: function() {
            var value = items.shift();
            return {
                done: value === undefined,
                value: value
            };
        }
    };
    if (support.iterable) iterator[Symbol.iterator] = function() {
        return iterator;
    };
    return iterator;
}
function Headers(headers) {
    this.map = {};
    if (headers instanceof Headers) headers.forEach(function(value, name) {
        this.append(name, value);
    }, this);
    else if (Array.isArray(headers)) headers.forEach(function(header) {
        this.append(header[0], header[1]);
    }, this);
    else if (headers) Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
    }, this);
}
Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
};
Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
};
Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null;
};
Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name));
};
Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
};
Headers.prototype.forEach = function(callback, thisArg) {
    for(var name in this.map)if (this.map.hasOwnProperty(name)) callback.call(thisArg, this.map[name], name, this);
};
Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
        items.push(name);
    });
    return iteratorFor(items);
};
Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
        items.push(value);
    });
    return iteratorFor(items);
};
Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
        items.push([
            name,
            value
        ]);
    });
    return iteratorFor(items);
};
if (support.iterable) Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
function consumed(body) {
    if (body.bodyUsed) return Promise.reject(new TypeError('Already read'));
    body.bodyUsed = true;
}
function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
        reader.onload = function() {
            resolve(reader.result);
        };
        reader.onerror = function() {
            reject(reader.error);
        };
    });
}
function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
}
function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
}
function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);
    for(var i = 0; i < view.length; i++)chars[i] = String.fromCharCode(view[i]);
    return chars.join('');
}
function bufferClone(buf) {
    if (buf.slice) return buf.slice(0);
    else {
        var view = new Uint8Array(buf.byteLength);
        view.set(new Uint8Array(buf));
        return view.buffer;
    }
}
function Body() {
    this.bodyUsed = false;
    this._initBody = function(body) {
        /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */ this.bodyUsed = this.bodyUsed;
        this._bodyInit = body;
        if (!body) this._bodyText = '';
        else if (typeof body === 'string') this._bodyText = body;
        else if (support.blob && Blob.prototype.isPrototypeOf(body)) this._bodyBlob = body;
        else if (support.formData && FormData.prototype.isPrototypeOf(body)) this._bodyFormData = body;
        else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this._bodyText = body.toString();
        else if (support.arrayBuffer && support.blob && isDataView(body)) {
            this._bodyArrayBuffer = bufferClone(body.buffer);
            // IE 10-11 can't handle a DataView body.
            this._bodyInit = new Blob([
                this._bodyArrayBuffer
            ]);
        } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) this._bodyArrayBuffer = bufferClone(body);
        else this._bodyText = body = Object.prototype.toString.call(body);
        if (!this.headers.get('content-type')) {
            if (typeof body === 'string') this.headers.set('content-type', 'text/plain;charset=UTF-8');
            else if (this._bodyBlob && this._bodyBlob.type) this.headers.set('content-type', this._bodyBlob.type);
            else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
    };
    if (support.blob) {
        this.blob = function() {
            var rejected = consumed(this);
            if (rejected) return rejected;
            if (this._bodyBlob) return Promise.resolve(this._bodyBlob);
            else if (this._bodyArrayBuffer) return Promise.resolve(new Blob([
                this._bodyArrayBuffer
            ]));
            else if (this._bodyFormData) throw new Error('could not read FormData body as blob');
            else return Promise.resolve(new Blob([
                this._bodyText
            ]));
        };
        this.arrayBuffer = function() {
            if (this._bodyArrayBuffer) {
                var isConsumed = consumed(this);
                if (isConsumed) return isConsumed;
                if (ArrayBuffer.isView(this._bodyArrayBuffer)) return Promise.resolve(this._bodyArrayBuffer.buffer.slice(this._bodyArrayBuffer.byteOffset, this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength));
                else return Promise.resolve(this._bodyArrayBuffer);
            } else return this.blob().then(readBlobAsArrayBuffer);
        };
    }
    this.text = function() {
        var rejected = consumed(this);
        if (rejected) return rejected;
        if (this._bodyBlob) return readBlobAsText(this._bodyBlob);
        else if (this._bodyArrayBuffer) return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
        else if (this._bodyFormData) throw new Error('could not read FormData body as text');
        else return Promise.resolve(this._bodyText);
    };
    if (support.formData) this.formData = function() {
        return this.text().then(decode);
    };
    this.json = function() {
        return this.text().then(JSON.parse);
    };
    return this;
}
// HTTP methods whose capitalization should be normalized
var methods = [
    'DELETE',
    'GET',
    'HEAD',
    'OPTIONS',
    'POST',
    'PUT'
];
function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
}
function Request(input, options) {
    if (!(this instanceof Request)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    options = options || {};
    var body = options.body;
    if (input instanceof Request) {
        if (input.bodyUsed) throw new TypeError('Already read');
        this.url = input.url;
        this.credentials = input.credentials;
        if (!options.headers) this.headers = new Headers(input.headers);
        this.method = input.method;
        this.mode = input.mode;
        this.signal = input.signal;
        if (!body && input._bodyInit != null) {
            body = input._bodyInit;
            input.bodyUsed = true;
        }
    } else this.url = String(input);
    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) this.headers = new Headers(options.headers);
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;
    if ((this.method === 'GET' || this.method === 'HEAD') && body) throw new TypeError('Body not allowed for GET or HEAD requests');
    this._initBody(body);
    if (this.method === 'GET' || this.method === 'HEAD') {
        if (options.cache === 'no-store' || options.cache === 'no-cache') {
            // Search for a '_' parameter in the query string
            var reParamSearch = /([?&])_=[^&]*/;
            if (reParamSearch.test(this.url)) // If it already exists then set the value with the current time
            this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
            else {
                // Otherwise add a new '_' parameter to the end with the current time
                var reQueryString = /\?/;
                this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
            }
        }
    }
}
Request.prototype.clone = function() {
    return new Request(this, {
        body: this._bodyInit
    });
};
function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function(bytes) {
        if (bytes) {
            var split = bytes.split('=');
            var name = split.shift().replace(/\+/g, ' ');
            var value = split.join('=').replace(/\+/g, ' ');
            form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
    });
    return form;
}
function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders.split('\r').map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header;
    }).forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
            var value = parts.join(':').trim();
            headers.append(key, value);
        }
    });
    return headers;
}
Body.call(Request.prototype);
function Response(bodyInit, options) {
    if (!(this instanceof Response)) throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.');
    if (!options) options = {};
    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
}
Body.call(Response.prototype);
Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
        status: this.status,
        statusText: this.statusText,
        headers: new Headers(this.headers),
        url: this.url
    });
};
Response.error = function() {
    var response = new Response(null, {
        status: 0,
        statusText: ''
    });
    response.type = 'error';
    return response;
};
var redirectStatuses = [
    301,
    302,
    303,
    307,
    308
];
Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) throw new RangeError('Invalid status code');
    return new Response(null, {
        status: status,
        headers: {
            location: url
        }
    });
};
var DOMException = global.DOMException;
try {
    new DOMException();
} catch (err) {
    DOMException = function(message, name) {
        this.message = message;
        this.name = name;
        var error = Error(message);
        this.stack = error.stack;
    };
    DOMException.prototype = Object.create(Error.prototype);
    DOMException.prototype.constructor = DOMException;
}
function fetch(input, init) {
    return new Promise(function(resolve, reject) {
        var request = new Request(input, init);
        if (request.signal && request.signal.aborted) return reject(new DOMException('Aborted', 'AbortError'));
        var xhr = new XMLHttpRequest();
        function abortXhr() {
            xhr.abort();
        }
        xhr.onload = function() {
            var options = {
                status: xhr.status,
                statusText: xhr.statusText,
                headers: parseHeaders(xhr.getAllResponseHeaders() || '')
            };
            options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
            var body = 'response' in xhr ? xhr.response : xhr.responseText;
            setTimeout(function() {
                resolve(new Response(body, options));
            }, 0);
        };
        xhr.onerror = function() {
            setTimeout(function() {
                reject(new TypeError('Network request failed'));
            }, 0);
        };
        xhr.ontimeout = function() {
            setTimeout(function() {
                reject(new TypeError('Network request failed'));
            }, 0);
        };
        xhr.onabort = function() {
            setTimeout(function() {
                reject(new DOMException('Aborted', 'AbortError'));
            }, 0);
        };
        function fixUrl(url) {
            try {
                return url === '' && global.location.href ? global.location.href : url;
            } catch (e) {
                return url;
            }
        }
        xhr.open(request.method, fixUrl(request.url), true);
        if (request.credentials === 'include') xhr.withCredentials = true;
        else if (request.credentials === 'omit') xhr.withCredentials = false;
        if ('responseType' in xhr) {
            if (support.blob) xhr.responseType = 'blob';
            else if (support.arrayBuffer && request.headers.get('Content-Type') && request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1) xhr.responseType = 'arraybuffer';
        }
        if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) Object.getOwnPropertyNames(init.headers).forEach(function(name) {
            xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
        else request.headers.forEach(function(value, name) {
            xhr.setRequestHeader(name, value);
        });
        if (request.signal) {
            request.signal.addEventListener('abort', abortXhr);
            xhr.onreadystatechange = function() {
                // DONE (success or failure)
                if (xhr.readyState === 4) request.signal.removeEventListener('abort', abortXhr);
            };
        }
        xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
}
fetch.polyfill = true;
if (!global.fetch) {
    global.fetch = fetch;
    global.Headers = Headers;
    global.Request = Request;
    global.Response = Response;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8wzf3":[function(require,module,exports) {
var global = arguments[3];
(function(factory) {
    typeof define === 'function' && define.amd ? define(factory) : factory();
})(function() {
    'use strict';
    function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
    }
    function _defineProperties(target, props) {
        for(var i = 0; i < props.length; i++){
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor) descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
        }
    }
    function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        return Constructor;
    }
    function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                writable: true,
                configurable: true
            }
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _getPrototypeOf(o1) {
        _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
            return o.__proto__ || Object.getPrototypeOf(o);
        };
        return _getPrototypeOf(o1);
    }
    function _setPrototypeOf(o2, p1) {
        _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
            o.__proto__ = p;
            return o;
        };
        return _setPrototypeOf(o2, p1);
    }
    function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;
        try {
            Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {}));
            return true;
        } catch (e) {
            return false;
        }
    }
    function _assertThisInitialized(self) {
        if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        return self;
    }
    function _possibleConstructorReturn(self, call) {
        if (call && (typeof call === "object" || typeof call === "function")) return call;
        return _assertThisInitialized(self);
    }
    function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();
        return function _createSuperInternal() {
            var Super = _getPrototypeOf(Derived), result;
            if (hasNativeReflectConstruct) {
                var NewTarget = _getPrototypeOf(this).constructor;
                result = Reflect.construct(Super, arguments, NewTarget);
            } else result = Super.apply(this, arguments);
            return _possibleConstructorReturn(this, result);
        };
    }
    function _superPropBase(object, property) {
        while(!Object.prototype.hasOwnProperty.call(object, property)){
            object = _getPrototypeOf(object);
            if (object === null) break;
        }
        return object;
    }
    function _get(target1, property1, receiver1) {
        if (typeof Reflect !== "undefined" && Reflect.get) _get = Reflect.get;
        else _get = function _get(target, property, receiver) {
            var base = _superPropBase(target, property);
            if (!base) return;
            var desc = Object.getOwnPropertyDescriptor(base, property);
            if (desc.get) return desc.get.call(receiver);
            return desc.value;
        };
        return _get(target1, property1, receiver1 || target1);
    }
    var Emitter1 = /*#__PURE__*/ function() {
        function Emitter() {
            _classCallCheck(this, Emitter);
            Object.defineProperty(this, 'listeners', {
                value: {},
                writable: true,
                configurable: true
            });
        }
        _createClass(Emitter, [
            {
                key: "addEventListener",
                value: function addEventListener(type, callback, options) {
                    if (!(type in this.listeners)) this.listeners[type] = [];
                    this.listeners[type].push({
                        callback: callback,
                        options: options
                    });
                }
            },
            {
                key: "removeEventListener",
                value: function removeEventListener(type, callback) {
                    if (!(type in this.listeners)) return;
                    var stack = this.listeners[type];
                    for(var i = 0, l = stack.length; i < l; i++)if (stack[i].callback === callback) {
                        stack.splice(i, 1);
                        return;
                    }
                }
            },
            {
                key: "dispatchEvent",
                value: function dispatchEvent(event) {
                    if (!(event.type in this.listeners)) return;
                    var stack = this.listeners[event.type];
                    var stackToCall = stack.slice();
                    for(var i = 0, l = stackToCall.length; i < l; i++){
                        var listener = stackToCall[i];
                        try {
                            listener.callback.call(this, event);
                        } catch (e) {
                            Promise.resolve().then(function() {
                                throw e;
                            });
                        }
                        if (listener.options && listener.options.once) this.removeEventListener(event.type, listener.callback);
                    }
                    return !event.defaultPrevented;
                }
            }
        ]);
        return Emitter;
    }();
    var AbortSignal1 = /*#__PURE__*/ function(_Emitter) {
        _inherits(AbortSignal, _Emitter);
        var _super = _createSuper(AbortSignal);
        function AbortSignal() {
            var _this;
            _classCallCheck(this, AbortSignal);
            _this = _super.call(this); // Some versions of babel does not transpile super() correctly for IE <= 10, if the parent
            // constructor has failed to run, then "this.listeners" will still be undefined and then we call
            // the parent constructor directly instead as a workaround. For general details, see babel bug:
            // https://github.com/babel/babel/issues/3041
            // This hack was added as a fix for the issue described here:
            // https://github.com/Financial-Times/polyfill-library/pull/59#issuecomment-477558042
            if (!_this.listeners) Emitter1.call(_assertThisInitialized(_this));
             // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController().signal) to be [] for compat with the native impl
            Object.defineProperty(_assertThisInitialized(_this), 'aborted', {
                value: false,
                writable: true,
                configurable: true
            });
            Object.defineProperty(_assertThisInitialized(_this), 'onabort', {
                value: null,
                writable: true,
                configurable: true
            });
            return _this;
        }
        _createClass(AbortSignal, [
            {
                key: "toString",
                value: function toString() {
                    return '[object AbortSignal]';
                }
            },
            {
                key: "dispatchEvent",
                value: function dispatchEvent(event) {
                    if (event.type === 'abort') {
                        this.aborted = true;
                        if (typeof this.onabort === 'function') this.onabort.call(this, event);
                    }
                    _get(_getPrototypeOf(AbortSignal.prototype), "dispatchEvent", this).call(this, event);
                }
            }
        ]);
        return AbortSignal;
    }(Emitter1);
    var AbortController1 = /*#__PURE__*/ function() {
        function AbortController() {
            _classCallCheck(this, AbortController);
            // Compared to assignment, Object.defineProperty makes properties non-enumerable by default and
            // we want Object.keys(new AbortController()) to be [] for compat with the native impl
            Object.defineProperty(this, 'signal', {
                value: new AbortSignal1(),
                writable: true,
                configurable: true
            });
        }
        _createClass(AbortController, [
            {
                key: "abort",
                value: function abort() {
                    var event;
                    try {
                        event = new Event('abort');
                    } catch (e) {
                        if (typeof document !== 'undefined') {
                            if (!document.createEvent) {
                                // For Internet Explorer 8:
                                event = document.createEventObject();
                                event.type = 'abort';
                            } else {
                                // For Internet Explorer 11:
                                event = document.createEvent('Event');
                                event.initEvent('abort', false, false);
                            }
                        } else // Fallback where document isn't available:
                        event = {
                            type: 'abort',
                            bubbles: false,
                            cancelable: false
                        };
                    }
                    this.signal.dispatchEvent(event);
                }
            },
            {
                key: "toString",
                value: function toString() {
                    return '[object AbortController]';
                }
            }
        ]);
        return AbortController;
    }();
    if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
        // These are necessary to make sure that we get correct output for:
        // Object.prototype.toString.call(new AbortController())
        AbortController1.prototype[Symbol.toStringTag] = 'AbortController';
        AbortSignal1.prototype[Symbol.toStringTag] = 'AbortSignal';
    }
    function polyfillNeeded(self) {
        if (self.__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL) {
            console.log('__FORCE_INSTALL_ABORTCONTROLLER_POLYFILL=true is set, will force install polyfill');
            return true;
        } // Note that the "unfetch" minimal fetch polyfill defines fetch() without
        // defining window.Request, and this polyfill need to work on top of unfetch
        // so the below feature detection needs the !self.AbortController part.
        // The Request.prototype check is also needed because Safari versions 11.1.2
        // up to and including 12.1.x has a window.AbortController present but still
        // does NOT correctly implement abortable fetch:
        // https://bugs.webkit.org/show_bug.cgi?id=174980#c2
        return typeof self.Request === 'function' && !self.Request.prototype.hasOwnProperty('signal') || !self.AbortController;
    }
    (function(self) {
        if (!polyfillNeeded(self)) return;
        self.AbortController = AbortController1;
        self.AbortSignal = AbortSignal1;
    })(typeof self !== 'undefined' ? self : global);
});

},{}],"hew4t":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var ethers = require("ethers");
var configured_bignumber_1 = require("./configured_bignumber");
exports.signTypedDataUtils = {
    /**
     * Generates the EIP712 Typed Data hash for signing
     * @param   typedData An object that conforms to the EIP712TypedData interface
     * @return  A Buffer containing the hash of the typed data.
     */ generateTypedDataHash: function(typedData) {
        return ethUtil.sha3(Buffer.concat([
            Buffer.from('1901', 'hex'),
            exports.signTypedDataUtils._structHash('EIP712Domain', typedData.domain, typedData.types),
            exports.signTypedDataUtils._structHash(typedData.primaryType, typedData.message, typedData.types), 
        ]));
    },
    _findDependencies: function(primaryType, types, found) {
        if (found === void 0) found = [];
        var e_1, _a, e_2, _b;
        if (found.includes(primaryType) || types[primaryType] === undefined) return found;
        found.push(primaryType);
        try {
            for(var _c = __values(types[primaryType]), _d = _c.next(); !_d.done; _d = _c.next()){
                var field = _d.value;
                try {
                    for(var _e = __values(exports.signTypedDataUtils._findDependencies(field.type, types, found)), _f = _e.next(); !_f.done; _f = _e.next()){
                        var dep = _f.value;
                        if (!found.includes(dep)) found.push(dep);
                    }
                } catch (e_2_1) {
                    e_2 = {
                        error: e_2_1
                    };
                } finally{
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    } finally{
                        if (e_2) throw e_2.error;
                    }
                }
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return found;
    },
    _encodeType: function(primaryType, types) {
        var e_3, _a1;
        var deps = exports.signTypedDataUtils._findDependencies(primaryType, types);
        deps = deps.filter(function(d) {
            return d !== primaryType;
        });
        deps = [
            primaryType
        ].concat(deps.sort());
        var result = '';
        try {
            for(var deps_1 = __values(deps), deps_1_1 = deps_1.next(); !deps_1_1.done; deps_1_1 = deps_1.next()){
                var dep = deps_1_1.value;
                result += dep + "(" + types[dep].map(function(_a) {
                    var name = _a.name, type = _a.type;
                    return type + " " + name;
                }).join(',') + ")";
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (deps_1_1 && !deps_1_1.done && (_a1 = deps_1.return)) _a1.call(deps_1);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        return result;
    },
    _encodeData: function(primaryType, data, types) {
        var e_4, _a;
        var encodedTypes = [
            'bytes32'
        ];
        var encodedValues = [
            exports.signTypedDataUtils._typeHash(primaryType, types)
        ];
        try {
            for(var _b = __values(types[primaryType]), _c = _b.next(); !_c.done; _c = _b.next()){
                var field = _c.value;
                var value = data[field.name];
                if (field.type === 'string' || field.type === 'bytes') {
                    var hashValue = ethUtil.sha3(value);
                    encodedTypes.push('bytes32');
                    encodedValues.push(hashValue);
                } else if (types[field.type] !== undefined) {
                    encodedTypes.push('bytes32');
                    var hashValue = ethUtil.sha3(// tslint:disable-next-line:no-unnecessary-type-assertion
                    exports.signTypedDataUtils._encodeData(field.type, value, types));
                    encodedValues.push(hashValue);
                } else if (field.type.lastIndexOf(']') === field.type.length - 1) throw new Error('Arrays currently unimplemented in encodeData');
                else {
                    encodedTypes.push(field.type);
                    var normalizedValue = exports.signTypedDataUtils._normalizeValue(field.type, value);
                    encodedValues.push(normalizedValue);
                }
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_4) throw e_4.error;
            }
        }
        return ethers.utils.defaultAbiCoder.encode(encodedTypes, encodedValues);
    },
    _normalizeValue: function(type, value) {
        var normalizedValue = type === 'uint256' && configured_bignumber_1.BigNumber.isBigNumber(value) ? value.toString() : value;
        return normalizedValue;
    },
    _typeHash: function(primaryType, types) {
        return ethUtil.sha3(exports.signTypedDataUtils._encodeType(primaryType, types));
    },
    _structHash: function(primaryType, data, types) {
        return ethUtil.sha3(exports.signTypedDataUtils._encodeData(primaryType, data, types));
    }
};

},{"buffer":"fCgem","ethereumjs-util":"glktw","ethers":"9VrIZ","./configured_bignumber":"TutUZ"}],"ijo3l":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var evm_data_type_factory_1 = require("./evm_data_type_factory");
exports.Address = evm_data_type_factory_1.Address;
exports.Array = evm_data_type_factory_1.Array;
exports.Bool = evm_data_type_factory_1.Bool;
exports.DynamicBytes = evm_data_type_factory_1.DynamicBytes;
exports.Int = evm_data_type_factory_1.Int;
exports.Method = evm_data_type_factory_1.Method;
exports.Pointer = evm_data_type_factory_1.Pointer;
exports.StaticBytes = evm_data_type_factory_1.StaticBytes;
exports.String = evm_data_type_factory_1.String;
exports.Tuple = evm_data_type_factory_1.Tuple;
exports.UInt = evm_data_type_factory_1.UInt;
exports.create = evm_data_type_factory_1.create;
exports.createMethod = evm_data_type_factory_1.createMethod;
var data_type_1 = require("./abstract_data_types/data_type");
exports.DataType = data_type_1.DataType;

},{"./evm_data_type_factory":"j6iGw","./abstract_data_types/data_type":"5Yaim"}],"j6iGw":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var signature_parser_1 = require("./utils/signature_parser");
var address_1 = require("./evm_data_types/address");
var array_1 = require("./evm_data_types/array");
var bool_1 = require("./evm_data_types/bool");
var dynamic_bytes_1 = require("./evm_data_types/dynamic_bytes");
var int_1 = require("./evm_data_types/int");
var method_1 = require("./evm_data_types/method");
var pointer_1 = require("./evm_data_types/pointer");
var static_bytes_1 = require("./evm_data_types/static_bytes");
var string_1 = require("./evm_data_types/string");
var tuple_1 = require("./evm_data_types/tuple");
var uint_1 = require("./evm_data_types/uint");
var Address = /** @class */ function(_super) {
    __extends(Address1, _super);
    function Address1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return Address1;
}(address_1.AddressDataType);
exports.Address = Address;
var Bool = /** @class */ function(_super) {
    __extends(Bool1, _super);
    function Bool1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return Bool1;
}(bool_1.BoolDataType);
exports.Bool = Bool;
var Int = /** @class */ function(_super) {
    __extends(Int1, _super);
    function Int1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return Int1;
}(int_1.IntDataType);
exports.Int = Int;
var UInt = /** @class */ function(_super) {
    __extends(UInt1, _super);
    function UInt1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return UInt1;
}(uint_1.UIntDataType);
exports.UInt = UInt;
var StaticBytes = /** @class */ function(_super) {
    __extends(StaticBytes1, _super);
    function StaticBytes1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return StaticBytes1;
}(static_bytes_1.StaticBytesDataType);
exports.StaticBytes = StaticBytes;
var DynamicBytes = /** @class */ function(_super) {
    __extends(DynamicBytes1, _super);
    function DynamicBytes1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return DynamicBytes1;
}(dynamic_bytes_1.DynamicBytesDataType);
exports.DynamicBytes = DynamicBytes;
var String = /** @class */ function(_super) {
    __extends(String1, _super);
    function String1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return String1;
}(string_1.StringDataType);
exports.String = String;
var Pointer = /** @class */ function(_super) {
    __extends(Pointer1, _super);
    function Pointer1(destDataType, parentDataType) {
        return _super.call(this, destDataType, parentDataType, EvmDataTypeFactory.getInstance()) || this;
    }
    return Pointer1;
}(pointer_1.PointerDataType);
exports.Pointer = Pointer;
var Tuple = /** @class */ function(_super) {
    __extends(Tuple1, _super);
    function Tuple1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return Tuple1;
}(tuple_1.TupleDataType);
exports.Tuple = Tuple;
var Array = /** @class */ function(_super) {
    __extends(Array1, _super);
    function Array1(dataItem) {
        return _super.call(this, dataItem, EvmDataTypeFactory.getInstance()) || this;
    }
    return Array1;
}(array_1.ArrayDataType);
exports.Array = Array;
var Method = /** @class */ function(_super) {
    __extends(Method1, _super);
    function Method1(abi) {
        return _super.call(this, abi, EvmDataTypeFactory.getInstance()) || this;
    }
    return Method1;
}(method_1.MethodDataType);
exports.Method = Method;
/* tslint:disable no-construct */ var EvmDataTypeFactory = /** @class */ function() {
    /* tslint:enable prefer-function-over-method */ function EvmDataTypeFactory1() {}
    EvmDataTypeFactory1.getInstance = function() {
        if (!EvmDataTypeFactory1._instance) EvmDataTypeFactory1._instance = new EvmDataTypeFactory1();
        return EvmDataTypeFactory1._instance;
    };
    /* tslint:disable prefer-function-over-method */ EvmDataTypeFactory1.prototype.create = function(dataItem, parentDataType) {
        // Create data type
        var dataType;
        if (Array.matchType(dataItem.type)) dataType = new Array(dataItem);
        else if (Address.matchType(dataItem.type)) dataType = new Address(dataItem);
        else if (Bool.matchType(dataItem.type)) dataType = new Bool(dataItem);
        else if (Int.matchType(dataItem.type)) dataType = new Int(dataItem);
        else if (UInt.matchType(dataItem.type)) dataType = new UInt(dataItem);
        else if (StaticBytes.matchType(dataItem.type)) dataType = new StaticBytes(dataItem);
        else if (Tuple.matchType(dataItem.type)) dataType = new Tuple(dataItem);
        else if (DynamicBytes.matchType(dataItem.type)) dataType = new DynamicBytes(dataItem);
        else if (String.matchType(dataItem.type)) dataType = new String(dataItem);
        // @TODO: DataTypeement Fixed/UFixed types
        if (dataType === undefined) throw new Error("Unrecognized data type: '" + dataItem.type + "'");
        else if (parentDataType !== undefined && !dataType.isStatic()) {
            var pointerToDataType = new Pointer(dataType, parentDataType);
            return pointerToDataType;
        }
        return dataType;
    };
    return EvmDataTypeFactory1;
}();
exports.EvmDataTypeFactory = EvmDataTypeFactory;
/**
 * Convenience function for creating a DataType from different inputs.
 * @param input A single or set of DataItem or a signature for an EVM data type.
 * @return DataType corresponding to input.
 */ function create(input) {
    var dataItem = consolidateDataItemsIntoSingle(input);
    var dataType = EvmDataTypeFactory.getInstance().create(dataItem);
    return dataType;
}
exports.create = create;
/**
 * Convenience function to aggregate a single input or a set of inputs into a single DataItem.
 * An array of data items is grouped into a single tuple.
 * @param input A single data item; a set of data items; a signature.
 * @return A single data item corresponding to input.
 */ function consolidateDataItemsIntoSingle(input) {
    var dataItem;
    if (_.isArray(input)) {
        var dataItems = input;
        dataItem = {
            name: '',
            type: 'tuple',
            components: dataItems
        };
    } else dataItem = _.isString(input) ? signature_parser_1.generateDataItemFromSignature(input) : input;
    return dataItem;
}
/**
 * Convenience function for creating a Method encoder from different inputs.
 * @param methodName name of method.
 * @param input A single data item; a set of data items; a signature; or an array of signatures (optional).
 * @param output A single data item; a set of data items; a signature; or an array of signatures (optional).
 * @return Method corresponding to input.
 */ function createMethod(methodName, input, output) {
    var methodInput = input === undefined ? [] : consolidateDataItemsIntoArray(input);
    var methodOutput = output === undefined ? [] : consolidateDataItemsIntoArray(output);
    var methodAbi = {
        name: methodName,
        inputs: methodInput,
        outputs: methodOutput,
        type: 'function',
        // default fields not used by ABI
        constant: false,
        payable: false,
        stateMutability: 'nonpayable'
    };
    var dataType = new Method(methodAbi);
    return dataType;
}
exports.createMethod = createMethod;
/**
 * Convenience function that aggregates a single input or a set of inputs into an array of DataItems.
 * @param input A single data item; a set of data items; a signature; or an array of signatures.
 * @return Array of data items corresponding to input.
 */ function consolidateDataItemsIntoArray(input) {
    var dataItems;
    if (_.isArray(input) && _.isEmpty(input)) dataItems = [];
    else if (_.isArray(input) && _.isString(input[0])) {
        dataItems = [];
        _.each(input, function(signature) {
            var dataItem = signature_parser_1.generateDataItemFromSignature(signature);
            dataItems.push(dataItem);
        });
    } else if (_.isArray(input)) dataItems = input;
    else if (typeof input === 'string') {
        var dataItem1 = signature_parser_1.generateDataItemFromSignature(input);
        dataItems = [
            dataItem1
        ];
    } else dataItems = [
        input
    ];
    return dataItems;
} /* tslint:enable no-construct */ 

},{"lodash":"3qBDj","./utils/signature_parser":"40Ilf","./evm_data_types/address":"cvAui","./evm_data_types/array":"lA9gV","./evm_data_types/bool":"jSjP1","./evm_data_types/dynamic_bytes":"2RIf6","./evm_data_types/int":"5cprD","./evm_data_types/method":"k2PGz","./evm_data_types/pointer":"e8Ae1","./evm_data_types/static_bytes":"bmGpj","./evm_data_types/string":"fyI4U","./evm_data_types/tuple":"1VhGb","./evm_data_types/uint":"cKbVw"}],"40Ilf":[function(require,module,exports) {
"use strict";
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
function parseNode(node) {
    var components = [];
    _.each(node.children, function(child) {
        var component = parseNode(child);
        components.push(component);
    });
    var dataItem = {
        name: node.name,
        type: node.value
    };
    if (!_.isEmpty(components)) dataItem.components = components;
    return dataItem;
}
/**
 * Returns a DataItem corresponding to the input signature.
 * A signature can be in two forms: `type` or `(type_1,type_2,...,type_n)`
 * An example of the first form would be 'address' or 'uint256[]' or 'bytes[5][]'
 * An example of the second form would be '(address,uint256)' or '(address,uint256)[]'
 * @param signature of input DataItem.
 * @return DataItem derived from input signature.
 */ function generateDataItemFromSignature(signature) {
    var e_1, _a;
    // No data item corresponds to an empty signature
    if (_.isEmpty(signature)) throw new Error("Cannot parse data item from empty signature, ''");
    // Create a parse tree for data item
    var node = {
        name: '',
        value: '',
        children: []
    };
    try {
        for(var signature_1 = __values(signature), signature_1_1 = signature_1.next(); !signature_1_1.done; signature_1_1 = signature_1.next()){
            var char = signature_1_1.value;
            switch(char){
                case '(':
                    var child = {
                        name: '',
                        value: '',
                        children: [],
                        parent: node
                    };
                    node.value = 'tuple';
                    node.children.push(child);
                    node = child;
                    break;
                case ')':
                    node = node.parent;
                    break;
                case ',':
                    var sibling = {
                        name: '',
                        value: '',
                        children: [],
                        parent: node.parent
                    };
                    node.parent.children.push(sibling);
                    node = sibling;
                    break;
                case ' ':
                    node.name = node.value;
                    node.value = '';
                    break;
                default:
                    node.value += char;
                    break;
            }
        }
    } catch (e_1_1) {
        e_1 = {
            error: e_1_1
        };
    } finally{
        try {
            if (signature_1_1 && !signature_1_1.done && (_a = signature_1.return)) _a.call(signature_1);
        } finally{
            if (e_1) throw e_1.error;
        }
    }
    // Interpret data item from parse tree
    var dataItem = parseNode(node);
    return dataItem;
}
exports.generateDataItemFromSignature = generateDataItemFromSignature;

},{"lodash":"3qBDj"}],"cvAui":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var blob_1 = require("../abstract_data_types/types/blob");
var constants_1 = require("../utils/constants");
var AddressDataType = /** @class */ function(_super) {
    __extends(AddressDataType1, _super);
    function AddressDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory, AddressDataType1._SIZE_KNOWN_AT_COMPILE_TIME) || this;
        if (!AddressDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate Address with bad input: " + dataItem);
        return _this;
    }
    AddressDataType1.matchType = function(type) {
        return type === ethereum_types_1.SolidityTypes.Address;
    };
    // Disable prefer-function-over-method for inherited abstract methods.
    /* tslint:disable prefer-function-over-method */ AddressDataType1.prototype.encodeValue = function(value) {
        if (!ethUtil.isValidAddress(value)) throw new Error("Invalid address: '" + value + "'");
        var valueBuf = ethUtil.toBuffer(value);
        var encodedValueBuf = ethUtil.setLengthLeft(valueBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        return encodedValueBuf;
    };
    AddressDataType1.prototype.decodeValue = function(calldata) {
        var valueBufPadded = calldata.popWord();
        var valueBuf = valueBufPadded.slice(AddressDataType1._DECODED_ADDRESS_OFFSET_IN_BYTES);
        var value = ethUtil.bufferToHex(valueBuf);
        var valueLowercase = _.toLower(value);
        return valueLowercase;
    };
    AddressDataType1.prototype.getDefaultValue = function() {
        return AddressDataType1._DEFAULT_VALUE;
    };
    AddressDataType1.prototype.getSignatureType = function() {
        return ethereum_types_1.SolidityTypes.Address;
    };
    AddressDataType1._SIZE_KNOWN_AT_COMPILE_TIME = true;
    AddressDataType1._ADDRESS_SIZE_IN_BYTES = 20;
    AddressDataType1._DECODED_ADDRESS_OFFSET_IN_BYTES = constants_1.constants.EVM_WORD_WIDTH_IN_BYTES - AddressDataType1._ADDRESS_SIZE_IN_BYTES;
    AddressDataType1._DEFAULT_VALUE = '0x0000000000000000000000000000000000000000';
    return AddressDataType1;
}(blob_1.AbstractBlobDataType);
exports.AddressDataType = AddressDataType;

},{"ethereum-types":"i8oCe","ethereumjs-util":"glktw","lodash":"3qBDj","../abstract_data_types/types/blob":"74XOE","../utils/constants":"6LKoV"}],"74XOE":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var blob_1 = require("../../calldata/blocks/blob");
var data_type_1 = require("../data_type");
var AbstractBlobDataType = /** @class */ function(_super) {
    __extends(AbstractBlobDataType1, _super);
    function AbstractBlobDataType1(dataItem, factory, sizeKnownAtCompileTime) {
        var _this = _super.call(this, dataItem, factory) || this;
        _this._sizeKnownAtCompileTime = sizeKnownAtCompileTime;
        return _this;
    }
    AbstractBlobDataType1.prototype.generateCalldataBlock = function(value, parentBlock) {
        var encodedValue = this.encodeValue(value);
        var name = this.getDataItem().name;
        var signature = this.getSignature();
        var parentName = parentBlock === undefined ? '' : parentBlock.getName();
        var block = new blob_1.BlobCalldataBlock(name, signature, parentName, encodedValue);
        return block;
    };
    AbstractBlobDataType1.prototype.generateValue = function(calldata, rules) {
        var value = this.decodeValue(calldata);
        return value;
    };
    AbstractBlobDataType1.prototype.isStatic = function() {
        return this._sizeKnownAtCompileTime;
    };
    return AbstractBlobDataType1;
}(data_type_1.DataType);
exports.AbstractBlobDataType = AbstractBlobDataType;

},{"../../calldata/blocks/blob":"5b1T1","../data_type":"5Yaim"}],"5b1T1":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var calldata_block_1 = require("../calldata_block");
var BlobCalldataBlock = /** @class */ function(_super) {
    __extends(BlobCalldataBlock1, _super);
    function BlobCalldataBlock1(name, signature, parentName, blob) {
        var _this = this;
        var headerSizeInBytes = 0;
        var bodySizeInBytes = blob.byteLength;
        _this = _super.call(this, name, signature, parentName, headerSizeInBytes, bodySizeInBytes) || this;
        _this._blob = blob;
        return _this;
    }
    BlobCalldataBlock1.prototype.toBuffer = function() {
        return this._blob;
    };
    BlobCalldataBlock1.prototype.getRawData = function() {
        return this._blob;
    };
    return BlobCalldataBlock1;
}(calldata_block_1.CalldataBlock);
exports.BlobCalldataBlock = BlobCalldataBlock;

},{"../calldata_block":"2ofBM"}],"2ofBM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var CalldataBlock = /** @class */ function() {
    function CalldataBlock1(name, signature, parentName, headerSizeInBytes, bodySizeInBytes) {
        this._name = name;
        this._signature = signature;
        this._parentName = parentName;
        this._offsetInBytes = 0;
        this._headerSizeInBytes = headerSizeInBytes;
        this._bodySizeInBytes = bodySizeInBytes;
    }
    CalldataBlock1.prototype._setHeaderSize = function(headerSizeInBytes) {
        this._headerSizeInBytes = headerSizeInBytes;
    };
    CalldataBlock1.prototype._setBodySize = function(bodySizeInBytes) {
        this._bodySizeInBytes = bodySizeInBytes;
    };
    CalldataBlock1.prototype._setName = function(name) {
        this._name = name;
    };
    CalldataBlock1.prototype.getName = function() {
        return this._name;
    };
    CalldataBlock1.prototype.getParentName = function() {
        return this._parentName;
    };
    CalldataBlock1.prototype.getSignature = function() {
        return this._signature;
    };
    CalldataBlock1.prototype.getHeaderSizeInBytes = function() {
        return this._headerSizeInBytes;
    };
    CalldataBlock1.prototype.getBodySizeInBytes = function() {
        return this._bodySizeInBytes;
    };
    CalldataBlock1.prototype.getSizeInBytes = function() {
        return this.getHeaderSizeInBytes() + this.getBodySizeInBytes();
    };
    CalldataBlock1.prototype.getOffsetInBytes = function() {
        return this._offsetInBytes;
    };
    CalldataBlock1.prototype.setOffset = function(offsetInBytes) {
        this._offsetInBytes = offsetInBytes;
    };
    CalldataBlock1.prototype.computeHash = function() {
        var rawData = this.getRawData();
        var hash = ethUtil.sha3(rawData);
        return hash;
    };
    return CalldataBlock1;
}();
exports.CalldataBlock = CalldataBlock;

},{"ethereumjs-util":"glktw"}],"5Yaim":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var calldata_1 = require("../calldata/calldata");
var raw_calldata_1 = require("../calldata/raw_calldata");
var constants_1 = require("../utils/constants");
var DataType = /** @class */ function() {
    function DataType1(dataItem, factory) {
        this._dataItem = dataItem;
        this._factory = factory;
    }
    DataType1.prototype.getDataItem = function() {
        return this._dataItem;
    };
    DataType1.prototype.getFactory = function() {
        return this._factory;
    };
    DataType1.prototype.encode = function(value, rules, selector) {
        var rules_ = rules === undefined ? constants_1.constants.DEFAULT_ENCODING_RULES : rules;
        var calldata = new calldata_1.Calldata(rules_);
        if (selector !== undefined) calldata.setSelector(selector);
        var block = this.generateCalldataBlock(value);
        calldata.setRoot(block);
        var encodedCalldata = calldata.toString();
        return encodedCalldata;
    };
    DataType1.prototype.decode = function(calldata, rules, selector) {
        if (selector !== undefined && !_.startsWith(calldata, selector)) throw new Error("Tried to decode calldata, but it was missing the function selector. Expected prefix '" + selector + "'. Got '" + calldata + "'.");
        var hasSelector = selector !== undefined;
        var rawCalldata = new raw_calldata_1.RawCalldata(calldata, hasSelector);
        var rules_ = rules === undefined ? constants_1.constants.DEFAULT_DECODING_RULES : rules;
        var value = rawCalldata.getSizeInBytes() > 0 ? this.generateValue(rawCalldata, rules_) : this.getDefaultValue(rules_);
        return value;
    };
    DataType1.prototype.decodeAsArray = function(returndata, rules) {
        var value = this.decode(returndata, rules);
        var valuesAsArray = _.isObject(value) ? _.values(value) : [
            value
        ];
        return valuesAsArray;
    };
    DataType1.prototype.getSignature = function(isDetailed) {
        if (_.isEmpty(this._dataItem.name) || !isDetailed) return this.getSignatureType();
        var name = this.getDataItem().name;
        var lastIndexOfScopeDelimiter = name.lastIndexOf('.');
        var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;
        var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;
        var detailedSignature = shortName + " " + this.getSignatureType();
        return detailedSignature;
    };
    return DataType1;
}();
exports.DataType = DataType;

},{"lodash":"3qBDj","../calldata/calldata":"iyxbJ","../calldata/raw_calldata":"698wW","../utils/constants":"6LKoV"}],"iyxbJ":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var constants_1 = require("../utils/constants");
var pointer_1 = require("./blocks/pointer");
var set_1 = require("./blocks/set");
var iterator_1 = require("./iterator");
var Calldata = /** @class */ function() {
    function Calldata1(rules) {
        this._rules = rules;
        this._selector = '';
        this._root = undefined;
    }
    /**
     * Sets the root calldata block. This block usually corresponds to a Method.
     */ Calldata1.prototype.setRoot = function(block) {
        this._root = block;
    };
    /**
     * Sets the selector to be prepended onto the calldata.
     * If the root block was created by a Method then a selector will likely be set.
     */ Calldata1.prototype.setSelector = function(selector) {
        if (!_.startsWith(selector, '0x')) throw new Error("Expected selector to be hex. Missing prefix '0x'");
        else if (selector.length !== constants_1.constants.HEX_SELECTOR_LENGTH_IN_CHARS) throw new Error("Invalid selector '" + selector + "'");
        this._selector = selector;
    };
    /**
     * Iterates through the calldata blocks, starting from the root block, to construct calldata as a hex string.
     * If the `optimize` flag is set then this calldata will be condensed, to save gas.
     * If the `annotate` flag is set then this will return human-readable calldata.
     * If the `annotate` flag is *not* set then this will return EVM-compatible calldata.
     */ Calldata1.prototype.toString = function() {
        var e_1, _a;
        // Sanity check: root block must be set
        if (this._root === undefined) throw new Error('expected root');
        // Optimize, if flag set
        if (this._rules.shouldOptimize) this._optimize();
        // Set offsets
        var iterator = new iterator_1.CalldataIterator(this._root);
        var offset = 0;
        try {
            for(var iterator_2 = __values(iterator), iterator_2_1 = iterator_2.next(); !iterator_2_1.done; iterator_2_1 = iterator_2.next()){
                var block = iterator_2_1.value;
                block.setOffset(offset);
                offset += block.getSizeInBytes();
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (iterator_2_1 && !iterator_2_1.done && (_a = iterator_2.return)) _a.call(iterator_2);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        // Generate hex string
        var hexString = this._rules.shouldAnnotate ? this._toHumanReadableCallData() : this._toEvmCompatibeCallDataHex();
        return hexString;
    };
    /**
     * There are three types of calldata blocks: Blob, Set and Pointer.
     * Scenarios arise where distinct pointers resolve to identical values.
     * We optimize by keeping only one such instance of the identical value, and redirecting all pointers here.
     * We keep the last such duplicate value because pointers can only be positive (they cannot point backwards).
     *
     * Example #1:
     *  function f(string[], string[])
     *  f(["foo", "bar", "blitz"], ["foo", "bar", "blitz"])
     *  The array ["foo", "bar", "blitz"] will only be included in the calldata once.
     *
     * Example #2:
     *  function f(string[], string)
     *  f(["foo", "bar", "blitz"], "foo")
     *  The string "foo" will only be included in the calldata once.
     *
     * Example #3:
     *  function f((string, uint, bytes), string, uint, bytes)
     *  f(("foo", 5, "0x05"), "foo", 5, "0x05")
     *  The string "foo" and bytes "0x05" will only be included in the calldata once.
     *  The duplicate `uint 5` values cannot be optimized out because they are static values (no pointer points to them).
     *
     * @TODO #1:
     *   This optimization strategy handles blocks that are exact duplicates of one another.
     *   But what if some block is a combination of two other blocks? Or a subset of another block?
     *   This optimization problem is not much different from the current implemetation.
     *   Instead of tracking "observed" hashes, at each node we would simply do pattern-matching on the calldata.
     *   This strategy would be applied after assigning offsets to the tree, rather than before (as in this strategy).
     *   Note that one consequence of this strategy is pointers may resolve to offsets that are not word-aligned.
     *   This shouldn't be a problem but further investigation should be done.
     *
     * @TODO #2:
     *   To be done as a follow-up to @TODO #1.
     *   Since we optimize from the bottom-up, we could be affecting the outcome of a later potential optimization.
     *   For example, what if by removing one duplicate value we miss out on optimizing another block higher in the tree.
     *   To handle this case, at each node we can store a candidate optimization in a priority queue (sorted by calldata size).
     *   At the end of traversing the tree, the candidate at the front of the queue will be the most optimal output.
     *
     */ Calldata1.prototype._optimize = function() {
        var e_2, _a;
        // Step 1/1 Create a reverse iterator (starts from the end of the calldata to the beginning)
        if (this._root === undefined) throw new Error('expected root');
        var iterator = new iterator_1.ReverseCalldataIterator(this._root);
        // Step 2/2 Iterate over each block, keeping track of which blocks have been seen and pruning redundant blocks.
        var blocksByHash = {};
        try {
            for(var iterator_3 = __values(iterator), iterator_3_1 = iterator_3.next(); !iterator_3_1.done; iterator_3_1 = iterator_3.next()){
                var block = iterator_3_1.value;
                // If a block is a pointer and its value has already been observed, then update
                // the pointer to resolve to the existing value.
                if (block instanceof pointer_1.PointerCalldataBlock) {
                    var dependencyBlockHashBuf = block.getDependency().computeHash();
                    var dependencyBlockHash = ethUtil.bufferToHex(dependencyBlockHashBuf);
                    if (dependencyBlockHash in blocksByHash) {
                        var blockWithSameHash = blocksByHash[dependencyBlockHash];
                        if (blockWithSameHash !== block.getDependency()) block.setAlias(blockWithSameHash);
                    }
                    continue;
                }
                // This block has not been seen. Record its hash.
                var blockHashBuf = block.computeHash();
                var blockHash = ethUtil.bufferToHex(blockHashBuf);
                if (!(blockHash in blocksByHash)) blocksByHash[blockHash] = block;
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (iterator_3_1 && !iterator_3_1.done && (_a = iterator_3.return)) _a.call(iterator_3);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
    };
    Calldata1.prototype._toEvmCompatibeCallDataHex = function() {
        var e_3, _a;
        // Sanity check: must have a root block.
        if (this._root === undefined) throw new Error('expected root');
        // Construct an array of buffers (one buffer for each block).
        var selectorBuffer = ethUtil.toBuffer(this._selector);
        var valueBufs = [
            selectorBuffer
        ];
        var iterator = new iterator_1.CalldataIterator(this._root);
        try {
            for(var iterator_4 = __values(iterator), iterator_4_1 = iterator_4.next(); !iterator_4_1.done; iterator_4_1 = iterator_4.next()){
                var block = iterator_4_1.value;
                valueBufs.push(block.toBuffer());
            }
        } catch (e_3_1) {
            e_3 = {
                error: e_3_1
            };
        } finally{
            try {
                if (iterator_4_1 && !iterator_4_1.done && (_a = iterator_4.return)) _a.call(iterator_4);
            } finally{
                if (e_3) throw e_3.error;
            }
        }
        // Create hex from buffer array.
        var combinedBuffers = Buffer.concat(valueBufs);
        var hexValue = ethUtil.bufferToHex(combinedBuffers);
        return hexValue;
    };
    /**
     * Returns human-readable calldata.
     *
     * Example:
     *   simpleFunction(string[], string[])
     *   strings = ["Hello", "World"]
     *   simpleFunction(strings, strings)
     *
     * Output:
     *   0xbb4f12e3
     *                                                                                      ### simpleFunction
     *   0x0       0000000000000000000000000000000000000000000000000000000000000040              ptr<array1> (alias for array2)
     *   0x20      0000000000000000000000000000000000000000000000000000000000000040              ptr<array2>
     *
     *   0x40      0000000000000000000000000000000000000000000000000000000000000002          ### array2
     *   0x60      0000000000000000000000000000000000000000000000000000000000000040              ptr<array2[0]>
     *   0x80      0000000000000000000000000000000000000000000000000000000000000080              ptr<array2[1]>
     *   0xa0      0000000000000000000000000000000000000000000000000000000000000005              array2[0]
     *   0xc0      48656c6c6f000000000000000000000000000000000000000000000000000000
     *   0xe0      0000000000000000000000000000000000000000000000000000000000000005              array2[1]
     *   0x100     576f726c64000000000000000000000000000000000000000000000000000000
     */ Calldata1.prototype._toHumanReadableCallData = function() {
        var e_4, _a;
        // Sanity check: must have a root block.
        if (this._root === undefined) throw new Error('expected root');
        // Constants for constructing annotated string
        var offsetPadding = 10;
        var valuePadding = 74;
        var namePadding = 80;
        var evmWordStartIndex = 0;
        var emptySize = 0;
        // Construct annotated calldata
        var hexValue = "" + this._selector;
        var offset = 0;
        var functionName = this._root.getName();
        var iterator = new iterator_1.CalldataIterator(this._root);
        try {
            for(var iterator_5 = __values(iterator), iterator_5_1 = iterator_5.next(); !iterator_5_1.done; iterator_5_1 = iterator_5.next()){
                var block = iterator_5_1.value;
                // Process each block 1 word at a time
                var size = block.getSizeInBytes();
                var name_1 = block.getName();
                var parentName = block.getParentName();
                var prettyName = name_1.replace(parentName + ".", '').replace(functionName + ".", '');
                // Resulting line will be <offsetStr><valueStr><nameStr>
                var offsetStr = '';
                var valueStr = '';
                var nameStr = '';
                var lineStr = '';
                if (size === emptySize) {
                    // This is a Set block with no header.
                    // For example, a tuple or an array with a defined length.
                    offsetStr = ' '.repeat(offsetPadding);
                    valueStr = ' '.repeat(valuePadding);
                    nameStr = "### " + prettyName.padEnd(namePadding);
                    lineStr = "\n" + offsetStr + valueStr + nameStr;
                } else {
                    // This block has at least one word of value.
                    offsetStr = ("0x" + offset.toString(constants_1.constants.HEX_BASE)).padEnd(offsetPadding);
                    valueStr = ethUtil.stripHexPrefix(ethUtil.bufferToHex(block.toBuffer().slice(evmWordStartIndex, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES))).padEnd(valuePadding);
                    if (block instanceof set_1.SetCalldataBlock) {
                        nameStr = "### " + prettyName.padEnd(namePadding);
                        lineStr = "\n" + offsetStr + valueStr + nameStr;
                    } else {
                        nameStr = "    " + prettyName.padEnd(namePadding);
                        lineStr = "" + offsetStr + valueStr + nameStr;
                    }
                }
                // This block has a value that is more than 1 word.
                for(var j = constants_1.constants.EVM_WORD_WIDTH_IN_BYTES; j < size; j += constants_1.constants.EVM_WORD_WIDTH_IN_BYTES){
                    offsetStr = ("0x" + (offset + j).toString(constants_1.constants.HEX_BASE)).padEnd(offsetPadding);
                    valueStr = ethUtil.stripHexPrefix(ethUtil.bufferToHex(block.toBuffer().slice(j, j + constants_1.constants.EVM_WORD_WIDTH_IN_BYTES))).padEnd(valuePadding);
                    nameStr = ' '.repeat(namePadding);
                    lineStr = lineStr + "\n" + offsetStr + valueStr + nameStr;
                }
                // Append to hex value
                hexValue = hexValue + "\n" + lineStr;
                offset += size;
            }
        } catch (e_4_1) {
            e_4 = {
                error: e_4_1
            };
        } finally{
            try {
                if (iterator_5_1 && !iterator_5_1.done && (_a = iterator_5.return)) _a.call(iterator_5);
            } finally{
                if (e_4) throw e_4.error;
            }
        }
        return hexValue;
    };
    return Calldata1;
}();
exports.Calldata = Calldata;

},{"buffer":"fCgem","ethereumjs-util":"glktw","lodash":"3qBDj","../utils/constants":"6LKoV","./blocks/pointer":"5xVI8","./blocks/set":"8RzEh","./iterator":"gGRSp"}],"6LKoV":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
exports.constants = {
    EVM_WORD_WIDTH_IN_BYTES: 32,
    EVM_WORD_WIDTH_IN_BITS: 256,
    HEX_BASE: 16,
    DEC_BASE: 10,
    BIN_BASE: 2,
    HEX_SELECTOR_LENGTH_IN_CHARS: 10,
    HEX_SELECTOR_LENGTH_IN_BYTES: 4,
    HEX_SELECTOR_BYTE_OFFSET_IN_CALLDATA: 0,
    // Disable no-object-literal-type-assertion so we can enforce cast
    /* tslint:disable no-object-literal-type-assertion */ DEFAULT_DECODING_RULES: {
        shouldConvertStructsToObjects: true
    },
    DEFAULT_ENCODING_RULES: {
        shouldOptimize: true,
        shouldAnnotate: false
    },
    /* tslint:enable no-object-literal-type-assertion */ EMPTY_EVM_WORD_STRING: '0x0000000000000000000000000000000000000000000000000000000000000000',
    EMPTY_EVM_WORD_BUFFER: ethUtil.toBuffer('0x0000000000000000000000000000000000000000000000000000000000000000'),
    NUMBER_OF_BYTES_IN_UINT8: 8,
    NUMBER_OF_BYTES_IN_INT8: 8
};

},{"ethereumjs-util":"glktw"}],"5xVI8":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var constants_1 = require("../../utils/constants");
var calldata_block_1 = require("../calldata_block");
var PointerCalldataBlock = /** @class */ function(_super) {
    __extends(PointerCalldataBlock1, _super);
    function PointerCalldataBlock1(name, signature, parentName, dependency, parent) {
        var _this = this;
        var headerSizeInBytes = PointerCalldataBlock1._EMPTY_HEADER_SIZE;
        var bodySizeInBytes = PointerCalldataBlock1._DEPENDENT_PAYLOAD_SIZE_IN_BYTES;
        _this = _super.call(this, name, signature, parentName, headerSizeInBytes, bodySizeInBytes) || this;
        _this._parent = parent;
        _this._dependency = dependency;
        _this._aliasFor = undefined;
        return _this;
    }
    PointerCalldataBlock1.prototype.toBuffer = function() {
        var destinationOffset = this._aliasFor !== undefined ? this._aliasFor.getOffsetInBytes() : this._dependency.getOffsetInBytes();
        var parentOffset = this._parent.getOffsetInBytes();
        var parentHeaderSize = this._parent.getHeaderSizeInBytes();
        var pointer = destinationOffset - (parentOffset + parentHeaderSize);
        var pointerHex = "0x" + pointer.toString(constants_1.constants.HEX_BASE);
        var pointerBuf = ethUtil.toBuffer(pointerHex);
        var pointerBufPadded = ethUtil.setLengthLeft(pointerBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        return pointerBufPadded;
    };
    PointerCalldataBlock1.prototype.getDependency = function() {
        return this._dependency;
    };
    PointerCalldataBlock1.prototype.setAlias = function(block) {
        this._aliasFor = block;
        this._setName(this.getName() + " (alias for " + block.getName() + ")");
    };
    PointerCalldataBlock1.prototype.getAlias = function() {
        return this._aliasFor;
    };
    PointerCalldataBlock1.prototype.getRawData = function() {
        var dependencyRawData = this._dependency.getRawData();
        var rawDataComponents = [];
        rawDataComponents.push(PointerCalldataBlock1.RAW_DATA_START);
        rawDataComponents.push(dependencyRawData);
        rawDataComponents.push(PointerCalldataBlock1.RAW_DATA_END);
        var rawData = Buffer.concat(rawDataComponents);
        return rawData;
    };
    PointerCalldataBlock1.RAW_DATA_START = new Buffer('<');
    PointerCalldataBlock1.RAW_DATA_END = new Buffer('>');
    PointerCalldataBlock1._DEPENDENT_PAYLOAD_SIZE_IN_BYTES = 32;
    PointerCalldataBlock1._EMPTY_HEADER_SIZE = 0;
    return PointerCalldataBlock1;
}(calldata_block_1.CalldataBlock);
exports.PointerCalldataBlock = PointerCalldataBlock;

},{"buffer":"fCgem","ethereumjs-util":"glktw","../../utils/constants":"6LKoV","../calldata_block":"2ofBM"}],"8RzEh":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var calldata_block_1 = require("../calldata_block");
var SetCalldataBlock = /** @class */ function(_super) {
    __extends(SetCalldataBlock1, _super);
    function SetCalldataBlock1(name, signature, parentName) {
        var _this = _super.call(this, name, signature, parentName, 0, 0) || this;
        _this._members = [];
        _this._header = undefined;
        return _this;
    }
    SetCalldataBlock1.prototype.getRawData = function() {
        var rawDataComponents = [];
        if (this._header !== undefined) rawDataComponents.push(this._header);
        _.each(this._members, function(member) {
            var memberBuffer = member.getRawData();
            rawDataComponents.push(memberBuffer);
        });
        var rawData = Buffer.concat(rawDataComponents);
        return rawData;
    };
    SetCalldataBlock1.prototype.setMembers = function(members) {
        this._members = members;
    };
    SetCalldataBlock1.prototype.setHeader = function(header) {
        this._setHeaderSize(header.byteLength);
        this._header = header;
    };
    SetCalldataBlock1.prototype.toBuffer = function() {
        if (this._header !== undefined) return this._header;
        return new Buffer('');
    };
    SetCalldataBlock1.prototype.getMembers = function() {
        return this._members;
    };
    return SetCalldataBlock1;
}(calldata_block_1.CalldataBlock);
exports.SetCalldataBlock = SetCalldataBlock;

},{"buffer":"fCgem","lodash":"3qBDj","../calldata_block":"2ofBM"}],"gGRSp":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
/* tslint:disable max-classes-per-file */ var _ = require("lodash");
var queue_1 = require("../utils/queue");
var blob_1 = require("./blocks/blob");
var pointer_1 = require("./blocks/pointer");
var set_1 = require("./blocks/set");
/**
 * Iterator class for Calldata Blocks. Blocks follows the order
 * they should be put into calldata that is passed to he EVM.
 *
 * Example #1:
 * Let root = Set {
 *                  Blob{} A,
 *                  Pointer {
 *                      Blob{} a
 *                  } B,
 *                  Blob{} C
 *            }
 * It will iterate as follows: [A, B, C, B.a]
 *
 * Example #2:
 * Let root = Set {
 *                  Blob{} A,
 *                  Pointer {
 *                      Blob{} a
 *                      Pointer {
 *                          Blob{} b
 *                      }
 *                  } B,
 *                  Pointer {
 *                      Blob{} c
 *                  } C
 *            }
 * It will iterate as follows: [A, B, C, B.a, B.b, C.c]
 */ var BaseIterator = /** @class */ function() {
    function BaseIterator1(root) {
        this._root = root;
        this._queue = BaseIterator1._createQueue(root);
    }
    BaseIterator1._createQueue = function(block) {
        var queue = new queue_1.Queue();
        // Base case
        if (!(block instanceof set_1.SetCalldataBlock)) {
            queue.pushBack(block);
            return queue;
        }
        // This is a set; add members
        var set = block;
        _.eachRight(set.getMembers(), function(member) {
            queue.mergeFront(BaseIterator1._createQueue(member));
        });
        // Add children
        _.each(set.getMembers(), function(member) {
            // Traverse child if it is a unique pointer.
            // A pointer that is an alias for another pointer is ignored.
            if (member instanceof pointer_1.PointerCalldataBlock && member.getAlias() === undefined) {
                var dependency = member.getDependency();
                queue.mergeBack(BaseIterator1._createQueue(dependency));
            }
        });
        // Put set block at the front of the queue
        queue.pushFront(set);
        return queue;
    };
    BaseIterator1.prototype[Symbol.iterator] = function() {
        var _this = this;
        return {
            next: function() {
                var nextBlock = _this.nextBlock();
                if (nextBlock !== undefined) return {
                    value: nextBlock,
                    done: false
                };
                return {
                    done: true,
                    value: new blob_1.BlobCalldataBlock('', '', '', new Buffer(''))
                };
            }
        };
    };
    return BaseIterator1;
}();
var CalldataIterator = /** @class */ function(_super) {
    __extends(CalldataIterator1, _super);
    function CalldataIterator1(root) {
        return _super.call(this, root) || this;
    }
    CalldataIterator1.prototype.nextBlock = function() {
        return this._queue.popFront();
    };
    return CalldataIterator1;
}(BaseIterator);
exports.CalldataIterator = CalldataIterator;
var ReverseCalldataIterator = /** @class */ function(_super) {
    __extends(ReverseCalldataIterator1, _super);
    function ReverseCalldataIterator1(root) {
        return _super.call(this, root) || this;
    }
    ReverseCalldataIterator1.prototype.nextBlock = function() {
        return this._queue.popBack();
    };
    return ReverseCalldataIterator1;
}(BaseIterator);
exports.ReverseCalldataIterator = ReverseCalldataIterator;

},{"buffer":"fCgem","lodash":"3qBDj","../utils/queue":"lGqw6","./blocks/blob":"5b1T1","./blocks/pointer":"5xVI8","./blocks/set":"8RzEh"}],"lGqw6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var Queue = /** @class */ function() {
    function Queue1() {
        this._store = [];
    }
    Queue1.prototype.pushBack = function(val) {
        this._store.push(val);
    };
    Queue1.prototype.pushFront = function(val) {
        this._store.unshift(val);
    };
    Queue1.prototype.popFront = function() {
        return this._store.shift();
    };
    Queue1.prototype.popBack = function() {
        if (this._store.length === 0) return undefined;
        var backElement = this._store.splice(-1, 1)[0];
        return backElement;
    };
    Queue1.prototype.mergeBack = function(q) {
        this._store = this._store.concat(q._store);
    };
    Queue1.prototype.mergeFront = function(q) {
        this._store = q._store.concat(this._store);
    };
    Queue1.prototype.getStore = function() {
        return this._store;
    };
    Queue1.prototype.peekFront = function() {
        return this._store.length >= 0 ? this._store[0] : undefined;
    };
    return Queue1;
}();
exports.Queue = Queue;

},{}],"698wW":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var constants_1 = require("../utils/constants");
var queue_1 = require("../utils/queue");
var RawCalldata = /** @class */ function() {
    function RawCalldata1(value, hasSelector) {
        if (hasSelector === void 0) hasSelector = true;
        // Sanity check
        if (typeof value === 'string' && !_.startsWith(value, '0x')) throw new Error("Expected raw calldata to start with '0x'");
        // Construct initial values
        this._value = ethUtil.toBuffer(value);
        this._selector = '0x';
        this._scopes = new queue_1.Queue();
        this._scopes.pushBack(RawCalldata1._INITIAL_OFFSET);
        this._offset = RawCalldata1._INITIAL_OFFSET;
        // If there's a selector then slice it
        if (hasSelector) {
            var selectorBuf = this._value.slice(constants_1.constants.HEX_SELECTOR_LENGTH_IN_BYTES);
            this._value = this._value.slice(constants_1.constants.HEX_SELECTOR_LENGTH_IN_BYTES);
            this._selector = ethUtil.bufferToHex(selectorBuf);
        }
    }
    RawCalldata1.prototype.popBytes = function(lengthInBytes) {
        var popBegin = this._offset;
        var popEnd = popBegin + lengthInBytes;
        if (popEnd > this._value.byteLength) throw new Error("Tried to decode beyond the end of calldata");
        var value = this._value.slice(popBegin, popEnd);
        this.setOffset(popEnd);
        return value;
    };
    RawCalldata1.prototype.popWord = function() {
        var wordInBytes = 32;
        return this.popBytes(wordInBytes);
    };
    RawCalldata1.prototype.popWords = function(length) {
        var wordInBytes = 32;
        return this.popBytes(length * wordInBytes);
    };
    RawCalldata1.prototype.readBytes = function(from, to) {
        var value = this._value.slice(from, to);
        return value;
    };
    RawCalldata1.prototype.setOffset = function(offsetInBytes) {
        this._offset = offsetInBytes;
    };
    RawCalldata1.prototype.startScope = function() {
        this._scopes.pushFront(this._offset);
    };
    RawCalldata1.prototype.endScope = function() {
        this._scopes.popFront();
    };
    RawCalldata1.prototype.getOffset = function() {
        return this._offset;
    };
    RawCalldata1.prototype.toAbsoluteOffset = function(relativeOffset) {
        var scopeOffset = this._scopes.peekFront();
        if (scopeOffset === undefined) throw new Error("Tried to access undefined scope.");
        var absoluteOffset = relativeOffset + scopeOffset;
        return absoluteOffset;
    };
    RawCalldata1.prototype.getSelector = function() {
        return this._selector;
    };
    RawCalldata1.prototype.getSizeInBytes = function() {
        var sizeInBytes = this._value.byteLength;
        return sizeInBytes;
    };
    RawCalldata1._INITIAL_OFFSET = 0;
    return RawCalldata1;
}();
exports.RawCalldata = RawCalldata;

},{"ethereumjs-util":"glktw","lodash":"3qBDj","../utils/constants":"6LKoV","../utils/queue":"lGqw6"}],"lA9gV":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var set_1 = require("../abstract_data_types/types/set");
var constants_1 = require("../utils/constants");
var ArrayDataType = /** @class */ function(_super) {
    __extends(ArrayDataType1, _super);
    function ArrayDataType1(dataItem, dataTypeFactory) {
        var _this = this;
        // Construct parent
        var isArray = true;
        var _a = __read(ArrayDataType1._decodeElementTypeAndLengthFromType(dataItem.type), 2), arrayElementType = _a[0], arrayLength = _a[1];
        _this = _super.call(this, dataItem, dataTypeFactory, isArray, arrayLength, arrayElementType) || this;
        // Set array properties
        _this._elementType = arrayElementType;
        return _this;
    }
    ArrayDataType1.matchType = function(type) {
        return ArrayDataType1._MATCHER.test(type);
    };
    ArrayDataType1._decodeElementTypeAndLengthFromType = function(type) {
        var matches = ArrayDataType1._MATCHER.exec(type);
        if (matches === null || matches.length !== 3) throw new Error("Could not parse array: " + type);
        else if (matches[1] === undefined) throw new Error("Could not parse array type: " + type);
        else if (matches[2] === undefined) throw new Error("Could not parse array length: " + type);
        var arrayElementType = matches[1];
        var arrayLength = _.isEmpty(matches[2]) ? undefined : parseInt(matches[2], constants_1.constants.DEC_BASE);
        return [
            arrayElementType,
            arrayLength
        ];
    };
    ArrayDataType1.prototype.getSignatureType = function() {
        return this._computeSignature(false);
    };
    ArrayDataType1.prototype.getSignature = function(isDetailed) {
        if (_.isEmpty(this.getDataItem().name) || !isDetailed) return this.getSignatureType();
        var name = this.getDataItem().name;
        var lastIndexOfScopeDelimiter = name.lastIndexOf('.');
        var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;
        var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;
        var detailedSignature = shortName + " " + this._computeSignature(isDetailed);
        return detailedSignature;
    };
    ArrayDataType1.prototype._computeSignature = function(isDetailed) {
        // Compute signature for a single array element
        var elementDataItem = {
            type: this._elementType,
            name: ''
        };
        var elementComponents = this.getDataItem().components;
        if (elementComponents !== undefined) elementDataItem.components = elementComponents;
        var elementDataType = this.getFactory().create(elementDataItem);
        var elementSignature = elementDataType.getSignature(isDetailed);
        // Construct signature for array of type `element`
        if (this._arrayLength === undefined) return elementSignature + "[]";
        else return elementSignature + "[" + this._arrayLength + "]";
    };
    ArrayDataType1._MATCHER = RegExp('^(.+)\\[([0-9]*)\\]$');
    return ArrayDataType1;
}(set_1.AbstractSetDataType);
exports.ArrayDataType = ArrayDataType;

},{"lodash":"3qBDj","../abstract_data_types/types/set":"lxD6B","../utils/constants":"6LKoV"}],"lxD6B":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var configured_bignumber_1 = require("../../../configured_bignumber");
var set_1 = require("../../calldata/blocks/set");
var constants_1 = require("../../utils/constants");
var data_type_1 = require("../data_type");
var pointer_1 = require("./pointer");
var AbstractSetDataType = /** @class */ function(_super) {
    __extends(AbstractSetDataType1, _super);
    function AbstractSetDataType1(dataItem, factory, isArray, arrayLength, arrayElementType) {
        var _a, _b;
        if (isArray === void 0) isArray = false;
        var _this = _super.call(this, dataItem, factory) || this;
        _this._memberIndexByName = {};
        _this._members = [];
        _this._isArray = isArray;
        _this._arrayLength = arrayLength;
        _this._arrayElementType = arrayElementType;
        if (isArray && arrayLength !== undefined) _a = __read(_this._createMembersWithLength(dataItem, arrayLength), 2), _this._members = _a[0], _this._memberIndexByName = _a[1];
        else if (!isArray) _b = __read(_this._createMembersWithKeys(dataItem), 2), _this._members = _b[0], _this._memberIndexByName = _b[1];
        return _this;
    }
    AbstractSetDataType1.prototype.generateCalldataBlock = function(value, parentBlock) {
        var block = value instanceof Array ? this._generateCalldataBlockFromArray(value, parentBlock) : this._generateCalldataBlockFromObject(value, parentBlock);
        return block;
    };
    AbstractSetDataType1.prototype.generateValue = function(calldata, rules) {
        var _this = this;
        var _a;
        var members = this._members;
        // Case 1: This is an array of undefined length, which means that `this._members` was not
        //         populated in the constructor. So we must construct the set of members now.
        if (this._isArray && this._arrayLength === undefined) {
            var arrayLengthBuf = calldata.popWord();
            var arrayLengthHex = ethUtil.bufferToHex(arrayLengthBuf);
            var arrayLength = new configured_bignumber_1.BigNumber(arrayLengthHex, constants_1.constants.HEX_BASE);
            _a = __read(this._createMembersWithLength(this.getDataItem(), arrayLength.toNumber()), 1), members = _a[0];
        }
        // Create a new scope in the calldata, before descending into the members of this set.
        calldata.startScope();
        var value;
        if (rules.shouldConvertStructsToObjects && !this._isArray) {
            // Construct an object with values for each member of the set.
            value = {};
            _.each(this._memberIndexByName, function(idx, key) {
                var member = _this._members[idx];
                var memberValue = member.generateValue(calldata, rules);
                value[key] = memberValue;
            });
        } else {
            // Construct an array with values for each member of the set.
            value = [];
            _.each(members, function(member, idx) {
                var memberValue = member.generateValue(calldata, rules);
                value.push(memberValue);
            });
        }
        // Close this scope and return tetheh value.
        calldata.endScope();
        return value;
    };
    AbstractSetDataType1.prototype.isStatic = function() {
        // An array with an undefined length is never static.
        if (this._isArray && this._arrayLength === undefined) return false;
        // If any member of the set is a pointer then the set is not static.
        var dependentMember = _.find(this._members, function(member) {
            return member instanceof pointer_1.AbstractPointerDataType;
        });
        var isStatic = dependentMember === undefined;
        return isStatic;
    };
    AbstractSetDataType1.prototype.getDefaultValue = function(rules) {
        var _this = this;
        var defaultValue;
        if (this._isArray && this._arrayLength === undefined) defaultValue = [];
        else if (rules !== undefined && rules.shouldConvertStructsToObjects && !this._isArray) {
            defaultValue = {};
            _.each(this._memberIndexByName, function(idx, key) {
                var member = _this._members[idx];
                var memberValue = member.getDefaultValue();
                defaultValue[key] = memberValue;
            });
        } else {
            defaultValue = [];
            _.each(this._members, function(member, idx) {
                var memberValue = member.getDefaultValue();
                defaultValue.push(memberValue);
            });
        }
        return defaultValue;
    };
    AbstractSetDataType1.prototype._generateCalldataBlockFromArray = function(value, parentBlock) {
        var _a;
        // Sanity check: if the set has a defined length then `value` must have the same length.
        if (this._arrayLength !== undefined && value.length !== this._arrayLength) throw new Error("Expected array of " + JSON.stringify(this._arrayLength) + " elements, but got array of length " + JSON.stringify(value.length));
        // Create a new calldata block for this set.
        var parentName = parentBlock === undefined ? '' : parentBlock.getName();
        var block = new set_1.SetCalldataBlock(this.getDataItem().name, this.getSignature(), parentName);
        // If this set has an undefined length then set its header to be the number of elements.
        var members = this._members;
        if (this._isArray && this._arrayLength === undefined) {
            _a = __read(this._createMembersWithLength(this.getDataItem(), value.length), 1), members = _a[0];
            var lenBuf = ethUtil.setLengthLeft(ethUtil.toBuffer("0x" + value.length.toString(constants_1.constants.HEX_BASE)), constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
            block.setHeader(lenBuf);
        }
        // Create blocks for members of set.
        var memberCalldataBlocks = [];
        _.each(members, function(member, idx) {
            var memberBlock = member.generateCalldataBlock(value[idx], block);
            memberCalldataBlocks.push(memberBlock);
        });
        block.setMembers(memberCalldataBlocks);
        return block;
    };
    AbstractSetDataType1.prototype._generateCalldataBlockFromObject = function(obj, parentBlock) {
        var _this = this;
        // Create a new calldata block for this set.
        var parentName = parentBlock === undefined ? '' : parentBlock.getName();
        var block = new set_1.SetCalldataBlock(this.getDataItem().name, this.getSignature(), parentName);
        // Create blocks for members of set.
        var memberCalldataBlocks = [];
        _.forEach(this._memberIndexByName, function(memberIndex, memberName) {
            if (!(memberName in obj)) throw new Error("Could not assign tuple to object: missing key '" + memberName + "' in object " + JSON.stringify(obj));
            var memberValue = obj[memberName];
            var memberBlock = _this._members[memberIndex].generateCalldataBlock(memberValue, block);
            memberCalldataBlocks.push(memberBlock);
        });
        // Associate member blocks with Set block.
        block.setMembers(memberCalldataBlocks);
        return block;
    };
    AbstractSetDataType1.prototype._computeSignatureOfMembers = function(isDetailed) {
        var _this = this;
        // Compute signature of members
        var signature = "(";
        _.each(this._members, function(member, i) {
            signature += member.getSignature(isDetailed);
            if (i < _this._members.length - 1) signature += ',';
        });
        signature += ')';
        return signature;
    };
    AbstractSetDataType1.prototype._createMembersWithKeys = function(dataItem) {
        var _this = this;
        // Sanity check
        if (dataItem.components === undefined) throw new Error("Tried to create a set using key/value pairs, but no components were defined by the input DataItem '" + dataItem.name + "'.");
        // Create one member for each component of `dataItem`
        var members = [];
        var memberIndexByName = {};
        var memberNames = [];
        _.each(dataItem.components, function(memberItem) {
            // If a component with `name` already exists then
            // rename to `name_nameIdx` to avoid naming conflicts.
            var memberName = memberItem.name;
            var nameIdx = 0;
            while(_.includes(memberNames, memberName) || _.isEmpty(memberName)){
                nameIdx++;
                memberName = memberItem.name + "_" + nameIdx;
            }
            memberNames.push(memberName);
            var childDataItem = {
                type: memberItem.type,
                name: dataItem.name + "." + memberName
            };
            var components = memberItem.components;
            if (components !== undefined) childDataItem.components = components;
            var child = _this.getFactory().create(childDataItem, _this);
            memberIndexByName[memberName] = members.length;
            members.push(child);
        });
        return [
            members,
            memberIndexByName
        ];
    };
    AbstractSetDataType1.prototype._createMembersWithLength = function(dataItem, length) {
        var _this = this;
        // Create `length` members, deriving the type from `dataItem`
        var members = [];
        var memberIndexByName = {};
        var range = _.range(length);
        _.each(range, function(idx) {
            var memberDataItem = {
                type: _this._arrayElementType === undefined ? '' : _this._arrayElementType,
                name: dataItem.name + "[" + idx.toString(constants_1.constants.DEC_BASE) + "]"
            };
            var components = dataItem.components;
            if (components !== undefined) memberDataItem.components = components;
            var memberType = _this.getFactory().create(memberDataItem, _this);
            memberIndexByName[idx.toString(constants_1.constants.DEC_BASE)] = members.length;
            members.push(memberType);
        });
        return [
            members,
            memberIndexByName
        ];
    };
    return AbstractSetDataType1;
}(data_type_1.DataType);
exports.AbstractSetDataType = AbstractSetDataType;

},{"ethereumjs-util":"glktw","lodash":"3qBDj","../../../configured_bignumber":"TutUZ","../../calldata/blocks/set":"8RzEh","../../utils/constants":"6LKoV","../data_type":"5Yaim","./pointer":"8qOpf"}],"8qOpf":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var pointer_1 = require("../../calldata/blocks/pointer");
var constants_1 = require("../../utils/constants");
var data_type_1 = require("../data_type");
var AbstractPointerDataType = /** @class */ function(_super) {
    __extends(AbstractPointerDataType1, _super);
    function AbstractPointerDataType1(dataItem, factory, destination, parent) {
        var _this = _super.call(this, dataItem, factory) || this;
        _this._destination = destination;
        _this._parent = parent;
        return _this;
    }
    AbstractPointerDataType1.prototype.generateCalldataBlock = function(value, parentBlock) {
        if (parentBlock === undefined) throw new Error("DependentDataType requires a parent block to generate its block");
        var destinationBlock = this._destination.generateCalldataBlock(value, parentBlock);
        var name = this.getDataItem().name;
        var signature = this.getSignature();
        var parentName = parentBlock.getName();
        var block = new pointer_1.PointerCalldataBlock(name, signature, parentName, destinationBlock, parentBlock);
        return block;
    };
    AbstractPointerDataType1.prototype.generateValue = function(calldata, rules) {
        var destinationOffsetBuf = calldata.popWord();
        var destinationOffsetHex = ethUtil.bufferToHex(destinationOffsetBuf);
        var destinationOffsetRelative = parseInt(destinationOffsetHex, constants_1.constants.HEX_BASE);
        var destinationOffsetAbsolute = calldata.toAbsoluteOffset(destinationOffsetRelative);
        var currentOffset = calldata.getOffset();
        calldata.setOffset(destinationOffsetAbsolute);
        var value = this._destination.generateValue(calldata, rules);
        calldata.setOffset(currentOffset);
        return value;
    };
    // Disable prefer-function-over-method for inherited abstract method.
    /* tslint:disable prefer-function-over-method */ AbstractPointerDataType1.prototype.isStatic = function() {
        return true;
    };
    return AbstractPointerDataType1;
}(data_type_1.DataType);
exports.AbstractPointerDataType = AbstractPointerDataType;

},{"ethereumjs-util":"glktw","../../calldata/blocks/pointer":"5xVI8","../../utils/constants":"6LKoV","../data_type":"5Yaim"}],"jSjP1":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var ethUtil = require("ethereumjs-util");
var configured_bignumber_1 = require("../../configured_bignumber");
var blob_1 = require("../abstract_data_types/types/blob");
var constants_1 = require("../utils/constants");
var BoolDataType = /** @class */ function(_super) {
    __extends(BoolDataType1, _super);
    function BoolDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory, BoolDataType1._SIZE_KNOWN_AT_COMPILE_TIME) || this;
        if (!BoolDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate Bool with bad input: " + dataItem);
        return _this;
    }
    BoolDataType1.matchType = function(type) {
        return type === ethereum_types_1.SolidityTypes.Bool;
    };
    // Disable prefer-function-over-method for inherited abstract methods.
    /* tslint:disable prefer-function-over-method */ BoolDataType1.prototype.encodeValue = function(value) {
        var encodedValue = value ? '0x1' : '0x0';
        var encodedValueBuf = ethUtil.setLengthLeft(ethUtil.toBuffer(encodedValue), constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        return encodedValueBuf;
    };
    BoolDataType1.prototype.decodeValue = function(calldata) {
        var valueBuf = calldata.popWord();
        var valueHex = ethUtil.bufferToHex(valueBuf);
        // Hack @hysz: there are some cases where `false` is encoded as 0x instead of 0x0.
        var valueNumber = valueHex === '0x' ? new configured_bignumber_1.BigNumber(0) : new configured_bignumber_1.BigNumber(valueHex, constants_1.constants.HEX_BASE);
        if (!(valueNumber.isEqualTo(0) || valueNumber.isEqualTo(1))) throw new Error("Failed to decode boolean. Expected 0x0 or 0x1, got " + valueHex);
        /* tslint:disable boolean-naming */ var value = !valueNumber.isEqualTo(0);
        /* tslint:enable boolean-naming */ return value;
    };
    BoolDataType1.prototype.getDefaultValue = function() {
        return BoolDataType1._DEFAULT_VALUE;
    };
    BoolDataType1.prototype.getSignatureType = function() {
        return ethereum_types_1.SolidityTypes.Bool;
    };
    BoolDataType1._SIZE_KNOWN_AT_COMPILE_TIME = true;
    BoolDataType1._DEFAULT_VALUE = false;
    return BoolDataType1;
}(blob_1.AbstractBlobDataType);
exports.BoolDataType = BoolDataType;

},{"ethereum-types":"i8oCe","ethereumjs-util":"glktw","../../configured_bignumber":"TutUZ","../abstract_data_types/types/blob":"74XOE","../utils/constants":"6LKoV"}],"2RIf6":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var blob_1 = require("../abstract_data_types/types/blob");
var constants_1 = require("../utils/constants");
var DynamicBytesDataType = /** @class */ function(_super) {
    __extends(DynamicBytesDataType1, _super);
    function DynamicBytesDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory, DynamicBytesDataType1._SIZE_KNOWN_AT_COMPILE_TIME) || this;
        if (!DynamicBytesDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate Dynamic Bytes with bad input: " + dataItem);
        return _this;
    }
    DynamicBytesDataType1.matchType = function(type) {
        return type === ethereum_types_1.SolidityTypes.Bytes;
    };
    DynamicBytesDataType1._sanityCheckValue = function(value) {
        if (typeof value !== 'string') return;
        if (!_.startsWith(value, '0x')) throw new Error("Tried to encode non-hex value. Value must include '0x' prefix.");
        else if (value.length % 2 !== 0) throw new Error("Tried to assign " + value + ", which is contains a half-byte. Use full bytes only.");
    };
    // Disable prefer-function-over-method for inherited abstract methods.
    /* tslint:disable prefer-function-over-method */ DynamicBytesDataType1.prototype.encodeValue = function(value) {
        // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.
        // 1/3 Construct the length
        var valueBuf = ethUtil.toBuffer(value);
        var wordsToStoreValuePadded = Math.ceil(valueBuf.byteLength / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        var bytesToStoreValuePadded = wordsToStoreValuePadded * constants_1.constants.EVM_WORD_WIDTH_IN_BYTES;
        var lengthBuf = ethUtil.toBuffer(valueBuf.byteLength);
        var lengthBufPadded = ethUtil.setLengthLeft(lengthBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        // 2/3 Construct the value
        DynamicBytesDataType1._sanityCheckValue(value);
        var valueBufPadded = ethUtil.setLengthRight(valueBuf, bytesToStoreValuePadded);
        // 3/3 Combine length and value
        var encodedValue = Buffer.concat([
            lengthBufPadded,
            valueBufPadded
        ]);
        return encodedValue;
    };
    DynamicBytesDataType1.prototype.decodeValue = function(calldata) {
        // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.
        // 1/2 Decode length
        var lengthBuf = calldata.popWord();
        var lengthHex = ethUtil.bufferToHex(lengthBuf);
        var length = parseInt(lengthHex, constants_1.constants.HEX_BASE);
        // 2/2 Decode value
        var wordsToStoreValuePadded = Math.ceil(length / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        var valueBufPadded = calldata.popWords(wordsToStoreValuePadded);
        var valueBuf = valueBufPadded.slice(0, length);
        var value = ethUtil.bufferToHex(valueBuf);
        DynamicBytesDataType1._sanityCheckValue(value);
        return value;
    };
    DynamicBytesDataType1.prototype.getDefaultValue = function() {
        return DynamicBytesDataType1._DEFAULT_VALUE;
    };
    DynamicBytesDataType1.prototype.getSignatureType = function() {
        return ethereum_types_1.SolidityTypes.Bytes;
    };
    DynamicBytesDataType1._SIZE_KNOWN_AT_COMPILE_TIME = false;
    DynamicBytesDataType1._DEFAULT_VALUE = '0x';
    return DynamicBytesDataType1;
}(blob_1.AbstractBlobDataType);
exports.DynamicBytesDataType = DynamicBytesDataType;

},{"buffer":"fCgem","ethereum-types":"i8oCe","ethereumjs-util":"glktw","lodash":"3qBDj","../abstract_data_types/types/blob":"74XOE","../utils/constants":"6LKoV"}],"5cprD":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var configured_bignumber_1 = require("../../configured_bignumber");
var blob_1 = require("../abstract_data_types/types/blob");
var constants_1 = require("../utils/constants");
var EncoderMath = require("../utils/math");
var IntDataType = /** @class */ function(_super) {
    __extends(IntDataType1, _super);
    function IntDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory, IntDataType1._SIZE_KNOWN_AT_COMPILE_TIME) || this;
        if (!IntDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate Int with bad input: " + dataItem);
        _this._width = IntDataType1._decodeWidthFromType(dataItem.type);
        _this._minValue = new configured_bignumber_1.BigNumber(2).exponentiatedBy(_this._width - 1).times(-1);
        _this._maxValue = new configured_bignumber_1.BigNumber(2).exponentiatedBy(_this._width - 1).minus(1);
        return _this;
    }
    IntDataType1.matchType = function(type) {
        return IntDataType1._MATCHER.test(type);
    };
    IntDataType1._decodeWidthFromType = function(type) {
        var matches = IntDataType1._MATCHER.exec(type);
        var width = matches !== null && matches.length === 2 && matches[1] !== undefined ? parseInt(matches[1], constants_1.constants.DEC_BASE) : IntDataType1._DEFAULT_WIDTH;
        return width;
    };
    IntDataType1.prototype.encodeValue = function(value) {
        var encodedValue = EncoderMath.safeEncodeNumericValue(value, this._minValue, this._maxValue);
        return encodedValue;
    };
    IntDataType1.prototype.decodeValue = function(calldata) {
        var valueBuf = calldata.popWord();
        var value = EncoderMath.safeDecodeNumericValue(valueBuf, this._minValue, this._maxValue);
        if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_INT8) return value.toNumber();
        return value;
    };
    IntDataType1.prototype.getDefaultValue = function() {
        var defaultValue = IntDataType1._DEFAULT_VALUE;
        if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_INT8) return defaultValue.toNumber();
        return defaultValue;
    };
    IntDataType1.prototype.getSignatureType = function() {
        return "" + ethereum_types_1.SolidityTypes.Int + this._width;
    };
    IntDataType1._MATCHER = RegExp('^int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256){0,1}$');
    IntDataType1._SIZE_KNOWN_AT_COMPILE_TIME = true;
    IntDataType1._MAX_WIDTH = 256;
    IntDataType1._DEFAULT_WIDTH = IntDataType1._MAX_WIDTH;
    IntDataType1._DEFAULT_VALUE = new configured_bignumber_1.BigNumber(0);
    return IntDataType1;
}(blob_1.AbstractBlobDataType);
exports.IntDataType = IntDataType;

},{"ethereum-types":"i8oCe","../../configured_bignumber":"TutUZ","../abstract_data_types/types/blob":"74XOE","../utils/constants":"6LKoV","../utils/math":"6NJo1"}],"6NJo1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var configured_bignumber_1 = require("../../configured_bignumber");
var constants_1 = require("../utils/constants");
function sanityCheckBigNumberRange(value_, minValue, maxValue) {
    var value = new configured_bignumber_1.BigNumber(value_, 10);
    if (value.isGreaterThan(maxValue)) throw new Error("Tried to assign value of " + value + ", which exceeds max value of " + maxValue);
    else if (value.isLessThan(minValue)) throw new Error("Tried to assign value of " + value + ", which exceeds min value of " + minValue);
    else if (value.isNaN()) throw new Error("Tried to assign NaN value");
}
function bigNumberToPaddedBuffer(value) {
    var valueHex = "0x" + value.toString(constants_1.constants.HEX_BASE);
    var valueBuf = ethUtil.toBuffer(valueHex);
    var valueBufPadded = ethUtil.setLengthLeft(valueBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
    return valueBufPadded;
}
/**
 * Takes a numeric value and returns its ABI-encoded value
 * @param value_    The value to encode.
 * @return ABI Encoded value
 */ function encodeNumericValue(value_) {
    var value = new configured_bignumber_1.BigNumber(value_, 10);
    // Case 1/2: value is non-negative
    if (value.isGreaterThanOrEqualTo(0)) {
        var encodedPositiveValue = bigNumberToPaddedBuffer(value);
        return encodedPositiveValue;
    }
    // Case 2/2: Value is negative
    // Use two's-complement to encode the value
    // Step 1/3: Convert negative value to positive binary string
    var valueBin = value.times(-1).toString(constants_1.constants.BIN_BASE);
    // Step 2/3: Invert binary value
    var invertedValueBin = '1'.repeat(constants_1.constants.EVM_WORD_WIDTH_IN_BITS - valueBin.length);
    _.each(valueBin, function(bit) {
        invertedValueBin += bit === '1' ? '0' : '1';
    });
    var invertedValue = new configured_bignumber_1.BigNumber(invertedValueBin, constants_1.constants.BIN_BASE);
    // Step 3/3: Add 1 to inverted value
    var negativeValue = invertedValue.plus(1);
    var encodedValue = bigNumberToPaddedBuffer(negativeValue);
    return encodedValue;
}
exports.encodeNumericValue = encodeNumericValue;
/**
 * Takes a numeric value and returns its ABI-encoded value.
 * Performs an additional sanity check, given the min/max allowed value.
 * @param value_    The value to encode.
 * @return ABI Encoded value
 */ function safeEncodeNumericValue(value, minValue, maxValue) {
    sanityCheckBigNumberRange(value, minValue, maxValue);
    var encodedValue = encodeNumericValue(value);
    return encodedValue;
}
exports.safeEncodeNumericValue = safeEncodeNumericValue;
/**
 * Takes an ABI-encoded numeric value and returns its decoded value as a BigNumber.
 * @param encodedValue    The encoded numeric value.
 * @param minValue        The minimum possible decoded value.
 * @return ABI Decoded value
 */ function decodeNumericValue(encodedValue, minValue) {
    var valueHex = ethUtil.bufferToHex(encodedValue);
    // Case 1/3: value is definitely non-negative because of numeric boundaries
    var value = new configured_bignumber_1.BigNumber(valueHex, constants_1.constants.HEX_BASE);
    if (!minValue.isLessThan(0)) return value;
    // Case 2/3: value is non-negative because there is no leading 1 (encoded as two's-complement)
    var valueBin = value.toString(constants_1.constants.BIN_BASE);
    var isValueNegative = valueBin.length === constants_1.constants.EVM_WORD_WIDTH_IN_BITS && _.startsWith(valueBin[0], '1');
    if (!isValueNegative) return value;
    // Case 3/3: value is negative
    // Step 1/3: Invert b inary value
    var invertedValueBin = '';
    _.each(valueBin, function(bit) {
        invertedValueBin += bit === '1' ? '0' : '1';
    });
    var invertedValue = new configured_bignumber_1.BigNumber(invertedValueBin, constants_1.constants.BIN_BASE);
    // Step 2/3: Add 1 to inverted value
    // The result is the two's-complement representation of the input value.
    var positiveValue = invertedValue.plus(1);
    // Step 3/3: Invert positive value to get the negative value
    var negativeValue = positiveValue.times(-1);
    return negativeValue;
}
exports.decodeNumericValue = decodeNumericValue;
/**
 * Takes an ABI-encoded numeric value and returns its decoded value as a BigNumber.
 * Performs an additional sanity check, given the min/max allowed value.
 * @param encodedValue    The encoded numeric value.
 * @param minValue        The minimum possible decoded value.
 * @return ABI Decoded value
 */ function safeDecodeNumericValue(encodedValue, minValue, maxValue) {
    var value = decodeNumericValue(encodedValue, minValue);
    sanityCheckBigNumberRange(value, minValue, maxValue);
    return value;
}
exports.safeDecodeNumericValue = safeDecodeNumericValue;

},{"ethereumjs-util":"glktw","lodash":"3qBDj","../../configured_bignumber":"TutUZ","../utils/constants":"6LKoV"}],"k2PGz":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var set_1 = require("../abstract_data_types/types/set");
var constants_1 = require("../utils/constants");
var tuple_1 = require("./tuple");
var MethodDataType = /** @class */ function(_super) {
    __extends(MethodDataType1, _super);
    function MethodDataType1(abi, dataTypeFactory) {
        var _this = this;
        var methodDataItem = {
            type: 'method',
            name: abi.name,
            components: abi.inputs
        };
        _this = _super.call(this, methodDataItem, dataTypeFactory) || this;
        _this._methodSignature = _this._computeSignature();
        _this._methodSelector = _this._computeSelector();
        var returnDataItem = {
            type: 'tuple',
            name: abi.name,
            components: abi.outputs
        };
        _this._returnDataType = new tuple_1.TupleDataType(returnDataItem, _this.getFactory());
        return _this;
    }
    MethodDataType1.prototype.encode = function(value, rules) {
        var calldata = _super.prototype.encode.call(this, value, rules, this._methodSelector);
        return calldata;
    };
    MethodDataType1.prototype.decode = function(calldata, rules) {
        var value = _super.prototype.decode.call(this, calldata, rules, this._methodSelector);
        return value;
    };
    MethodDataType1.prototype.strictDecode = function(calldata, rules) {
        var value = _super.prototype.decode.call(this, calldata, rules, this._methodSelector);
        var valueAsArray = _.isObject(value) ? _.values(value) : [
            value
        ];
        switch(valueAsArray.length){
            case 0:
                return undefined;
            case 1:
                return valueAsArray[0];
            default:
                return valueAsArray;
        }
    };
    MethodDataType1.prototype.encodeReturnValues = function(value, rules) {
        var returnData = this._returnDataType.encode(value, rules);
        return returnData;
    };
    MethodDataType1.prototype.decodeReturnValues = function(returndata, rules) {
        var returnValues = this._returnDataType.decode(returndata, rules);
        return returnValues;
    };
    MethodDataType1.prototype.strictDecodeReturnValue = function(returndata, rules) {
        var returnValues = this._returnDataType.decode(returndata, rules);
        var returnValuesAsArray = _.isObject(returnValues) ? _.values(returnValues) : [
            returnValues
        ];
        switch(returnValuesAsArray.length){
            case 0:
                return undefined;
            case 1:
                return returnValuesAsArray[0];
            default:
                return returnValuesAsArray;
        }
    };
    MethodDataType1.prototype.getSignatureType = function() {
        return this._methodSignature;
    };
    MethodDataType1.prototype.getSelector = function() {
        return this._methodSelector;
    };
    MethodDataType1.prototype.getReturnValueDataItem = function() {
        var returnValueDataItem = this._returnDataType.getDataItem();
        return returnValueDataItem;
    };
    MethodDataType1.prototype._computeSignature = function() {
        var memberSignature = this._computeSignatureOfMembers();
        var methodSignature = "" + this.getDataItem().name + memberSignature;
        return methodSignature;
    };
    MethodDataType1.prototype._computeSelector = function() {
        var signature = this._computeSignature();
        var selector = ethUtil.bufferToHex(ethUtil.toBuffer(ethUtil.sha3(signature).slice(constants_1.constants.HEX_SELECTOR_BYTE_OFFSET_IN_CALLDATA, constants_1.constants.HEX_SELECTOR_LENGTH_IN_BYTES)));
        return selector;
    };
    return MethodDataType1;
}(set_1.AbstractSetDataType);
exports.MethodDataType = MethodDataType;

},{"ethereumjs-util":"glktw","lodash":"3qBDj","../abstract_data_types/types/set":"lxD6B","../utils/constants":"6LKoV","./tuple":"1VhGb"}],"1VhGb":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var _ = require("lodash");
var set_1 = require("../abstract_data_types/types/set");
var TupleDataType = /** @class */ function(_super) {
    __extends(TupleDataType1, _super);
    function TupleDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory) || this;
        if (!TupleDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate Tuple with bad input: " + dataItem);
        return _this;
    }
    TupleDataType1.matchType = function(type) {
        return type === ethereum_types_1.SolidityTypes.Tuple;
    };
    TupleDataType1.prototype.getSignatureType = function() {
        return this._computeSignatureOfMembers(false);
    };
    TupleDataType1.prototype.getSignature = function(isDetailed) {
        if (_.isEmpty(this.getDataItem().name) || !isDetailed) return this.getSignatureType();
        var name = this.getDataItem().name;
        var lastIndexOfScopeDelimiter = name.lastIndexOf('.');
        var isScopedName = lastIndexOfScopeDelimiter !== undefined && lastIndexOfScopeDelimiter > 0;
        var shortName = isScopedName ? name.substr(lastIndexOfScopeDelimiter + 1) : name;
        var detailedSignature = shortName + " " + this._computeSignatureOfMembers(isDetailed);
        return detailedSignature;
    };
    return TupleDataType1;
}(set_1.AbstractSetDataType);
exports.TupleDataType = TupleDataType;

},{"ethereum-types":"i8oCe","lodash":"3qBDj","../abstract_data_types/types/set":"lxD6B"}],"e8Ae1":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var pointer_1 = require("../abstract_data_types/types/pointer");
var PointerDataType = /** @class */ function(_super) {
    __extends(PointerDataType1, _super);
    function PointerDataType1(destDataType, parentDataType, dataTypeFactory) {
        var _this = this;
        var destDataItem = destDataType.getDataItem();
        var dataItem = {
            name: "ptr<" + destDataItem.name + ">",
            type: "ptr<" + destDataItem.type + ">"
        };
        _this = _super.call(this, dataItem, dataTypeFactory, destDataType, parentDataType) || this;
        return _this;
    }
    PointerDataType1.prototype.getSignatureType = function() {
        return this._destination.getSignature(false);
    };
    PointerDataType1.prototype.getSignature = function(isDetailed) {
        return this._destination.getSignature(isDetailed);
    };
    PointerDataType1.prototype.getDefaultValue = function() {
        var defaultValue = this._destination.getDefaultValue();
        return defaultValue;
    };
    return PointerDataType1;
}(pointer_1.AbstractPointerDataType);
exports.PointerDataType = PointerDataType;

},{"../abstract_data_types/types/pointer":"8qOpf"}],"bmGpj":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var blob_1 = require("../abstract_data_types/types/blob");
var constants_1 = require("../utils/constants");
var StaticBytesDataType = /** @class */ function(_super) {
    __extends(StaticBytesDataType1, _super);
    function StaticBytesDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory, StaticBytesDataType1._SIZE_KNOWN_AT_COMPILE_TIME) || this;
        if (!StaticBytesDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate Static Bytes with bad input: " + dataItem);
        _this._width = StaticBytesDataType1._decodeWidthFromType(dataItem.type);
        return _this;
    }
    StaticBytesDataType1.matchType = function(type) {
        return StaticBytesDataType1._MATCHER.test(type);
    };
    StaticBytesDataType1._decodeWidthFromType = function(type) {
        var matches = StaticBytesDataType1._MATCHER.exec(type);
        var width = matches !== null && matches.length === 3 && matches[2] !== undefined ? parseInt(matches[2], constants_1.constants.DEC_BASE) : StaticBytesDataType1._DEFAULT_WIDTH;
        return width;
    };
    StaticBytesDataType1.prototype.getSignatureType = function() {
        // Note that `byte` reduces to `bytes1`
        return "" + ethereum_types_1.SolidityTypes.Bytes + this._width;
    };
    StaticBytesDataType1.prototype.encodeValue = function(value) {
        // 1/2 Convert value into a buffer and do bounds checking
        this._sanityCheckValue(value);
        var valueBuf = ethUtil.toBuffer(value);
        // 2/2 Store value as hex
        var valuePadded = ethUtil.setLengthRight(valueBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        return valuePadded;
    };
    StaticBytesDataType1.prototype.decodeValue = function(calldata) {
        var valueBufPadded = calldata.popWord();
        var valueBuf = valueBufPadded.slice(0, this._width);
        var value = ethUtil.bufferToHex(valueBuf);
        this._sanityCheckValue(value);
        return value;
    };
    StaticBytesDataType1.prototype.getDefaultValue = function() {
        var valueBufPadded = constants_1.constants.EMPTY_EVM_WORD_BUFFER;
        var valueBuf = valueBufPadded.slice(0, this._width);
        var value = ethUtil.bufferToHex(valueBuf);
        return value;
    };
    StaticBytesDataType1.prototype._sanityCheckValue = function(value) {
        if (typeof value === 'string') {
            if (!_.startsWith(value, '0x')) throw new Error("Tried to encode non-hex value. Value must include '0x' prefix.");
            else if (value.length % 2 !== 0) throw new Error("Tried to assign " + value + ", which is contains a half-byte. Use full bytes only.");
        }
        var valueBuf = ethUtil.toBuffer(value);
        if (valueBuf.byteLength > this._width) throw new Error("Tried to assign " + value + " (" + valueBuf.byteLength + " bytes), which exceeds max bytes that can be stored in a " + this.getSignature());
    };
    StaticBytesDataType1._SIZE_KNOWN_AT_COMPILE_TIME = true;
    StaticBytesDataType1._MATCHER = RegExp('^(byte|bytes(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32))$');
    StaticBytesDataType1._DEFAULT_WIDTH = 1;
    return StaticBytesDataType1;
}(blob_1.AbstractBlobDataType);
exports.StaticBytesDataType = StaticBytesDataType;

},{"ethereum-types":"i8oCe","ethereumjs-util":"glktw","lodash":"3qBDj","../abstract_data_types/types/blob":"74XOE","../utils/constants":"6LKoV"}],"fyI4U":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var ethUtil = require("ethereumjs-util");
var blob_1 = require("../abstract_data_types/types/blob");
var constants_1 = require("../utils/constants");
var StringDataType = /** @class */ function(_super) {
    __extends(StringDataType1, _super);
    function StringDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory, StringDataType1._SIZE_KNOWN_AT_COMPILE_TIME) || this;
        if (!StringDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate String with bad input: " + dataItem);
        return _this;
    }
    StringDataType1.matchType = function(type) {
        return type === ethereum_types_1.SolidityTypes.String;
    };
    // Disable prefer-function-over-method for inherited abstract methods.
    /* tslint:disable prefer-function-over-method */ StringDataType1.prototype.encodeValue = function(value) {
        // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.
        // 1/3 Construct the value
        var valueBuf = new Buffer(value);
        var valueLengthInBytes = valueBuf.byteLength;
        var wordsToStoreValuePadded = Math.ceil(valueLengthInBytes / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        var bytesToStoreValuePadded = wordsToStoreValuePadded * constants_1.constants.EVM_WORD_WIDTH_IN_BYTES;
        var valueBufPadded = ethUtil.setLengthRight(valueBuf, bytesToStoreValuePadded);
        // 2/3 Construct the length
        var lengthBuf = ethUtil.toBuffer(valueLengthInBytes);
        var lengthBufPadded = ethUtil.setLengthLeft(lengthBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        // 3/3 Combine length and value
        var encodedValue = Buffer.concat([
            lengthBufPadded,
            valueBufPadded
        ]);
        return encodedValue;
    };
    StringDataType1.prototype.decodeValue = function(calldata) {
        // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.
        // 1/2 Decode length
        var lengthBufPadded = calldata.popWord();
        var lengthHexPadded = ethUtil.bufferToHex(lengthBufPadded);
        var length = parseInt(lengthHexPadded, constants_1.constants.HEX_BASE);
        // 2/2 Decode value
        var wordsToStoreValuePadded = Math.ceil(length / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);
        var valueBufPadded = calldata.popWords(wordsToStoreValuePadded);
        var valueBuf = valueBufPadded.slice(0, length);
        var value = valueBuf.toString('UTF-8');
        return value;
    };
    StringDataType1.prototype.getDefaultValue = function() {
        return StringDataType1._DEFAULT_VALUE;
    };
    StringDataType1.prototype.getSignatureType = function() {
        return ethereum_types_1.SolidityTypes.String;
    };
    StringDataType1._SIZE_KNOWN_AT_COMPILE_TIME = false;
    StringDataType1._DEFAULT_VALUE = '';
    return StringDataType1;
}(blob_1.AbstractBlobDataType);
exports.StringDataType = StringDataType;

},{"buffer":"fCgem","ethereum-types":"i8oCe","ethereumjs-util":"glktw","../abstract_data_types/types/blob":"74XOE","../utils/constants":"6LKoV"}],"cKbVw":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethereum_types_1 = require("ethereum-types");
var configured_bignumber_1 = require("../../configured_bignumber");
var blob_1 = require("../abstract_data_types/types/blob");
var constants_1 = require("../utils/constants");
var EncoderMath = require("../utils/math");
var UIntDataType = /** @class */ function(_super) {
    __extends(UIntDataType1, _super);
    function UIntDataType1(dataItem, dataTypeFactory) {
        var _this = _super.call(this, dataItem, dataTypeFactory, UIntDataType1._SIZE_KNOWN_AT_COMPILE_TIME) || this;
        if (!UIntDataType1.matchType(dataItem.type)) throw new Error("Tried to instantiate UInt with bad input: " + dataItem);
        _this._width = UIntDataType1._decodeWidthFromType(dataItem.type);
        _this._maxValue = new configured_bignumber_1.BigNumber(2).exponentiatedBy(_this._width).minus(1);
        return _this;
    }
    UIntDataType1.matchType = function(type) {
        return UIntDataType1._MATCHER.test(type);
    };
    UIntDataType1._decodeWidthFromType = function(type) {
        var matches = UIntDataType1._MATCHER.exec(type);
        var width = matches !== null && matches.length === 2 && matches[1] !== undefined ? parseInt(matches[1], constants_1.constants.DEC_BASE) : UIntDataType1._DEFAULT_WIDTH;
        return width;
    };
    UIntDataType1.prototype.encodeValue = function(value) {
        var encodedValue = EncoderMath.safeEncodeNumericValue(value, UIntDataType1._MIN_VALUE, this._maxValue);
        return encodedValue;
    };
    UIntDataType1.prototype.decodeValue = function(calldata) {
        var valueBuf = calldata.popWord();
        var value = EncoderMath.safeDecodeNumericValue(valueBuf, UIntDataType1._MIN_VALUE, this._maxValue);
        if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_UINT8) return value.toNumber();
        return value;
    };
    UIntDataType1.prototype.getDefaultValue = function() {
        var defaultValue = UIntDataType1._DEFAULT_VALUE;
        if (this._width === constants_1.constants.NUMBER_OF_BYTES_IN_UINT8) return defaultValue.toNumber();
        return defaultValue;
    };
    UIntDataType1.prototype.getSignatureType = function() {
        return "" + ethereum_types_1.SolidityTypes.Uint + this._width;
    };
    UIntDataType1._MATCHER = RegExp('^uint(8|16|24|32|40|48|56|64|72|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256){0,1}$');
    UIntDataType1._SIZE_KNOWN_AT_COMPILE_TIME = true;
    UIntDataType1._MAX_WIDTH = 256;
    UIntDataType1._DEFAULT_WIDTH = UIntDataType1._MAX_WIDTH;
    UIntDataType1._MIN_VALUE = new configured_bignumber_1.BigNumber(0);
    UIntDataType1._DEFAULT_VALUE = new configured_bignumber_1.BigNumber(0);
    return UIntDataType1;
}(blob_1.AbstractBlobDataType);
exports.UIntDataType = UIntDataType;

},{"ethereum-types":"i8oCe","../../configured_bignumber":"TutUZ","../abstract_data_types/types/blob":"74XOE","../utils/constants":"6LKoV","../utils/math":"6NJo1"}],"19Iyw":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var subprovider_1 = require("./subprovider");
// HACK: We need this so that our tests don't use testrpc gas estimation which sometimes kills the node.
// Source: https://github.com/trufflesuite/ganache-cli/issues/417
// Source: https://github.com/trufflesuite/ganache-cli/issues/437
// Source: https://github.com/MetaMask/provider-engine/blob/master/subproviders/subprovider.js
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * It intercepts the `eth_estimateGas` JSON RPC call and always returns a constant gas amount when queried.
 */ var FakeGasEstimateSubprovider = /** @class */ function(_super) {
    __extends(FakeGasEstimateSubprovider1, _super);
    /**
     * Instantiates an instance of the FakeGasEstimateSubprovider
     * @param constantGasAmount The constant gas amount you want returned
     */ function FakeGasEstimateSubprovider1(constantGasAmount) {
        var _this = _super.call(this) || this;
        _this._constantGasAmount = constantGasAmount;
        return _this;
    }
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:prefer-function-over-method async-suffix
    FakeGasEstimateSubprovider1.prototype.handleRequest = function(payload, next, end) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(payload.method){
                    case 'eth_estimateGas':
                        end(null, this._constantGasAmount);
                        return [
                            2 /*return*/ 
                        ];
                    default:
                        next();
                        return [
                            2 /*return*/ 
                        ];
                }
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    return FakeGasEstimateSubprovider1;
}(subprovider_1.Subprovider);
exports.FakeGasEstimateSubprovider = FakeGasEstimateSubprovider;

},{"./subprovider":"4dgUK"}],"4NY4d":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var web3_wrapper_1 = require("@0x/web3-wrapper");
var subprovider_1 = require("./subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine)
 * subprovider interface. It forwards JSON RPC requests involving the domain of a signer (getAccounts,
 * sendTransaction, signMessage etc...) to the provider instance supplied at instantiation. All other requests
 * are passed onwards for subsequent subproviders to handle.
 */ var SignerSubprovider = /** @class */ function(_super) {
    __extends(SignerSubprovider1, _super);
    /**
     * Instantiates a new SignerSubprovider.
     * @param supportedProvider Web3 provider that should handle  all user account related requests
     */ function SignerSubprovider1(supportedProvider) {
        var _this = _super.call(this) || this;
        _this._web3Wrapper = new web3_wrapper_1.Web3Wrapper(supportedProvider);
        return _this;
    }
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:prefer-function-over-method async-suffix
    SignerSubprovider1.prototype.handleRequest = function(payload, next, end) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, _b, message, address, _c, nodeVersion, err_1, accounts, err_2, _d, txParams, txData, txHash, err_3, signature, err_4, signature, err_5;
            return __generator(this, function(_e) {
                switch(_e.label){
                    case 0:
                        _c = payload.method;
                        switch(_c){
                            case 'web3_clientVersion':
                                return [
                                    3 /*break*/ ,
                                    1
                                ];
                            case 'eth_accounts':
                                return [
                                    3 /*break*/ ,
                                    5
                                ];
                            case 'eth_sendTransaction':
                                return [
                                    3 /*break*/ ,
                                    9
                                ];
                            case 'eth_sign':
                                return [
                                    3 /*break*/ ,
                                    14
                                ];
                            case 'eth_signTypedData':
                                return [
                                    3 /*break*/ ,
                                    19
                                ];
                        }
                        return [
                            3 /*break*/ ,
                            24
                        ];
                    case 1:
                        _e.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.getNodeVersionAsync()
                        ];
                    case 2:
                        nodeVersion = _e.sent();
                        end(null, nodeVersion);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        err_1 = _e.sent();
                        end(err_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                    case 5:
                        _e.trys.push([
                            5,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.getAvailableAddressesAsync()
                        ];
                    case 6:
                        accounts = _e.sent();
                        end(null, accounts);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        err_2 = _e.sent();
                        end(err_2);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                    case 9:
                        _d = __read(payload.params, 1), txParams = _d[0];
                        _e.label = 10;
                    case 10:
                        _e.trys.push([
                            10,
                            12,
                            ,
                            13
                        ]);
                        txData = web3_wrapper_1.marshaller.unmarshalTxData(txParams);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.sendTransactionAsync(txData)
                        ];
                    case 11:
                        txHash = _e.sent();
                        end(null, txHash);
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 12:
                        err_3 = _e.sent();
                        end(err_3);
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 13:
                        return [
                            2 /*return*/ 
                        ];
                    case 14:
                        _a = __read(payload.params, 2), address = _a[0], message = _a[1];
                        _e.label = 15;
                    case 15:
                        _e.trys.push([
                            15,
                            17,
                            ,
                            18
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.signMessageAsync(address, message)
                        ];
                    case 16:
                        signature = _e.sent();
                        end(null, signature);
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 17:
                        err_4 = _e.sent();
                        end(err_4);
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 18:
                        return [
                            2 /*return*/ 
                        ];
                    case 19:
                        _b = __read(payload.params, 2), address = _b[0], message = _b[1];
                        _e.label = 20;
                    case 20:
                        _e.trys.push([
                            20,
                            22,
                            ,
                            23
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.signTypedDataAsync(address, message)
                        ];
                    case 21:
                        signature = _e.sent();
                        end(null, signature);
                        return [
                            3 /*break*/ ,
                            23
                        ];
                    case 22:
                        err_5 = _e.sent();
                        end(err_5);
                        return [
                            3 /*break*/ ,
                            23
                        ];
                    case 23:
                        return [
                            2 /*return*/ 
                        ];
                    case 24:
                        next();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return SignerSubprovider1;
}(subprovider_1.Subprovider);
exports.SignerSubprovider = SignerSubprovider;

},{"@0x/web3-wrapper":"aTm4B","./subprovider":"4dgUK"}],"aTm4B":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var web3_wrapper_1 = require("./web3_wrapper");
exports.Web3Wrapper = web3_wrapper_1.Web3Wrapper;
var marshaller_1 = require("./marshaller");
exports.marshaller = marshaller_1.marshaller;
var utils_1 = require("@0x/utils");
exports.AbiDecoder = utils_1.AbiDecoder;
var ethereum_types_1 = require("ethereum-types");
exports.BlockParamLiteral = ethereum_types_1.BlockParamLiteral;
exports.OpCode = ethereum_types_1.OpCode;
var types_1 = require("./types");
exports.Web3WrapperErrors = types_1.Web3WrapperErrors;
exports.NodeType = types_1.NodeType;

},{"./web3_wrapper":"a4gmo","./marshaller":"9DzFH","@0x/utils":"dgW7d","ethereum-types":"i8oCe","./types":"5obrh"}],"a4gmo":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _1 = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_1)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _1.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _1.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _1.ops.pop();
                    _1.trys.pop();
                    continue;
                default:
                    if (!(t = _1.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _1 = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _1.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _1.label < t[1]) {
                        _1.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _1.label < t[2]) {
                        _1.label = t[2];
                        _1.ops.push(op);
                        break;
                    }
                    if (t[2]) _1.ops.pop();
                    _1.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _1);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assert_1 = require("@0x/assert");
var json_schemas_1 = require("@0x/json-schemas");
var utils_1 = require("@0x/utils");
var ethereum_types_1 = require("ethereum-types");
var _ = require("lodash");
var marshaller_1 = require("./marshaller");
var types_1 = require("./types");
var utils_2 = require("./utils");
var BASE_TEN = 10;
// These are unique identifiers contained in the response of the
// web3_clientVersion call.
var uniqueVersionIds = {
    geth: 'Geth',
    ganache: 'EthereumJS TestRPC'
};
/**
 * An alternative to the Web3.js library that provides a consistent, clean, promise-based interface.
 */ var Web3Wrapper = /** @class */ function() {
    /**
     * Instantiates a new Web3Wrapper.
     * @param   provider    The Web3 provider instance you would like the Web3Wrapper to use for interacting with
     *                      the backing Ethereum node.
     * @param   callAndTxnDefaults  Override Call and Txn Data defaults sent with RPC requests to the backing Ethereum node.
     * @return  An instance of the Web3Wrapper class.
     */ function Web3Wrapper1(supportedProvider, callAndTxnDefaults) {
        if (callAndTxnDefaults === void 0) callAndTxnDefaults = {};
        /**
         * Flag to check if this instance is of type Web3Wrapper
         */ this.isZeroExWeb3Wrapper = true;
        this.abiDecoder = new utils_1.AbiDecoder([]);
        this._supportedProvider = supportedProvider;
        this._provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
        this._callAndTxnDefaults = callAndTxnDefaults;
        this._jsonRpcRequestId = 1;
    }
    /**
     * Check if an address is a valid Ethereum address
     * @param address Address to check
     * @returns Whether the address is a valid Ethereum address
     */ Web3Wrapper1.isAddress = function(address) {
        return utils_1.addressUtils.isAddress(address);
    };
    /**
     * A unit amount is defined as the amount of a token above the specified decimal places (integer part).
     * E.g: If a currency has 18 decimal places, 1e18 or one quintillion of the currency is equivalent
     * to 1 unit.
     * @param   amount      The amount in baseUnits that you would like converted to units.
     * @param   decimals    The number of decimal places the unit amount has.
     * @return  The amount in units.
     */ Web3Wrapper1.toUnitAmount = function(amount, decimals) {
        assert_1.assert.isValidBaseUnitAmount('amount', amount);
        assert_1.assert.isNumber('decimals', decimals);
        var aUnit = new utils_1.BigNumber(BASE_TEN).pow(decimals);
        var unit = amount.div(aUnit);
        return unit;
    };
    /**
     * A baseUnit is defined as the smallest denomination of a token. An amount expressed in baseUnits
     * is the amount expressed in the smallest denomination.
     * E.g: 1 unit of a token with 18 decimal places is expressed in baseUnits as 1000000000000000000
     * @param   amount      The amount of units that you would like converted to baseUnits.
     * @param   decimals    The number of decimal places the unit amount has.
     * @return  The amount in baseUnits.
     */ Web3Wrapper1.toBaseUnitAmount = function(amount, decimals) {
        assert_1.assert.isBigNumber('amount', amount);
        assert_1.assert.isNumber('decimals', decimals);
        var unit = new utils_1.BigNumber(BASE_TEN).pow(decimals);
        var baseUnitAmount = amount.times(unit);
        var hasDecimals = baseUnitAmount.decimalPlaces() !== 0;
        if (hasDecimals) throw new Error("Invalid unit amount: " + amount.toString() + " - Too many decimal places");
        return baseUnitAmount;
    };
    /**
     * Convert an Ether amount from ETH to Wei
     * @param ethAmount Amount of Ether to convert to wei
     * @returns Amount in wei
     */ Web3Wrapper1.toWei = function(ethAmount) {
        assert_1.assert.isBigNumber('ethAmount', ethAmount);
        var ETH_DECIMALS = 18;
        var balanceWei = Web3Wrapper1.toBaseUnitAmount(ethAmount, ETH_DECIMALS);
        return balanceWei;
    };
    Web3Wrapper1._assertBlockParam = function(blockParam) {
        if (_.isNumber(blockParam)) return;
        else if (_.isString(blockParam)) assert_1.assert.doesBelongToStringEnum('blockParam', blockParam, ethereum_types_1.BlockParamLiteral);
    };
    Web3Wrapper1._assertBlockParamOrString = function(blockParam) {
        try {
            Web3Wrapper1._assertBlockParam(blockParam);
        } catch (err) {
            try {
                assert_1.assert.isHexString('blockParam', blockParam);
                return;
            } catch (err) {
                throw new Error("Expected blockParam to be of type \"string | BlockParam\", encountered " + blockParam);
            }
        }
    };
    Web3Wrapper1._normalizeTxReceiptStatus = function(status) {
        // Transaction status might have four values
        // undefined - Testrpc and other old clients
        // null - New clients on old transactions
        // number - Parity
        // hex - Geth
        if (_.isString(status)) return utils_2.utils.convertHexToNumber(status);
        else if (status === undefined) return null;
        else return status;
    };
    /**
     * Get the contract defaults set to the Web3Wrapper instance
     * @return  CallAndTxnData defaults (e.g gas, gasPrice, nonce, etc...)
     */ Web3Wrapper1.prototype.getContractDefaults = function() {
        return this._callAndTxnDefaults;
    };
    /**
     * Retrieve the Web3 provider
     * @return  Web3 provider instance
     */ Web3Wrapper1.prototype.getProvider = function() {
        return this._supportedProvider;
    };
    /**
     * Update the used Web3 provider
     * @param provider The new Web3 provider to be set
     */ Web3Wrapper1.prototype.setProvider = function(supportedProvider) {
        var provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
        this._provider = provider;
    };
    /**
     * Check whether an address is available through the backing provider. This can be
     * useful if you want to know whether a user can sign messages or transactions from
     * a given Ethereum address.
     * @param senderAddress Address to check availability for
     * @returns Whether the address is available through the provider.
     */ Web3Wrapper1.prototype.isSenderAddressAvailableAsync = function(senderAddress) {
        return __awaiter(this, void 0, void 0, function() {
            var addresses, normalizedAddress;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isETHAddressHex('senderAddress', senderAddress);
                        return [
                            4 /*yield*/ ,
                            this.getAvailableAddressesAsync()
                        ];
                    case 1:
                        addresses = _a.sent();
                        normalizedAddress = senderAddress.toLowerCase();
                        return [
                            2 /*return*/ ,
                            _.includes(addresses, normalizedAddress)
                        ];
                }
            });
        });
    };
    /**
     * Fetch the backing Ethereum node's version string (e.g `MetaMask/v4.2.0`)
     * @returns Ethereum node's version string
     */ Web3Wrapper1.prototype.getNodeVersionAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var nodeVersion;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'web3_clientVersion'
                            })
                        ];
                    case 1:
                        nodeVersion = _a.sent();
                        return [
                            2 /*return*/ ,
                            nodeVersion
                        ];
                }
            });
        });
    };
    /**
     * Fetches the networkId of the backing Ethereum node
     * @returns The network id
     */ Web3Wrapper1.prototype.getNetworkIdAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var networkIdStr, networkId;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'net_version'
                            })
                        ];
                    case 1:
                        networkIdStr = _a.sent();
                        networkId = _.parseInt(networkIdStr);
                        return [
                            2 /*return*/ ,
                            networkId
                        ];
                }
            });
        });
    };
    /**
     * Retrieves the transaction receipt for a given transaction hash if found
     * @param txHash Transaction hash
     * @returns The transaction receipt, including it's status (0: failed, 1: succeeded). Returns undefined if transaction not found.
     */ Web3Wrapper1.prototype.getTransactionReceiptIfExistsAsync = function(txHash) {
        return __awaiter(this, void 0, void 0, function() {
            var transactionReceiptRpc, transactionReceipt;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isHexString('txHash', txHash);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_getTransactionReceipt',
                                params: [
                                    txHash
                                ]
                            })
                        ];
                    case 1:
                        transactionReceiptRpc = _a.sent();
                        // HACK Parity can return a pending transaction receipt. We check for a non null
                        // block number before continuing with returning a fully realised receipt.
                        // ref: https://github.com/paritytech/parity-ethereum/issues/1180
                        if (transactionReceiptRpc !== null && transactionReceiptRpc.blockNumber !== null) {
                            transactionReceiptRpc.status = Web3Wrapper1._normalizeTxReceiptStatus(transactionReceiptRpc.status);
                            transactionReceipt = marshaller_1.marshaller.unmarshalTransactionReceipt(transactionReceiptRpc);
                            return [
                                2 /*return*/ ,
                                transactionReceipt
                            ];
                        } else return [
                            2 /*return*/ ,
                            undefined
                        ];
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Retrieves the transaction data for a given transaction
     * @param txHash Transaction hash
     * @returns The raw transaction data
     */ Web3Wrapper1.prototype.getTransactionByHashAsync = function(txHash) {
        return __awaiter(this, void 0, void 0, function() {
            var transactionRpc, transaction;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isHexString('txHash', txHash);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_getTransactionByHash',
                                params: [
                                    txHash
                                ]
                            })
                        ];
                    case 1:
                        transactionRpc = _a.sent();
                        transaction = marshaller_1.marshaller.unmarshalTransaction(transactionRpc);
                        return [
                            2 /*return*/ ,
                            transaction
                        ];
                }
            });
        });
    };
    /**
     * Retrieves an accounts Ether balance in wei
     * @param owner Account whose balance you wish to check
     * @param defaultBlock The block depth at which to fetch the balance (default=latest)
     * @returns Balance in wei
     */ Web3Wrapper1.prototype.getBalanceInWeiAsync = function(owner, defaultBlock) {
        return __awaiter(this, void 0, void 0, function() {
            var marshalledDefaultBlock, encodedOwner, balanceInWei;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isETHAddressHex('owner', owner);
                        if (defaultBlock !== undefined) Web3Wrapper1._assertBlockParam(defaultBlock);
                        marshalledDefaultBlock = marshaller_1.marshaller.marshalBlockParam(defaultBlock);
                        encodedOwner = marshaller_1.marshaller.marshalAddress(owner);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_getBalance',
                                params: [
                                    encodedOwner,
                                    marshalledDefaultBlock
                                ]
                            })
                        ];
                    case 1:
                        balanceInWei = _a.sent();
                        // Rewrap in a new BigNumber
                        return [
                            2 /*return*/ ,
                            new utils_1.BigNumber(balanceInWei)
                        ];
                }
            });
        });
    };
    /**
     * Check if a contract exists at a given address
     * @param address Address to which to check
     * @returns Whether or not contract code was found at the supplied address
     */ Web3Wrapper1.prototype.doesContractExistAtAddressAsync = function(address) {
        return __awaiter(this, void 0, void 0, function() {
            var code, isCodeEmpty;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isETHAddressHex('address', address);
                        return [
                            4 /*yield*/ ,
                            this.getContractCodeAsync(address)
                        ];
                    case 1:
                        code = _a.sent();
                        isCodeEmpty = /^0x0{0,40}$/i.test(code);
                        return [
                            2 /*return*/ ,
                            !isCodeEmpty
                        ];
                }
            });
        });
    };
    /**
     * Gets the contract code by address
     * @param  address Address of the contract
     * @param defaultBlock Block height at which to make the call. Defaults to `latest`
     * @return Code of the contract
     */ Web3Wrapper1.prototype.getContractCodeAsync = function(address, defaultBlock) {
        return __awaiter(this, void 0, void 0, function() {
            var marshalledDefaultBlock, encodedAddress, code;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isETHAddressHex('address', address);
                        if (defaultBlock !== undefined) Web3Wrapper1._assertBlockParam(defaultBlock);
                        marshalledDefaultBlock = marshaller_1.marshaller.marshalBlockParam(defaultBlock);
                        encodedAddress = marshaller_1.marshaller.marshalAddress(address);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_getCode',
                                params: [
                                    encodedAddress,
                                    marshalledDefaultBlock
                                ]
                            })
                        ];
                    case 1:
                        code = _a.sent();
                        return [
                            2 /*return*/ ,
                            code
                        ];
                }
            });
        });
    };
    /**
     * Gets the debug trace of a transaction
     * @param  txHash Hash of the transactuon to get a trace for
     * @param  traceParams Config object allowing you to specify if you need memory/storage/stack traces.
     * @return Transaction trace
     */ Web3Wrapper1.prototype.getTransactionTraceAsync = function(txHash, traceParams) {
        return __awaiter(this, void 0, void 0, function() {
            var trace;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isHexString('txHash', txHash);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'debug_traceTransaction',
                                params: [
                                    txHash,
                                    traceParams
                                ]
                            })
                        ];
                    case 1:
                        trace = _a.sent();
                        return [
                            2 /*return*/ ,
                            trace
                        ];
                }
            });
        });
    };
    /**
     * Sign a message with a specific address's private key (`eth_sign`)
     * @param address Address of signer
     * @param message Message to sign
     * @returns Signature string (might be VRS or RSV depending on the Signer)
     */ Web3Wrapper1.prototype.signMessageAsync = function(address, message) {
        return __awaiter(this, void 0, void 0, function() {
            var signData;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isETHAddressHex('address', address);
                        assert_1.assert.isString('message', message); // TODO: Should this be stricter? Hex string?
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_sign',
                                params: [
                                    address,
                                    message
                                ]
                            })
                        ];
                    case 1:
                        signData = _a.sent();
                        return [
                            2 /*return*/ ,
                            signData
                        ];
                }
            });
        });
    };
    /**
     * Sign an EIP712 typed data message with a specific address's private key (`eth_signTypedData`)
     * @param address Address of signer
     * @param typedData Typed data message to sign
     * @returns Signature string (as RSV)
     */ Web3Wrapper1.prototype.signTypedDataAsync = function(address, typedData) {
        return __awaiter(this, void 0, void 0, function() {
            var signData;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isETHAddressHex('address', address);
                        assert_1.assert.doesConformToSchema('typedData', typedData, json_schemas_1.schemas.eip712TypedDataSchema);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_signTypedData',
                                params: [
                                    address,
                                    typedData
                                ]
                            })
                        ];
                    case 1:
                        signData = _a.sent();
                        return [
                            2 /*return*/ ,
                            signData
                        ];
                }
            });
        });
    };
    /**
     * Fetches the latest block number
     * @returns Block number
     */ Web3Wrapper1.prototype.getBlockNumberAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var blockNumberHex, blockNumber;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_blockNumber',
                                params: []
                            })
                        ];
                    case 1:
                        blockNumberHex = _a.sent();
                        blockNumber = utils_2.utils.convertHexToNumberOrNull(blockNumberHex);
                        return [
                            2 /*return*/ ,
                            blockNumber
                        ];
                }
            });
        });
    };
    /**
     * Fetch a specific Ethereum block without transaction data
     * @param blockParam The block you wish to fetch (blockHash, blockNumber or blockLiteral)
     * @returns The requested block without transaction data, or undefined if block was not found
     * (e.g the node isn't fully synced, there was a block re-org and the requested block was uncles, etc...)
     */ Web3Wrapper1.prototype.getBlockIfExistsAsync = function(blockParam) {
        return __awaiter(this, void 0, void 0, function() {
            var encodedBlockParam, method, shouldIncludeTransactionData, blockWithoutTransactionDataWithHexValuesOrNull, blockWithoutTransactionDataIfExists;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        Web3Wrapper1._assertBlockParamOrString(blockParam);
                        encodedBlockParam = marshaller_1.marshaller.marshalBlockParam(blockParam);
                        method = utils_2.utils.isHexStrict(blockParam) ? 'eth_getBlockByHash' : 'eth_getBlockByNumber';
                        shouldIncludeTransactionData = false;
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: method,
                                params: [
                                    encodedBlockParam,
                                    shouldIncludeTransactionData
                                ]
                            })
                        ];
                    case 1:
                        blockWithoutTransactionDataWithHexValuesOrNull = _a.sent();
                        if (blockWithoutTransactionDataWithHexValuesOrNull !== null) blockWithoutTransactionDataIfExists = marshaller_1.marshaller.unmarshalIntoBlockWithoutTransactionData(blockWithoutTransactionDataWithHexValuesOrNull);
                        return [
                            2 /*return*/ ,
                            blockWithoutTransactionDataIfExists
                        ];
                }
            });
        });
    };
    /**
     * Fetch a specific Ethereum block with transaction data
     * @param blockParam The block you wish to fetch (blockHash, blockNumber or blockLiteral)
     * @returns The requested block with transaction data
     */ Web3Wrapper1.prototype.getBlockWithTransactionDataAsync = function(blockParam) {
        return __awaiter(this, void 0, void 0, function() {
            var encodedBlockParam, method, shouldIncludeTransactionData, blockWithTransactionDataWithHexValues, blockWithoutTransactionData;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        Web3Wrapper1._assertBlockParamOrString(blockParam);
                        encodedBlockParam = blockParam;
                        if (_.isNumber(blockParam)) encodedBlockParam = utils_2.utils.numberToHex(blockParam);
                        method = utils_2.utils.isHexStrict(blockParam) ? 'eth_getBlockByHash' : 'eth_getBlockByNumber';
                        shouldIncludeTransactionData = true;
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: method,
                                params: [
                                    encodedBlockParam,
                                    shouldIncludeTransactionData
                                ]
                            })
                        ];
                    case 1:
                        blockWithTransactionDataWithHexValues = _a.sent();
                        blockWithoutTransactionData = marshaller_1.marshaller.unmarshalIntoBlockWithTransactionData(blockWithTransactionDataWithHexValues);
                        return [
                            2 /*return*/ ,
                            blockWithoutTransactionData
                        ];
                }
            });
        });
    };
    /**
     * Fetch a block's timestamp
     * @param blockParam The block you wish to fetch (blockHash, blockNumber or blockLiteral)
     * @returns The block's timestamp
     */ Web3Wrapper1.prototype.getBlockTimestampAsync = function(blockParam) {
        return __awaiter(this, void 0, void 0, function() {
            var blockIfExists;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        Web3Wrapper1._assertBlockParamOrString(blockParam);
                        return [
                            4 /*yield*/ ,
                            this.getBlockIfExistsAsync(blockParam)
                        ];
                    case 1:
                        blockIfExists = _a.sent();
                        if (blockIfExists === undefined) throw new Error("Failed to fetch block with blockParam: " + JSON.stringify(blockParam));
                        return [
                            2 /*return*/ ,
                            blockIfExists.timestamp
                        ];
                }
            });
        });
    };
    /**
     * Retrieve the user addresses available through the backing provider
     * @returns Available user addresses
     */ Web3Wrapper1.prototype.getAvailableAddressesAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var addresses, normalizedAddresses;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_accounts',
                                params: []
                            })
                        ];
                    case 1:
                        addresses = _a.sent();
                        normalizedAddresses = _.map(addresses, function(address) {
                            return address.toLowerCase();
                        });
                        return [
                            2 /*return*/ ,
                            normalizedAddresses
                        ];
                }
            });
        });
    };
    /**
     * Take a snapshot of the blockchain state on a TestRPC/Ganache local node
     * @returns The snapshot id. This can be used to revert to this snapshot
     */ Web3Wrapper1.prototype.takeSnapshotAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var snapshotId, _a;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _a = Number;
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'evm_snapshot',
                                params: []
                            })
                        ];
                    case 1:
                        snapshotId = _a.apply(void 0, [
                            _b.sent()
                        ]);
                        return [
                            2 /*return*/ ,
                            snapshotId
                        ];
                }
            });
        });
    };
    /**
     * Revert the blockchain state to a previous snapshot state on TestRPC/Ganache local node
     * @param snapshotId snapshot id to revert to
     * @returns Whether the revert was successful
     */ Web3Wrapper1.prototype.revertSnapshotAsync = function(snapshotId) {
        return __awaiter(this, void 0, void 0, function() {
            var didRevert;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isNumber('snapshotId', snapshotId);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'evm_revert',
                                params: [
                                    snapshotId
                                ]
                            })
                        ];
                    case 1:
                        didRevert = _a.sent();
                        return [
                            2 /*return*/ ,
                            didRevert
                        ];
                }
            });
        });
    };
    /**
     * Mine a block on a TestRPC/Ganache local node
     */ Web3Wrapper1.prototype.mineBlockAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'evm_mine',
                                params: []
                            })
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Increase the next blocks timestamp on TestRPC/Ganache or Geth local node.
     * Will throw if provider is neither TestRPC/Ganache or Geth.
     * @param timeDelta Amount of time to add in seconds
     */ Web3Wrapper1.prototype.increaseTimeAsync = function(timeDelta) {
        return __awaiter(this, void 0, void 0, function() {
            var version;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isNumber('timeDelta', timeDelta);
                        return [
                            4 /*yield*/ ,
                            this.getNodeVersionAsync()
                        ];
                    case 1:
                        version = _a.sent();
                        if (_.includes(version, uniqueVersionIds.geth)) return [
                            2 /*return*/ ,
                            this.sendRawPayloadAsync({
                                method: 'debug_increaseTime',
                                params: [
                                    timeDelta
                                ]
                            })
                        ];
                        else if (_.includes(version, uniqueVersionIds.ganache)) return [
                            2 /*return*/ ,
                            this.sendRawPayloadAsync({
                                method: 'evm_increaseTime',
                                params: [
                                    timeDelta
                                ]
                            })
                        ];
                        else throw new Error("Unknown client version: " + version);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Retrieve smart contract logs for a given filter
     * @param filter Parameters by which to filter which logs to retrieve
     * @returns The corresponding log entries
     */ Web3Wrapper1.prototype.getLogsAsync = function(filter) {
        return __awaiter(this, void 0, void 0, function() {
            var fromBlock, toBlock, serializedFilter, payload, rawLogs, formattedLogs;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (filter.blockHash !== undefined && (filter.fromBlock !== undefined || filter.toBlock !== undefined)) throw new Error("Cannot specify 'blockHash' as well as 'fromBlock'/'toBlock' in the filter supplied to 'getLogsAsync'");
                        fromBlock = filter.fromBlock;
                        if (_.isNumber(fromBlock)) fromBlock = utils_2.utils.numberToHex(fromBlock);
                        toBlock = filter.toBlock;
                        if (_.isNumber(toBlock)) toBlock = utils_2.utils.numberToHex(toBlock);
                        serializedFilter = __assign({}, filter, {
                            fromBlock: fromBlock,
                            toBlock: toBlock
                        });
                        payload = {
                            method: 'eth_getLogs',
                            params: [
                                serializedFilter
                            ]
                        };
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync(payload)
                        ];
                    case 1:
                        rawLogs = _a.sent();
                        formattedLogs = _.map(rawLogs, marshaller_1.marshaller.unmarshalLog.bind(marshaller_1.marshaller));
                        return [
                            2 /*return*/ ,
                            formattedLogs
                        ];
                }
            });
        });
    };
    /**
     * Calculate the estimated gas cost for a given transaction
     * @param txData Transaction data
     * @returns Estimated gas cost
     */ Web3Wrapper1.prototype.estimateGasAsync = function(txData) {
        return __awaiter(this, void 0, void 0, function() {
            var txDataHex, gasHex, gas;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.doesConformToSchema('txData', txData, json_schemas_1.schemas.txDataSchema, [
                            json_schemas_1.schemas.addressSchema,
                            json_schemas_1.schemas.numberSchema,
                            json_schemas_1.schemas.jsNumber, 
                        ]);
                        txDataHex = marshaller_1.marshaller.marshalTxData(txData);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_estimateGas',
                                params: [
                                    txDataHex
                                ]
                            })
                        ];
                    case 1:
                        gasHex = _a.sent();
                        gas = utils_2.utils.convertHexToNumber(gasHex);
                        return [
                            2 /*return*/ ,
                            gas
                        ];
                }
            });
        });
    };
    /**
     * Call a smart contract method at a given block height
     * @param callData Call data
     * @param defaultBlock Block height at which to make the call. Defaults to `latest`
     * @returns The raw call result
     */ Web3Wrapper1.prototype.callAsync = function(callData, defaultBlock) {
        return __awaiter(this, void 0, void 0, function() {
            var marshalledDefaultBlock, callDataHex, rawCallResult;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.doesConformToSchema('callData', callData, json_schemas_1.schemas.callDataSchema, [
                            json_schemas_1.schemas.addressSchema,
                            json_schemas_1.schemas.numberSchema,
                            json_schemas_1.schemas.jsNumber, 
                        ]);
                        if (defaultBlock !== undefined) Web3Wrapper1._assertBlockParam(defaultBlock);
                        marshalledDefaultBlock = marshaller_1.marshaller.marshalBlockParam(defaultBlock);
                        callDataHex = marshaller_1.marshaller.marshalCallData(callData);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_call',
                                params: [
                                    callDataHex,
                                    marshalledDefaultBlock
                                ]
                            })
                        ];
                    case 1:
                        rawCallResult = _a.sent();
                        return [
                            2 /*return*/ ,
                            rawCallResult
                        ];
                }
            });
        });
    };
    /**
     * Send a transaction
     * @param txData Transaction data
     * @returns Transaction hash
     */ Web3Wrapper1.prototype.sendTransactionAsync = function(txData) {
        return __awaiter(this, void 0, void 0, function() {
            var txDataHex, txHash;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.doesConformToSchema('txData', txData, json_schemas_1.schemas.txDataSchema, [
                            json_schemas_1.schemas.addressSchema,
                            json_schemas_1.schemas.numberSchema,
                            json_schemas_1.schemas.jsNumber, 
                        ]);
                        txDataHex = marshaller_1.marshaller.marshalTxData(txData);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'eth_sendTransaction',
                                params: [
                                    txDataHex
                                ]
                            })
                        ];
                    case 1:
                        txHash = _a.sent();
                        return [
                            2 /*return*/ ,
                            txHash
                        ];
                }
            });
        });
    };
    /**
     * Waits for a transaction to be mined and returns the transaction receipt.
     * Note that just because a transaction was mined does not mean it was
     * successful. You need to check the status code of the transaction receipt
     * to find out if it was successful, or use the helper method
     * awaitTransactionSuccessAsync.
     * @param   txHash            Transaction hash
     * @param   pollingIntervalMs How often (in ms) should we check if the transaction is mined.
     * @param   timeoutMs         How long (in ms) to poll for transaction mined until aborting.
     * @return  Transaction receipt with decoded log args.
     */ Web3Wrapper1.prototype.awaitTransactionMinedAsync = function(txHash, pollingIntervalMs, timeoutMs) {
        if (pollingIntervalMs === void 0) pollingIntervalMs = 1000;
        return __awaiter(this, void 0, void 0, function() {
            var transactionReceipt, logsWithDecodedArgs1, transactionReceiptWithDecodedLogArgs1, wasTimeoutExceeded, txReceiptPromise, txReceipt;
            var _this = this;
            return __generator(this, function(_a1) {
                switch(_a1.label){
                    case 0:
                        assert_1.assert.isHexString('txHash', txHash);
                        assert_1.assert.isNumber('pollingIntervalMs', pollingIntervalMs);
                        if (timeoutMs !== undefined) assert_1.assert.isNumber('timeoutMs', timeoutMs);
                        return [
                            4 /*yield*/ ,
                            this.getTransactionReceiptIfExistsAsync(txHash)
                        ];
                    case 1:
                        transactionReceipt = _a1.sent();
                        if (transactionReceipt !== undefined) {
                            logsWithDecodedArgs1 = _.map(transactionReceipt.logs, this.abiDecoder.tryToDecodeLogOrNoop.bind(this.abiDecoder));
                            transactionReceiptWithDecodedLogArgs1 = __assign({}, transactionReceipt, {
                                logs: logsWithDecodedArgs1
                            });
                            return [
                                2 /*return*/ ,
                                transactionReceiptWithDecodedLogArgs1
                            ];
                        }
                        wasTimeoutExceeded = false;
                        if (timeoutMs) setTimeout(function() {
                            return wasTimeoutExceeded = true;
                        }, timeoutMs);
                        txReceiptPromise = new Promise(function(resolve, reject) {
                            var intervalId = utils_1.intervalUtils.setAsyncExcludingInterval(function() {
                                return __awaiter(_this, void 0, void 0, function() {
                                    var logsWithDecodedArgs, transactionReceiptWithDecodedLogArgs;
                                    return __generator(this, function(_a) {
                                        switch(_a.label){
                                            case 0:
                                                if (wasTimeoutExceeded) {
                                                    utils_1.intervalUtils.clearAsyncExcludingInterval(intervalId);
                                                    return [
                                                        2 /*return*/ ,
                                                        reject(types_1.Web3WrapperErrors.TransactionMiningTimeout)
                                                    ];
                                                }
                                                return [
                                                    4 /*yield*/ ,
                                                    this.getTransactionReceiptIfExistsAsync(txHash)
                                                ];
                                            case 1:
                                                transactionReceipt = _a.sent();
                                                if (transactionReceipt !== undefined) {
                                                    utils_1.intervalUtils.clearAsyncExcludingInterval(intervalId);
                                                    logsWithDecodedArgs = _.map(transactionReceipt.logs, this.abiDecoder.tryToDecodeLogOrNoop.bind(this.abiDecoder));
                                                    transactionReceiptWithDecodedLogArgs = __assign({}, transactionReceipt, {
                                                        logs: logsWithDecodedArgs
                                                    });
                                                    resolve(transactionReceiptWithDecodedLogArgs);
                                                }
                                                return [
                                                    2 /*return*/ 
                                                ];
                                        }
                                    });
                                });
                            }, pollingIntervalMs, function(err) {
                                utils_1.intervalUtils.clearAsyncExcludingInterval(intervalId);
                                reject(err);
                            });
                        });
                        return [
                            4 /*yield*/ ,
                            txReceiptPromise
                        ];
                    case 2:
                        txReceipt = _a1.sent();
                        return [
                            2 /*return*/ ,
                            txReceipt
                        ];
                }
            });
        });
    };
    /**
     * Waits for a transaction to be mined and returns the transaction receipt.
     * Unlike awaitTransactionMinedAsync, it will throw if the receipt has a
     * status that is not equal to 1. A status of 0 or null indicates that the
     * transaction was mined, but failed. See:
     * https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethgettransactionreceipt
     * @param   txHash            Transaction hash
     * @param   pollingIntervalMs How often (in ms) should we check if the transaction is mined.
     * @param   timeoutMs         How long (in ms) to poll for transaction mined until aborting.
     * @return  Transaction receipt with decoded log args.
     */ Web3Wrapper1.prototype.awaitTransactionSuccessAsync = function(txHash, pollingIntervalMs, timeoutMs) {
        if (pollingIntervalMs === void 0) pollingIntervalMs = 1000;
        return __awaiter(this, void 0, void 0, function() {
            var receipt;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.awaitTransactionMinedAsync(txHash, pollingIntervalMs, timeoutMs)
                        ];
                    case 1:
                        receipt = _a.sent();
                        if (receipt.status !== 1) throw new Error("Transaction failed: " + txHash);
                        return [
                            2 /*return*/ ,
                            receipt
                        ];
                }
            });
        });
    };
    /**
     * Calls the 'debug_setHead' JSON RPC method, which sets the current head of
     * the local chain by block number. Note, this is a destructive action and
     * may severely damage your chain. Use with extreme caution. As of now, this
     * is only supported by Geth. It sill throw if the 'debug_setHead' method is
     * not supported.
     * @param  blockNumber The block number to reset to.
     */ Web3Wrapper1.prototype.setHeadAsync = function(blockNumber) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        assert_1.assert.isNumber('blockNumber', blockNumber);
                        return [
                            4 /*yield*/ ,
                            this.sendRawPayloadAsync({
                                method: 'debug_setHead',
                                params: [
                                    utils_2.utils.numberToHex(blockNumber)
                                ]
                            })
                        ];
                    case 1:
                        _a.sent();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Sends a raw Ethereum JSON RPC payload and returns the response's `result` key
     * @param payload A partial JSON RPC payload. No need to include version, id, params (if none needed)
     * @return The contents nested under the result key of the response body
     */ Web3Wrapper1.prototype.sendRawPayloadAsync = function(payload) {
        return __awaiter(this, void 0, void 0, function() {
            var sendAsync, payloadWithDefaults, response, result;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        sendAsync = this._provider.sendAsync.bind(this._provider);
                        payloadWithDefaults = __assign({
                            id: this._jsonRpcRequestId++,
                            params: [],
                            jsonrpc: '2.0'
                        }, payload);
                        return [
                            4 /*yield*/ ,
                            utils_1.promisify(sendAsync)(payloadWithDefaults)
                        ];
                    case 1:
                        response = _a.sent();
                        if (response.error) throw new Error(response.error.message);
                        result = response.result;
                        return [
                            2 /*return*/ ,
                            result
                        ];
                }
            });
        });
    };
    /**
     * Returns either NodeType.Geth or NodeType.Ganache depending on the type of
     * the backing Ethereum node. Throws for any other type of node.
     */ Web3Wrapper1.prototype.getNodeTypeAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var version;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.getNodeVersionAsync()
                        ];
                    case 1:
                        version = _a.sent();
                        if (_.includes(version, uniqueVersionIds.geth)) return [
                            2 /*return*/ ,
                            types_1.NodeType.Geth
                        ];
                        else if (_.includes(version, uniqueVersionIds.ganache)) return [
                            2 /*return*/ ,
                            types_1.NodeType.Ganache
                        ];
                        else throw new Error("Unknown client version: " + version);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return Web3Wrapper1;
}(); // tslint:disable-line:max-file-line-count
exports.Web3Wrapper = Web3Wrapper;

},{"@0x/assert":"5D3Nh","@0x/json-schemas":"hY75Y","@0x/utils":"dgW7d","ethereum-types":"i8oCe","lodash":"3qBDj","./marshaller":"9DzFH","./types":"5obrh","./utils":"gHYyM"}],"5D3Nh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var json_schemas_1 = require("@0x/json-schemas");
var utils_1 = require("@0x/utils");
var _ = require("lodash");
var validUrl = require("valid-url");
var HEX_REGEX = /^0x[0-9A-F]*$/i;
exports.assert = {
    isBigNumber: function(variableName, value) {
        var isBigNumber = utils_1.BigNumber.isBigNumber(value);
        exports.assert.assert(isBigNumber, exports.assert.typeAssertionMessage(variableName, 'BigNumber', value));
    },
    isValidBaseUnitAmount: function(variableName, value) {
        exports.assert.isBigNumber(variableName, value);
        var isNegative = value.isLessThan(0);
        exports.assert.assert(!isNegative, variableName + " cannot be a negative number, found value: " + value.toNumber());
        var hasDecimals = value.decimalPlaces() !== 0;
        exports.assert.assert(!hasDecimals, variableName + " should be in baseUnits (no decimals), found value: " + value.toNumber());
    },
    isString: function(variableName, value) {
        exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));
    },
    isFunction: function(variableName, value) {
        exports.assert.assert(_.isFunction(value), exports.assert.typeAssertionMessage(variableName, 'function', value));
    },
    isHexString: function(variableName, value) {
        exports.assert.assert(_.isString(value) && HEX_REGEX.test(value), exports.assert.typeAssertionMessage(variableName, 'HexString', value));
    },
    isETHAddressHex: function(variableName, value) {
        exports.assert.assert(_.isString(value), exports.assert.typeAssertionMessage(variableName, 'string', value));
        exports.assert.assert(utils_1.addressUtils.isAddress(value), exports.assert.typeAssertionMessage(variableName, 'ETHAddressHex', value));
    },
    doesBelongToStringEnum: function(variableName, value, stringEnum /* There is no base type for every string enum */ ) {
        var enumValues = _.values(stringEnum);
        var doesBelongToStringEnum = _.includes(enumValues, value);
        var enumValuesAsStrings = _.map(enumValues, function(enumValue) {
            return "'" + enumValue + "'";
        });
        var enumValuesAsString = enumValuesAsStrings.join(', ');
        exports.assert.assert(doesBelongToStringEnum, "Expected " + variableName + " to be one of: " + enumValuesAsString + ", encountered: " + value);
    },
    hasAtMostOneUniqueValue: function(value, errMsg) {
        exports.assert.assert(_.uniq(value).length <= 1, errMsg);
    },
    isNumber: function(variableName, value) {
        exports.assert.assert(_.isFinite(value), exports.assert.typeAssertionMessage(variableName, 'number', value));
    },
    isNumberOrBigNumber: function(variableName, value) {
        if (_.isFinite(value)) return;
        else exports.assert.assert(utils_1.BigNumber.isBigNumber(value), exports.assert.typeAssertionMessage(variableName, 'number or BigNumber', value));
    },
    isBoolean: function(variableName, value) {
        exports.assert.assert(_.isBoolean(value), exports.assert.typeAssertionMessage(variableName, 'boolean', value));
    },
    isWeb3Provider: function(variableName, value) {
        utils_1.logUtils.warn('DEPRECATED: Please use providerUtils.standardizeOrThrow() instead');
        var isWeb3Provider = _.isFunction(value.send) || _.isFunction(value.sendAsync);
        exports.assert.assert(isWeb3Provider, exports.assert.typeAssertionMessage(variableName, 'Provider', value));
    },
    doesConformToSchema: function(variableName, value, schema, subSchemas) {
        if (value === undefined) throw new Error(variableName + " can't be undefined");
        var schemaValidator = new json_schemas_1.SchemaValidator();
        if (subSchemas !== undefined) _.map(subSchemas, schemaValidator.addSchema.bind(schemaValidator));
        var validationResult = schemaValidator.validate(value, schema);
        var hasValidationErrors = validationResult.errors.length > 0;
        var msg = "Expected " + variableName + " to conform to schema " + schema.id + "\nEncountered: " + JSON.stringify(value, null, '\t') + "\nValidation errors: " + validationResult.errors.join(', ');
        exports.assert.assert(!hasValidationErrors, msg);
    },
    isWebUri: function(variableName, value) {
        var isValidUrl = validUrl.isWebUri(value) !== undefined;
        exports.assert.assert(isValidUrl, exports.assert.typeAssertionMessage(variableName, 'web uri', value));
    },
    isUri: function(variableName, value) {
        var isValidUri = validUrl.isUri(value) !== undefined;
        exports.assert.assert(isValidUri, exports.assert.typeAssertionMessage(variableName, 'uri', value));
    },
    isBlockParam: function(variableName, value) {
        if (Number.isInteger(value) && value >= 0) return;
        if (value === 'earliest' || value === 'latest' || value === 'pending') return;
        throw new Error(exports.assert.typeAssertionMessage(variableName, 'BlockParam', value));
    },
    isArray: function(variableName, value) {
        if (!Array.isArray(value)) throw new Error(exports.assert.typeAssertionMessage(variableName, 'Array', value));
    },
    assert: function(condition, message) {
        if (!condition) throw new Error(message);
    },
    typeAssertionMessage: function(variableName, type, value) {
        return "Expected " + variableName + " to be of type " + type + ", encountered: " + value;
    }
};

},{"@0x/json-schemas":"hY75Y","@0x/utils":"dgW7d","lodash":"3qBDj","valid-url":"k3ULq"}],"hY75Y":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var jsonschema_1 = require("jsonschema");
exports.ValidatorResult = jsonschema_1.ValidatorResult;
var schema_validator_1 = require("./schema_validator");
exports.SchemaValidator = schema_validator_1.SchemaValidator;
var schemas_1 = require("./schemas");
exports.schemas = schemas_1.schemas;

},{"jsonschema":"1FHqv","./schema_validator":"k1VsJ","./schemas":"918Lz"}],"1FHqv":[function(require,module,exports) {
'use strict';
var Validator = module.exports.Validator = require('./validator');
module.exports.ValidatorResult = require('./helpers').ValidatorResult;
module.exports.ValidatorResultError = require('./helpers').ValidatorResultError;
module.exports.ValidationError = require('./helpers').ValidationError;
module.exports.SchemaError = require('./helpers').SchemaError;
module.exports.SchemaScanResult = require('./scan').SchemaScanResult;
module.exports.scan = require('./scan').scan;
module.exports.validate = function(instance, schema, options) {
    var v = new Validator();
    return v.validate(instance, schema, options);
};

},{"./validator":"lAuUg","./helpers":"5kpID","./scan":"bHmlS"}],"lAuUg":[function(require,module,exports) {
'use strict';
var urilib = require('url');
var attribute = require('./attribute');
var helpers = require('./helpers');
var scanSchema = require('./scan').scan;
var ValidatorResult = helpers.ValidatorResult;
var ValidatorResultError = helpers.ValidatorResultError;
var SchemaError = helpers.SchemaError;
var SchemaContext = helpers.SchemaContext;
//var anonymousBase = 'vnd.jsonschema:///';
var anonymousBase = '/';
/**
 * Creates a new Validator object
 * @name Validator
 * @constructor
 */ var Validator = function Validator1() {
    // Allow a validator instance to override global custom formats or to have their
    // own custom formats.
    this.customFormats = Object.create(Validator1.prototype.customFormats);
    this.schemas = {};
    this.unresolvedRefs = [];
    // Use Object.create to make this extensible without Validator instances stepping on each other's toes.
    this.types = Object.create(types);
    this.attributes = Object.create(attribute.validators);
};
// Allow formats to be registered globally.
Validator.prototype.customFormats = {};
// Hint at the presence of a property
Validator.prototype.schemas = null;
Validator.prototype.types = null;
Validator.prototype.attributes = null;
Validator.prototype.unresolvedRefs = null;
/**
 * Adds a schema with a certain urn to the Validator instance.
 * @param schema
 * @param urn
 * @return {Object}
 */ Validator.prototype.addSchema = function addSchema(schema, base) {
    var self = this;
    if (!schema) return null;
    var scan = scanSchema(base || anonymousBase, schema);
    var ourUri = base || schema.$id || schema.id;
    for(var uri1 in scan.id)this.schemas[uri1] = scan.id[uri1];
    for(var uri1 in scan.ref)// If this schema is already defined, it will be filtered out by the next step
    this.unresolvedRefs.push(uri1);
    // Remove newly defined schemas from unresolvedRefs
    this.unresolvedRefs = this.unresolvedRefs.filter(function(uri) {
        return typeof self.schemas[uri] === 'undefined';
    });
    return this.schemas[ourUri];
};
Validator.prototype.addSubSchemaArray = function addSubSchemaArray(baseuri, schemas) {
    if (!Array.isArray(schemas)) return;
    for(var i = 0; i < schemas.length; i++)this.addSubSchema(baseuri, schemas[i]);
};
Validator.prototype.addSubSchemaObject = function addSubSchemaArray(baseuri, schemas) {
    if (!schemas || typeof schemas != 'object') return;
    for(var p in schemas)this.addSubSchema(baseuri, schemas[p]);
};
/**
 * Sets all the schemas of the Validator instance.
 * @param schemas
 */ Validator.prototype.setSchemas = function setSchemas(schemas) {
    this.schemas = schemas;
};
/**
 * Returns the schema of a certain urn
 * @param urn
 */ Validator.prototype.getSchema = function getSchema(urn) {
    return this.schemas[urn];
};
/**
 * Validates instance against the provided schema
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {Array}
 */ Validator.prototype.validate = function validate(instance, schema, options, ctx) {
    if (typeof schema !== 'boolean' && typeof schema !== 'object' || schema === null) throw new SchemaError('Expected `schema` to be an object or boolean');
    if (!options) options = {};
    // This section indexes subschemas in the provided schema, so they don't need to be added with Validator#addSchema
    // This will work so long as the function at uri.resolve() will resolve a relative URI to a relative URI
    var id = schema.$id || schema.id;
    var base = urilib.resolve(options.base || anonymousBase, id || '');
    if (!ctx) {
        ctx = new SchemaContext(schema, options, [], base, Object.create(this.schemas));
        if (!ctx.schemas[base]) ctx.schemas[base] = schema;
        var found = scanSchema(base, schema);
        for(var n in found.id){
            var sch = found.id[n];
            ctx.schemas[n] = sch;
        }
    }
    if (options.required && instance === undefined) {
        var result = new ValidatorResult(instance, schema, options, ctx);
        result.addError('is required, but is undefined');
        return result;
    }
    var result = this.validateSchema(instance, schema, options, ctx);
    if (!result) throw new Error('Result undefined');
    else if (options.throwAll && result.errors.length) throw new ValidatorResultError(result);
    return result;
};
/**
* @param Object schema
* @return mixed schema uri or false
*/ function shouldResolve(schema) {
    var ref = typeof schema === 'string' ? schema : schema.$ref;
    if (typeof ref == 'string') return ref;
    return false;
}
/**
 * Validates an instance against the schema (the actual work horse)
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @private
 * @return {ValidatorResult}
 */ Validator.prototype.validateSchema = function validateSchema(instance, schema, options, ctx) {
    var result = new ValidatorResult(instance, schema, options, ctx);
    // Support for the true/false schemas
    if (typeof schema === 'boolean') {
        if (schema === true) // `true` is always valid
        schema = {};
        else if (schema === false) // `false` is always invalid
        schema = {
            type: []
        };
    } else if (!schema) // This might be a string
    throw new Error("schema is undefined");
    if (schema['extends']) {
        if (Array.isArray(schema['extends'])) {
            var schemaobj = {
                schema: schema,
                ctx: ctx
            };
            schema['extends'].forEach(this.schemaTraverser.bind(this, schemaobj));
            schema = schemaobj.schema;
            schemaobj.schema = null;
            schemaobj.ctx = null;
            schemaobj = null;
        } else schema = helpers.deepMerge(schema, this.superResolve(schema['extends'], ctx));
    }
    // If passed a string argument, load that schema URI
    var switchSchema = shouldResolve(schema);
    if (switchSchema) {
        var resolved = this.resolve(schema, switchSchema, ctx);
        var subctx = new SchemaContext(resolved.subschema, options, ctx.path, resolved.switchSchema, ctx.schemas);
        return this.validateSchema(instance, resolved.subschema, options, subctx);
    }
    var skipAttributes = options && options.skipAttributes || [];
    // Validate each schema attribute against the instance
    for(var key in schema)if (!attribute.ignoreProperties[key] && skipAttributes.indexOf(key) < 0) {
        var validatorErr = null;
        var validator = this.attributes[key];
        if (validator) validatorErr = validator.call(this, instance, schema, options, ctx);
        else if (options.allowUnknownAttributes === false) // This represents an error with the schema itself, not an invalid instance
        throw new SchemaError("Unsupported attribute: " + key, schema);
        if (validatorErr) result.importErrors(validatorErr);
    }
    if (typeof options.rewrite == 'function') {
        var value = options.rewrite.call(this, instance, schema, options, ctx);
        result.instance = value;
    }
    return result;
};
/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/ Validator.prototype.schemaTraverser = function schemaTraverser(schemaobj, s) {
    schemaobj.schema = helpers.deepMerge(schemaobj.schema, this.superResolve(s, schemaobj.ctx));
};
/**
* @private
* @param Object schema
* @param SchemaContext ctx
* @returns Object schema or resolved schema
*/ Validator.prototype.superResolve = function superResolve(schema, ctx) {
    var ref = shouldResolve(schema);
    if (ref) return this.resolve(schema, ref, ctx).subschema;
    return schema;
};
/**
* @private
* @param Object schema
* @param Object switchSchema
* @param SchemaContext ctx
* @return Object resolved schemas {subschema:String, switchSchema: String}
* @throws SchemaError
*/ Validator.prototype.resolve = function resolve(schema, switchSchema, ctx) {
    switchSchema = ctx.resolve(switchSchema);
    // First see if the schema exists under the provided URI
    if (ctx.schemas[switchSchema]) return {
        subschema: ctx.schemas[switchSchema],
        switchSchema: switchSchema
    };
    // Else try walking the property pointer
    var parsed = urilib.parse(switchSchema);
    var fragment = parsed && parsed.hash;
    var document = fragment && fragment.length && switchSchema.substr(0, switchSchema.length - fragment.length);
    if (!document || !ctx.schemas[document]) throw new SchemaError("no such schema <" + switchSchema + ">", schema);
    var subschema = helpers.objectGetPath(ctx.schemas[document], fragment.substr(1));
    if (subschema === undefined) throw new SchemaError("no such schema " + fragment + " located in <" + document + ">", schema);
    return {
        subschema: subschema,
        switchSchema: switchSchema
    };
};
/**
 * Tests whether the instance if of a certain type.
 * @private
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @param type
 * @return {boolean}
 */ Validator.prototype.testType = function validateType(instance, schema, options, ctx, type) {
    if (type === undefined) return;
    else if (type === null) throw new SchemaError('Unexpected null in "type" keyword');
    if (typeof this.types[type] == 'function') return this.types[type].call(this, instance);
    if (type && typeof type == 'object') {
        var res = this.validateSchema(instance, type, options, ctx);
        return res === undefined || !(res && res.errors.length);
    }
    // Undefined or properties not on the list are acceptable, same as not being defined
    return true;
};
var types = Validator.prototype.types = {};
types.string = function testString(instance) {
    return typeof instance == 'string';
};
types.number = function testNumber(instance) {
    // isFinite returns false for NaN, Infinity, and -Infinity
    return typeof instance == 'number' && isFinite(instance);
};
types.integer = function testInteger(instance) {
    return typeof instance == 'number' && instance % 1 === 0;
};
types.boolean = function testBoolean(instance) {
    return typeof instance == 'boolean';
};
types.array = function testArray(instance) {
    return Array.isArray(instance);
};
types['null'] = function testNull(instance) {
    return instance === null;
};
types.date = function testDate(instance) {
    return instance instanceof Date;
};
types.any = function testAny(instance) {
    return true;
};
types.object = function testObject(instance) {
    // TODO: fix this - see #15
    return instance && typeof instance === 'object' && !Array.isArray(instance) && !(instance instanceof Date);
};
module.exports = Validator;

},{"url":"7qjc7","./attribute":"iVdIg","./helpers":"5kpID","./scan":"bHmlS"}],"iVdIg":[function(require,module,exports) {
'use strict';
var helpers = require('./helpers');
/** @type ValidatorResult */ var ValidatorResult = helpers.ValidatorResult;
/** @type SchemaError */ var SchemaError = helpers.SchemaError;
var attribute = {};
attribute.ignoreProperties = {
    // informative properties
    'id': true,
    'default': true,
    'description': true,
    'title': true,
    // arguments to other properties
    'additionalItems': true,
    'then': true,
    'else': true,
    // special-handled properties
    '$schema': true,
    '$ref': true,
    'extends': true
};
/**
 * @name validators
 */ var validators = attribute.validators = {};
/**
 * Validates whether the instance if of a certain type
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */ validators.type = function validateType(instance, schema, options, ctx) {
    // Ignore undefined instances
    if (instance === undefined) return null;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var types = Array.isArray(schema.type) ? schema.type : [
        schema.type
    ];
    if (!types.some(this.testType.bind(this, instance, schema, options, ctx))) {
        var list = types.map(function(v) {
            if (!v) return;
            var id = v.$id || v.id;
            return id ? '<' + id + '>' : v + '';
        });
        result.addError({
            name: 'type',
            argument: list,
            message: "is not of a type(s) " + list
        });
    }
    return result;
};
function testSchemaNoThrow(instance, options, ctx, callback, schema) {
    var throwError = options.throwError;
    var throwAll = options.throwAll;
    options.throwError = false;
    options.throwAll = false;
    var res = this.validateSchema(instance, schema, options, ctx);
    options.throwError = throwError;
    options.throwAll = throwAll;
    if (!res.valid && callback instanceof Function) callback(res);
    return res.valid;
}
/**
 * Validates whether the instance matches some of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {ValidatorResult|null}
 */ validators.anyOf = function validateAnyOf(instance, schema, options, ctx) {
    // Ignore undefined instances
    if (instance === undefined) return null;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var inner = new ValidatorResult(instance, schema, options, ctx);
    if (!Array.isArray(schema.anyOf)) throw new SchemaError("anyOf must be an array");
    if (!schema.anyOf.some(testSchemaNoThrow.bind(this, instance, options, ctx, function(res) {
        inner.importErrors(res);
    }))) {
        var list = schema.anyOf.map(function(v, i) {
            var id = v.$id || v.id;
            if (id) return '<' + id + '>';
            return v.title && JSON.stringify(v.title) || v['$ref'] && '<' + v['$ref'] + '>' || '[subschema ' + i + ']';
        });
        if (options.nestedErrors) result.importErrors(inner);
        result.addError({
            name: 'anyOf',
            argument: list,
            message: "is not any of " + list.join(',')
        });
    }
    return result;
};
/**
 * Validates whether the instance matches every given schema
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */ validators.allOf = function validateAllOf(instance, schema, options, ctx) {
    // Ignore undefined instances
    if (instance === undefined) return null;
    if (!Array.isArray(schema.allOf)) throw new SchemaError("allOf must be an array");
    var result = new ValidatorResult(instance, schema, options, ctx);
    var self = this;
    schema.allOf.forEach(function(v, i) {
        var valid = self.validateSchema(instance, v, options, ctx);
        if (!valid.valid) {
            var id = v.$id || v.id;
            var msg = id || v.title && JSON.stringify(v.title) || v['$ref'] && '<' + v['$ref'] + '>' || '[subschema ' + i + ']';
            result.addError({
                name: 'allOf',
                argument: {
                    id: msg,
                    length: valid.errors.length,
                    valid: valid
                },
                message: 'does not match allOf schema ' + msg + ' with ' + valid.errors.length + ' error[s]:'
            });
            result.importErrors(valid);
        }
    });
    return result;
};
/**
 * Validates whether the instance matches exactly one of the given schemas
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */ validators.oneOf = function validateOneOf(instance, schema, options, ctx) {
    // Ignore undefined instances
    if (instance === undefined) return null;
    if (!Array.isArray(schema.oneOf)) throw new SchemaError("oneOf must be an array");
    var result = new ValidatorResult(instance, schema, options, ctx);
    var inner = new ValidatorResult(instance, schema, options, ctx);
    var count = schema.oneOf.filter(testSchemaNoThrow.bind(this, instance, options, ctx, function(res) {
        inner.importErrors(res);
    })).length;
    var list = schema.oneOf.map(function(v, i) {
        var id = v.$id || v.id;
        return id || v.title && JSON.stringify(v.title) || v['$ref'] && '<' + v['$ref'] + '>' || '[subschema ' + i + ']';
    });
    if (count !== 1) {
        if (options.nestedErrors) result.importErrors(inner);
        result.addError({
            name: 'oneOf',
            argument: list,
            message: "is not exactly one from " + list.join(',')
        });
    }
    return result;
};
/**
 * Validates "then" or "else" depending on the result of validating "if"
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null}
 */ validators.if = function validateIf(instance, schema, options, ctx) {
    // Ignore undefined instances
    if (instance === undefined) return null;
    if (!helpers.isSchema(schema.if)) throw new Error('Expected "if" keyword to be a schema');
    var ifValid = testSchemaNoThrow.call(this, instance, options, ctx, null, schema.if);
    var result = new ValidatorResult(instance, schema, options, ctx);
    var res;
    if (ifValid) {
        if (schema.then === undefined) return;
        if (!helpers.isSchema(schema.then)) throw new Error('Expected "then" keyword to be a schema');
        res = this.validateSchema(instance, schema.then, options, ctx.makeChild(schema.then));
        result.importErrors(res);
    } else {
        if (schema.else === undefined) return;
        if (!helpers.isSchema(schema.else)) throw new Error('Expected "else" keyword to be a schema');
        res = this.validateSchema(instance, schema.else, options, ctx.makeChild(schema.else));
        result.importErrors(res);
    }
    return result;
};
function getEnumerableProperty(object, key) {
    // Determine if `key` shows up in `for(var key in object)`
    // First test Object.hasOwnProperty.call as an optimization: that guarantees it does
    if (Object.hasOwnProperty.call(object, key)) return object[key];
    // Test `key in object` as an optimization; false means it won't
    if (!(key in object)) return;
    while(object = Object.getPrototypeOf(object)){
        if (Object.propertyIsEnumerable.call(object, key)) return object[key];
    }
}
/**
 * Validates propertyNames
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */ validators.propertyNames = function validatePropertyNames(instance, schema, options, ctx) {
    if (!this.types.object(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var subschema = schema.propertyNames !== undefined ? schema.propertyNames : {};
    if (!helpers.isSchema(subschema)) throw new SchemaError('Expected "propertyNames" to be a schema (object or boolean)');
    for(var property in instance)if (getEnumerableProperty(instance, property) !== undefined) {
        var res = this.validateSchema(property, subschema, options, ctx.makeChild(subschema));
        result.importErrors(res);
    }
    return result;
};
/**
 * Validates properties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */ validators.properties = function validateProperties(instance, schema, options, ctx) {
    if (!this.types.object(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var properties = schema.properties || {};
    for(var property in properties){
        var subschema = properties[property];
        if (subschema === undefined) continue;
        else if (subschema === null) throw new SchemaError('Unexpected null, expected schema in "properties"');
        if (typeof options.preValidateProperty == 'function') options.preValidateProperty(instance, property, subschema, options, ctx);
        var prop = getEnumerableProperty(instance, property);
        var res = this.validateSchema(prop, subschema, options, ctx.makeChild(subschema, property));
        if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
        result.importErrors(res);
    }
    return result;
};
/**
 * Test a specific property within in instance against the additionalProperties schema attribute
 * This ignores properties with definitions in the properties schema attribute, but no other attributes.
 * If too many more types of property-existence tests pop up they may need their own class of tests (like `type` has)
 * @private
 * @return {boolean}
 */ function testAdditionalProperty(instance, schema, options, ctx, property, result) {
    if (!this.types.object(instance)) return;
    if (schema.properties && schema.properties[property] !== undefined) return;
    if (schema.additionalProperties === false) result.addError({
        name: 'additionalProperties',
        argument: property,
        message: "is not allowed to have the additional property " + JSON.stringify(property)
    });
    else {
        var additionalProperties = schema.additionalProperties || {};
        if (typeof options.preValidateProperty == 'function') options.preValidateProperty(instance, property, additionalProperties, options, ctx);
        var res = this.validateSchema(instance[property], additionalProperties, options, ctx.makeChild(additionalProperties, property));
        if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
        result.importErrors(res);
    }
}
/**
 * Validates patternProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */ validators.patternProperties = function validatePatternProperties(instance, schema, options, ctx) {
    if (!this.types.object(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var patternProperties = schema.patternProperties || {};
    for(var property in instance){
        var test = true;
        for(var pattern in patternProperties){
            var subschema = patternProperties[pattern];
            if (subschema === undefined) continue;
            else if (subschema === null) throw new SchemaError('Unexpected null, expected schema in "patternProperties"');
            try {
                var regexp = new RegExp(pattern, 'u');
            } catch (_e) {
                // In the event the stricter handling causes an error, fall back on the forgiving handling
                // DEPRECATED
                regexp = new RegExp(pattern);
            }
            if (!regexp.test(property)) continue;
            test = false;
            if (typeof options.preValidateProperty == 'function') options.preValidateProperty(instance, property, subschema, options, ctx);
            var res = this.validateSchema(instance[property], subschema, options, ctx.makeChild(subschema, property));
            if (res.instance !== result.instance[property]) result.instance[property] = res.instance;
            result.importErrors(res);
        }
        if (test) testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
    }
    return result;
};
/**
 * Validates additionalProperties
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */ validators.additionalProperties = function validateAdditionalProperties(instance, schema, options, ctx) {
    if (!this.types.object(instance)) return;
    // if patternProperties is defined then we'll test when that one is called instead
    if (schema.patternProperties) return null;
    var result = new ValidatorResult(instance, schema, options, ctx);
    for(var property in instance)testAdditionalProperty.call(this, instance, schema, options, ctx, property, result);
    return result;
};
/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.minProperties = function validateMinProperties(instance, schema, options, ctx) {
    if (!this.types.object(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var keys = Object.keys(instance);
    if (!(keys.length >= schema.minProperties)) result.addError({
        name: 'minProperties',
        argument: schema.minProperties,
        message: "does not meet minimum property length of " + schema.minProperties
    });
    return result;
};
/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.maxProperties = function validateMaxProperties(instance, schema, options, ctx) {
    if (!this.types.object(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var keys = Object.keys(instance);
    if (!(keys.length <= schema.maxProperties)) result.addError({
        name: 'maxProperties',
        argument: schema.maxProperties,
        message: "does not meet maximum property length of " + schema.maxProperties
    });
    return result;
};
/**
 * Validates items when instance is an array
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {String|null|ValidatorResult}
 */ validators.items = function validateItems(instance, schema, options, ctx) {
    var self = this;
    if (!this.types.array(instance)) return;
    if (!schema.items) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    instance.every(function(value, i) {
        var items = Array.isArray(schema.items) ? schema.items[i] || schema.additionalItems : schema.items;
        if (items === undefined) return true;
        if (items === false) {
            result.addError({
                name: 'items',
                message: "additionalItems not permitted"
            });
            return false;
        }
        var res = self.validateSchema(value, items, options, ctx.makeChild(items, i));
        if (res.instance !== result.instance[i]) result.instance[i] = res.instance;
        result.importErrors(res);
        return true;
    });
    return result;
};
/**
 * Validates minimum and exclusiveMinimum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.minimum = function validateMinimum(instance, schema, options, ctx) {
    if (!this.types.number(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (schema.exclusiveMinimum && schema.exclusiveMinimum === true) {
        if (!(instance > schema.minimum)) result.addError({
            name: 'minimum',
            argument: schema.minimum,
            message: "must be greater than " + schema.minimum
        });
    } else if (!(instance >= schema.minimum)) result.addError({
        name: 'minimum',
        argument: schema.minimum,
        message: "must be greater than or equal to " + schema.minimum
    });
    return result;
};
/**
 * Validates maximum and exclusiveMaximum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.maximum = function validateMaximum(instance, schema, options, ctx) {
    if (!this.types.number(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (schema.exclusiveMaximum && schema.exclusiveMaximum === true) {
        if (!(instance < schema.maximum)) result.addError({
            name: 'maximum',
            argument: schema.maximum,
            message: "must be less than " + schema.maximum
        });
    } else if (!(instance <= schema.maximum)) result.addError({
        name: 'maximum',
        argument: schema.maximum,
        message: "must be less than or equal to " + schema.maximum
    });
    return result;
};
/**
 * Validates the number form of exclusiveMinimum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.exclusiveMinimum = function validateExclusiveMinimum(instance, schema, options, ctx) {
    // Support the boolean form of exclusiveMinimum, which is handled by the "minimum" keyword.
    if (typeof schema.exclusiveMaximum === 'boolean') return;
    if (!this.types.number(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var valid = instance > schema.exclusiveMinimum;
    if (!valid) result.addError({
        name: 'exclusiveMinimum',
        argument: schema.exclusiveMinimum,
        message: "must be strictly greater than " + schema.exclusiveMinimum
    });
    return result;
};
/**
 * Validates the number form of exclusiveMaximum when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.exclusiveMaximum = function validateExclusiveMaximum(instance, schema, options, ctx) {
    // Support the boolean form of exclusiveMaximum, which is handled by the "maximum" keyword.
    if (typeof schema.exclusiveMaximum === 'boolean') return;
    if (!this.types.number(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var valid = instance < schema.exclusiveMaximum;
    if (!valid) result.addError({
        name: 'exclusiveMaximum',
        argument: schema.exclusiveMaximum,
        message: "must be strictly less than " + schema.exclusiveMaximum
    });
    return result;
};
/**
 * Perform validation for multipleOf and divisibleBy, which are essentially the same.
 * @param instance
 * @param schema
 * @param validationType
 * @param errorMessage
 * @returns {String|null}
 */ var validateMultipleOfOrDivisbleBy = function validateMultipleOfOrDivisbleBy(instance, schema, options, ctx, validationType, errorMessage) {
    if (!this.types.number(instance)) return;
    var validationArgument = schema[validationType];
    if (validationArgument == 0) throw new SchemaError(validationType + " cannot be zero");
    var result = new ValidatorResult(instance, schema, options, ctx);
    var instanceDecimals = helpers.getDecimalPlaces(instance);
    var divisorDecimals = helpers.getDecimalPlaces(validationArgument);
    var maxDecimals = Math.max(instanceDecimals, divisorDecimals);
    var multiplier = Math.pow(10, maxDecimals);
    if (Math.round(instance * multiplier) % Math.round(validationArgument * multiplier) !== 0) result.addError({
        name: validationType,
        argument: validationArgument,
        message: errorMessage + JSON.stringify(validationArgument)
    });
    return result;
};
/**
 * Validates divisibleBy when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.multipleOf = function validateMultipleOf(instance, schema, options, ctx) {
    return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "multipleOf", "is not a multiple of (divisible by) ");
};
/**
 * Validates multipleOf when the type of the instance value is a number.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.divisibleBy = function validateDivisibleBy(instance, schema, options, ctx) {
    return validateMultipleOfOrDivisbleBy.call(this, instance, schema, options, ctx, "divisibleBy", "is not divisible by (multiple of) ");
};
/**
 * Validates whether the instance value is present.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.required = function validateRequired(instance, schema, options, ctx) {
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (instance === undefined && schema.required === true) // A boolean form is implemented for reverse-compatibility with schemas written against older drafts
    result.addError({
        name: 'required',
        message: "is required"
    });
    else if (this.types.object(instance) && Array.isArray(schema.required)) schema.required.forEach(function(n) {
        if (getEnumerableProperty(instance, n) === undefined) result.addError({
            name: 'required',
            argument: n,
            message: "requires property " + JSON.stringify(n)
        });
    });
    return result;
};
/**
 * Validates whether the instance value matches the regular expression, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.pattern = function validatePattern(instance, schema, options, ctx) {
    if (!this.types.string(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var pattern = schema.pattern;
    try {
        var regexp = new RegExp(pattern, 'u');
    } catch (_e) {
        // In the event the stricter handling causes an error, fall back on the forgiving handling
        // DEPRECATED
        regexp = new RegExp(pattern);
    }
    if (!instance.match(regexp)) result.addError({
        name: 'pattern',
        argument: schema.pattern,
        message: "does not match pattern " + JSON.stringify(schema.pattern.toString())
    });
    return result;
};
/**
 * Validates whether the instance value is of a certain defined format or a custom
 * format.
 * The following formats are supported for string types:
 *   - date-time
 *   - date
 *   - time
 *   - ip-address
 *   - ipv6
 *   - uri
 *   - color
 *   - host-name
 *   - alpha
 *   - alpha-numeric
 *   - utc-millisec
 * @param instance
 * @param schema
 * @param [options]
 * @param [ctx]
 * @return {String|null}
 */ validators.format = function validateFormat(instance, schema, options, ctx) {
    if (instance === undefined) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (!result.disableFormat && !helpers.isFormat(instance, schema.format, this)) result.addError({
        name: 'format',
        argument: schema.format,
        message: "does not conform to the " + JSON.stringify(schema.format) + " format"
    });
    return result;
};
/**
 * Validates whether the instance value is at least of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.minLength = function validateMinLength(instance, schema, options, ctx) {
    if (!this.types.string(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var hsp = instance.match(/[\uDC00-\uDFFF]/g);
    var length = instance.length - (hsp ? hsp.length : 0);
    if (!(length >= schema.minLength)) result.addError({
        name: 'minLength',
        argument: schema.minLength,
        message: "does not meet minimum length of " + schema.minLength
    });
    return result;
};
/**
 * Validates whether the instance value is at most of a certain length, when the instance value is a string.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.maxLength = function validateMaxLength(instance, schema, options, ctx) {
    if (!this.types.string(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    // TODO if this was already computed in "minLength", use that value instead of re-computing
    var hsp = instance.match(/[\uDC00-\uDFFF]/g);
    var length = instance.length - (hsp ? hsp.length : 0);
    if (!(length <= schema.maxLength)) result.addError({
        name: 'maxLength',
        argument: schema.maxLength,
        message: "does not meet maximum length of " + schema.maxLength
    });
    return result;
};
/**
 * Validates whether instance contains at least a minimum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.minItems = function validateMinItems(instance, schema, options, ctx) {
    if (!this.types.array(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (!(instance.length >= schema.minItems)) result.addError({
        name: 'minItems',
        argument: schema.minItems,
        message: "does not meet minimum length of " + schema.minItems
    });
    return result;
};
/**
 * Validates whether instance contains no more than a maximum number of items, when the instance is an Array.
 * @param instance
 * @param schema
 * @return {String|null}
 */ validators.maxItems = function validateMaxItems(instance, schema, options, ctx) {
    if (!this.types.array(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (!(instance.length <= schema.maxItems)) result.addError({
        name: 'maxItems',
        argument: schema.maxItems,
        message: "does not meet maximum length of " + schema.maxItems
    });
    return result;
};
/**
 * Deep compares arrays for duplicates
 * @param v
 * @param i
 * @param a
 * @private
 * @return {boolean}
 */ function testArrays(v, i, a) {
    var j, len = a.length;
    for(j = i + 1; j < len; j++){
        if (helpers.deepCompareStrict(v, a[j])) return false;
    }
    return true;
}
/**
 * Validates whether there are no duplicates, when the instance is an Array.
 * @param instance
 * @return {String|null}
 */ validators.uniqueItems = function validateUniqueItems(instance, schema, options, ctx) {
    if (schema.uniqueItems !== true) return;
    if (!this.types.array(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (!instance.every(testArrays)) result.addError({
        name: 'uniqueItems',
        message: "contains duplicate item"
    });
    return result;
};
/**
 * Validate for the presence of dependency properties, if the instance is an object.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */ validators.dependencies = function validateDependencies(instance, schema, options, ctx) {
    if (!this.types.object(instance)) return;
    var result = new ValidatorResult(instance, schema, options, ctx);
    for(var property in schema.dependencies){
        if (instance[property] === undefined) continue;
        var dep = schema.dependencies[property];
        var childContext = ctx.makeChild(dep, property);
        if (typeof dep == 'string') dep = [
            dep
        ];
        if (Array.isArray(dep)) dep.forEach(function(prop) {
            if (instance[prop] === undefined) result.addError({
                // FIXME there's two different "dependencies" errors here with slightly different outputs
                // Can we make these the same? Or should we create different error types?
                name: 'dependencies',
                argument: childContext.propertyPath,
                message: "property " + prop + " not found, required by " + childContext.propertyPath
            });
        });
        else {
            var res = this.validateSchema(instance, dep, options, childContext);
            if (result.instance !== res.instance) result.instance = res.instance;
            if (res && res.errors.length) {
                result.addError({
                    name: 'dependencies',
                    argument: childContext.propertyPath,
                    message: "does not meet dependency required by " + childContext.propertyPath
                });
                result.importErrors(res);
            }
        }
    }
    return result;
};
/**
 * Validates whether the instance value is one of the enumerated values.
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */ validators['enum'] = function validateEnum(instance, schema, options, ctx) {
    if (instance === undefined) return null;
    if (!Array.isArray(schema['enum'])) throw new SchemaError("enum expects an array", schema);
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (!schema['enum'].some(helpers.deepCompareStrict.bind(null, instance))) result.addError({
        name: 'enum',
        argument: schema['enum'],
        message: "is not one of enum values: " + schema['enum'].map(String).join(',')
    });
    return result;
};
/**
 * Validates whether the instance exactly matches a given value
 *
 * @param instance
 * @param schema
 * @return {ValidatorResult|null}
 */ validators['const'] = function validateEnum(instance, schema, options, ctx) {
    if (instance === undefined) return null;
    var result = new ValidatorResult(instance, schema, options, ctx);
    if (!helpers.deepCompareStrict(schema['const'], instance)) result.addError({
        name: 'const',
        argument: schema['const'],
        message: "does not exactly match expected constant: " + schema['const']
    });
    return result;
};
/**
 * Validates whether the instance if of a prohibited type.
 * @param instance
 * @param schema
 * @param options
 * @param ctx
 * @return {null|ValidatorResult}
 */ validators.not = validators.disallow = function validateNot(instance, schema, options, ctx) {
    var self = this;
    if (instance === undefined) return null;
    var result = new ValidatorResult(instance, schema, options, ctx);
    var notTypes = schema.not || schema.disallow;
    if (!notTypes) return null;
    if (!Array.isArray(notTypes)) notTypes = [
        notTypes
    ];
    notTypes.forEach(function(type) {
        if (self.testType(instance, schema, options, ctx, type)) {
            var id = type && (type.$id || type.id);
            var schemaId = id || type;
            result.addError({
                name: 'not',
                argument: schemaId,
                message: "is of prohibited type " + schemaId
            });
        }
    });
    return result;
};
module.exports = attribute;

},{"./helpers":"5kpID"}],"5kpID":[function(require,module,exports) {
'use strict';
var uri = require('url');
var ValidationError = exports.ValidationError = function ValidationError(message, instance, schema, path, name, argument) {
    if (Array.isArray(path)) {
        this.path = path;
        this.property = path.reduce(function(sum, item) {
            return sum + makeSuffix(item);
        }, 'instance');
    } else if (path !== undefined) this.property = path;
    if (message) this.message = message;
    if (schema) {
        var id = schema.$id || schema.id;
        this.schema = id || schema;
    }
    if (instance !== undefined) this.instance = instance;
    this.name = name;
    this.argument = argument;
    this.stack = this.toString();
};
ValidationError.prototype.toString = function toString() {
    return this.property + ' ' + this.message;
};
var ValidatorResult = exports.ValidatorResult = function ValidatorResult(instance, schema, options, ctx) {
    this.instance = instance;
    this.schema = schema;
    this.options = options;
    this.path = ctx.path;
    this.propertyPath = ctx.propertyPath;
    this.errors = [];
    this.throwError = options && options.throwError;
    this.throwFirst = options && options.throwFirst;
    this.throwAll = options && options.throwAll;
    this.disableFormat = options && options.disableFormat === true;
};
ValidatorResult.prototype.addError = function addError(detail) {
    var err;
    if (typeof detail == 'string') err = new ValidationError(detail, this.instance, this.schema, this.path);
    else {
        if (!detail) throw new Error('Missing error detail');
        if (!detail.message) throw new Error('Missing error message');
        if (!detail.name) throw new Error('Missing validator type');
        err = new ValidationError(detail.message, this.instance, this.schema, this.path, detail.name, detail.argument);
    }
    this.errors.push(err);
    if (this.throwFirst) throw new ValidatorResultError(this);
    else if (this.throwError) throw err;
    return err;
};
ValidatorResult.prototype.importErrors = function importErrors(res) {
    if (typeof res == 'string' || res && res.validatorType) this.addError(res);
    else if (res && res.errors) Array.prototype.push.apply(this.errors, res.errors);
};
function stringizer(v, i) {
    return i + ': ' + v.toString() + '\n';
}
ValidatorResult.prototype.toString = function toString(res) {
    return this.errors.map(stringizer).join('');
};
Object.defineProperty(ValidatorResult.prototype, "valid", {
    get: function() {
        return !this.errors.length;
    }
});
module.exports.ValidatorResultError = ValidatorResultError;
function ValidatorResultError(result) {
    if (Error.captureStackTrace) Error.captureStackTrace(this, ValidatorResultError);
    this.instance = result.instance;
    this.schema = result.schema;
    this.options = result.options;
    this.errors = result.errors;
}
ValidatorResultError.prototype = new Error();
ValidatorResultError.prototype.constructor = ValidatorResultError;
ValidatorResultError.prototype.name = "Validation Error";
/**
 * Describes a problem with a Schema which prevents validation of an instance
 * @name SchemaError
 * @constructor
 */ var SchemaError = exports.SchemaError = function SchemaError1(msg, schema) {
    this.message = msg;
    this.schema = schema;
    Error.call(this, msg);
    Error.captureStackTrace(this, SchemaError1);
};
SchemaError.prototype = Object.create(Error.prototype, {
    constructor: {
        value: SchemaError,
        enumerable: false
    },
    name: {
        value: 'SchemaError',
        enumerable: false
    }
});
var SchemaContext = exports.SchemaContext = function SchemaContext(schema, options, path, base, schemas) {
    this.schema = schema;
    this.options = options;
    if (Array.isArray(path)) {
        this.path = path;
        this.propertyPath = path.reduce(function(sum, item) {
            return sum + makeSuffix(item);
        }, 'instance');
    } else this.propertyPath = path;
    this.base = base;
    this.schemas = schemas;
};
SchemaContext.prototype.resolve = function resolve(target) {
    return uri.resolve(this.base, target);
};
SchemaContext.prototype.makeChild = function makeChild(schema, propertyName) {
    var path = propertyName === undefined ? this.path : this.path.concat([
        propertyName
    ]);
    var id = schema.$id || schema.id;
    var base = uri.resolve(this.base, id || '');
    var ctx = new SchemaContext(schema, this.options, path, base, Object.create(this.schemas));
    if (id && !ctx.schemas[base]) ctx.schemas[base] = schema;
    return ctx;
};
var FORMAT_REGEXPS = exports.FORMAT_REGEXPS = {
    'date-time': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])[tT ](2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])(\.\d+)?([zZ]|[+-]([0-5][0-9]):(60|[0-5][0-9]))$/,
    'date': /^\d{4}-(?:0[0-9]{1}|1[0-2]{1})-(3[01]|0[1-9]|[12][0-9])$/,
    'time': /^(2[0-4]|[01][0-9]):([0-5][0-9]):(60|[0-5][0-9])$/,
    'email': /^(?:[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+\.)*[\w\!\#\$\%\&\'\*\+\-\/\=\?\^\`\{\|\}\~]+@(?:(?:(?:[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!\.)){0,61}[a-zA-Z0-9]?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9\-](?!$)){0,61}[a-zA-Z0-9]?)|(?:\[(?:(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\.){3}(?:[01]?\d{1,2}|2[0-4]\d|25[0-5])\]))$/,
    'ip-address': /^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/,
    'ipv6': /^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$/,
    // TODO: A more accurate regular expression for "uri" goes:
    // [A-Za-z][+\-.0-9A-Za-z]*:((/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?)?#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])|/?%[0-9A-Fa-f]{2}|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*(#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|/(/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?)?
    'uri': /^[a-zA-Z][a-zA-Z0-9+-.]*:[^\s]*$/,
    'uri-reference': /^(((([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:?)?)|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?)?))#(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|(([A-Za-z][+\-.0-9A-Za-z]*)?%[0-9A-Fa-f]{2}|[!$&-.0-9;=@_~]|[A-Za-z][+\-.0-9A-Za-z]*[!$&-*,;=@_~])(%[0-9A-Fa-f]{2}|[!$&-.0-9;=@-Z_a-z~])*((([/?](%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?#|[/?])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*)?|([A-Za-z][+\-.0-9A-Za-z]*(:%[0-9A-Fa-f]{2}|:[!$&-.0-;=?-Z_a-z~]|[/?])|\?)(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|([A-Za-z][+\-.0-9A-Za-z]*:)?\/((%[0-9A-Fa-f]{2}|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)(:\d*)?[/?]|[!$&-.0-;=?-Z_a-z~])(%[0-9A-Fa-f]{2}|[!$&-;=?-Z_a-z~])*|\/((%[0-9A-Fa-f]{2}|[!$&-.0-9;=A-Z_a-z~])+(:\d*)?|(\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?:\d*|\[(([Vv][0-9A-Fa-f]+\.[!$&-.0-;=A-Z_a-z~]+)?|[.0-:A-Fa-f]+)\])?)?|[A-Za-z][+\-.0-9A-Za-z]*:?)?$/,
    'color': /^(#?([0-9A-Fa-f]{3}){1,2}\b|aqua|black|blue|fuchsia|gray|green|lime|maroon|navy|olive|orange|purple|red|silver|teal|white|yellow|(rgb\(\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*,\s*\b([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\b\s*\))|(rgb\(\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*,\s*(\d?\d%|100%)+\s*\)))$/,
    // hostname regex from: http://stackoverflow.com/a/1420225/5628
    'hostname': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
    'host-name': /^(?=.{1,255}$)[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?(?:\.[0-9A-Za-z](?:(?:[0-9A-Za-z]|-){0,61}[0-9A-Za-z])?)*\.?$/,
    'alpha': /^[a-zA-Z]+$/,
    'alphanumeric': /^[a-zA-Z0-9]+$/,
    'utc-millisec': function(input) {
        return typeof input === 'string' && parseFloat(input) === parseInt(input, 10) && !isNaN(input);
    },
    'regex': function(input) {
        var result = true;
        try {
            new RegExp(input);
        } catch (e) {
            result = false;
        }
        return result;
    },
    'style': /\s*(.+?):\s*([^;]+);?/,
    'phone': /^\+(?:[0-9] ?){6,14}[0-9]$/
};
FORMAT_REGEXPS.regexp = FORMAT_REGEXPS.regex;
FORMAT_REGEXPS.pattern = FORMAT_REGEXPS.regex;
FORMAT_REGEXPS.ipv4 = FORMAT_REGEXPS['ip-address'];
exports.isFormat = function isFormat(input, format, validator) {
    if (typeof input === 'string' && FORMAT_REGEXPS[format] !== undefined) {
        if (FORMAT_REGEXPS[format] instanceof RegExp) return FORMAT_REGEXPS[format].test(input);
        if (typeof FORMAT_REGEXPS[format] === 'function') return FORMAT_REGEXPS[format](input);
    } else if (validator && validator.customFormats && typeof validator.customFormats[format] === 'function') return validator.customFormats[format](input);
    return true;
};
var makeSuffix = exports.makeSuffix = function makeSuffix(key) {
    key = key.toString();
    // This function could be capable of outputting valid a ECMAScript string, but the
    // resulting code for testing which form to use would be tens of thousands of characters long
    // That means this will use the name form for some illegal forms
    if (!key.match(/[.\s\[\]]/) && !key.match(/^[\d]/)) return '.' + key;
    if (key.match(/^\d+$/)) return '[' + key + ']';
    return '[' + JSON.stringify(key) + ']';
};
exports.deepCompareStrict = function deepCompareStrict(a, b) {
    if (typeof a !== typeof b) return false;
    if (Array.isArray(a)) {
        if (!Array.isArray(b)) return false;
        if (a.length !== b.length) return false;
        return a.every(function(v, i) {
            return deepCompareStrict(a[i], b[i]);
        });
    }
    if (typeof a === 'object') {
        if (!a || !b) return a === b;
        var aKeys = Object.keys(a);
        var bKeys = Object.keys(b);
        if (aKeys.length !== bKeys.length) return false;
        return aKeys.every(function(v) {
            return deepCompareStrict(a[v], b[v]);
        });
    }
    return a === b;
};
function deepMerger(target, dst, e, i) {
    if (typeof e === 'object') dst[i] = deepMerge(target[i], e);
    else if (target.indexOf(e) === -1) dst.push(e);
}
function copyist(src, dst, key) {
    dst[key] = src[key];
}
function copyistWithDeepMerge(target, src, dst, key) {
    if (typeof src[key] !== 'object' || !src[key]) dst[key] = src[key];
    else if (!target[key]) dst[key] = src[key];
    else dst[key] = deepMerge(target[key], src[key]);
}
function deepMerge(target, src) {
    var array = Array.isArray(src);
    var dst = array && [] || {};
    if (array) {
        target = target || [];
        dst = dst.concat(target);
        src.forEach(deepMerger.bind(null, target, dst));
    } else {
        if (target && typeof target === 'object') Object.keys(target).forEach(copyist.bind(null, target, dst));
        Object.keys(src).forEach(copyistWithDeepMerge.bind(null, target, src, dst));
    }
    return dst;
}
module.exports.deepMerge = deepMerge;
/**
 * Validates instance against the provided schema
 * Implements URI+JSON Pointer encoding, e.g. "%7e"="~0"=>"~", "~1"="%2f"=>"/"
 * @param o
 * @param s The path to walk o along
 * @return any
 */ exports.objectGetPath = function objectGetPath(o, s) {
    var parts = s.split('/').slice(1);
    var k;
    while(typeof (k = parts.shift()) == 'string'){
        var n = decodeURIComponent(k.replace(/~0/, '~').replace(/~1/g, '/'));
        if (!(n in o)) return;
        o = o[n];
    }
    return o;
};
function pathEncoder(v) {
    return '/' + encodeURIComponent(v).replace(/~/g, '%7E');
}
/**
 * Accept an Array of property names and return a JSON Pointer URI fragment
 * @param Array a
 * @return {String}
 */ exports.encodePath = function encodePointer(a) {
    // ~ must be encoded explicitly because hacks
    // the slash is encoded by encodeURIComponent
    return a.map(pathEncoder).join('');
};
/**
 * Calculate the number of decimal places a number uses
 * We need this to get correct results out of multipleOf and divisibleBy
 * when either figure is has decimal places, due to IEEE-754 float issues.
 * @param number
 * @returns {number}
 */ exports.getDecimalPlaces = function getDecimalPlaces(number) {
    var decimalPlaces = 0;
    if (isNaN(number)) return decimalPlaces;
    if (typeof number !== 'number') number = Number(number);
    var parts = number.toString().split('e');
    if (parts.length === 2) {
        if (parts[1][0] !== '-') return decimalPlaces;
        else decimalPlaces = Number(parts[1].slice(1));
    }
    var decimalParts = parts[0].split('.');
    if (decimalParts.length === 2) decimalPlaces += decimalParts[1].length;
    return decimalPlaces;
};
exports.isSchema = function isSchema(val) {
    return typeof val === 'object' && val || typeof val === 'boolean';
};

},{"url":"7qjc7"}],"bHmlS":[function(require,module,exports) {
"use strict";
var urilib = require('url');
var helpers = require('./helpers');
module.exports.SchemaScanResult = SchemaScanResult;
function SchemaScanResult(found, ref) {
    this.id = found;
    this.ref = ref;
}
/**
 * Adds a schema with a certain urn to the Validator instance.
 * @param string uri
 * @param object schema
 * @return {Object}
 */ module.exports.scan = function scan(base, schema1) {
    function scanSchema(baseuri, schema) {
        if (!schema || typeof schema != 'object') return;
        // Mark all referenced schemas so we can tell later which schemas are referred to, but never defined
        if (schema.$ref) {
            var resolvedUri = urilib.resolve(baseuri, schema.$ref);
            ref[resolvedUri] = ref[resolvedUri] ? ref[resolvedUri] + 1 : 0;
            return;
        }
        var id = schema.$id || schema.id;
        var ourBase = id ? urilib.resolve(baseuri, id) : baseuri;
        if (ourBase) {
            // If there's no fragment, append an empty one
            if (ourBase.indexOf('#') < 0) ourBase += '#';
            if (found[ourBase]) {
                if (!helpers.deepCompareStrict(found[ourBase], schema)) throw new Error('Schema <' + ourBase + '> already exists with different definition');
                return found[ourBase];
            }
            found[ourBase] = schema;
            // strip trailing fragment
            if (ourBase[ourBase.length - 1] == '#') found[ourBase.substring(0, ourBase.length - 1)] = schema;
        }
        scanArray(ourBase + '/items', Array.isArray(schema.items) ? schema.items : [
            schema.items
        ]);
        scanArray(ourBase + '/extends', Array.isArray(schema.extends) ? schema.extends : [
            schema.extends
        ]);
        scanSchema(ourBase + '/additionalItems', schema.additionalItems);
        scanObject(ourBase + '/properties', schema.properties);
        scanSchema(ourBase + '/additionalProperties', schema.additionalProperties);
        scanObject(ourBase + '/definitions', schema.definitions);
        scanObject(ourBase + '/patternProperties', schema.patternProperties);
        scanObject(ourBase + '/dependencies', schema.dependencies);
        scanArray(ourBase + '/disallow', schema.disallow);
        scanArray(ourBase + '/allOf', schema.allOf);
        scanArray(ourBase + '/anyOf', schema.anyOf);
        scanArray(ourBase + '/oneOf', schema.oneOf);
        scanSchema(ourBase + '/not', schema.not);
    }
    function scanArray(baseuri, schemas) {
        if (!Array.isArray(schemas)) return;
        for(var i = 0; i < schemas.length; i++)scanSchema(baseuri + '/' + i, schemas[i]);
    }
    function scanObject(baseuri, schemas) {
        if (!schemas || typeof schemas != 'object') return;
        for(var p in schemas)scanSchema(baseuri + '/' + p, schemas[p]);
    }
    var found = {};
    var ref = {};
    scanSchema(base, schema1);
    return new SchemaScanResult(found, ref);
};

},{"url":"7qjc7","./helpers":"5kpID"}],"k1VsJ":[function(require,module,exports) {
"use strict";
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var jsonschema_1 = require("jsonschema");
var values = require("lodash.values");
var schemas_1 = require("./schemas");
/**
 * A validator for [JSON-schemas](http://json-schema.org/)
 */ var SchemaValidator = /** @class */ function() {
    /**
     * Instantiates a SchemaValidator instance
     */ function SchemaValidator1() {
        var e_1, _a;
        this._validator = new jsonschema_1.Validator();
        try {
            for(var _b = __values(values(schemas_1.schemas)), _c = _b.next(); !_c.done; _c = _b.next()){
                var schema = _c.value;
                SchemaValidator1._assertSchemaDefined(schema);
                this._validator.addSchema(schema, schema.id);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
    }
    SchemaValidator1._assertSchemaDefined = function(schema) {
        if (schema === undefined) throw new Error("Cannot add undefined schema");
    };
    /**
     * Add a schema to the validator. All schemas and sub-schemas must be added to
     * the validator before the `validate` and `isValid` methods can be called with
     * instances of that schema.
     * @param schema The schema to add
     */ SchemaValidator1.prototype.addSchema = function(schema) {
        SchemaValidator1._assertSchemaDefined(schema);
        this._validator.addSchema(schema, schema.id);
    };
    // In order to validate a complex JS object using jsonschema, we must replace any complex
    // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other
    // complex types implement the `toString` method, we can stringify the object and
    // then parse it. The resultant object can then be checked using jsonschema.
    /**
     * Validate the JS object conforms to a specific JSON schema
     * @param instance JS object in question
     * @param schema Schema to check against
     * @returns The results of the validation
     */ SchemaValidator1.prototype.validate = function(instance, schema) {
        SchemaValidator1._assertSchemaDefined(schema);
        var jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));
        return this._validator.validate(jsonSchemaCompatibleObject, schema);
    };
    /**
     * Check whether an instance properly adheres to a JSON schema
     * @param instance JS object in question
     * @param schema Schema to check against
     * @returns Whether or not the instance adheres to the schema
     */ SchemaValidator1.prototype.isValid = function(instance, schema) {
        var isValid = this.validate(instance, schema).errors.length === 0;
        return isValid;
    };
    return SchemaValidator1;
}();
exports.SchemaValidator = SchemaValidator;

},{"jsonschema":"1FHqv","lodash.values":"lOWO6","./schemas":"918Lz"}],"lOWO6":[function(require,module,exports) {
/**
 * lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright jQuery Foundation and other contributors <https://jquery.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */ /** Used as references for various `Number` constants. */ var MAX_SAFE_INTEGER = 9007199254740991;
/** `Object#toString` result references. */ var argsTag = '[object Arguments]', funcTag = '[object Function]', genTag = '[object GeneratorFunction]';
/** Used to detect unsigned integer values. */ var reIsUint = /^(?:0|[1-9]\d*)$/;
/**
 * A specialized version of `_.map` for arrays without support for iteratee
 * shorthands.
 *
 * @private
 * @param {Array} [array] The array to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the new mapped array.
 */ function arrayMap(array, iteratee) {
    var index = -1, length = array ? array.length : 0, result = Array(length);
    while(++index < length)result[index] = iteratee(array[index], index, array);
    return result;
}
/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */ function baseTimes(n, iteratee) {
    var index = -1, result = Array(n);
    while(++index < n)result[index] = iteratee(index);
    return result;
}
/**
 * The base implementation of `_.values` and `_.valuesIn` which creates an
 * array of `object` property values corresponding to the property names
 * of `props`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} props The property names to get values for.
 * @returns {Object} Returns the array of property values.
 */ function baseValues(object, props) {
    return arrayMap(props, function(key) {
        return object[key];
    });
}
/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */ function overArg(func, transform) {
    return function(arg) {
        return func(transform(arg));
    };
}
/** Used for built-in method references. */ var objectProto = Object.prototype;
/** Used to check objects for own properties. */ var hasOwnProperty = objectProto.hasOwnProperty;
/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */ var objectToString = objectProto.toString;
/** Built-in value references. */ var propertyIsEnumerable = objectProto.propertyIsEnumerable;
/* Built-in method references for those with the same name as other `lodash` methods. */ var nativeKeys = overArg(Object.keys, Object);
/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */ function arrayLikeKeys(value, inherited) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    // Safari 9 makes `arguments.length` enumerable in strict mode.
    var result = isArray(value) || isArguments(value) ? baseTimes(value.length, String) : [];
    var length = result.length, skipIndexes = !!length;
    for(var key in value)if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (key == 'length' || isIndex(key, length)))) result.push(key);
    return result;
}
/**
 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */ function baseKeys(object) {
    if (!isPrototype(object)) return nativeKeys(object);
    var result = [];
    for(var key in Object(object))if (hasOwnProperty.call(object, key) && key != 'constructor') result.push(key);
    return result;
}
/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */ function isIndex(value, length) {
    length = length == null ? MAX_SAFE_INTEGER : length;
    return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
}
/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */ function isPrototype(value) {
    var Ctor = value && value.constructor, proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;
    return value === proto;
}
/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */ function isArguments(value) {
    // Safari 8.1 makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') && (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
}
/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */ var isArray = Array.isArray;
/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */ function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
}
/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */ function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
}
/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */ function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8-9 which returns 'object' for typed array and other constructors.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
}
/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */ function isLength(value) {
    return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}
/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */ function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
}
/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */ function isObjectLike(value) {
    return !!value && typeof value == 'object';
}
/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */ function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
}
/**
 * Creates an array of the own enumerable string keyed property values of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property values.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.values(new Foo);
 * // => [1, 2] (iteration order is not guaranteed)
 *
 * _.values('hi');
 * // => ['h', 'i']
 */ function values(object) {
    return object ? baseValues(object, keys(object)) : [];
}
module.exports = values;

},{}],"918Lz":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var addressSchema = require("../schemas/address_schema.json");
var assetPairsRequestOptsSchema = require("../schemas/asset_pairs_request_opts_schema.json");
var blockParamSchema = require("../schemas/block_param_schema.json");
var blockRangeSchema = require("../schemas/block_range_schema.json");
var callDataSchema = require("../schemas/call_data_schema.json");
var ecSignatureParameterSchema = require("../schemas/ec_signature_parameter_schema.json");
var ecSignatureSchema = require("../schemas/ec_signature_schema.json");
var eip712TypedDataSchema = require("../schemas/eip712_typed_data_schema.json");
var hexSchema = require("../schemas/hex_schema.json");
var indexFilterValuesSchema = require("../schemas/index_filter_values_schema.json");
var jsNumber = require("../schemas/js_number_schema.json");
var numberSchema = require("../schemas/number_schema.json");
var orderCancellationRequestsSchema = require("../schemas/order_cancel_schema.json");
var orderConfigRequestSchema = require("../schemas/order_config_request_schema.json");
var orderFillOrKillRequestsSchema = require("../schemas/order_fill_or_kill_requests_schema.json");
var orderFillRequestsSchema = require("../schemas/order_fill_requests_schema.json");
var orderHashSchema = require("../schemas/order_hash_schema.json");
var orderSchema = require("../schemas/order_schema.json");
var orderBookRequestSchema = require("../schemas/orderbook_request_schema.json");
var ordersRequestOptsSchema = require("../schemas/orders_request_opts_schema.json");
var ordersSchema = require("../schemas/orders_schema.json");
var pagedRequestOptsSchema = require("../schemas/paged_request_opts_schema.json");
var paginatedCollectionSchema = require("../schemas/paginated_collection_schema.json");
var relayerApiAssetDataPairsResponseSchema = require("../schemas/relayer_api_asset_data_pairs_response_schema.json");
var relayerApiAssetDataPairsSchema = require("../schemas/relayer_api_asset_data_pairs_schema.json");
var relayerApiAssetDataTradeInfoSchema = require("../schemas/relayer_api_asset_data_trade_info_schema.json");
var relayerApiErrorResponseSchema = require("../schemas/relayer_api_error_response_schema.json");
var relayerApiFeeRecipientsResponseSchema = require("../schemas/relayer_api_fee_recipients_response_schema.json");
var relayerApiOrderConfigPayloadSchema = require("../schemas/relayer_api_order_config_payload_schema.json");
var relayerApiOrderConfigResponseSchema = require("../schemas/relayer_api_order_config_response_schema.json");
var relayerApiOrderSchema = require("../schemas/relayer_api_order_schema.json");
var relayerApiOrderbookResponseSchema = require("../schemas/relayer_api_orderbook_response_schema.json");
var relayerApiOrdersChannelSubscribePayloadSchema = require("../schemas/relayer_api_orders_channel_subscribe_payload_schema.json");
var relayerApiOrdersChannelSubscribeSchema = require("../schemas/relayer_api_orders_channel_subscribe_schema.json");
var relayerApiOrdersChannelUpdateSchema = require("../schemas/relayer_api_orders_channel_update_response_schema.json");
var relayerApiOrdersResponseSchema = require("../schemas/relayer_api_orders_response_schema.json");
var relayerApiOrdersSchema = require("../schemas/relayer_api_orders_schema.json");
var requestOptsSchema = require("../schemas/request_opts_schema.json");
var signedOrderSchema = require("../schemas/signed_order_schema.json");
var signedOrdersSchema = require("../schemas/signed_orders_schema.json");
var tokenSchema = require("../schemas/token_schema.json");
var txDataSchema = require("../schemas/tx_data_schema.json");
var wholeNumberSchema = require("../schemas/whole_number_schema.json");
var zeroExTransactionSchema = require("../schemas/zero_ex_transaction_schema.json");
exports.schemas = {
    numberSchema: numberSchema,
    addressSchema: addressSchema,
    callDataSchema: callDataSchema,
    hexSchema: hexSchema,
    ecSignatureParameterSchema: ecSignatureParameterSchema,
    ecSignatureSchema: ecSignatureSchema,
    eip712TypedDataSchema: eip712TypedDataSchema,
    indexFilterValuesSchema: indexFilterValuesSchema,
    orderCancellationRequestsSchema: orderCancellationRequestsSchema,
    orderFillOrKillRequestsSchema: orderFillOrKillRequestsSchema,
    orderFillRequestsSchema: orderFillRequestsSchema,
    orderHashSchema: orderHashSchema,
    orderSchema: orderSchema,
    signedOrderSchema: signedOrderSchema,
    signedOrdersSchema: signedOrdersSchema,
    ordersSchema: ordersSchema,
    blockParamSchema: blockParamSchema,
    blockRangeSchema: blockRangeSchema,
    tokenSchema: tokenSchema,
    jsNumber: jsNumber,
    requestOptsSchema: requestOptsSchema,
    pagedRequestOptsSchema: pagedRequestOptsSchema,
    ordersRequestOptsSchema: ordersRequestOptsSchema,
    orderBookRequestSchema: orderBookRequestSchema,
    orderConfigRequestSchema: orderConfigRequestSchema,
    assetPairsRequestOptsSchema: assetPairsRequestOptsSchema,
    txDataSchema: txDataSchema,
    paginatedCollectionSchema: paginatedCollectionSchema,
    relayerApiErrorResponseSchema: relayerApiErrorResponseSchema,
    relayerApiFeeRecipientsResponseSchema: relayerApiFeeRecipientsResponseSchema,
    relayerApiOrderSchema: relayerApiOrderSchema,
    relayerApiOrdersSchema: relayerApiOrdersSchema,
    relayerApiOrderConfigPayloadSchema: relayerApiOrderConfigPayloadSchema,
    relayerApiOrderConfigResponseSchema: relayerApiOrderConfigResponseSchema,
    relayerApiOrderbookResponseSchema: relayerApiOrderbookResponseSchema,
    relayerApiAssetDataPairsResponseSchema: relayerApiAssetDataPairsResponseSchema,
    relayerApiAssetDataTradeInfoSchema: relayerApiAssetDataTradeInfoSchema,
    relayerApiOrdersChannelSubscribeSchema: relayerApiOrdersChannelSubscribeSchema,
    relayerApiOrdersChannelSubscribePayloadSchema: relayerApiOrdersChannelSubscribePayloadSchema,
    relayerApiOrdersChannelUpdateSchema: relayerApiOrdersChannelUpdateSchema,
    relayerApiOrdersResponseSchema: relayerApiOrdersResponseSchema,
    relayerApiAssetDataPairsSchema: relayerApiAssetDataPairsSchema,
    zeroExTransactionSchema: zeroExTransactionSchema,
    wholeNumberSchema: wholeNumberSchema
};

},{"../schemas/address_schema.json":"cTktt","../schemas/asset_pairs_request_opts_schema.json":"luOep","../schemas/block_param_schema.json":"jXxaZ","../schemas/block_range_schema.json":"eDjDL","../schemas/call_data_schema.json":"EGaX4","../schemas/ec_signature_parameter_schema.json":"lyFLm","../schemas/ec_signature_schema.json":"6N551","../schemas/eip712_typed_data_schema.json":"dpo57","../schemas/hex_schema.json":"iEzNb","../schemas/index_filter_values_schema.json":"cD9bY","../schemas/js_number_schema.json":"5JyNE","../schemas/number_schema.json":"jeKAk","../schemas/order_cancel_schema.json":"kkX5E","../schemas/order_config_request_schema.json":"7lZLT","../schemas/order_fill_or_kill_requests_schema.json":"dFEbL","../schemas/order_fill_requests_schema.json":"87nDd","../schemas/order_hash_schema.json":"eww8N","../schemas/order_schema.json":"cCcN7","../schemas/orderbook_request_schema.json":"dA6t4","../schemas/orders_request_opts_schema.json":"bfvfJ","../schemas/orders_schema.json":"6qlvd","../schemas/paged_request_opts_schema.json":"1dR2t","../schemas/paginated_collection_schema.json":"9pSGq","../schemas/relayer_api_asset_data_pairs_response_schema.json":"l2jwG","../schemas/relayer_api_asset_data_pairs_schema.json":"e0DiL","../schemas/relayer_api_asset_data_trade_info_schema.json":"79hNR","../schemas/relayer_api_error_response_schema.json":"9O28c","../schemas/relayer_api_fee_recipients_response_schema.json":"5etd6","../schemas/relayer_api_order_config_payload_schema.json":"62JlV","../schemas/relayer_api_order_config_response_schema.json":"g2rFW","../schemas/relayer_api_order_schema.json":"iPwkr","../schemas/relayer_api_orderbook_response_schema.json":"03fMC","../schemas/relayer_api_orders_channel_subscribe_payload_schema.json":"dlCKI","../schemas/relayer_api_orders_channel_subscribe_schema.json":"7xdDj","../schemas/relayer_api_orders_channel_update_response_schema.json":"kQl9j","../schemas/relayer_api_orders_response_schema.json":"dCNBk","../schemas/relayer_api_orders_schema.json":"5Q4nc","../schemas/request_opts_schema.json":"jntkh","../schemas/signed_order_schema.json":"kYXQ7","../schemas/signed_orders_schema.json":"b1Of0","../schemas/token_schema.json":"02VnO","../schemas/tx_data_schema.json":"fYJE5","../schemas/whole_number_schema.json":"4NjmX","../schemas/zero_ex_transaction_schema.json":"2GJAM"}],"cTktt":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/addressSchema\",\"type\":\"string\",\"pattern\":\"^0x[0-9a-fA-F]{40}$\"}");

},{}],"luOep":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/AssetPairsRequestOptsSchema\",\"type\":\"object\",\"properties\":{\"assetDataA\":{\"$ref\":\"/hexSchema\"},\"assetDataB\":{\"$ref\":\"/hexSchema\"}}}");

},{}],"jXxaZ":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/blockParamSchema\",\"oneOf\":[{\"type\":\"number\"},{\"enum\":[\"latest\",\"earliest\",\"pending\"]}]}");

},{}],"eDjDL":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/blockRangeSchema\",\"properties\":{\"fromBlock\":{\"$ref\":\"/blockParamSchema\"},\"toBlock\":{\"$ref\":\"/blockParamSchema\"}},\"type\":\"object\"}");

},{}],"EGaX4":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/callDataSchema\",\"properties\":{\"from\":{\"$ref\":\"/addressSchema\"},\"to\":{\"$ref\":\"/addressSchema\"},\"value\":{\"oneOf\":[{\"$ref\":\"/numberSchema\"},{\"$ref\":\"/jsNumberSchema\"}]},\"gas\":{\"oneOf\":[{\"$ref\":\"/numberSchema\"},{\"$ref\":\"/jsNumberSchema\"}]},\"gasPrice\":{\"oneOf\":[{\"$ref\":\"/numberSchema\"},{\"$ref\":\"/jsNumberSchema\"}]},\"data\":{\"type\":\"string\",\"pattern\":\"^0x[0-9a-f]*$\"},\"nonce\":{\"type\":\"number\",\"minimum\":0}},\"required\":[],\"type\":\"object\",\"additionalProperties\":false}");

},{}],"lyFLm":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/ecSignatureParameterSchema\",\"type\":\"string\",\"pattern\":\"^0[xX][0-9A-Fa-f]{64}$\"}");

},{}],"6N551":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/ecSignatureSchema\",\"properties\":{\"v\":{\"type\":\"number\",\"minimum\":27,\"maximum\":28},\"r\":{\"$ref\":\"/ecSignatureParameterSchema\"},\"s\":{\"$ref\":\"/ecSignatureParameterSchema\"}},\"required\":[\"v\",\"r\",\"s\"],\"type\":\"object\"}");

},{}],"dpo57":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/eip712TypedDataSchema\",\"type\":\"object\",\"properties\":{\"types\":{\"type\":\"object\",\"properties\":{\"EIP712Domain\":{\"type\":\"array\"}},\"additionalProperties\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"name\":{\"type\":\"string\"},\"type\":{\"type\":\"string\"}},\"required\":[\"name\",\"type\"]}},\"required\":[\"EIP712Domain\"]},\"primaryType\":{\"type\":\"string\"},\"domain\":{\"type\":\"object\"},\"message\":{\"type\":\"object\"}},\"required\":[\"types\",\"primaryType\",\"domain\",\"message\"]}");

},{}],"iEzNb":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/hexSchema\",\"type\":\"string\",\"pattern\":\"^0x(([0-9a-f][0-9a-f])+)?$\"}");

},{}],"cD9bY":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/indexFilterValuesSchema\",\"additionalProperties\":{\"oneOf\":[{\"$ref\":\"/numberSchema\"},{\"$ref\":\"/addressSchema\"},{\"$ref\":\"/orderHashSchema\"}]},\"type\":\"object\"}");

},{}],"5JyNE":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/jsNumberSchema\",\"type\":\"number\",\"minimum\":0}");

},{}],"jeKAk":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/numberSchema\",\"type\":\"string\",\"pattern\":\"^\\\\d+(\\\\.\\\\d+)?$\"}");

},{}],"kkX5E":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/orderCancellationRequestsSchema\",\"type\":\"array\",\"items\":{\"properties\":{\"order\":{\"$ref\":\"/orderSchema\"},\"takerTokenCancelAmount\":{\"$ref\":\"/wholeNumberSchema\"}},\"required\":[\"order\",\"takerTokenCancelAmount\"],\"type\":\"object\"}}");

},{}],"7lZLT":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/OrderConfigRequestSchema\",\"type\":\"object\",\"properties\":{\"makerAddress\":{\"$ref\":\"/addressSchema\"},\"takerAddress\":{\"$ref\":\"/addressSchema\"},\"makerAssetAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"takerAssetAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"makerAssetData\":{\"$ref\":\"/hexSchema\"},\"takerAssetData\":{\"$ref\":\"/hexSchema\"},\"exchangeAddress\":{\"$ref\":\"/addressSchema\"},\"expirationTimeSeconds\":{\"$ref\":\"/wholeNumberSchema\"}},\"required\":[\"makerAddress\",\"takerAddress\",\"makerAssetAmount\",\"takerAssetAmount\",\"makerAssetData\",\"takerAssetData\",\"exchangeAddress\",\"expirationTimeSeconds\"]}");

},{}],"dFEbL":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/orderFillOrKillRequestsSchema\",\"type\":\"array\",\"items\":{\"properties\":{\"signedOrder\":{\"$ref\":\"/signedOrderSchema\"},\"fillTakerAmount\":{\"$ref\":\"/wholeNumberSchema\"}},\"required\":[\"signedOrder\",\"fillTakerAmount\"],\"type\":\"object\"}}");

},{}],"87nDd":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/orderFillRequestsSchema\",\"type\":\"array\",\"items\":{\"properties\":{\"signedOrder\":{\"$ref\":\"/signedOrderSchema\"},\"takerTokenFillAmount\":{\"$ref\":\"/wholeNumberSchema\"}},\"required\":[\"signedOrder\",\"takerTokenFillAmount\"],\"type\":\"object\"}}");

},{}],"eww8N":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/orderHashSchema\",\"type\":\"string\",\"pattern\":\"^0x[0-9a-fA-F]{64}$\"}");

},{}],"cCcN7":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/orderSchema\",\"properties\":{\"makerAddress\":{\"$ref\":\"/addressSchema\"},\"takerAddress\":{\"$ref\":\"/addressSchema\"},\"makerFee\":{\"$ref\":\"/wholeNumberSchema\"},\"takerFee\":{\"$ref\":\"/wholeNumberSchema\"},\"senderAddress\":{\"$ref\":\"/addressSchema\"},\"makerAssetAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"takerAssetAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"makerAssetData\":{\"$ref\":\"/hexSchema\"},\"takerAssetData\":{\"$ref\":\"/hexSchema\"},\"salt\":{\"$ref\":\"/wholeNumberSchema\"},\"exchangeAddress\":{\"$ref\":\"/addressSchema\"},\"feeRecipientAddress\":{\"$ref\":\"/addressSchema\"},\"expirationTimeSeconds\":{\"$ref\":\"/wholeNumberSchema\"}},\"required\":[\"makerAddress\",\"takerAddress\",\"makerFee\",\"takerFee\",\"senderAddress\",\"makerAssetAmount\",\"takerAssetAmount\",\"makerAssetData\",\"takerAssetData\",\"salt\",\"exchangeAddress\",\"feeRecipientAddress\",\"expirationTimeSeconds\"],\"type\":\"object\"}");

},{}],"dA6t4":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/OrderbookRequestSchema\",\"type\":\"object\",\"properties\":{\"baseAssetData\":{\"$ref\":\"/hexSchema\"},\"quoteAssetData\":{\"$ref\":\"/hexSchema\"}},\"required\":[\"baseAssetData\",\"quoteAssetData\"]}");

},{}],"bfvfJ":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/OrdersRequestOptsSchema\",\"type\":\"object\",\"properties\":{\"makerAssetProxyId\":{\"$ref\":\"/hexSchema\"},\"takerAssetProxyId\":{\"$ref\":\"/hexSchema\"},\"makerAssetAddress\":{\"$ref\":\"/addressSchema\"},\"takerAssetAddress\":{\"$ref\":\"/addressSchema\"},\"exchangeAddress\":{\"$ref\":\"/addressSchema\"},\"senderAddress\":{\"$ref\":\"/addressSchema\"},\"makerAssetData\":{\"$ref\":\"/hexSchema\"},\"takerAssetData\":{\"$ref\":\"/hexSchema\"},\"traderAssetData\":{\"$ref\":\"/hexSchema\"},\"makerAddress\":{\"$ref\":\"/addressSchema\"},\"takerAddress\":{\"$ref\":\"/addressSchema\"},\"traderAddress\":{\"$ref\":\"/addressSchema\"},\"feeRecipientAddress\":{\"$ref\":\"/addressSchema\"}}}");

},{}],"6qlvd":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/ordersSchema\",\"type\":\"array\",\"items\":{\"$ref\":\"/orderSchema\"}}");

},{}],"1dR2t":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/PagedRequestOptsSchema\",\"type\":\"object\",\"properties\":{\"page\":{\"type\":\"number\"},\"perPage\":{\"type\":\"number\"}}}");

},{}],"9pSGq":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/paginatedCollectionSchema\",\"type\":\"object\",\"properties\":{\"total\":{\"type\":\"number\"},\"perPage\":{\"type\":\"number\"},\"page\":{\"type\":\"number\"}},\"required\":[\"total\",\"perPage\",\"page\"]}");

},{}],"l2jwG":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiAssetDataPairsResponseSchema\",\"type\":\"object\",\"allOf\":[{\"$ref\":\"/paginatedCollectionSchema\"},{\"properties\":{\"records\":{\"$ref\":\"/relayerApiAssetDataPairsSchema\"}},\"required\":[\"records\"]}]}");

},{}],"e0DiL":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiAssetDataPairsSchema\",\"type\":\"array\",\"items\":{\"properties\":{\"assetDataA\":{\"$ref\":\"/relayerApiAssetDataTradeInfoSchema\"},\"assetDataB\":{\"$ref\":\"/relayerApiAssetDataTradeInfoSchema\"}},\"required\":[\"assetDataA\",\"assetDataB\"],\"type\":\"object\"}}");

},{}],"79hNR":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiAssetDataTradeInfoSchema\",\"type\":\"object\",\"properties\":{\"assetData\":{\"$ref\":\"/hexSchema\"},\"minAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"maxAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"precision\":{\"type\":\"number\"}},\"required\":[\"assetData\"]}");

},{}],"9O28c":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiErrorResponseSchema\",\"type\":\"object\",\"properties\":{\"code\":{\"type\":\"integer\",\"minimum\":100,\"maximum\":103},\"reason\":{\"type\":\"string\"},\"validationErrors\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"field\":{\"type\":\"string\"},\"code\":{\"type\":\"integer\",\"minimum\":1000,\"maximum\":1006},\"reason\":{\"type\":\"string\"}},\"required\":[\"field\",\"code\",\"reason\"]}}},\"required\":[\"code\",\"reason\"]}");

},{}],"5etd6":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiFeeRecipientsResponseSchema\",\"type\":\"object\",\"allOf\":[{\"$ref\":\"/paginatedCollectionSchema\"},{\"properties\":{\"records\":{\"type\":\"array\",\"items\":{\"$ref\":\"/addressSchema\"}}},\"required\":[\"records\"]}]}");

},{}],"62JlV":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrderConfigPayloadSchema\",\"type\":\"object\",\"properties\":{\"makerAddress\":{\"$ref\":\"/addressSchema\"},\"takerAddress\":{\"$ref\":\"/addressSchema\"},\"makerAssetAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"takerAssetAmount\":{\"$ref\":\"/wholeNumberSchema\"},\"makerAssetData\":{\"$ref\":\"/hexSchema\"},\"takerAssetData\":{\"$ref\":\"/hexSchema\"},\"exchangeAddress\":{\"$ref\":\"/addressSchema\"},\"expirationTimeSeconds\":{\"$ref\":\"/wholeNumberSchema\"}},\"required\":[\"makerAddress\",\"takerAddress\",\"makerAssetAmount\",\"takerAssetAmount\",\"makerAssetData\",\"takerAssetData\",\"exchangeAddress\",\"expirationTimeSeconds\"]}");

},{}],"g2rFW":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrderConfigResponseSchema\",\"type\":\"object\",\"properties\":{\"makerFee\":{\"$ref\":\"/wholeNumberSchema\"},\"takerFee\":{\"$ref\":\"/wholeNumberSchema\"},\"feeRecipientAddress\":{\"$ref\":\"/addressSchema\"},\"senderAddress\":{\"$ref\":\"/addressSchema\"}},\"required\":[\"makerFee\",\"takerFee\",\"feeRecipientAddress\",\"senderAddress\"]}");

},{}],"iPwkr":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrderSchema\",\"type\":\"object\",\"properties\":{\"order\":{\"$ref\":\"/orderSchema\"},\"metaData\":{\"type\":\"object\"}},\"required\":[\"order\",\"metaData\"]}");

},{}],"03fMC":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrderbookResponseSchema\",\"type\":\"object\",\"properties\":{\"bids\":{\"$ref\":\"/relayerApiOrdersResponseSchema\"},\"asks\":{\"$ref\":\"/relayerApiOrdersResponseSchema\"}},\"required\":[\"bids\",\"asks\"]}");

},{}],"dlCKI":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrdersChannelSubscribePayloadSchema\",\"type\":\"object\",\"properties\":{\"makerAssetProxyId\":{\"$ref\":\"/hexSchema\"},\"takerAssetProxyId\":{\"$ref\":\"/hexSchema\"},\"networkId\":{\"type\":\"number\"},\"makerAssetAddress\":{\"$ref\":\"/addressSchema\"},\"takerAssetAddress\":{\"$ref\":\"/addressSchema\"},\"makerAssetData\":{\"$ref\":\"/hexSchema\"},\"takerAssetData\":{\"$ref\":\"/hexSchema\"},\"traderAssetData\":{\"$ref\":\"/hexSchema\"}}}");

},{}],"7xdDj":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrdersChannelSubscribeSchema\",\"type\":\"object\",\"properties\":{\"type\":{\"enum\":[\"subscribe\"]},\"channel\":{\"enum\":[\"orders\"]},\"requestId\":{\"type\":\"string\"},\"payload\":{\"$ref\":\"/relayerApiOrdersChannelSubscribePayloadSchema\"}},\"required\":[\"type\",\"channel\",\"requestId\"]}");

},{}],"kQl9j":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrdersChannelUpdateSchema\",\"type\":\"object\",\"properties\":{\"type\":{\"enum\":[\"update\"]},\"channel\":{\"enum\":[\"orders\"]},\"requestId\":{\"type\":\"string\"},\"payload\":{\"$ref\":\"/relayerApiOrdersSchema\"}},\"required\":[\"type\",\"channel\",\"requestId\"]}");

},{}],"dCNBk":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrdersResponseSchema\",\"type\":\"object\",\"allOf\":[{\"$ref\":\"/paginatedCollectionSchema\"},{\"properties\":{\"records\":{\"$ref\":\"/relayerApiOrdersSchema\"}},\"required\":[\"records\"]}]}");

},{}],"5Q4nc":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/relayerApiOrdersSchema\",\"type\":\"array\",\"items\":{\"$ref\":\"/relayerApiOrderSchema\"}}");

},{}],"jntkh":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/RequestOptsSchema\",\"type\":\"object\",\"properties\":{\"networkId\":{\"type\":\"number\"}}}");

},{}],"kYXQ7":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/signedOrderSchema\",\"allOf\":[{\"$ref\":\"/orderSchema\"},{\"properties\":{\"signature\":{\"$ref\":\"/hexSchema\"}},\"required\":[\"signature\"]}]}");

},{}],"b1Of0":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/signedOrdersSchema\",\"type\":\"array\",\"items\":{\"$ref\":\"/signedOrderSchema\"}}");

},{}],"02VnO":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/tokenSchema\",\"properties\":{\"name\":{\"type\":\"string\"},\"symbol\":{\"type\":\"string\"},\"decimals\":{\"type\":\"number\"},\"address\":{\"$ref\":\"/addressSchema\"}},\"required\":[\"name\",\"symbol\",\"decimals\",\"address\"],\"type\":\"object\"}");

},{}],"fYJE5":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/txDataSchema\",\"properties\":{\"from\":{\"$ref\":\"/addressSchema\"},\"to\":{\"$ref\":\"/addressSchema\"},\"value\":{\"oneOf\":[{\"$ref\":\"/numberSchema\"},{\"$ref\":\"/jsNumberSchema\"}]},\"gas\":{\"oneOf\":[{\"$ref\":\"/numberSchema\"},{\"$ref\":\"/jsNumberSchema\"}]},\"gasPrice\":{\"oneOf\":[{\"$ref\":\"/numberSchema\"},{\"$ref\":\"/jsNumberSchema\"}]},\"data\":{\"type\":\"string\",\"pattern\":\"^0x[0-9a-f]*$\"},\"nonce\":{\"type\":\"number\",\"minimum\":0}},\"required\":[\"from\"],\"type\":\"object\"}");

},{}],"4NjmX":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/wholeNumberSchema\",\"anyOf\":[{\"type\":\"string\",\"pattern\":\"^\\\\d+$\"},{\"type\":\"integer\"}]}");

},{}],"2GJAM":[function(require,module,exports) {
module.exports = JSON.parse("{\"id\":\"/zeroExTransactionSchema\",\"properties\":{\"verifyingContractAddress\":{\"$ref\":\"/addressSchema\"},\"data\":{\"$ref\":\"/hexSchema\"},\"signerAddress\":{\"$ref\":\"/addressSchema\"},\"salt\":{\"$ref\":\"/wholeNumberSchema\"}},\"required\":[\"verifyingContractAddress\",\"data\",\"salt\",\"signerAddress\"],\"type\":\"object\"}");

},{}],"k3ULq":[function(require,module,exports) {
(function(module) {
    module.exports.is_uri = is_iri;
    module.exports.is_http_uri = is_http_iri;
    module.exports.is_https_uri = is_https_iri;
    module.exports.is_web_uri = is_web_iri;
    // Create aliases
    module.exports.isUri = is_iri;
    module.exports.isHttpUri = is_http_iri;
    module.exports.isHttpsUri = is_https_iri;
    module.exports.isWebUri = is_web_iri;
    // private function
    // internal URI spitter method - direct from RFC 3986
    var splitUri = function(uri) {
        var splitted = uri.match(/(?:([^:\/?#]+):)?(?:\/\/([^\/?#]*))?([^?#]*)(?:\?([^#]*))?(?:#(.*))?/);
        return splitted;
    };
    function is_iri(value) {
        if (!value) return;
        // check for illegal characters
        if (/[^a-z0-9\:\/\?\#\[\]\@\!\$\&\'\(\)\*\+\,\;\=\.\-\_\~\%]/i.test(value)) return;
        // check for hex escapes that aren't complete
        if (/%[^0-9a-f]/i.test(value)) return;
        if (/%[0-9a-f](:?[^0-9a-f]|$)/i.test(value)) return;
        var splitted = [];
        var scheme = '';
        var authority = '';
        var path = '';
        var query = '';
        var fragment = '';
        var out = '';
        // from RFC 3986
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        // scheme and path are required, though the path can be empty
        if (!(scheme && scheme.length && path.length >= 0)) return;
        // if authority is present, the path must be empty or begin with a /
        if (authority && authority.length) {
            if (!(path.length === 0 || /^\//.test(path))) return;
        } else {
            // if authority is not present, the path must not start with //
            if (/^\/\//.test(path)) return;
        }
        // scheme must begin with a letter, then consist of letters, digits, +, ., or -
        if (!/^[a-z][a-z0-9\+\-\.]*$/.test(scheme.toLowerCase())) return;
        // re-assemble the URL per section 5.3 in RFC 3986
        out += scheme + ':';
        if (authority && authority.length) out += '//' + authority;
        out += path;
        if (query && query.length) out += '?' + query;
        if (fragment && fragment.length) out += '#' + fragment;
        return out;
    }
    function is_http_iri(value, allowHttps) {
        if (!is_iri(value)) return;
        var splitted = [];
        var scheme = '';
        var authority = '';
        var path = '';
        var port = '';
        var query = '';
        var fragment = '';
        var out = '';
        // from RFC 3986
        splitted = splitUri(value);
        scheme = splitted[1];
        authority = splitted[2];
        path = splitted[3];
        query = splitted[4];
        fragment = splitted[5];
        if (!scheme) return;
        if (allowHttps) {
            if (scheme.toLowerCase() != 'https') return;
        } else {
            if (scheme.toLowerCase() != 'http') return;
        }
        // fully-qualified URIs must have an authority section that is
        // a valid host
        if (!authority) return;
        // enable port component
        if (/:(\d+)$/.test(authority)) {
            port = authority.match(/:(\d+)$/)[0];
            authority = authority.replace(/:\d+$/, '');
        }
        out += scheme + ':';
        out += '//' + authority;
        if (port) out += port;
        out += path;
        if (query && query.length) out += '?' + query;
        if (fragment && fragment.length) out += '#' + fragment;
        return out;
    }
    function is_https_iri(value) {
        return is_http_iri(value, true);
    }
    function is_web_iri(value) {
        return is_http_iri(value) || is_https_iri(value);
    }
})(module);

},{}],"9DzFH":[function(require,module,exports) {
"use strict";
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var utils_1 = require("@0x/utils");
var ethereum_types_1 = require("ethereum-types");
var ethUtil = require("ethereumjs-util");
var _ = require("lodash");
var utils_2 = require("./utils");
/**
 * Utils to convert ethereum structures from user-space format to RPC format. (marshall/unmarshall)
 */ exports.marshaller = {
    /**
     * Unmarshall block without transaction data
     * @param blockWithHexValues block to unmarshall
     * @return unmarshalled block without transaction data
     */ unmarshalIntoBlockWithoutTransactionData: function(blockWithHexValues) {
        var block = __assign({}, blockWithHexValues, {
            gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),
            gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),
            size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),
            timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),
            number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),
            difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),
            totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty)
        });
        return block;
    },
    /**
     * Unmarshall block with transaction data
     * @param blockWithHexValues block to unmarshall
     * @return unmarshalled block with transaction data
     */ unmarshalIntoBlockWithTransactionData: function(blockWithHexValues) {
        var block = __assign({}, blockWithHexValues, {
            gasLimit: utils_2.utils.convertHexToNumber(blockWithHexValues.gasLimit),
            gasUsed: utils_2.utils.convertHexToNumber(blockWithHexValues.gasUsed),
            size: utils_2.utils.convertHexToNumber(blockWithHexValues.size),
            timestamp: utils_2.utils.convertHexToNumber(blockWithHexValues.timestamp),
            number: blockWithHexValues.number === null ? null : utils_2.utils.convertHexToNumber(blockWithHexValues.number),
            difficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.difficulty),
            totalDifficulty: utils_2.utils.convertAmountToBigNumber(blockWithHexValues.totalDifficulty),
            transactions: []
        });
        block.transactions = _.map(blockWithHexValues.transactions, function(tx) {
            var transaction = exports.marshaller.unmarshalTransaction(tx);
            return transaction;
        });
        return block;
    },
    /**
     * Unmarshall transaction
     * @param txRpc transaction to unmarshall
     * @return unmarshalled transaction
     */ unmarshalTransaction: function(txRpc) {
        var tx = __assign({}, txRpc, {
            blockNumber: txRpc.blockNumber !== null ? utils_2.utils.convertHexToNumber(txRpc.blockNumber) : null,
            transactionIndex: txRpc.transactionIndex !== null ? utils_2.utils.convertHexToNumber(txRpc.transactionIndex) : null,
            nonce: utils_2.utils.convertHexToNumber(txRpc.nonce),
            gas: utils_2.utils.convertHexToNumber(txRpc.gas),
            gasPrice: utils_2.utils.convertAmountToBigNumber(txRpc.gasPrice),
            value: utils_2.utils.convertAmountToBigNumber(txRpc.value)
        });
        return tx;
    },
    /**
     * Unmarshall transaction receipt
     * @param txReceiptRpc transaction receipt to unmarshall
     * @return unmarshalled transaction receipt
     */ unmarshalTransactionReceipt: function(txReceiptRpc) {
        var txReceipt = __assign({}, txReceiptRpc, {
            blockNumber: utils_2.utils.convertHexToNumber(txReceiptRpc.blockNumber),
            transactionIndex: utils_2.utils.convertHexToNumber(txReceiptRpc.transactionIndex),
            cumulativeGasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.cumulativeGasUsed),
            gasUsed: utils_2.utils.convertHexToNumber(txReceiptRpc.gasUsed),
            logs: _.map(txReceiptRpc.logs, exports.marshaller.unmarshalLog.bind(exports.marshaller))
        });
        return txReceipt;
    },
    /**
     * Unmarshall transaction data
     * @param txDataRpc transaction data to unmarshall
     * @return unmarshalled transaction data
     */ unmarshalTxData: function(txDataRpc) {
        if (txDataRpc.from === undefined) throw new Error("txData must include valid 'from' value.");
        var txData = __assign({}, txDataRpc, {
            value: txDataRpc.value !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.value) : undefined,
            gas: txDataRpc.gas !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.gas) : undefined,
            gasPrice: txDataRpc.gasPrice !== undefined ? utils_2.utils.convertAmountToBigNumber(txDataRpc.gasPrice) : undefined,
            nonce: txDataRpc.nonce !== undefined ? utils_2.utils.convertHexToNumber(txDataRpc.nonce) : undefined
        });
        return txData;
    },
    /**
     * Marshall transaction data
     * @param txData transaction data to marshall
     * @return marshalled transaction data
     */ marshalTxData: function(txData) {
        if (txData.from === undefined) throw new Error("txData must include valid 'from' value.");
        var callTxDataBase = __assign({}, txData);
        delete callTxDataBase.from;
        var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);
        var txDataRPC = __assign({}, callTxDataBaseRPC, {
            from: exports.marshaller.marshalAddress(txData.from)
        });
        var prunableIfUndefined = [
            'gasPrice',
            'gas',
            'value',
            'nonce'
        ];
        _.each(txDataRPC, function(value, key) {
            if (value === undefined && _.includes(prunableIfUndefined, key)) delete txDataRPC[key];
        });
        return txDataRPC;
    },
    /**
     * Marshall call data
     * @param callData call data to marshall
     * @return marshalled call data
     */ marshalCallData: function(callData) {
        var callTxDataBase = __assign({}, callData);
        delete callTxDataBase.from;
        var callTxDataBaseRPC = exports.marshaller._marshalCallTxDataBase(callTxDataBase);
        var callDataRPC = __assign({}, callTxDataBaseRPC, {
            from: callData.from === undefined ? undefined : exports.marshaller.marshalAddress(callData.from)
        });
        return callDataRPC;
    },
    /**
     * Marshall address
     * @param address address to marshall
     * @return marshalled address
     */ marshalAddress: function(address) {
        if (utils_1.addressUtils.isAddress(address)) return ethUtil.addHexPrefix(address);
        throw new Error("Invalid address encountered: " + address);
    },
    /**
     * Marshall block param
     * @param blockParam block param to marshall
     * @return marshalled block param
     */ marshalBlockParam: function(blockParam) {
        if (blockParam === undefined) return ethereum_types_1.BlockParamLiteral.Latest;
        var encodedBlockParam = _.isNumber(blockParam) ? utils_2.utils.numberToHex(blockParam) : blockParam;
        return encodedBlockParam;
    },
    /**
     * Unmarshall log
     * @param rawLog log to unmarshall
     * @return unmarshalled log
     */ unmarshalLog: function(rawLog) {
        var formattedLog = __assign({}, rawLog, {
            logIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.logIndex),
            blockNumber: utils_2.utils.convertHexToNumberOrNull(rawLog.blockNumber),
            transactionIndex: utils_2.utils.convertHexToNumberOrNull(rawLog.transactionIndex)
        });
        return formattedLog;
    },
    _marshalCallTxDataBase: function(callTxDataBase) {
        var callTxDataBaseRPC = __assign({}, callTxDataBase, {
            to: callTxDataBase.to === undefined ? undefined : exports.marshaller.marshalAddress(callTxDataBase.to),
            gasPrice: callTxDataBase.gasPrice === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gasPrice),
            gas: callTxDataBase.gas === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.gas),
            value: callTxDataBase.value === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.value),
            nonce: callTxDataBase.nonce === undefined ? undefined : utils_2.utils.encodeAmountAsHexString(callTxDataBase.nonce)
        });
        return callTxDataBaseRPC;
    }
};

},{"@0x/utils":"dgW7d","ethereum-types":"i8oCe","ethereumjs-util":"glktw","lodash":"3qBDj","./utils":"gHYyM"}],"gHYyM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var utils_1 = require("@0x/utils");
var _ = require("lodash");
exports.utils = {
    convertHexToNumber: function(value) {
        var valueBigNumber = new utils_1.BigNumber(value);
        var valueNumber = valueBigNumber.toNumber();
        return valueNumber;
    },
    convertHexToNumberOrNull: function(hex) {
        if (hex === null) return null;
        var decimal = exports.utils.convertHexToNumber(hex);
        return decimal;
    },
    convertAmountToBigNumber: function(value) {
        var num = value || 0;
        var isBigNumber = utils_1.BigNumber.isBigNumber(num);
        if (isBigNumber) return num;
        if (_.isString(num) && (num.indexOf('0x') === 0 || num.indexOf('-0x') === 0)) return new utils_1.BigNumber(num.replace('0x', ''), 16);
        var baseTen = 10;
        return new utils_1.BigNumber(num.toString(baseTen), baseTen);
    },
    encodeAmountAsHexString: function(value) {
        var valueBigNumber = exports.utils.convertAmountToBigNumber(value);
        var hexBase = 16;
        var valueHex = valueBigNumber.toString(hexBase);
        return valueBigNumber.isLessThan(0) ? "-0x" + valueHex.substr(1) : "0x" + valueHex;
    },
    numberToHex: function(value) {
        if (!isFinite(value) && !exports.utils.isHexStrict(value)) throw new Error("Given input " + value + " is not a number.");
        var valueBigNumber = new utils_1.BigNumber(value);
        var hexBase = 16;
        var result = valueBigNumber.toString(hexBase);
        return valueBigNumber.lt(0) ? "-0x" + result.substr(1) : "0x" + result;
    },
    isHexStrict: function(hex) {
        return (_.isString(hex) || _.isNumber(hex)) && /^(-)?0x[0-9a-f]*$/i.test(_.isNumber(hex) ? hex.toString() : hex);
    }
};

},{"@0x/utils":"dgW7d","lodash":"3qBDj"}],"5obrh":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var Web3WrapperErrors;
(function(Web3WrapperErrors1) {
    Web3WrapperErrors1["TransactionMiningTimeout"] = "TRANSACTION_MINING_TIMEOUT";
})(Web3WrapperErrors = exports.Web3WrapperErrors || (exports.Web3WrapperErrors = {}));
// NodeType represents the type of the backing Ethereum node.
var NodeType;
(function(NodeType1) {
    NodeType1["Geth"] = "GETH";
    NodeType1["Ganache"] = "GANACHE";
})(NodeType = exports.NodeType || (exports.NodeType = {}));

},{}],"lZYSa":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var utils_1 = require("@0x/utils");
var subprovider_1 = require("./subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * It attempts to handle each JSON RPC request by sequentially attempting to receive a valid response from one of a
 * set of JSON RPC endpoints.
 */ var RedundantSubprovider = /** @class */ function(_super) {
    __extends(RedundantSubprovider1, _super);
    /**
     * Instantiates a new RedundantSubprovider
     * @param subproviders Subproviders to attempt the request with
     */ function RedundantSubprovider1(subproviders) {
        var _this = _super.call(this) || this;
        _this._subproviders = subproviders;
        return _this;
    }
    RedundantSubprovider1._firstSuccessAsync = function(subproviders, payload, next) {
        return __awaiter(this, void 0, void 0, function() {
            var e_1, _a, lastErr, subproviders_1, subproviders_1_1, subprovider, data, err_1, e_1_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _b.trys.push([
                            0,
                            7,
                            8,
                            9
                        ]);
                        subproviders_1 = __values(subproviders), subproviders_1_1 = subproviders_1.next();
                        _b.label = 1;
                    case 1:
                        if (!!subproviders_1_1.done) return [
                            3 /*break*/ ,
                            6
                        ];
                        subprovider = subproviders_1_1.value;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            4,
                            ,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            utils_1.promisify(subprovider.handleRequest.bind(subprovider))(payload, next)
                        ];
                    case 3:
                        data = _b.sent();
                        return [
                            2 /*return*/ ,
                            data
                        ];
                    case 4:
                        err_1 = _b.sent();
                        lastErr = err_1;
                        return [
                            3 /*break*/ ,
                            5
                        ];
                    case 5:
                        subproviders_1_1 = subproviders_1.next();
                        return [
                            3 /*break*/ ,
                            1
                        ];
                    case 6:
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 7:
                        e_1_1 = _b.sent();
                        e_1 = {
                            error: e_1_1
                        };
                        return [
                            3 /*break*/ ,
                            9
                        ];
                    case 8:
                        try {
                            if (subproviders_1_1 && !subproviders_1_1.done && (_a = subproviders_1.return)) _a.call(subproviders_1);
                        } finally{
                            if (e_1) throw e_1.error;
                        }
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 9:
                        if (lastErr !== undefined) throw lastErr;
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:async-suffix
    RedundantSubprovider1.prototype.handleRequest = function(payload, next, end) {
        return __awaiter(this, void 0, void 0, function() {
            var subprovidersCopy, data, err_2;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        subprovidersCopy = this._subproviders.slice();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            RedundantSubprovider1._firstSuccessAsync(subprovidersCopy, payload, next)
                        ];
                    case 2:
                        data = _a.sent();
                        end(null, data);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        err_2 = _a.sent();
                        end(err_2);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return RedundantSubprovider1;
}(subprovider_1.Subprovider);
exports.RedundantSubprovider = RedundantSubprovider;

},{"@0x/utils":"dgW7d","./subprovider":"4dgUK"}],"hQU6O":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _1 = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_1)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _1.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _1.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _1.ops.pop();
                    _1.trys.pop();
                    continue;
                default:
                    if (!(t = _1.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _1 = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _1.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _1.label < t[1]) {
                        _1.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _1.label < t[2]) {
                        _1.label = t[2];
                        _1.ops.push(op);
                        break;
                    }
                    if (t[2]) _1.ops.pop();
                    _1.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _1);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assert_1 = require("@0x/assert");
var utils_1 = require("@0x/utils");
var EthereumTx = require("ethereumjs-tx");
var ethUtil = require("ethereumjs-util");
var HDNode = require("hdkey");
var _ = require("lodash");
var semaphore_async_await_1 = require("semaphore-async-await");
var types_1 = require("../types");
var wallet_utils_1 = require("../utils/wallet_utils");
var base_wallet_subprovider_1 = require("./base_wallet_subprovider");
var DEFAULT_BASE_DERIVATION_PATH = "44'/60'/0'";
var ASK_FOR_ON_DEVICE_CONFIRMATION = false;
var SHOULD_GET_CHAIN_CODE = true;
var DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;
var DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;
/**
 * Subprovider for interfacing with a user's [Ledger Nano S](https://www.ledgerwallet.com/products/ledger-nano-s).
 * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and
 * re-routes them to a Ledger device plugged into the users computer.
 */ var LedgerSubprovider = /** @class */ function(_super) {
    __extends(LedgerSubprovider1, _super);
    /**
     * Instantiates a LedgerSubprovider. Defaults to derivationPath set to `44'/60'/0'`.
     * TestRPC/Ganache defaults to `m/44'/60'/0'/0`, so set this in the configs if desired.
     * @param config Several available configurations
     * @return LedgerSubprovider instance
     */ function LedgerSubprovider1(config) {
        var _this = _super.call(this) || this;
        // tslint:disable-next-line:no-unused-variable
        _this._connectionLock = new semaphore_async_await_1.Lock();
        _this._networkId = config.networkId;
        _this._ledgerEthereumClientFactoryAsync = config.ledgerEthereumClientFactoryAsync;
        _this._baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;
        _this._shouldAlwaysAskForConfirmation = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation !== undefined ? config.accountFetchingConfigs.shouldAskForOnDeviceConfirmation : ASK_FOR_ON_DEVICE_CONFIRMATION;
        _this._addressSearchLimit = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.addressSearchLimit !== undefined ? config.accountFetchingConfigs.addressSearchLimit : DEFAULT_ADDRESS_SEARCH_LIMIT;
        return _this;
    }
    /**
     * Retrieve the set derivation path
     * @returns derivation path
     */ LedgerSubprovider1.prototype.getPath = function() {
        return this._baseDerivationPath;
    };
    /**
     * Set a desired derivation path when computing the available user addresses
     * @param basDerivationPath The desired derivation path (e.g `44'/60'/0'`)
     */ LedgerSubprovider1.prototype.setPath = function(basDerivationPath) {
        this._baseDerivationPath = basDerivationPath;
    };
    /**
     * Retrieve a users Ledger accounts. The accounts are derived from the derivationPath,
     * master public key and chain code. Because of this, you can request as many accounts
     * as you wish and it only requires a single request to the Ledger device. This method
     * is automatically called when issuing a `eth_accounts` JSON RPC request via your providerEngine
     * instance.
     * @param numberOfAccounts Number of accounts to retrieve (default: 10)
     * @return An array of accounts
     */ LedgerSubprovider1.prototype.getAccountsAsync = function(numberOfAccounts) {
        if (numberOfAccounts === void 0) numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;
        return __awaiter(this, void 0, void 0, function() {
            var initialDerivedKeyInfo, derivedKeyInfos, accounts;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._initialDerivedKeyInfoAsync()
                        ];
                    case 1:
                        initialDerivedKeyInfo = _a.sent();
                        derivedKeyInfos = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(initialDerivedKeyInfo, numberOfAccounts);
                        accounts = _.map(derivedKeyInfos, function(k) {
                            return k.address;
                        });
                        return [
                            2 /*return*/ ,
                            accounts
                        ];
                }
            });
        });
    };
    /**
     * Signs a transaction on the Ledger with the account specificed by the `from` field in txParams.
     * If you've added the LedgerSubprovider to your app's provider, you can simply send an `eth_sendTransaction`
     * JSON RPC request, and this method will be called auto-magically. If you are not using this via a ProviderEngine
     * instance, you can call it directly.
     * @param txParams Parameters of the transaction to sign
     * @return Signed transaction hex string
     */ LedgerSubprovider1.prototype.signTransactionAsync = function(txParams) {
        return __awaiter(this, void 0, void 0, function() {
            var initialDerivedKeyInfo, derivedKeyInfo, _a, tx, vIndex, rIndex, sIndex, txHex, fullDerivationPath, result, eip55Constant, signedChainId, err, signedTxHex, err_1;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        LedgerSubprovider1._validateTxParams(txParams);
                        if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);
                        return [
                            4 /*yield*/ ,
                            this._initialDerivedKeyInfoAsync()
                        ];
                    case 1:
                        initialDerivedKeyInfo = _b.sent();
                        derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, txParams.from);
                        _a = this;
                        return [
                            4 /*yield*/ ,
                            this._createLedgerClientAsync()
                        ];
                    case 2:
                        _a._ledgerClientIfExists = _b.sent();
                        tx = new EthereumTx(txParams);
                        vIndex = 6;
                        tx.raw[vIndex] = Buffer.from([
                            this._networkId
                        ]); // v
                        rIndex = 7;
                        tx.raw[rIndex] = Buffer.from([]); // r
                        sIndex = 8;
                        tx.raw[sIndex] = Buffer.from([]); // s
                        txHex = tx.serialize().toString('hex');
                        _b.label = 3;
                    case 3:
                        _b.trys.push([
                            3,
                            8,
                            ,
                            10
                        ]);
                        fullDerivationPath = derivedKeyInfo.derivationPath;
                        return [
                            4 /*yield*/ ,
                            this._ledgerClientIfExists.signTransaction(fullDerivationPath, txHex)
                        ];
                    case 4:
                        result = _b.sent();
                        // Store signature in transaction
                        tx.r = Buffer.from(result.r, 'hex');
                        tx.s = Buffer.from(result.s, 'hex');
                        tx.v = Buffer.from(result.v, 'hex');
                        eip55Constant = 35;
                        signedChainId = Math.floor((tx.v[0] - eip55Constant) / 2);
                        if (!(signedChainId !== this._networkId)) return [
                            3 /*break*/ ,
                            6
                        ];
                        return [
                            4 /*yield*/ ,
                            this._destroyLedgerClientAsync()
                        ];
                    case 5:
                        _b.sent();
                        err = new Error(types_1.LedgerSubproviderErrors.TooOldLedgerFirmware);
                        throw err;
                    case 6:
                        signedTxHex = "0x" + tx.serialize().toString('hex');
                        return [
                            4 /*yield*/ ,
                            this._destroyLedgerClientAsync()
                        ];
                    case 7:
                        _b.sent();
                        return [
                            2 /*return*/ ,
                            signedTxHex
                        ];
                    case 8:
                        err_1 = _b.sent();
                        return [
                            4 /*yield*/ ,
                            this._destroyLedgerClientAsync()
                        ];
                    case 9:
                        _b.sent();
                        throw err_1;
                    case 10:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Sign a personal Ethereum signed message. The signing account will be the account
     * associated with the provided address.
     * The Ledger adds the Ethereum signed message prefix on-device.  If you've added
     * the LedgerSubprovider to your app's provider, you can simply send an `eth_sign`
     * or `personal_sign` JSON RPC request, and this method will be called auto-magically.
     * If you are not using this via a ProviderEngine instance, you can call it directly.
     * @param data Hex string message to sign
     * @param address Address of the account to sign with
     * @return Signature hex string (order: rsv)
     */ LedgerSubprovider1.prototype.signPersonalMessageAsync = function(data, address) {
        return __awaiter(this, void 0, void 0, function() {
            var initialDerivedKeyInfo, derivedKeyInfo, _a, fullDerivationPath, result, lowestValidV, v, hexBase, vHex, signature, err_2;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        if (data === undefined) throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);
                        assert_1.assert.isHexString('data', data);
                        assert_1.assert.isETHAddressHex('address', address);
                        return [
                            4 /*yield*/ ,
                            this._initialDerivedKeyInfoAsync()
                        ];
                    case 1:
                        initialDerivedKeyInfo = _b.sent();
                        derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, address);
                        _a = this;
                        return [
                            4 /*yield*/ ,
                            this._createLedgerClientAsync()
                        ];
                    case 2:
                        _a._ledgerClientIfExists = _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([
                            3,
                            6,
                            ,
                            8
                        ]);
                        fullDerivationPath = derivedKeyInfo.derivationPath;
                        return [
                            4 /*yield*/ ,
                            this._ledgerClientIfExists.signPersonalMessage(fullDerivationPath, ethUtil.stripHexPrefix(data))
                        ];
                    case 4:
                        result = _b.sent();
                        lowestValidV = 27;
                        v = result.v - lowestValidV;
                        hexBase = 16;
                        vHex = v.toString(hexBase);
                        if (vHex.length < 2) vHex = "0" + v;
                        signature = "0x" + result.r + result.s + vHex;
                        return [
                            4 /*yield*/ ,
                            this._destroyLedgerClientAsync()
                        ];
                    case 5:
                        _b.sent();
                        return [
                            2 /*return*/ ,
                            signature
                        ];
                    case 6:
                        err_2 = _b.sent();
                        return [
                            4 /*yield*/ ,
                            this._destroyLedgerClientAsync()
                        ];
                    case 7:
                        _b.sent();
                        throw err_2;
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * eth_signTypedData is currently not supported on Ledger devices.
     * @param address Address of the account to sign with
     * @param data the typed data object
     * @return Signature hex string (order: rsv)
     */ // tslint:disable-next-line:prefer-function-over-method
    LedgerSubprovider1.prototype.signTypedDataAsync = function(address, typedData) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                throw new Error(types_1.WalletSubproviderErrors.MethodNotSupported);
            });
        });
    };
    LedgerSubprovider1.prototype._createLedgerClientAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var ledgerEthereumClient;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._connectionLock.acquire()
                        ];
                    case 1:
                        _a.sent();
                        if (this._ledgerClientIfExists !== undefined) {
                            this._connectionLock.release();
                            throw new Error(types_1.LedgerSubproviderErrors.MultipleOpenConnectionsDisallowed);
                        }
                        return [
                            4 /*yield*/ ,
                            this._ledgerEthereumClientFactoryAsync()
                        ];
                    case 2:
                        ledgerEthereumClient = _a.sent();
                        this._connectionLock.release();
                        return [
                            2 /*return*/ ,
                            ledgerEthereumClient
                        ];
                }
            });
        });
    };
    LedgerSubprovider1.prototype._destroyLedgerClientAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._connectionLock.acquire()
                        ];
                    case 1:
                        _a.sent();
                        if (this._ledgerClientIfExists === undefined) {
                            this._connectionLock.release();
                            return [
                                2 /*return*/ 
                            ];
                        }
                        return [
                            4 /*yield*/ ,
                            this._ledgerClientIfExists.transport.close()
                        ];
                    case 2:
                        _a.sent();
                        this._ledgerClientIfExists = undefined;
                        this._connectionLock.release();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    LedgerSubprovider1.prototype._initialDerivedKeyInfoAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _a, parentKeyDerivationPath, ledgerResponse, hdKey, address, initialDerivedKeyInfo;
            return __generator(this, function(_b) {
                switch(_b.label){
                    case 0:
                        _a = this;
                        return [
                            4 /*yield*/ ,
                            this._createLedgerClientAsync()
                        ];
                    case 1:
                        _a._ledgerClientIfExists = _b.sent();
                        parentKeyDerivationPath = "m/" + this._baseDerivationPath;
                        _b.label = 2;
                    case 2:
                        _b.trys.push([
                            2,
                            ,
                            4,
                            6
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._ledgerClientIfExists.getAddress(parentKeyDerivationPath, this._shouldAlwaysAskForConfirmation, SHOULD_GET_CHAIN_CODE)
                        ];
                    case 3:
                        ledgerResponse = _b.sent();
                        return [
                            3 /*break*/ ,
                            6
                        ];
                    case 4:
                        return [
                            4 /*yield*/ ,
                            this._destroyLedgerClientAsync()
                        ];
                    case 5:
                        _b.sent();
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 6:
                        hdKey = new HDNode();
                        hdKey.publicKey = new Buffer(ledgerResponse.publicKey, 'hex');
                        hdKey.chainCode = new Buffer(ledgerResponse.chainCode, 'hex');
                        address = wallet_utils_1.walletUtils.addressOfHDKey(hdKey);
                        initialDerivedKeyInfo = {
                            hdKey: hdKey,
                            address: address,
                            derivationPath: parentKeyDerivationPath,
                            baseDerivationPath: this._baseDerivationPath
                        };
                        return [
                            2 /*return*/ ,
                            initialDerivedKeyInfo
                        ];
                }
            });
        });
    };
    LedgerSubprovider1.prototype._findDerivedKeyInfoForAddress = function(initalHDKey, address) {
        var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, initalHDKey, this._addressSearchLimit);
        if (matchedDerivedKeyInfo === undefined) throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + ": " + address);
        return matchedDerivedKeyInfo;
    };
    return LedgerSubprovider1;
}(base_wallet_subprovider_1.BaseWalletSubprovider);
exports.LedgerSubprovider = LedgerSubprovider;

},{"buffer":"fCgem","@0x/assert":"5D3Nh","@0x/utils":"dgW7d","ethereumjs-tx":"k7LMy","ethereumjs-util":"glktw","hdkey":"f0ePh","lodash":"3qBDj","semaphore-async-await":"gYhGM","../types":"cdJML","../utils/wallet_utils":"3wHC8","./base_wallet_subprovider":"kPcM4"}],"k7LMy":[function(require,module,exports) {
'use strict';
var Buffer = require("buffer").Buffer;
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
var ethUtil = require('ethereumjs-util');
var fees = require('ethereum-common/params.json');
var BN = ethUtil.BN;
// secp256k1n/2
var N_DIV_2 = new BN('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
/**
 * Creates a new transaction object.
 *
 * @example
 * var rawTx = {
 *   nonce: '00',
 *   gasPrice: '09184e72a000',
 *   gasLimit: '2710',
 *   to: '0000000000000000000000000000000000000000',
 *   value: '00',
 *   data: '7f7465737432000000000000000000000000000000000000000000000000000000600057',
 *   v: '1c',
 *   r: '5e1d3a76fbf824220eafc8c79ad578ad2b67d01b0c2425eb1f1347e8f50882ab',
 *   s: '5bd428537f05f9830e93792f90ea6a3e2d1ee84952dd96edbae9f658f831ab13'
 * };
 * var tx = new Transaction(rawTx);
 *
 * @class
 * @param {Buffer | Array | Object} data a transaction can be initiailized with either a buffer containing the RLP serialized transaction or an array of buffers relating to each of the tx Properties, listed in order below in the exmple.
 *
 * Or lastly an Object containing the Properties of the transaction like in the Usage example.
 *
 * For Object and Arrays each of the elements can either be a Buffer, a hex-prefixed (0x) String , Number, or an object with a toBuffer method such as Bignum
 *
 * @property {Buffer} raw The raw rlp encoded transaction
 * @param {Buffer} data.nonce nonce number
 * @param {Buffer} data.gasLimit transaction gas limit
 * @param {Buffer} data.gasPrice transaction gas price
 * @param {Buffer} data.to to the to address
 * @param {Buffer} data.value the amount of ether sent
 * @param {Buffer} data.data this will contain the data of the message or the init of a contract
 * @param {Buffer} data.v EC signature parameter
 * @param {Buffer} data.r EC signature parameter
 * @param {Buffer} data.s EC recovery ID
 * @param {Number} data.chainId EIP 155 chainId - mainnet: 1, ropsten: 3
 * */ var Transaction = function() {
    function Transaction1(data) {
        _classCallCheck(this, Transaction1);
        data = data || {};
        // Define Properties
        var fields = [
            {
                name: 'nonce',
                length: 32,
                allowLess: true,
                default: new Buffer([])
            },
            {
                name: 'gasPrice',
                length: 32,
                allowLess: true,
                default: new Buffer([])
            },
            {
                name: 'gasLimit',
                alias: 'gas',
                length: 32,
                allowLess: true,
                default: new Buffer([])
            },
            {
                name: 'to',
                allowZero: true,
                length: 20,
                default: new Buffer([])
            },
            {
                name: 'value',
                length: 32,
                allowLess: true,
                default: new Buffer([])
            },
            {
                name: 'data',
                alias: 'input',
                allowZero: true,
                default: new Buffer([])
            },
            {
                name: 'v',
                allowZero: true,
                default: new Buffer([
                    0x1c
                ])
            },
            {
                name: 'r',
                length: 32,
                allowZero: true,
                allowLess: true,
                default: new Buffer([])
            },
            {
                name: 's',
                length: 32,
                allowZero: true,
                allowLess: true,
                default: new Buffer([])
            }
        ];
        /**
     * Returns the rlp encoding of the transaction
     * @method serialize
     * @return {Buffer}
     * @memberof Transaction
     * @name serialize
     */ // attached serialize
        ethUtil.defineProperties(this, fields, data);
        /**
     * @property {Buffer} from (read only) sender address of this transaction, mathematically derived from other parameters.
     * @name from
     * @memberof Transaction
     */ Object.defineProperty(this, 'from', {
            enumerable: true,
            configurable: true,
            get: this.getSenderAddress.bind(this)
        });
        // calculate chainId from signature
        var sigV = ethUtil.bufferToInt(this.v);
        var chainId = Math.floor((sigV - 35) / 2);
        if (chainId < 0) chainId = 0;
        // set chainId
        this._chainId = chainId || data.chainId || 0;
        this._homestead = true;
    }
    /**
   * If the tx's `to` is to the creation address
   * @return {Boolean}
   */ Transaction1.prototype.toCreationAddress = function toCreationAddress() {
        return this.to.toString('hex') === '';
    };
    /**
   * Computes a sha3-256 hash of the serialized tx
   * @param {Boolean} [includeSignature=true] whether or not to inculde the signature
   * @return {Buffer}
   */ Transaction1.prototype.hash = function hash(includeSignature) {
        if (includeSignature === undefined) includeSignature = true;
        // EIP155 spec:
        // when computing the hash of a transaction for purposes of signing or recovering,
        // instead of hashing only the first six elements (ie. nonce, gasprice, startgas, to, value, data),
        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0
        var items = void 0;
        if (includeSignature) items = this.raw;
        else if (this._chainId > 0) {
            var raw = this.raw.slice();
            this.v = this._chainId;
            this.r = 0;
            this.s = 0;
            items = this.raw;
            this.raw = raw;
        } else items = this.raw.slice(0, 6);
        // create hash
        return ethUtil.rlphash(items);
    };
    /**
   * returns the public key of the sender
   * @return {Buffer}
   */ Transaction1.prototype.getChainId = function getChainId() {
        return this._chainId;
    };
    /**
   * returns the sender's address
   * @return {Buffer}
   */ Transaction1.prototype.getSenderAddress = function getSenderAddress() {
        if (this._from) return this._from;
        var pubkey = this.getSenderPublicKey();
        this._from = ethUtil.publicToAddress(pubkey);
        return this._from;
    };
    /**
   * returns the public key of the sender
   * @return {Buffer}
   */ Transaction1.prototype.getSenderPublicKey = function getSenderPublicKey() {
        if (!this._senderPubKey || !this._senderPubKey.length) {
            if (!this.verifySignature()) throw new Error('Invalid Signature');
        }
        return this._senderPubKey;
    };
    /**
   * Determines if the signature is valid
   * @return {Boolean}
   */ Transaction1.prototype.verifySignature = function verifySignature() {
        var msgHash = this.hash(false);
        // All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.
        if (this._homestead && new BN(this.s).cmp(N_DIV_2) === 1) return false;
        try {
            var v = ethUtil.bufferToInt(this.v);
            if (this._chainId > 0) v -= this._chainId * 2 + 8;
            this._senderPubKey = ethUtil.ecrecover(msgHash, v, this.r, this.s);
        } catch (e) {
            return false;
        }
        return !!this._senderPubKey;
    };
    /**
   * sign a transaction with a given a private key
   * @param {Buffer} privateKey
   */ Transaction1.prototype.sign = function sign(privateKey) {
        var msgHash = this.hash(false);
        var sig = ethUtil.ecsign(msgHash, privateKey);
        if (this._chainId > 0) sig.v += this._chainId * 2 + 8;
        Object.assign(this, sig);
    };
    /**
   * The amount of gas paid for the data in this tx
   * @return {BN}
   */ Transaction1.prototype.getDataFee = function getDataFee() {
        var data = this.raw[5];
        var cost = new BN(0);
        for(var i = 0; i < data.length; i++)data[i] === 0 ? cost.iaddn(fees.txDataZeroGas.v) : cost.iaddn(fees.txDataNonZeroGas.v);
        return cost;
    };
    /**
   * the minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)
   * @return {BN}
   */ Transaction1.prototype.getBaseFee = function getBaseFee() {
        var fee = this.getDataFee().iaddn(fees.txGas.v);
        if (this._homestead && this.toCreationAddress()) fee.iaddn(fees.txCreation.v);
        return fee;
    };
    /**
   * the up front amount that an account must have for this transaction to be valid
   * @return {BN}
   */ Transaction1.prototype.getUpfrontCost = function getUpfrontCost() {
        return new BN(this.gasLimit).imul(new BN(this.gasPrice)).iadd(new BN(this.value));
    };
    /**
   * validates the signature and checks to see if it has enough gas
   * @param {Boolean} [stringError=false] whether to return a string with a dscription of why the validation failed or return a Bloolean
   * @return {Boolean|String}
   */ Transaction1.prototype.validate = function validate(stringError) {
        var errors = [];
        if (!this.verifySignature()) errors.push('Invalid Signature');
        if (this.getBaseFee().cmp(new BN(this.gasLimit)) > 0) errors.push([
            'gas limit is too low. Need at least ' + this.getBaseFee()
        ]);
        if (stringError === undefined || stringError === false) return errors.length === 0;
        else return errors.join(' ');
    };
    return Transaction1;
}();
module.exports = Transaction;

},{"buffer":"fCgem","ethereumjs-util":"glktw","ethereum-common/params.json":"611Qh"}],"611Qh":[function(require,module,exports) {
module.exports = JSON.parse("{\"genesisGasLimit\":{\"v\":5000,\"d\":\"Gas limit of the Genesis block.\"},\"genesisDifficulty\":{\"v\":17179869184,\"d\":\"Difficulty of the Genesis block.\"},\"genesisNonce\":{\"v\":\"0x0000000000000042\",\"d\":\"the geneis nonce\"},\"genesisExtraData\":{\"v\":\"0x11bbe8db4e347b4e8c937c1c8370e4b5ed33adb3db69cbdb7a38e1e50b1b82fa\",\"d\":\"extra data \"},\"genesisHash\":{\"v\":\"0xd4e56740f876aef8c010b86a40d5f56745a118d0906a34e69aec8c0db1cb8fa3\",\"d\":\"genesis hash\"},\"genesisStateRoot\":{\"v\":\"0xd7f8974fb5ac78d9ac099b9ad5018bedc2ce0a72dad1827a1709da30580f0544\",\"d\":\"the genesis state root\"},\"minGasLimit\":{\"v\":5000,\"d\":\"Minimum the gas limit may ever be.\"},\"gasLimitBoundDivisor\":{\"v\":1024,\"d\":\"The bound divisor of the gas limit, used in update calculations.\"},\"minimumDifficulty\":{\"v\":131072,\"d\":\"The minimum that the difficulty may ever be.\"},\"difficultyBoundDivisor\":{\"v\":2048,\"d\":\"The bound divisor of the difficulty, used in the update calculations.\"},\"durationLimit\":{\"v\":13,\"d\":\"The decision boundary on the blocktime duration used to determine whether difficulty should go up or not.\"},\"maximumExtraDataSize\":{\"v\":32,\"d\":\"Maximum size extra data may be after Genesis.\"},\"epochDuration\":{\"v\":30000,\"d\":\"Duration between proof-of-work epochs.\"},\"stackLimit\":{\"v\":1024,\"d\":\"Maximum size of VM stack allowed.\"},\"callCreateDepth\":{\"v\":1024,\"d\":\"Maximum depth of call/create stack.\"},\"tierStepGas\":{\"v\":[0,2,3,5,8,10,20],\"d\":\"Once per operation, for a selection of them.\"},\"expGas\":{\"v\":10,\"d\":\"Once per EXP instuction.\"},\"expByteGas\":{\"v\":10,\"d\":\"Times ceil(log256(exponent)) for the EXP instruction.\"},\"sha3Gas\":{\"v\":30,\"d\":\"Once per SHA3 operation.\"},\"sha3WordGas\":{\"v\":6,\"d\":\"Once per word of the SHA3 operation's data.\"},\"sloadGas\":{\"v\":50,\"d\":\"Once per SLOAD operation.\"},\"sstoreSetGas\":{\"v\":20000,\"d\":\"Once per SSTORE operation if the zeroness changes from zero.\"},\"sstoreResetGas\":{\"v\":5000,\"d\":\"Once per SSTORE operation if the zeroness does not change from zero.\"},\"sstoreRefundGas\":{\"v\":15000,\"d\":\"Once per SSTORE operation if the zeroness changes to zero.\"},\"jumpdestGas\":{\"v\":1,\"d\":\"Refunded gas, once per SSTORE operation if the zeroness changes to zero.\"},\"logGas\":{\"v\":375,\"d\":\"Per LOG* operation.\"},\"logDataGas\":{\"v\":8,\"d\":\"Per byte in a LOG* operation's data.\"},\"logTopicGas\":{\"v\":375,\"d\":\"Multiplied by the * of the LOG*, per LOG transaction. e.g. LOG0 incurs 0 * c_txLogTopicGas, LOG4 incurs 4 * c_txLogTopicGas.\"},\"createGas\":{\"v\":32000,\"d\":\"Once per CREATE operation & contract-creation transaction.\"},\"callGas\":{\"v\":40,\"d\":\"Once per CALL operation & message call transaction.\"},\"callStipend\":{\"v\":2300,\"d\":\"Free gas given at beginning of call.\"},\"callValueTransferGas\":{\"v\":9000,\"d\":\"Paid for CALL when the value transfor is non-zero.\"},\"callNewAccountGas\":{\"v\":25000,\"d\":\"Paid for CALL when the destination address didn't exist prior.\"},\"suicideRefundGas\":{\"v\":24000,\"d\":\"Refunded following a suicide operation.\"},\"memoryGas\":{\"v\":3,\"d\":\"Times the address of the (highest referenced byte in memory + 1). NOTE: referencing happens on read, write and in instructions such as RETURN and CALL.\"},\"quadCoeffDiv\":{\"v\":512,\"d\":\"Divisor for the quadratic particle of the memory cost equation.\"},\"createDataGas\":{\"v\":200,\"d\":\"\"},\"txGas\":{\"v\":21000,\"d\":\"Per transaction. NOTE: Not payable on data of calls between transactions.\"},\"txCreation\":{\"v\":32000,\"d\":\"the cost of creating a contract via tx\"},\"txDataZeroGas\":{\"v\":4,\"d\":\"Per byte of data attached to a transaction that equals zero. NOTE: Not payable on data of calls between transactions.\"},\"txDataNonZeroGas\":{\"v\":68,\"d\":\"Per byte of data attached to a transaction that is not equal to zero. NOTE: Not payable on data of calls between transactions.\"},\"copyGas\":{\"v\":3,\"d\":\"Multiplied by the number of 32-byte words that are copied (round up) for any *COPY operation and added.\"},\"ecrecoverGas\":{\"v\":3000,\"d\":\"\"},\"sha256Gas\":{\"v\":60,\"d\":\"\"},\"sha256WordGas\":{\"v\":12,\"d\":\"\"},\"ripemd160Gas\":{\"v\":600,\"d\":\"\"},\"ripemd160WordGas\":{\"v\":120,\"d\":\"\"},\"identityGas\":{\"v\":15,\"d\":\"\"},\"identityWordGas\":{\"v\":3,\"d\":\"\"},\"minerReward\":{\"v\":\"5000000000000000000\",\"d\":\"the amount a miner get rewarded for mining a block\"},\"ommerReward\":{\"v\":\"625000000000000000\",\"d\":\"The amount of wei a miner of an uncle block gets for being inculded in the blockchain\"},\"niblingReward\":{\"v\":\"156250000000000000\",\"d\":\"the amount a miner gets for inculding a uncle\"},\"homeSteadForkNumber\":{\"v\":1150000,\"d\":\"the block that the Homestead fork started at\"},\"homesteadRepriceForkNumber\":{\"v\":2463000,\"d\":\"the block that the Homestead Reprice (EIP150) fork started at\"},\"timebombPeriod\":{\"v\":100000,\"d\":\"Exponential difficulty timebomb period\"},\"freeBlockPeriod\":{\"v\":2}}");

},{}],"f0ePh":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var assert = require('assert');
var crypto = require('crypto');
var cs = require('coinstring');
var secp256k1 = require('secp256k1');
var MASTER_SECRET = new Buffer('Bitcoin seed');
var HARDENED_OFFSET = 0x80000000;
var LEN = 78;
// Bitcoin hardcoded by default, can use package `coininfo` for others
var BITCOIN_VERSIONS = {
    private: 0x0488ADE4,
    public: 0x0488B21E
};
function HDKey(versions) {
    this.versions = versions || BITCOIN_VERSIONS;
    this.depth = 0;
    this.index = 0;
    this._privateKey = null;
    this._publicKey = null;
    this.chainCode = null;
    this._fingerprint = 0;
    this.parentFingerprint = 0;
}
Object.defineProperty(HDKey.prototype, 'fingerprint', {
    get: function() {
        return this._fingerprint;
    }
});
Object.defineProperty(HDKey.prototype, 'identifier', {
    get: function() {
        return this._identifier;
    }
});
Object.defineProperty(HDKey.prototype, 'pubKeyHash', {
    get: function() {
        return this.identifier;
    }
});
Object.defineProperty(HDKey.prototype, 'privateKey', {
    get: function() {
        return this._privateKey;
    },
    set: function(value) {
        assert.equal(value.length, 32, 'Private key must be 32 bytes.');
        assert(secp256k1.privateKeyVerify(value) === true, 'Invalid private key');
        this._privateKey = value;
        this._publicKey = secp256k1.publicKeyCreate(value, true);
        this._identifier = hash160(this.publicKey);
        this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
    }
});
Object.defineProperty(HDKey.prototype, 'publicKey', {
    get: function() {
        return this._publicKey;
    },
    set: function(value) {
        assert(value.length === 33 || value.length === 65, 'Public key must be 33 or 65 bytes.');
        assert(secp256k1.publicKeyVerify(value) === true, 'Invalid public key');
        this._publicKey = secp256k1.publicKeyConvert(value, true) // force compressed point
        ;
        this._identifier = hash160(this.publicKey);
        this._fingerprint = this._identifier.slice(0, 4).readUInt32BE(0);
        this._privateKey = null;
    }
});
Object.defineProperty(HDKey.prototype, 'privateExtendedKey', {
    get: function() {
        if (this._privateKey) return cs.encode(serialize(this, this.versions.private, Buffer.concat([
            new Buffer([
                0
            ]),
            this.privateKey
        ])));
        else return null;
    }
});
Object.defineProperty(HDKey.prototype, 'publicExtendedKey', {
    get: function() {
        return cs.encode(serialize(this, this.versions.public, this.publicKey));
    }
});
HDKey.prototype.derive = function(path) {
    if (path === 'm' || path === 'M' || path === "m'" || path === "M'") return this;
    var entries = path.split('/');
    var hdkey = this;
    entries.forEach(function(c, i) {
        if (i === 0) {
            assert(c, 'm', 'Invalid path');
            return;
        }
        var hardened = c.length > 1 && c[c.length - 1] === "'";
        var childIndex = parseInt(c, 10) // & (HARDENED_OFFSET - 1)
        ;
        assert(childIndex < HARDENED_OFFSET, 'Invalid index');
        if (hardened) childIndex += HARDENED_OFFSET;
        hdkey = hdkey.deriveChild(childIndex);
    });
    return hdkey;
};
HDKey.prototype.deriveChild = function(index) {
    var isHardened = index >= HARDENED_OFFSET;
    var indexBuffer = new Buffer(4);
    indexBuffer.writeUInt32BE(index, 0);
    var data;
    if (isHardened) {
        assert(this.privateKey, 'Could not derive hardened child key');
        var pk = this.privateKey;
        var zb = new Buffer([
            0
        ]);
        pk = Buffer.concat([
            zb,
            pk
        ]);
        // data = 0x00 || ser256(kpar) || ser32(index)
        data = Buffer.concat([
            pk,
            indexBuffer
        ]);
    } else // data = serP(point(kpar)) || ser32(index)
    //      = serP(Kpar) || ser32(index)
    data = Buffer.concat([
        this.publicKey,
        indexBuffer
    ]);
    var I = crypto.createHmac('sha512', this.chainCode).update(data).digest();
    var IL = I.slice(0, 32);
    var IR = I.slice(32);
    var hd = new HDKey(this.versions);
    // Private parent key -> private child key
    if (this.privateKey) // ki = parse256(IL) + kpar (mod n)
    try {
        hd.privateKey = secp256k1.privateKeyTweakAdd(this.privateKey, IL);
    // throw if IL >= n || (privateKey + IL) === 0
    } catch (err) {
        // In case parse256(IL) >= n or ki == 0, one should proceed with the next value for i
        return this.derive(index + 1);
    }
    else // Ki = point(parse256(IL)) + Kpar
    //    = G*IL + Kpar
    try {
        hd.publicKey = secp256k1.publicKeyTweakAdd(this.publicKey, IL, true);
    // throw if IL >= n || (g**IL + publicKey) is infinity
    } catch (err1) {
        // In case parse256(IL) >= n or Ki is the point at infinity, one should proceed with the next value for i
        return this.derive(index + 1, isHardened);
    }
    hd.chainCode = IR;
    hd.depth = this.depth + 1;
    hd.parentFingerprint = this.fingerprint // .readUInt32BE(0)
    ;
    hd.index = index;
    return hd;
};
HDKey.prototype.toJSON = function() {
    return {
        xpriv: this.privateExtendedKey,
        xpub: this.publicExtendedKey
    };
};
HDKey.fromMasterSeed = function(seedBuffer, versions) {
    var I = crypto.createHmac('sha512', MASTER_SECRET).update(seedBuffer).digest();
    var IL = I.slice(0, 32);
    var IR = I.slice(32);
    var hdkey = new HDKey(versions);
    hdkey.chainCode = IR;
    hdkey.privateKey = IL;
    return hdkey;
};
HDKey.fromExtendedKey = function(base58key, versions) {
    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
    versions = versions || BITCOIN_VERSIONS;
    var hdkey = new HDKey(versions);
    var keyBuffer = cs.decode(base58key);
    var version = keyBuffer.readUInt32BE(0);
    assert(version === versions.private || version === versions.public, 'Version mismatch: does not match private or public');
    hdkey.depth = keyBuffer.readUInt8(4);
    hdkey.parentFingerprint = keyBuffer.readUInt32BE(5);
    hdkey.index = keyBuffer.readUInt32BE(9);
    hdkey.chainCode = keyBuffer.slice(13, 45);
    var key = keyBuffer.slice(45);
    if (key.readUInt8(0) === 0) {
        assert(version === versions.private, 'Version mismatch: version does not match private');
        hdkey.privateKey = key.slice(1) // cut off first 0x0 byte
        ;
    } else {
        assert(version === versions.public, 'Version mismatch: version does not match public');
        hdkey.publicKey = key;
    }
    return hdkey;
};
HDKey.fromJSON = function(obj) {
    return HDKey.fromExtendedKey(obj.xpriv);
};
function serialize(hdkey, version, key) {
    // => version(4) || depth(1) || fingerprint(4) || index(4) || chain(32) || key(33)
    var buffer = new Buffer(LEN);
    buffer.writeUInt32BE(version, 0);
    buffer.writeUInt8(hdkey.depth, 4);
    var fingerprint = hdkey.depth ? hdkey.parentFingerprint : 0x00000000;
    buffer.writeUInt32BE(fingerprint, 5);
    buffer.writeUInt32BE(hdkey.index, 9);
    hdkey.chainCode.copy(buffer, 13);
    key.copy(buffer, 45);
    return buffer;
}
function hash160(buf) {
    var sha = crypto.createHash('sha256').update(buf).digest();
    return crypto.createHash('rmd160').update(sha).digest();
}
HDKey.HARDENED_OFFSET = HARDENED_OFFSET;
module.exports = HDKey;

},{"buffer":"fCgem","assert":"f3tT4","crypto":"hagNj","coinstring":"bDwvs","secp256k1":"eY5po"}],"bDwvs":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var base58 = require('bs58');
var createHash = require('create-hash');
function encode(payload, version) {
    if (Array.isArray(payload) || payload instanceof Uint8Array) payload = new Buffer(payload);
    var buf;
    if (version != null) {
        if (typeof version === 'number') version = new Buffer([
            version
        ]);
        buf = Buffer.concat([
            version,
            payload
        ]);
    } else buf = payload;
    var checksum = sha256x2(buf).slice(0, 4);
    var result = Buffer.concat([
        buf,
        checksum
    ]);
    return base58.encode(result);
}
function decode(base58str, version) {
    var arr = base58.decode(base58str);
    var buf = new Buffer(arr);
    var versionLength;
    if (version == null) versionLength = 0;
    else {
        if (typeof version === 'number') version = new Buffer([
            version
        ]);
        versionLength = version.length;
        var versionCompare = buf.slice(0, versionLength);
        if (versionCompare.toString('hex') !== version.toString('hex')) throw new Error('Invalid version');
    }
    var checksum = buf.slice(-4);
    var endPos = buf.length - 4;
    var bytes = buf.slice(0, endPos);
    var newChecksum = sha256x2(bytes).slice(0, 4);
    if (checksum.toString('hex') !== newChecksum.toString('hex')) throw new Error('Invalid checksum');
    return bytes.slice(versionLength);
}
function isValid(base58str, version) {
    try {
        decode(base58str, version);
    } catch (e) {
        return false;
    }
    return true;
}
function createEncoder(version) {
    return function(payload) {
        return encode(payload, version);
    };
}
function createDecoder(version) {
    return function(base58str) {
        return decode(base58str, version);
    };
}
function createValidator(version) {
    return function(base58str) {
        return isValid(base58str, version);
    };
}
function sha256x2(buffer) {
    var sha = createHash('sha256').update(buffer).digest();
    return createHash('sha256').update(sha).digest();
}
module.exports = {
    encode: encode,
    decode: decode,
    isValid: isValid,
    createEncoder: createEncoder,
    createDecoder: createDecoder,
    createValidator: createValidator
};

},{"buffer":"fCgem","bs58":"3rBuI","create-hash":"2WyL8"}],"3rBuI":[function(require,module,exports) {
// Base58 encoding/decoding
// Originally written by Mike Hearn for BitcoinJ
// Copyright (c) 2011 Google Inc
// Ported to JavaScript by Stefan Thomas
// Merged Buffer refactorings from base58-native by Stephen Pair
// Copyright (c) 2013 BitPay Inc
var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
var ALPHABET_MAP = {};
for(var i = 0; i < ALPHABET.length; i++)ALPHABET_MAP[ALPHABET.charAt(i)] = i;
var BASE = 58;
function encode(buffer) {
    if (buffer.length === 0) return '';
    var i1, j, digits = [
        0
    ];
    for(i1 = 0; i1 < buffer.length; i1++){
        for(j = 0; j < digits.length; j++)digits[j] <<= 8;
        digits[0] += buffer[i1];
        var carry = 0;
        for(j = 0; j < digits.length; ++j){
            digits[j] += carry;
            carry = digits[j] / BASE | 0;
            digits[j] %= BASE;
        }
        while(carry){
            digits.push(carry % BASE);
            carry = carry / BASE | 0;
        }
    }
    // deal with leading zeros
    for(i1 = 0; buffer[i1] === 0 && i1 < buffer.length - 1; i1++)digits.push(0);
    // convert digits to a string
    var stringOutput = "";
    for(var i1 = digits.length - 1; i1 >= 0; i1--)stringOutput = stringOutput + ALPHABET[digits[i1]];
    return stringOutput;
}
function decode(string) {
    if (string.length === 0) return [];
    var i2, j, bytes = [
        0
    ];
    for(i2 = 0; i2 < string.length; i2++){
        var c = string[i2];
        if (!(c in ALPHABET_MAP)) throw new Error('Non-base58 character');
        for(j = 0; j < bytes.length; j++)bytes[j] *= BASE;
        bytes[0] += ALPHABET_MAP[c];
        var carry = 0;
        for(j = 0; j < bytes.length; ++j){
            bytes[j] += carry;
            carry = bytes[j] >> 8;
            bytes[j] &= 0xff;
        }
        while(carry){
            bytes.push(carry & 0xff);
            carry >>= 8;
        }
    }
    // deal with leading zeros
    for(i2 = 0; string[i2] === '1' && i2 < string.length - 1; i2++)bytes.push(0);
    return bytes.reverse();
}
module.exports = {
    encode: encode,
    decode: decode
};

},{}],"eY5po":[function(require,module,exports) {
'use strict';
module.exports = require('./lib')(require('./lib/elliptic'));

},{"./lib":"8BR3M","./lib/elliptic":"l7b0B"}],"8BR3M":[function(require,module,exports) {
'use strict';
var assert = require('./assert');
var der = require('./der');
var messages = require('./messages.json');
function initCompressedValue(value, defaultValue) {
    if (value === undefined) return defaultValue;
    assert.isBoolean(value, messages.COMPRESSED_TYPE_INVALID);
    return value;
}
module.exports = function(secp256k1) {
    return {
        privateKeyVerify: function(privateKey) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            return privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey);
        },
        privateKeyExport: function(privateKey, compressed) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            compressed = initCompressedValue(compressed, true);
            var publicKey = secp256k1.privateKeyExport(privateKey, compressed);
            return der.privateKeyExport(privateKey, publicKey, compressed);
        },
        privateKeyImport: function(privateKey) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            privateKey = der.privateKeyImport(privateKey);
            if (privateKey && privateKey.length === 32 && secp256k1.privateKeyVerify(privateKey)) return privateKey;
            throw new Error(messages.EC_PRIVATE_KEY_IMPORT_DER_FAIL);
        },
        privateKeyNegate: function(privateKey) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            return secp256k1.privateKeyNegate(privateKey);
        },
        privateKeyModInverse: function(privateKey) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            return secp256k1.privateKeyModInverse(privateKey);
        },
        privateKeyTweakAdd: function(privateKey, tweak) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
            assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
            return secp256k1.privateKeyTweakAdd(privateKey, tweak);
        },
        privateKeyTweakMul: function(privateKey, tweak) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
            assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
            return secp256k1.privateKeyTweakMul(privateKey, tweak);
        },
        publicKeyCreate: function(privateKey, compressed) {
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            compressed = initCompressedValue(compressed, true);
            return secp256k1.publicKeyCreate(privateKey, compressed);
        },
        publicKeyConvert: function(publicKey, compressed) {
            assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
            assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
            compressed = initCompressedValue(compressed, true);
            return secp256k1.publicKeyConvert(publicKey, compressed);
        },
        publicKeyVerify: function(publicKey) {
            assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
            return secp256k1.publicKeyVerify(publicKey);
        },
        publicKeyTweakAdd: function(publicKey, tweak, compressed) {
            assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
            assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
            assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
            assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
            compressed = initCompressedValue(compressed, true);
            return secp256k1.publicKeyTweakAdd(publicKey, tweak, compressed);
        },
        publicKeyTweakMul: function(publicKey, tweak, compressed) {
            assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
            assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
            assert.isBuffer(tweak, messages.TWEAK_TYPE_INVALID);
            assert.isBufferLength(tweak, 32, messages.TWEAK_LENGTH_INVALID);
            compressed = initCompressedValue(compressed, true);
            return secp256k1.publicKeyTweakMul(publicKey, tweak, compressed);
        },
        publicKeyCombine: function(publicKeys, compressed) {
            assert.isArray(publicKeys, messages.EC_PUBLIC_KEYS_TYPE_INVALID);
            assert.isLengthGTZero(publicKeys, messages.EC_PUBLIC_KEYS_LENGTH_INVALID);
            for(var i = 0; i < publicKeys.length; ++i){
                assert.isBuffer(publicKeys[i], messages.EC_PUBLIC_KEY_TYPE_INVALID);
                assert.isBufferLength2(publicKeys[i], 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
            }
            compressed = initCompressedValue(compressed, true);
            return secp256k1.publicKeyCombine(publicKeys, compressed);
        },
        signatureNormalize: function(signature) {
            assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
            assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
            return secp256k1.signatureNormalize(signature);
        },
        signatureExport: function(signature) {
            assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
            assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
            var sigObj = secp256k1.signatureExport(signature);
            return der.signatureExport(sigObj);
        },
        signatureImport: function(sig) {
            assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
            assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
            var sigObj = der.signatureImport(sig);
            if (sigObj) return secp256k1.signatureImport(sigObj);
            throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
        },
        signatureImportLax: function(sig) {
            assert.isBuffer(sig, messages.ECDSA_SIGNATURE_TYPE_INVALID);
            assert.isLengthGTZero(sig, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
            var sigObj = der.signatureImportLax(sig);
            if (sigObj) return secp256k1.signatureImport(sigObj);
            throw new Error(messages.ECDSA_SIGNATURE_PARSE_DER_FAIL);
        },
        sign: function(message, privateKey, options) {
            assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
            assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            var data = null;
            var noncefn = null;
            if (options !== undefined) {
                assert.isObject(options, messages.OPTIONS_TYPE_INVALID);
                if (options.data !== undefined) {
                    assert.isBuffer(options.data, messages.OPTIONS_DATA_TYPE_INVALID);
                    assert.isBufferLength(options.data, 32, messages.OPTIONS_DATA_LENGTH_INVALID);
                    data = options.data;
                }
                if (options.noncefn !== undefined) {
                    assert.isFunction(options.noncefn, messages.OPTIONS_NONCEFN_TYPE_INVALID);
                    noncefn = options.noncefn;
                }
            }
            return secp256k1.sign(message, privateKey, noncefn, data);
        },
        verify: function(message, signature, publicKey) {
            assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
            assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);
            assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
            assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
            assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
            assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
            return secp256k1.verify(message, signature, publicKey);
        },
        recover: function(message, signature, recovery, compressed) {
            assert.isBuffer(message, messages.MSG32_TYPE_INVALID);
            assert.isBufferLength(message, 32, messages.MSG32_LENGTH_INVALID);
            assert.isBuffer(signature, messages.ECDSA_SIGNATURE_TYPE_INVALID);
            assert.isBufferLength(signature, 64, messages.ECDSA_SIGNATURE_LENGTH_INVALID);
            assert.isNumber(recovery, messages.RECOVERY_ID_TYPE_INVALID);
            assert.isNumberInInterval(recovery, -1, 4, messages.RECOVERY_ID_VALUE_INVALID);
            compressed = initCompressedValue(compressed, true);
            return secp256k1.recover(message, signature, recovery, compressed);
        },
        ecdh: function(publicKey, privateKey) {
            assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
            assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            return secp256k1.ecdh(publicKey, privateKey);
        },
        ecdhUnsafe: function(publicKey, privateKey, compressed) {
            assert.isBuffer(publicKey, messages.EC_PUBLIC_KEY_TYPE_INVALID);
            assert.isBufferLength2(publicKey, 33, 65, messages.EC_PUBLIC_KEY_LENGTH_INVALID);
            assert.isBuffer(privateKey, messages.EC_PRIVATE_KEY_TYPE_INVALID);
            assert.isBufferLength(privateKey, 32, messages.EC_PRIVATE_KEY_LENGTH_INVALID);
            compressed = initCompressedValue(compressed, true);
            return secp256k1.ecdhUnsafe(publicKey, privateKey, compressed);
        }
    };
};

},{"./assert":"a7fXN","./der":"c1OGr","./messages.json":"5LQwx"}],"a7fXN":[function(require,module,exports) {
'use strict';
var Buffer = require("buffer").Buffer;
var toString = Object.prototype.toString;
// TypeError
exports.isArray = function(value, message) {
    if (!Array.isArray(value)) throw TypeError(message);
};
exports.isBoolean = function(value, message) {
    if (toString.call(value) !== '[object Boolean]') throw TypeError(message);
};
exports.isBuffer = function(value, message) {
    if (!Buffer.isBuffer(value)) throw TypeError(message);
};
exports.isFunction = function(value, message) {
    if (toString.call(value) !== '[object Function]') throw TypeError(message);
};
exports.isNumber = function(value, message) {
    if (toString.call(value) !== '[object Number]') throw TypeError(message);
};
exports.isObject = function(value, message) {
    if (toString.call(value) !== '[object Object]') throw TypeError(message);
};
// RangeError
exports.isBufferLength = function(buffer, length, message) {
    if (buffer.length !== length) throw RangeError(message);
};
exports.isBufferLength2 = function(buffer, length1, length2, message) {
    if (buffer.length !== length1 && buffer.length !== length2) throw RangeError(message);
};
exports.isLengthGTZero = function(value, message) {
    if (value.length === 0) throw RangeError(message);
};
exports.isNumberInInterval = function(number, x, y, message) {
    if (number <= x || number >= y) throw RangeError(message);
};

},{"buffer":"fCgem"}],"c1OGr":[function(require,module,exports) {
'use strict';
var Buffer = require('safe-buffer').Buffer;
var bip66 = require('bip66');
var EC_PRIVKEY_EXPORT_DER_COMPRESSED = Buffer.from([
    // begin
    0x30,
    0x81,
    0xd3,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0x85,
    0x30,
    0x81,
    0x82,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xcE,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfE,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x21,
    0x02,
    0x79,
    0xbE,
    0x66,
    0x7E,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xcE,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xcE,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfE,
    0xba,
    0xaE,
    0xdc,
    0xE6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5E,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x24,
    0x03,
    0x22,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
]);
var EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = Buffer.from([
    // begin
    0x30,
    0x82,
    0x01,
    0x13,
    0x02,
    0x01,
    0x01,
    0x04,
    0x20,
    // private key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    // middle
    0xa0,
    0x81,
    0xa5,
    0x30,
    0x81,
    0xa2,
    0x02,
    0x01,
    0x01,
    0x30,
    0x2c,
    0x06,
    0x07,
    0x2a,
    0x86,
    0x48,
    0xcE,
    0x3d,
    0x01,
    0x01,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfE,
    0xff,
    0xff,
    0xfc,
    0x2f,
    0x30,
    0x06,
    0x04,
    0x01,
    0x00,
    0x04,
    0x01,
    0x07,
    0x04,
    0x41,
    0x04,
    0x79,
    0xbE,
    0x66,
    0x7E,
    0xf9,
    0xdc,
    0xbb,
    0xac,
    0x55,
    0xa0,
    0x62,
    0x95,
    0xcE,
    0x87,
    0x0b,
    0x07,
    0x02,
    0x9b,
    0xfc,
    0xdb,
    0x2d,
    0xcE,
    0x28,
    0xd9,
    0x59,
    0xf2,
    0x81,
    0x5b,
    0x16,
    0xf8,
    0x17,
    0x98,
    0x48,
    0x3a,
    0xda,
    0x77,
    0x26,
    0xa3,
    0xc4,
    0x65,
    0x5d,
    0xa4,
    0xfb,
    0xfc,
    0x0E,
    0x11,
    0x08,
    0xa8,
    0xfd,
    0x17,
    0xb4,
    0x48,
    0xa6,
    0x85,
    0x54,
    0x19,
    0x9c,
    0x47,
    0xd0,
    0x8f,
    0xfb,
    0x10,
    0xd4,
    0xb8,
    0x02,
    0x21,
    0x00,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xff,
    0xfE,
    0xba,
    0xaE,
    0xdc,
    0xE6,
    0xaf,
    0x48,
    0xa0,
    0x3b,
    0xbf,
    0xd2,
    0x5E,
    0x8c,
    0xd0,
    0x36,
    0x41,
    0x41,
    0x02,
    0x01,
    0x01,
    0xa1,
    0x44,
    0x03,
    0x42,
    0x00,
    // public key
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00,
    0x00
]);
exports.privateKeyExport = function(privateKey, publicKey, compressed) {
    var result = Buffer.from(compressed ? EC_PRIVKEY_EXPORT_DER_COMPRESSED : EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result;
};
exports.privateKeyImport = function(privateKey) {
    var length = privateKey.length;
    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 0x30) return;
    index += 1;
    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 0x80)) return;
    var lenb = privateKey[index] & 0x7f;
    index += 1;
    if (lenb < 1 || lenb > 2) return;
    if (length < index + lenb) return;
    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len) return;
    // sequence element 0: version number (=1)
    if (length < index + 3 || privateKey[index] !== 0x02 || privateKey[index + 1] !== 0x01 || privateKey[index + 2] !== 0x01) return;
    index += 3;
    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 || privateKey[index] !== 0x04 || privateKey[index + 1] > 0x20 || length < index + 2 + privateKey[index + 1]) return;
    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};
exports.signatureExport = function(sigObj) {
    var r = Buffer.concat([
        Buffer.from([
            0
        ]),
        sigObj.r
    ]);
    for(var lenR = 33, posR = 0; lenR > 1 && r[posR] === 0x00 && !(r[posR + 1] & 0x80); --lenR, ++posR);
    var s = Buffer.concat([
        Buffer.from([
            0
        ]),
        sigObj.s
    ]);
    for(var lenS = 33, posS = 0; lenS > 1 && s[posS] === 0x00 && !(s[posS + 1] & 0x80); --lenS, ++posS);
    return bip66.encode(r.slice(posR), s.slice(posS));
};
exports.signatureImport = function(sig) {
    var r = Buffer.alloc(32, 0);
    var s = Buffer.alloc(32, 0);
    try {
        var sigObj = bip66.decode(sig);
        if (sigObj.r.length === 33 && sigObj.r[0] === 0x00) sigObj.r = sigObj.r.slice(1);
        if (sigObj.r.length > 32) throw new Error('R length is too long');
        if (sigObj.s.length === 33 && sigObj.s[0] === 0x00) sigObj.s = sigObj.s.slice(1);
        if (sigObj.s.length > 32) throw new Error('S length is too long');
    } catch (err) {
        return;
    }
    sigObj.r.copy(r, 32 - sigObj.r.length);
    sigObj.s.copy(s, 32 - sigObj.s.length);
    return {
        r: r,
        s: s
    };
};
exports.signatureImportLax = function(sig) {
    var r = Buffer.alloc(32, 0);
    var s = Buffer.alloc(32, 0);
    var length = sig.length;
    var index = 0;
    // sequence tag byte
    if (sig[index++] !== 0x30) return;
    // sequence length byte
    var lenbyte = sig[index++];
    if (lenbyte & 0x80) {
        index += lenbyte - 0x80;
        if (index > length) return;
    }
    // sequence tag byte for r
    if (sig[index++] !== 0x02) return;
    // length for r
    var rlen = sig[index++];
    if (rlen & 0x80) {
        lenbyte = rlen - 0x80;
        if (index + lenbyte > length) return;
        for(; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
        for(rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)rlen = (rlen << 8) + sig[index];
    }
    if (rlen > length - index) return;
    var rindex = index;
    index += rlen;
    // sequence tag byte for s
    if (sig[index++] !== 0x02) return;
    // length for s
    var slen = sig[index++];
    if (slen & 0x80) {
        lenbyte = slen - 0x80;
        if (index + lenbyte > length) return;
        for(; lenbyte > 0 && sig[index] === 0x00; index += 1, lenbyte -= 1);
        for(slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)slen = (slen << 8) + sig[index];
    }
    if (slen > length - index) return;
    var sindex = index;
    index += slen;
    // ignore leading zeros in r
    for(; rlen > 0 && sig[rindex] === 0x00; rlen -= 1, rindex += 1);
    // copy r value
    if (rlen > 32) return;
    var rvalue = sig.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);
    // ignore leading zeros in s
    for(; slen > 0 && sig[sindex] === 0x00; slen -= 1, sindex += 1);
    // copy s value
    if (slen > 32) return;
    var svalue = sig.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);
    return {
        r: r,
        s: s
    };
};

},{"safe-buffer":"eW7r9","bip66":"kvzde"}],"kvzde":[function(require,module,exports) {
// Reference https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki
// Format: 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
// NOTE: SIGHASH byte ignored AND restricted, truncate before use
var Buffer = require('safe-buffer').Buffer;
function check(buffer) {
    if (buffer.length < 8) return false;
    if (buffer.length > 72) return false;
    if (buffer[0] !== 0x30) return false;
    if (buffer[1] !== buffer.length - 2) return false;
    if (buffer[2] !== 0x02) return false;
    var lenR = buffer[3];
    if (lenR === 0) return false;
    if (5 + lenR >= buffer.length) return false;
    if (buffer[4 + lenR] !== 0x02) return false;
    var lenS = buffer[5 + lenR];
    if (lenS === 0) return false;
    if (6 + lenR + lenS !== buffer.length) return false;
    if (buffer[4] & 0x80) return false;
    if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) return false;
    if (buffer[lenR + 6] & 0x80) return false;
    if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) return false;
    return true;
}
function decode(buffer) {
    if (buffer.length < 8) throw new Error('DER sequence length is too short');
    if (buffer.length > 72) throw new Error('DER sequence length is too long');
    if (buffer[0] !== 0x30) throw new Error('Expected DER sequence');
    if (buffer[1] !== buffer.length - 2) throw new Error('DER sequence length is invalid');
    if (buffer[2] !== 0x02) throw new Error('Expected DER integer');
    var lenR = buffer[3];
    if (lenR === 0) throw new Error('R length is zero');
    if (5 + lenR >= buffer.length) throw new Error('R length is too long');
    if (buffer[4 + lenR] !== 0x02) throw new Error('Expected DER integer (2)');
    var lenS = buffer[5 + lenR];
    if (lenS === 0) throw new Error('S length is zero');
    if (6 + lenR + lenS !== buffer.length) throw new Error('S length is invalid');
    if (buffer[4] & 0x80) throw new Error('R value is negative');
    if (lenR > 1 && buffer[4] === 0x00 && !(buffer[5] & 0x80)) throw new Error('R value excessively padded');
    if (buffer[lenR + 6] & 0x80) throw new Error('S value is negative');
    if (lenS > 1 && buffer[lenR + 6] === 0x00 && !(buffer[lenR + 7] & 0x80)) throw new Error('S value excessively padded');
    // non-BIP66 - extract R, S values
    return {
        r: buffer.slice(4, 4 + lenR),
        s: buffer.slice(6 + lenR)
    };
}
/*
 * Expects r and s to be positive DER integers.
 *
 * The DER format uses the most significant bit as a sign bit (& 0x80).
 * If the significant bit is set AND the integer is positive, a 0x00 is prepended.
 *
 * Examples:
 *
 *      0 =>     0x00
 *      1 =>     0x01
 *     -1 =>     0xff
 *    127 =>     0x7f
 *   -127 =>     0x81
 *    128 =>   0x0080
 *   -128 =>     0x80
 *    255 =>   0x00ff
 *   -255 =>   0xff01
 *  16300 =>   0x3fac
 * -16300 =>   0xc054
 *  62300 => 0x00f35c
 * -62300 => 0xff0ca4
*/ function encode(r, s) {
    var lenR = r.length;
    var lenS = s.length;
    if (lenR === 0) throw new Error('R length is zero');
    if (lenS === 0) throw new Error('S length is zero');
    if (lenR > 33) throw new Error('R length is too long');
    if (lenS > 33) throw new Error('S length is too long');
    if (r[0] & 0x80) throw new Error('R value is negative');
    if (s[0] & 0x80) throw new Error('S value is negative');
    if (lenR > 1 && r[0] === 0x00 && !(r[1] & 0x80)) throw new Error('R value excessively padded');
    if (lenS > 1 && s[0] === 0x00 && !(s[1] & 0x80)) throw new Error('S value excessively padded');
    var signature = Buffer.allocUnsafe(6 + lenR + lenS);
    // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
    signature[0] = 0x30;
    signature[1] = signature.length - 2;
    signature[2] = 0x02;
    signature[3] = r.length;
    r.copy(signature, 4);
    signature[4 + lenR] = 0x02;
    signature[5 + lenR] = s.length;
    s.copy(signature, 6 + lenR);
    return signature;
}
module.exports = {
    check: check,
    decode: decode,
    encode: encode
};

},{"safe-buffer":"eW7r9"}],"5LQwx":[function(require,module,exports) {
module.exports = JSON.parse("{\"COMPRESSED_TYPE_INVALID\":\"compressed should be a boolean\",\"EC_PRIVATE_KEY_TYPE_INVALID\":\"private key should be a Buffer\",\"EC_PRIVATE_KEY_LENGTH_INVALID\":\"private key length is invalid\",\"EC_PRIVATE_KEY_RANGE_INVALID\":\"private key range is invalid\",\"EC_PRIVATE_KEY_TWEAK_ADD_FAIL\":\"tweak out of range or resulting private key is invalid\",\"EC_PRIVATE_KEY_TWEAK_MUL_FAIL\":\"tweak out of range\",\"EC_PRIVATE_KEY_EXPORT_DER_FAIL\":\"couldn't export to DER format\",\"EC_PRIVATE_KEY_IMPORT_DER_FAIL\":\"couldn't import from DER format\",\"EC_PUBLIC_KEYS_TYPE_INVALID\":\"public keys should be an Array\",\"EC_PUBLIC_KEYS_LENGTH_INVALID\":\"public keys Array should have at least 1 element\",\"EC_PUBLIC_KEY_TYPE_INVALID\":\"public key should be a Buffer\",\"EC_PUBLIC_KEY_LENGTH_INVALID\":\"public key length is invalid\",\"EC_PUBLIC_KEY_PARSE_FAIL\":\"the public key could not be parsed or is invalid\",\"EC_PUBLIC_KEY_CREATE_FAIL\":\"private was invalid, try again\",\"EC_PUBLIC_KEY_TWEAK_ADD_FAIL\":\"tweak out of range or resulting public key is invalid\",\"EC_PUBLIC_KEY_TWEAK_MUL_FAIL\":\"tweak out of range\",\"EC_PUBLIC_KEY_COMBINE_FAIL\":\"the sum of the public keys is not valid\",\"ECDH_FAIL\":\"scalar was invalid (zero or overflow)\",\"ECDSA_SIGNATURE_TYPE_INVALID\":\"signature should be a Buffer\",\"ECDSA_SIGNATURE_LENGTH_INVALID\":\"signature length is invalid\",\"ECDSA_SIGNATURE_PARSE_FAIL\":\"couldn't parse signature\",\"ECDSA_SIGNATURE_PARSE_DER_FAIL\":\"couldn't parse DER signature\",\"ECDSA_SIGNATURE_SERIALIZE_DER_FAIL\":\"couldn't serialize signature to DER format\",\"ECDSA_SIGN_FAIL\":\"nonce generation function failed or private key is invalid\",\"ECDSA_RECOVER_FAIL\":\"couldn't recover public key from signature\",\"MSG32_TYPE_INVALID\":\"message should be a Buffer\",\"MSG32_LENGTH_INVALID\":\"message length is invalid\",\"OPTIONS_TYPE_INVALID\":\"options should be an Object\",\"OPTIONS_DATA_TYPE_INVALID\":\"options.data should be a Buffer\",\"OPTIONS_DATA_LENGTH_INVALID\":\"options.data length is invalid\",\"OPTIONS_NONCEFN_TYPE_INVALID\":\"options.noncefn should be a Function\",\"RECOVERY_ID_TYPE_INVALID\":\"recovery should be a Number\",\"RECOVERY_ID_VALUE_INVALID\":\"recovery should have value between -1 and 4\",\"TWEAK_TYPE_INVALID\":\"tweak should be a Buffer\",\"TWEAK_LENGTH_INVALID\":\"tweak length is invalid\"}");

},{}],"l7b0B":[function(require,module,exports) {
'use strict';
var Buffer = require('safe-buffer').Buffer;
var createHash = require('create-hash');
var BN = require('bn.js');
var EC = require('elliptic').ec;
var messages = require('../messages.json');
var ec = new EC('secp256k1');
var ecparams = ec.curve;
function loadCompressedPublicKey(first, xBuffer) {
    var x = new BN(xBuffer);
    // overflow
    if (x.cmp(ecparams.p) >= 0) return null;
    x = x.toRed(ecparams.red);
    // compute corresponding Y
    var y = x.redSqr().redIMul(x).redIAdd(ecparams.b).redSqrt();
    if (first === 0x03 !== y.isOdd()) y = y.redNeg();
    return ec.keyPair({
        pub: {
            x: x,
            y: y
        }
    });
}
function loadUncompressedPublicKey(first, xBuffer, yBuffer) {
    var x = new BN(xBuffer);
    var y = new BN(yBuffer);
    // overflow
    if (x.cmp(ecparams.p) >= 0 || y.cmp(ecparams.p) >= 0) return null;
    x = x.toRed(ecparams.red);
    y = y.toRed(ecparams.red);
    // is odd flag
    if ((first === 0x06 || first === 0x07) && y.isOdd() !== (first === 0x07)) return null;
    // x*x*x + b = y*y
    var x3 = x.redSqr().redIMul(x);
    if (!y.redSqr().redISub(x3.redIAdd(ecparams.b)).isZero()) return null;
    return ec.keyPair({
        pub: {
            x: x,
            y: y
        }
    });
}
function loadPublicKey(publicKey) {
    var first = publicKey[0];
    switch(first){
        case 0x02:
        case 0x03:
            if (publicKey.length !== 33) return null;
            return loadCompressedPublicKey(first, publicKey.slice(1, 33));
        case 0x04:
        case 0x06:
        case 0x07:
            if (publicKey.length !== 65) return null;
            return loadUncompressedPublicKey(first, publicKey.slice(1, 33), publicKey.slice(33, 65));
        default:
            return null;
    }
}
exports.privateKeyVerify = function(privateKey) {
    var bn = new BN(privateKey);
    return bn.cmp(ecparams.n) < 0 && !bn.isZero();
};
exports.privateKeyExport = function(privateKey, compressed) {
    var d = new BN(privateKey);
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PRIVATE_KEY_EXPORT_DER_FAIL);
    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true));
};
exports.privateKeyNegate = function(privateKey) {
    var bn = new BN(privateKey);
    return bn.isZero() ? Buffer.alloc(32) : ecparams.n.sub(bn).umod(ecparams.n).toArrayLike(Buffer, 'be', 32);
};
exports.privateKeyModInverse = function(privateKey) {
    var bn = new BN(privateKey);
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_RANGE_INVALID);
    return bn.invm(ecparams.n).toArrayLike(Buffer, 'be', 32);
};
exports.privateKeyTweakAdd = function(privateKey, tweak) {
    var bn = new BN(tweak);
    if (bn.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
    bn.iadd(new BN(privateKey));
    if (bn.cmp(ecparams.n) >= 0) bn.isub(ecparams.n);
    if (bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_ADD_FAIL);
    return bn.toArrayLike(Buffer, 'be', 32);
};
exports.privateKeyTweakMul = function(privateKey, tweak) {
    var bn = new BN(tweak);
    if (bn.cmp(ecparams.n) >= 0 || bn.isZero()) throw new Error(messages.EC_PRIVATE_KEY_TWEAK_MUL_FAIL);
    bn.imul(new BN(privateKey));
    if (bn.cmp(ecparams.n)) bn = bn.umod(ecparams.n);
    return bn.toArrayLike(Buffer, 'be', 32);
};
exports.publicKeyCreate = function(privateKey, compressed) {
    var d = new BN(privateKey);
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.EC_PUBLIC_KEY_CREATE_FAIL);
    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, true));
};
exports.publicKeyConvert = function(publicKey, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
    return Buffer.from(pair.getPublic(compressed, true));
};
exports.publicKeyVerify = function(publicKey) {
    return loadPublicKey(publicKey) !== null;
};
exports.publicKeyTweakAdd = function(publicKey, tweak, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
    tweak = new BN(tweak);
    if (tweak.cmp(ecparams.n) >= 0) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);
    var point = ecparams.g.mul(tweak).add(pair.pub);
    if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_ADD_FAIL);
    return Buffer.from(point.encode(true, compressed));
};
exports.publicKeyTweakMul = function(publicKey, tweak, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
    tweak = new BN(tweak);
    if (tweak.cmp(ecparams.n) >= 0 || tweak.isZero()) throw new Error(messages.EC_PUBLIC_KEY_TWEAK_MUL_FAIL);
    return Buffer.from(pair.pub.mul(tweak).encode(true, compressed));
};
exports.publicKeyCombine = function(publicKeys, compressed) {
    var pairs = new Array(publicKeys.length);
    for(var i = 0; i < publicKeys.length; ++i){
        pairs[i] = loadPublicKey(publicKeys[i]);
        if (pairs[i] === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
    }
    var point = pairs[0].pub;
    for(var j = 1; j < pairs.length; ++j)point = point.add(pairs[j].pub);
    if (point.isInfinity()) throw new Error(messages.EC_PUBLIC_KEY_COMBINE_FAIL);
    return Buffer.from(point.encode(true, compressed));
};
exports.signatureNormalize = function(signature) {
    var r = new BN(signature.slice(0, 32));
    var s = new BN(signature.slice(32, 64));
    if (r.cmp(ecparams.n) >= 0 || s.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
    var result = Buffer.from(signature);
    if (s.cmp(ec.nh) === 1) ecparams.n.sub(s).toArrayLike(Buffer, 'be', 32).copy(result, 32);
    return result;
};
exports.signatureExport = function(signature) {
    var r = signature.slice(0, 32);
    var s = signature.slice(32, 64);
    if (new BN(r).cmp(ecparams.n) >= 0 || new BN(s).cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
    return {
        r: r,
        s: s
    };
};
exports.signatureImport = function(sigObj) {
    var r = new BN(sigObj.r);
    if (r.cmp(ecparams.n) >= 0) r = new BN(0);
    var s = new BN(sigObj.s);
    if (s.cmp(ecparams.n) >= 0) s = new BN(0);
    return Buffer.concat([
        r.toArrayLike(Buffer, 'be', 32),
        s.toArrayLike(Buffer, 'be', 32)
    ]);
};
exports.sign = function(message, privateKey, noncefn, data) {
    if (typeof noncefn === 'function') {
        var getNonce = noncefn;
        noncefn = function(counter) {
            var nonce = getNonce(message, privateKey, null, data, counter);
            if (!Buffer.isBuffer(nonce) || nonce.length !== 32) throw new Error(messages.ECDSA_SIGN_FAIL);
            return new BN(nonce);
        };
    }
    var d = new BN(privateKey);
    if (d.cmp(ecparams.n) >= 0 || d.isZero()) throw new Error(messages.ECDSA_SIGN_FAIL);
    var result = ec.sign(message, privateKey, {
        canonical: true,
        k: noncefn,
        pers: data
    });
    return {
        signature: Buffer.concat([
            result.r.toArrayLike(Buffer, 'be', 32),
            result.s.toArrayLike(Buffer, 'be', 32)
        ]),
        recovery: result.recoveryParam
    };
};
exports.verify = function(message, signature, publicKey) {
    var sigObj = {
        r: signature.slice(0, 32),
        s: signature.slice(32, 64)
    };
    var sigr = new BN(sigObj.r);
    var sigs = new BN(sigObj.s);
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
    if (sigs.cmp(ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return false;
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
    return ec.verify(message, sigObj, {
        x: pair.pub.x,
        y: pair.pub.y
    });
};
exports.recover = function(message, signature, recovery, compressed) {
    var sigObj = {
        r: signature.slice(0, 32),
        s: signature.slice(32, 64)
    };
    var sigr = new BN(sigObj.r);
    var sigs = new BN(sigObj.s);
    if (sigr.cmp(ecparams.n) >= 0 || sigs.cmp(ecparams.n) >= 0) throw new Error(messages.ECDSA_SIGNATURE_PARSE_FAIL);
    try {
        if (sigr.isZero() || sigs.isZero()) throw new Error();
        var point = ec.recoverPubKey(message, sigObj, recovery);
        return Buffer.from(point.encode(true, compressed));
    } catch (err) {
        throw new Error(messages.ECDSA_RECOVER_FAIL);
    }
};
exports.ecdh = function(publicKey, privateKey) {
    var shared = exports.ecdhUnsafe(publicKey, privateKey, true);
    return createHash('sha256').update(shared).digest();
};
exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
    var pair = loadPublicKey(publicKey);
    if (pair === null) throw new Error(messages.EC_PUBLIC_KEY_PARSE_FAIL);
    var scalar = new BN(privateKey);
    if (scalar.cmp(ecparams.n) >= 0 || scalar.isZero()) throw new Error(messages.ECDH_FAIL);
    return Buffer.from(pair.pub.mul(scalar).encode(true, compressed));
};

},{"safe-buffer":"eW7r9","create-hash":"2WyL8","bn.js":"VopIn","elliptic":"1NKsH","../messages.json":"5LQwx"}],"gYhGM":[function(require,module,exports) {
"use strict";
function __export(m) {
    for(var p in m)if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
exports.__esModule = true;
var Semaphore_1 = require("./Semaphore");
exports["default"] = Semaphore_1["default"];
__export(require("./Lock"));

},{"./Semaphore":"1t7JG","./Lock":"kDoph"}],"1t7JG":[function(require,module,exports) {
"use strict";
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t;
    return {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    };
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                0,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
exports.__esModule = true;
/** Class representing a semaphore
 * Semaphores are initialized with a number of permits that get aquired and released
 * over the lifecycle of the Semaphore. These permits limit the number of simultaneous
 * executions of the code that the Semaphore synchronizes. Functions can wait and stop
 * executing until a permit becomes available.
 *
 * Locks that only allow one execution of a critical section are a special case of
 * Semaphores. To construct a lock, initialize a Semaphore with a permit count of 1.
 *
 * This Semaphore class is implemented with the help of promises that get returned
 * by functions that wait for permits to become available. This makes it possible
 * to use async/await to synchronize your code.
 */ var Semaphore = function() {
    /**
     * Creates a semaphore.
     * @param permits  The number of permits, i.e. things being allowed to run in parallel.
     * To create a lock that only lets one thing run at a time, set this to 1.
     * This number can also be negative.
     */ function Semaphore1(permits) {
        this.promiseResolverQueue = [];
        this.permits = permits;
    }
    /**
     * Returns the number of available permits.
     * @returns  The number of available permits.
     */ Semaphore1.prototype.getPermits = function() {
        return this.permits;
    };
    /**
     * Returns a promise used to wait for a permit to become available. This method should be awaited on.
     * @returns  A promise that gets resolved when execution is allowed to proceed.
     */ Semaphore1.prototype.wait = function() {
        return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            return __generator(this, function(_a) {
                if (this.permits > 0) {
                    this.permits -= 1;
                    return [
                        2 /*return*/ ,
                        Promise.resolve(true)
                    ];
                }
                // If there is no permit available, we return a promise that resolves once the semaphore gets
                // signaled enough times that permits is equal to one.
                return [
                    2 /*return*/ ,
                    new Promise(function(resolver) {
                        return _this.promiseResolverQueue.push(resolver);
                    })
                ];
            });
        });
    };
    /**
     * Alias for {@linkcode Semaphore.wait}.
     * @returns  A promise that gets resolved when execution is allowed to proceed.
     */ Semaphore1.prototype.acquire = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.wait()
                ];
            });
        });
    };
    /**
     * Same as {@linkcode Semaphore.wait} except the promise returned gets resolved with false if no
     * permit becomes available in time.
     * @param milliseconds  The time spent waiting before the wait is aborted. This is a lower bound,
     * don't rely on it being precise.
     * @returns  A promise that gets resolved with true when execution is allowed to proceed or
     * false if the time given elapses before a permit becomes available.
     */ Semaphore1.prototype.waitFor = function(milliseconds) {
        return __awaiter(this, void 0, void 0, function() {
            var _this = this;
            var resolver, promise;
            return __generator(this, function(_a) {
                if (this.permits > 0) {
                    this.permits -= 1;
                    return [
                        2 /*return*/ ,
                        Promise.resolve(true)
                    ];
                }
                resolver = function(b) {
                    return void 0;
                };
                promise = new Promise(function(r) {
                    resolver = r;
                });
                // The saved resolver gets added to our list of promise resolvers so that it gets a chance
                // to be resolved as a result of a call to signal().
                this.promiseResolverQueue.push(resolver);
                setTimeout(function() {
                    // We have to remove the promise resolver from our list. Resolving it twice would not be
                    // an issue but signal() always takes the next resolver from the queue and resolves it which
                    // would swallow a permit if we didn't remove it.
                    var index = _this.promiseResolverQueue.indexOf(resolver);
                    if (index !== -1) _this.promiseResolverQueue.splice(index, 1);
                    // false because the wait was unsuccessful.
                    resolver(false);
                }, milliseconds);
                return [
                    2 /*return*/ ,
                    promise
                ];
            });
        });
    };
    /**
     * Synchronous function that tries to acquire a permit and returns true if successful, false otherwise.
     * @returns  Whether a permit could be acquired.
     */ Semaphore1.prototype.tryAcquire = function() {
        if (this.permits > 0) {
            this.permits -= 1;
            return true;
        }
        return false;
    };
    /**
     * Acquires all permits that are currently available and returns the number of acquired permits.
     * @returns  Number of acquired permits.
     */ Semaphore1.prototype.drainPermits = function() {
        if (this.permits > 0) {
            var permitCount = this.permits;
            this.permits = 0;
            return permitCount;
        }
        return 0;
    };
    /**
     * Increases the number of permits by one. If there are other functions waiting, one of them will
     * continue to execute in a future iteration of the event loop.
     */ Semaphore1.prototype.signal = function() {
        this.permits += 1;
        if (this.permits > 1 && this.promiseResolverQueue.length > 0) throw new Error('this.permits should never be > 0 when there is someone waiting.');
        else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {
            // If there is someone else waiting, immediately consume the permit that was released
            // at the beginning of this function and let the waiting function resume.
            this.permits -= 1;
            var nextResolver = this.promiseResolverQueue.shift();
            if (nextResolver) nextResolver(true);
        }
    };
    /**
     * Alias for {@linkcode Semaphore.signal}.
     */ Semaphore1.prototype.release = function() {
        this.signal();
    };
    /**
     * Schedules func to be called once a permit becomes available.
     * Returns a promise that resolves to the return value of func.
     * @typeparam T  The return type of func.
     * @param func  The function to be executed.
     * @return  A promise that gets resolved with the return value of the function.
     */ Semaphore1.prototype.execute = function(func) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this.wait()
                        ];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([
                            2,
                            ,
                            4,
                            5
                        ]);
                        return [
                            4 /*yield*/ ,
                            func()
                        ];
                    case 3:
                        return [
                            2 /*return*/ ,
                            _a.sent()
                        ];
                    case 4:
                        this.signal();
                        return [
                            7 /*endfinally*/ 
                        ];
                    case 5:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return Semaphore1;
}();
exports["default"] = Semaphore;

},{}],"kDoph":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
exports.__esModule = true;
var Semaphore_1 = require("./Semaphore");
/**
 * A lock that can be used to synchronize critical sections in your code.
 * For more details on how to use this class, please view the documentation
 * of the Semaphore class from which Lock inherits.
 */ var Lock = function(_super) {
    __extends(Lock1, _super);
    /**
     * Creates a lock.
     */ function Lock1() {
        return _super.call(this, 1) || this;
    }
    return Lock1;
}(Semaphore_1["default"]);
exports.Lock = Lock;

},{"./Semaphore":"1t7JG"}],"cdJML":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var WalletSubproviderErrors;
(function(WalletSubproviderErrors1) {
    WalletSubproviderErrors1["AddressNotFound"] = "ADDRESS_NOT_FOUND";
    WalletSubproviderErrors1["DataMissingForSignPersonalMessage"] = "DATA_MISSING_FOR_SIGN_PERSONAL_MESSAGE";
    WalletSubproviderErrors1["DataMissingForSignTypedData"] = "DATA_MISSING_FOR_SIGN_TYPED_DATA";
    WalletSubproviderErrors1["SenderInvalidOrNotSupplied"] = "SENDER_INVALID_OR_NOT_SUPPLIED";
    WalletSubproviderErrors1["FromAddressMissingOrInvalid"] = "FROM_ADDRESS_MISSING_OR_INVALID";
    WalletSubproviderErrors1["MethodNotSupported"] = "METHOD_NOT_SUPPORTED";
})(WalletSubproviderErrors = exports.WalletSubproviderErrors || (exports.WalletSubproviderErrors = {}));
var LedgerSubproviderErrors;
(function(LedgerSubproviderErrors1) {
    LedgerSubproviderErrors1["TooOldLedgerFirmware"] = "TOO_OLD_LEDGER_FIRMWARE";
    LedgerSubproviderErrors1["MultipleOpenConnectionsDisallowed"] = "MULTIPLE_OPEN_CONNECTIONS_DISALLOWED";
})(LedgerSubproviderErrors = exports.LedgerSubproviderErrors || (exports.LedgerSubproviderErrors = {}));
var NonceSubproviderErrors;
(function(NonceSubproviderErrors1) {
    NonceSubproviderErrors1["EmptyParametersFound"] = "EMPTY_PARAMETERS_FOUND";
    NonceSubproviderErrors1["CannotDetermineAddressFromPayload"] = "CANNOT_DETERMINE_ADDRESS_FROM_PAYLOAD";
})(NonceSubproviderErrors = exports.NonceSubproviderErrors || (exports.NonceSubproviderErrors = {}));

},{}],"3wHC8":[function(require,module,exports) {
"use strict";
var __values = this && this.__values || function(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var ethUtil = require("ethereumjs-util");
var DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;
var DerivedHDKeyInfoIterator = /** @class */ function() {
    function DerivedHDKeyInfoIterator1(initialDerivedKey, searchLimit) {
        if (searchLimit === void 0) searchLimit = DEFAULT_ADDRESS_SEARCH_LIMIT;
        this._searchLimit = searchLimit;
        this._parentDerivedKeyInfo = initialDerivedKey;
        this._index = 0;
    }
    DerivedHDKeyInfoIterator1.prototype.next = function() {
        var baseDerivationPath = this._parentDerivedKeyInfo.baseDerivationPath;
        var derivationIndex = this._index;
        var fullDerivationPath = "m/" + baseDerivationPath + "/" + derivationIndex;
        var path = "m/" + derivationIndex;
        var hdKey = this._parentDerivedKeyInfo.hdKey.derive(path);
        var address = exports.walletUtils.addressOfHDKey(hdKey);
        var derivedKey = {
            address: address,
            hdKey: hdKey,
            baseDerivationPath: baseDerivationPath,
            derivationPath: fullDerivationPath
        };
        var isDone = this._index === this._searchLimit;
        this._index++;
        return {
            done: isDone,
            value: derivedKey
        };
    };
    DerivedHDKeyInfoIterator1.prototype[Symbol.iterator] = function() {
        return this;
    };
    return DerivedHDKeyInfoIterator1;
}();
exports.walletUtils = {
    calculateDerivedHDKeyInfos: function(parentDerivedKeyInfo, numberOfKeys) {
        var e_1, _a;
        var derivedKeys = [];
        var derivedKeyIterator = new DerivedHDKeyInfoIterator(parentDerivedKeyInfo, numberOfKeys);
        try {
            for(var derivedKeyIterator_1 = __values(derivedKeyIterator), derivedKeyIterator_1_1 = derivedKeyIterator_1.next(); !derivedKeyIterator_1_1.done; derivedKeyIterator_1_1 = derivedKeyIterator_1.next()){
                var key = derivedKeyIterator_1_1.value;
                derivedKeys.push(key);
            }
        } catch (e_1_1) {
            e_1 = {
                error: e_1_1
            };
        } finally{
            try {
                if (derivedKeyIterator_1_1 && !derivedKeyIterator_1_1.done && (_a = derivedKeyIterator_1.return)) _a.call(derivedKeyIterator_1);
            } finally{
                if (e_1) throw e_1.error;
            }
        }
        return derivedKeys;
    },
    findDerivedKeyInfoForAddressIfExists: function(address, parentDerivedKeyInfo, searchLimit) {
        var e_2, _a;
        var lowercaseAddress = address.toLowerCase();
        var matchedKey;
        var derivedKeyIterator = new DerivedHDKeyInfoIterator(parentDerivedKeyInfo, searchLimit);
        try {
            for(var derivedKeyIterator_2 = __values(derivedKeyIterator), derivedKeyIterator_2_1 = derivedKeyIterator_2.next(); !derivedKeyIterator_2_1.done; derivedKeyIterator_2_1 = derivedKeyIterator_2.next()){
                var key = derivedKeyIterator_2_1.value;
                if (key.address === lowercaseAddress) {
                    matchedKey = key;
                    break;
                }
            }
        } catch (e_2_1) {
            e_2 = {
                error: e_2_1
            };
        } finally{
            try {
                if (derivedKeyIterator_2_1 && !derivedKeyIterator_2_1.done && (_a = derivedKeyIterator_2.return)) _a.call(derivedKeyIterator_2);
            } finally{
                if (e_2) throw e_2.error;
            }
        }
        return matchedKey;
    },
    addressOfHDKey: function(hdKey) {
        var shouldSanitizePublicKey = true;
        var derivedPublicKey = hdKey.publicKey;
        var ethereumAddressUnprefixed = ethUtil.publicToAddress(derivedPublicKey, shouldSanitizePublicKey).toString('hex');
        var address = ethUtil.addHexPrefix(ethereumAddressUnprefixed).toLowerCase();
        return address;
    }
};

},{"ethereumjs-util":"glktw"}],"kPcM4":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assert_1 = require("@0x/assert");
var utils_1 = require("@0x/utils");
var types_1 = require("../types");
var subprovider_1 = require("./subprovider");
var BaseWalletSubprovider = /** @class */ function(_super) {
    __extends(BaseWalletSubprovider1, _super);
    function BaseWalletSubprovider1() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BaseWalletSubprovider1._validateTxParams = function(txParams) {
        if (txParams.to !== undefined) assert_1.assert.isETHAddressHex('to', txParams.to);
        assert_1.assert.isHexString('nonce', txParams.nonce);
    };
    BaseWalletSubprovider1._validateSender = function(sender) {
        if (sender === undefined || !utils_1.addressUtils.isAddress(sender)) throw new Error(types_1.WalletSubproviderErrors.SenderInvalidOrNotSupplied);
    };
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:async-suffix
    BaseWalletSubprovider1.prototype.handleRequest = function(payload, next, end) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, accounts, txParams, address, typedData, _b, err_1, err_2, filledParams, signedTx, response, err_3, filledParams, signedTx, result, err_4, data, ecSignatureHex, err_5, signature, err_6;
            return __generator(this, function(_c) {
                switch(_c.label){
                    case 0:
                        _b = payload.method;
                        switch(_b){
                            case 'eth_coinbase':
                                return [
                                    3 /*break*/ ,
                                    1
                                ];
                            case 'eth_accounts':
                                return [
                                    3 /*break*/ ,
                                    5
                                ];
                            case 'eth_sendTransaction':
                                return [
                                    3 /*break*/ ,
                                    9
                                ];
                            case 'eth_signTransaction':
                                return [
                                    3 /*break*/ ,
                                    16
                                ];
                            case 'eth_sign':
                                return [
                                    3 /*break*/ ,
                                    22
                                ];
                            case 'personal_sign':
                                return [
                                    3 /*break*/ ,
                                    22
                                ];
                            case 'eth_signTypedData':
                                return [
                                    3 /*break*/ ,
                                    27
                                ];
                        }
                        return [
                            3 /*break*/ ,
                            32
                        ];
                    case 1:
                        _c.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.getAccountsAsync()
                        ];
                    case 2:
                        accounts = _c.sent();
                        end(null, accounts[0]);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        err_1 = _c.sent();
                        end(err_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                    case 5:
                        _c.trys.push([
                            5,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.getAccountsAsync()
                        ];
                    case 6:
                        accounts = _c.sent();
                        end(null, accounts);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        err_2 = _c.sent();
                        end(err_2);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                    case 9:
                        txParams = payload.params[0];
                        _c.label = 10;
                    case 10:
                        _c.trys.push([
                            10,
                            14,
                            ,
                            15
                        ]);
                        BaseWalletSubprovider1._validateSender(txParams.from);
                        return [
                            4 /*yield*/ ,
                            this._populateMissingTxParamsAsync(txParams)
                        ];
                    case 11:
                        filledParams = _c.sent();
                        return [
                            4 /*yield*/ ,
                            this.signTransactionAsync(filledParams)
                        ];
                    case 12:
                        signedTx = _c.sent();
                        return [
                            4 /*yield*/ ,
                            this._emitSendTransactionAsync(signedTx)
                        ];
                    case 13:
                        response = _c.sent();
                        end(null, response.result);
                        return [
                            3 /*break*/ ,
                            15
                        ];
                    case 14:
                        err_3 = _c.sent();
                        end(err_3);
                        return [
                            3 /*break*/ ,
                            15
                        ];
                    case 15:
                        return [
                            2 /*return*/ 
                        ];
                    case 16:
                        txParams = payload.params[0];
                        _c.label = 17;
                    case 17:
                        _c.trys.push([
                            17,
                            20,
                            ,
                            21
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._populateMissingTxParamsAsync(txParams)
                        ];
                    case 18:
                        filledParams = _c.sent();
                        return [
                            4 /*yield*/ ,
                            this.signTransactionAsync(filledParams)
                        ];
                    case 19:
                        signedTx = _c.sent();
                        result = {
                            raw: signedTx,
                            tx: txParams
                        };
                        end(null, result);
                        return [
                            3 /*break*/ ,
                            21
                        ];
                    case 20:
                        err_4 = _c.sent();
                        end(err_4);
                        return [
                            3 /*break*/ ,
                            21
                        ];
                    case 21:
                        return [
                            2 /*return*/ 
                        ];
                    case 22:
                        data = payload.method === 'eth_sign' ? payload.params[1] : payload.params[0];
                        address = payload.method === 'eth_sign' ? payload.params[0] : payload.params[1];
                        _c.label = 23;
                    case 23:
                        _c.trys.push([
                            23,
                            25,
                            ,
                            26
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.signPersonalMessageAsync(data, address)
                        ];
                    case 24:
                        ecSignatureHex = _c.sent();
                        end(null, ecSignatureHex);
                        return [
                            3 /*break*/ ,
                            26
                        ];
                    case 25:
                        err_5 = _c.sent();
                        end(err_5);
                        return [
                            3 /*break*/ ,
                            26
                        ];
                    case 26:
                        return [
                            2 /*return*/ 
                        ];
                    case 27:
                        _a = __read(payload.params, 2), address = _a[0], typedData = _a[1];
                        _c.label = 28;
                    case 28:
                        _c.trys.push([
                            28,
                            30,
                            ,
                            31
                        ]);
                        return [
                            4 /*yield*/ ,
                            this.signTypedDataAsync(address, typedData)
                        ];
                    case 29:
                        signature = _c.sent();
                        end(null, signature);
                        return [
                            3 /*break*/ ,
                            31
                        ];
                    case 30:
                        err_6 = _c.sent();
                        end(err_6);
                        return [
                            3 /*break*/ ,
                            31
                        ];
                    case 31:
                        return [
                            2 /*return*/ 
                        ];
                    case 32:
                        next();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    BaseWalletSubprovider1.prototype._emitSendTransactionAsync = function(signedTx) {
        return __awaiter(this, void 0, void 0, function() {
            var payload, result;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        payload = {
                            method: 'eth_sendRawTransaction',
                            params: [
                                signedTx
                            ]
                        };
                        return [
                            4 /*yield*/ ,
                            this.emitPayloadAsync(payload)
                        ];
                    case 1:
                        result = _a.sent();
                        return [
                            2 /*return*/ ,
                            result
                        ];
                }
            });
        });
    };
    BaseWalletSubprovider1.prototype._populateMissingTxParamsAsync = function(partialTxParams) {
        return __awaiter(this, void 0, void 0, function() {
            var txParams, gasPriceResult, gasPrice, nonceResult, nonce, gasResult, gas;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        txParams = partialTxParams;
                        if (!(partialTxParams.gasPrice === undefined)) return [
                            3 /*break*/ ,
                            2
                        ];
                        return [
                            4 /*yield*/ ,
                            this.emitPayloadAsync({
                                method: 'eth_gasPrice',
                                params: []
                            })
                        ];
                    case 1:
                        gasPriceResult = _a.sent();
                        gasPrice = gasPriceResult.result.toString();
                        txParams = __assign({}, txParams, {
                            gasPrice: gasPrice
                        });
                        _a.label = 2;
                    case 2:
                        if (!(partialTxParams.nonce === undefined)) return [
                            3 /*break*/ ,
                            4
                        ];
                        return [
                            4 /*yield*/ ,
                            this.emitPayloadAsync({
                                method: 'eth_getTransactionCount',
                                params: [
                                    partialTxParams.from,
                                    'pending'
                                ]
                            })
                        ];
                    case 3:
                        nonceResult = _a.sent();
                        nonce = nonceResult.result;
                        txParams = __assign({}, txParams, {
                            nonce: nonce
                        });
                        _a.label = 4;
                    case 4:
                        if (!(partialTxParams.gas === undefined)) return [
                            3 /*break*/ ,
                            6
                        ];
                        return [
                            4 /*yield*/ ,
                            this.emitPayloadAsync({
                                method: 'eth_estimateGas',
                                params: [
                                    partialTxParams
                                ]
                            })
                        ];
                    case 5:
                        gasResult = _a.sent();
                        gas = gasResult.result.toString();
                        txParams = __assign({}, txParams, {
                            gas: gas
                        });
                        _a.label = 6;
                    case 6:
                        return [
                            2 /*return*/ ,
                            txParams
                        ];
                }
            });
        });
    };
    return BaseWalletSubprovider1;
}(subprovider_1.Subprovider);
exports.BaseWalletSubprovider = BaseWalletSubprovider;

},{"@0x/assert":"5D3Nh","@0x/utils":"dgW7d","../types":"cdJML","./subprovider":"4dgUK"}],"e8a2e":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assert_1 = require("@0x/assert");
var types_1 = require("@0x/types");
var utils_1 = require("@0x/utils");
var JsonRpcError = require("json-rpc-error");
var subprovider_1 = require("./subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * It forwards on JSON RPC requests to the supplied `rpcUrl` endpoint
 */ var RPCSubprovider = /** @class */ function(_super) {
    __extends(RPCSubprovider1, _super);
    /**
     * @param rpcUrl URL to the backing Ethereum node to which JSON RPC requests should be sent
     * @param requestTimeoutMs Amount of miliseconds to wait before timing out the JSON RPC request
     */ function RPCSubprovider1(rpcUrl, requestTimeoutMs) {
        if (requestTimeoutMs === void 0) requestTimeoutMs = 20000;
        var _this = _super.call(this) || this;
        assert_1.assert.isString('rpcUrl', rpcUrl);
        assert_1.assert.isNumber('requestTimeoutMs', requestTimeoutMs);
        _this._rpcUrl = rpcUrl;
        _this._requestTimeoutMs = requestTimeoutMs;
        return _this;
    }
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param _next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:prefer-function-over-method async-suffix
    RPCSubprovider1.prototype.handleRequest = function(payload, _next, end) {
        return __awaiter(this, void 0, void 0, function() {
            var finalPayload, headers, response, err_1, text, statusCode, errMsg, err1, data;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        finalPayload = subprovider_1.Subprovider._createFinalPayload(payload);
                        headers = new Headers({
                            Accept: 'application/json',
                            'Content-Type': 'application/json'
                        });
                        _a.label = 1;
                    case 1:
                        _a.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            utils_1.fetchAsync(this._rpcUrl, {
                                method: 'POST',
                                headers: headers,
                                body: JSON.stringify(finalPayload)
                            }, this._requestTimeoutMs)
                        ];
                    case 2:
                        response = _a.sent();
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        err_1 = _a.sent();
                        end(new JsonRpcError.InternalError(err_1));
                        return [
                            2 /*return*/ 
                        ];
                    case 4:
                        return [
                            4 /*yield*/ ,
                            response.text()
                        ];
                    case 5:
                        text = _a.sent();
                        if (!response.ok) {
                            statusCode = response.status;
                            switch(statusCode){
                                case types_1.StatusCodes.MethodNotAllowed:
                                    end(new JsonRpcError.MethodNotFound());
                                    return [
                                        2 /*return*/ 
                                    ];
                                case types_1.StatusCodes.GatewayTimeout:
                                    errMsg = 'Gateway timeout. The request took too long to process. This can happen when querying logs over too wide a block range.';
                                    err1 = new Error(errMsg);
                                    end(new JsonRpcError.InternalError(err1));
                                    return [
                                        2 /*return*/ 
                                    ];
                                default:
                                    end(new JsonRpcError.InternalError(text));
                                    return [
                                        2 /*return*/ 
                                    ];
                            }
                        }
                        try {
                            data = JSON.parse(text);
                        } catch (err) {
                            end(new JsonRpcError.InternalError(err));
                            return [
                                2 /*return*/ 
                            ];
                        }
                        if (data.error) {
                            end(data.error);
                            return [
                                2 /*return*/ 
                            ];
                        }
                        end(null, data.result);
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    return RPCSubprovider1;
}(subprovider_1.Subprovider);
exports.RPCSubprovider = RPCSubprovider;

},{"@0x/assert":"5D3Nh","@0x/types":"b3ENn","@0x/utils":"dgW7d","json-rpc-error":"jmdQ7","./subprovider":"4dgUK"}],"b3ENn":[function(require,module,exports) {
"use strict";
// tslint:disable:max-file-line-count
Object.defineProperty(exports, "__esModule", {
    value: true
});
var MarketOperation;
(function(MarketOperation1) {
    MarketOperation1["Sell"] = "Sell";
    MarketOperation1["Buy"] = "Buy";
})(MarketOperation = exports.MarketOperation || (exports.MarketOperation = {}));
/**
 * Errors originating from the 0x exchange contract
 */ var ExchangeContractErrs;
(function(ExchangeContractErrs1) {
    ExchangeContractErrs1["OrderFillExpired"] = "ORDER_FILL_EXPIRED";
    ExchangeContractErrs1["OrderCancelExpired"] = "ORDER_CANCEL_EXPIRED";
    ExchangeContractErrs1["OrderCancelled"] = "ORDER_CANCELLED";
    ExchangeContractErrs1["OrderFillAmountZero"] = "ORDER_FILL_AMOUNT_ZERO";
    ExchangeContractErrs1["OrderRemainingFillAmountZero"] = "ORDER_REMAINING_FILL_AMOUNT_ZERO";
    ExchangeContractErrs1["OrderFillRoundingError"] = "ORDER_FILL_ROUNDING_ERROR";
    ExchangeContractErrs1["FillBalanceAllowanceError"] = "FILL_BALANCE_ALLOWANCE_ERROR";
    ExchangeContractErrs1["InsufficientTakerBalance"] = "INSUFFICIENT_TAKER_BALANCE";
    ExchangeContractErrs1["InsufficientTakerAllowance"] = "INSUFFICIENT_TAKER_ALLOWANCE";
    ExchangeContractErrs1["InsufficientMakerBalance"] = "INSUFFICIENT_MAKER_BALANCE";
    ExchangeContractErrs1["InsufficientMakerAllowance"] = "INSUFFICIENT_MAKER_ALLOWANCE";
    ExchangeContractErrs1["InsufficientTakerFeeBalance"] = "INSUFFICIENT_TAKER_FEE_BALANCE";
    ExchangeContractErrs1["InsufficientTakerFeeAllowance"] = "INSUFFICIENT_TAKER_FEE_ALLOWANCE";
    ExchangeContractErrs1["InsufficientMakerFeeBalance"] = "INSUFFICIENT_MAKER_FEE_BALANCE";
    ExchangeContractErrs1["InsufficientMakerFeeAllowance"] = "INSUFFICIENT_MAKER_FEE_ALLOWANCE";
    ExchangeContractErrs1["TransactionSenderIsNotFillOrderTaker"] = "TRANSACTION_SENDER_IS_NOT_FILL_ORDER_TAKER";
    ExchangeContractErrs1["MultipleMakersInSingleCancelBatchDisallowed"] = "MULTIPLE_MAKERS_IN_SINGLE_CANCEL_BATCH_DISALLOWED";
    ExchangeContractErrs1["InsufficientRemainingFillAmount"] = "INSUFFICIENT_REMAINING_FILL_AMOUNT";
    ExchangeContractErrs1["MultipleTakerTokensInFillUpToDisallowed"] = "MULTIPLE_TAKER_TOKENS_IN_FILL_UP_TO_DISALLOWED";
    ExchangeContractErrs1["BatchOrdersMustHaveSameExchangeAddress"] = "BATCH_ORDERS_MUST_HAVE_SAME_EXCHANGE_ADDRESS";
    ExchangeContractErrs1["BatchOrdersMustHaveAtLeastOneItem"] = "BATCH_ORDERS_MUST_HAVE_AT_LEAST_ONE_ITEM";
})(ExchangeContractErrs = exports.ExchangeContractErrs || (exports.ExchangeContractErrs = {}));
var SignatureType;
(function(SignatureType1) {
    SignatureType1[SignatureType1["Illegal"] = 0] = "Illegal";
    SignatureType1[SignatureType1["Invalid"] = 1] = "Invalid";
    SignatureType1[SignatureType1["EIP712"] = 2] = "EIP712";
    SignatureType1[SignatureType1["EthSign"] = 3] = "EthSign";
    SignatureType1[SignatureType1["Wallet"] = 4] = "Wallet";
    SignatureType1[SignatureType1["Validator"] = 5] = "Validator";
    SignatureType1[SignatureType1["PreSigned"] = 6] = "PreSigned";
    SignatureType1[SignatureType1["NSignatureTypes"] = 7] = "NSignatureTypes";
})(SignatureType = exports.SignatureType || (exports.SignatureType = {}));
var AssetProxyId;
(function(AssetProxyId1) {
    AssetProxyId1["ERC20"] = "0xf47261b0";
    AssetProxyId1["ERC721"] = "0x02571792";
    AssetProxyId1["MultiAsset"] = "0x94cfcdd7";
    AssetProxyId1["ERC1155"] = "0xa7cb5fb7";
    AssetProxyId1["StaticCall"] = "0xc339d10a";
})(AssetProxyId = exports.AssetProxyId || (exports.AssetProxyId = {}));
// TODO: DRY. These should be extracted from contract code.
var RevertReason;
(function(RevertReason1) {
    RevertReason1["OrderUnfillable"] = "ORDER_UNFILLABLE";
    RevertReason1["InvalidMaker"] = "INVALID_MAKER";
    RevertReason1["InvalidTaker"] = "INVALID_TAKER";
    RevertReason1["InvalidSender"] = "INVALID_SENDER";
    RevertReason1["InvalidOrderSignature"] = "INVALID_ORDER_SIGNATURE";
    RevertReason1["InvalidTakerAmount"] = "INVALID_TAKER_AMOUNT";
    RevertReason1["DivisionByZero"] = "DIVISION_BY_ZERO";
    RevertReason1["RoundingError"] = "ROUNDING_ERROR";
    RevertReason1["InvalidSignature"] = "INVALID_SIGNATURE";
    RevertReason1["SignatureIllegal"] = "SIGNATURE_ILLEGAL";
    RevertReason1["SignatureInvalid"] = "SIGNATURE_INVALID";
    RevertReason1["SignatureUnsupported"] = "SIGNATURE_UNSUPPORTED";
    RevertReason1["TakerOverpay"] = "TAKER_OVERPAY";
    RevertReason1["OrderOverfill"] = "ORDER_OVERFILL";
    RevertReason1["InvalidFillPrice"] = "INVALID_FILL_PRICE";
    RevertReason1["InvalidNewOrderEpoch"] = "INVALID_NEW_ORDER_EPOCH";
    RevertReason1["CompleteFillFailed"] = "COMPLETE_FILL_FAILED";
    RevertReason1["NegativeSpreadRequired"] = "NEGATIVE_SPREAD_REQUIRED";
    RevertReason1["ReentrancyIllegal"] = "REENTRANCY_ILLEGAL";
    RevertReason1["InvalidTxHash"] = "INVALID_TX_HASH";
    RevertReason1["InvalidTxSignature"] = "INVALID_TX_SIGNATURE";
    RevertReason1["FailedExecution"] = "FAILED_EXECUTION";
    RevertReason1["AssetProxyAlreadyExists"] = "ASSET_PROXY_ALREADY_EXISTS";
    RevertReason1["LengthGreaterThan0Required"] = "LENGTH_GREATER_THAN_0_REQUIRED";
    RevertReason1["LengthGreaterThan3Required"] = "LENGTH_GREATER_THAN_3_REQUIRED";
    RevertReason1["LengthGreaterThan131Required"] = "LENGTH_GREATER_THAN_131_REQUIRED";
    RevertReason1["Length0Required"] = "LENGTH_0_REQUIRED";
    RevertReason1["Length65Required"] = "LENGTH_65_REQUIRED";
    RevertReason1["InvalidAmount"] = "INVALID_AMOUNT";
    RevertReason1["TransferFailed"] = "TRANSFER_FAILED";
    RevertReason1["SenderNotAuthorized"] = "SENDER_NOT_AUTHORIZED";
    RevertReason1["TargetNotAuthorized"] = "TARGET_NOT_AUTHORIZED";
    RevertReason1["TargetAlreadyAuthorized"] = "TARGET_ALREADY_AUTHORIZED";
    RevertReason1["IndexOutOfBounds"] = "INDEX_OUT_OF_BOUNDS";
    RevertReason1["AuthorizedAddressMismatch"] = "AUTHORIZED_ADDRESS_MISMATCH";
    RevertReason1["OnlyContractOwner"] = "ONLY_CONTRACT_OWNER";
    RevertReason1["MakerNotWhitelisted"] = "MAKER_NOT_WHITELISTED";
    RevertReason1["TakerNotWhitelisted"] = "TAKER_NOT_WHITELISTED";
    RevertReason1["AssetProxyDoesNotExist"] = "ASSET_PROXY_DOES_NOT_EXIST";
    RevertReason1["LengthMismatch"] = "LENGTH_MISMATCH";
    RevertReason1["LibBytesGreaterThanZeroLengthRequired"] = "GREATER_THAN_ZERO_LENGTH_REQUIRED";
    RevertReason1["LibBytesGreaterOrEqualTo4LengthRequired"] = "GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED";
    RevertReason1["LibBytesGreaterOrEqualTo20LengthRequired"] = "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED";
    RevertReason1["LibBytesGreaterOrEqualTo32LengthRequired"] = "GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED";
    RevertReason1["LibBytesGreaterOrEqualToNestedBytesLengthRequired"] = "GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED";
    RevertReason1["LibBytesGreaterOrEqualToSourceBytesLengthRequired"] = "GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED";
    RevertReason1["Erc20InsufficientBalance"] = "ERC20_INSUFFICIENT_BALANCE";
    RevertReason1["Erc20InsufficientAllowance"] = "ERC20_INSUFFICIENT_ALLOWANCE";
    RevertReason1["FeePercentageTooLarge"] = "FEE_PERCENTAGE_TOO_LARGE";
    RevertReason1["ValueGreaterThanZero"] = "VALUE_GREATER_THAN_ZERO";
    RevertReason1["InvalidMsgValue"] = "INVALID_MSG_VALUE";
    RevertReason1["InsufficientEthRemaining"] = "INSUFFICIENT_ETH_REMAINING";
    RevertReason1["Uint256Overflow"] = "UINT256_OVERFLOW";
    RevertReason1["Erc721ZeroToAddress"] = "ERC721_ZERO_TO_ADDRESS";
    RevertReason1["Erc721OwnerMismatch"] = "ERC721_OWNER_MISMATCH";
    RevertReason1["Erc721InvalidSpender"] = "ERC721_INVALID_SPENDER";
    RevertReason1["Erc721ZeroOwner"] = "ERC721_ZERO_OWNER";
    RevertReason1["Erc721InvalidSelector"] = "ERC721_INVALID_SELECTOR";
    RevertReason1["WalletError"] = "WALLET_ERROR";
    RevertReason1["ValidatorError"] = "VALIDATOR_ERROR";
    RevertReason1["InvalidFunctionSelector"] = "INVALID_FUNCTION_SELECTOR";
    RevertReason1["InvalidAssetData"] = "INVALID_ASSET_DATA";
    RevertReason1["InvalidAssetProxy"] = "INVALID_ASSET_PROXY";
    RevertReason1["UnregisteredAssetProxy"] = "UNREGISTERED_ASSET_PROXY";
    RevertReason1["TxFullyConfirmed"] = "TX_FULLY_CONFIRMED";
    RevertReason1["TxNotFullyConfirmed"] = "TX_NOT_FULLY_CONFIRMED";
    RevertReason1["TimeLockIncomplete"] = "TIME_LOCK_INCOMPLETE";
    // LibAddressArray
    RevertReason1["InvalidFreeMemoryPtr"] = "INVALID_FREE_MEMORY_PTR";
    // DutchAuction
    RevertReason1["AuctionInvalidAmount"] = "INVALID_AMOUNT";
    RevertReason1["AuctionExpired"] = "AUCTION_EXPIRED";
    RevertReason1["AuctionNotStarted"] = "AUCTION_NOT_STARTED";
    RevertReason1["AuctionInvalidBeginTime"] = "INVALID_BEGIN_TIME";
    RevertReason1["InvalidAssetDataEnd"] = "INVALID_ASSET_DATA_END";
    // Balance Threshold Filter
    RevertReason1["InvalidOrBlockedExchangeSelector"] = "INVALID_OR_BLOCKED_EXCHANGE_SELECTOR";
    RevertReason1["BalanceQueryFailed"] = "BALANCE_QUERY_FAILED";
    RevertReason1["AtLeastOneAddressDoesNotMeetBalanceThreshold"] = "AT_LEAST_ONE_ADDRESS_DOES_NOT_MEET_BALANCE_THRESHOLD";
    RevertReason1["FromLessThanToRequired"] = "FROM_LESS_THAN_TO_REQUIRED";
    RevertReason1["ToLessThanLengthRequired"] = "TO_LESS_THAN_LENGTH_REQUIRED";
    RevertReason1["InvalidApprovalSignature"] = "INVALID_APPROVAL_SIGNATURE";
    RevertReason1["ApprovalExpired"] = "APPROVAL_EXPIRED";
    RevertReason1["InvalidOrigin"] = "INVALID_ORIGIN";
    // ERC1155
    RevertReason1["AmountEqualToOneRequired"] = "AMOUNT_EQUAL_TO_ONE_REQUIRED";
    RevertReason1["BadReceiverReturnValue"] = "BAD_RECEIVER_RETURN_VALUE";
    RevertReason1["CannotTransferToAddressZero"] = "CANNOT_TRANSFER_TO_ADDRESS_ZERO";
    RevertReason1["InsufficientAllowance"] = "INSUFFICIENT_ALLOWANCE";
    RevertReason1["NFTNotOwnedByFromAddress"] = "NFT_NOT_OWNED_BY_FROM_ADDRESS";
    RevertReason1["OwnersAndIdsMustHaveSameLength"] = "OWNERS_AND_IDS_MUST_HAVE_SAME_LENGTH";
    RevertReason1["TokenAndValuesLengthMismatch"] = "TOKEN_AND_VALUES_LENGTH_MISMATCH";
    RevertReason1["TriedToMintFungibleForNonFungibleToken"] = "TRIED_TO_MINT_FUNGIBLE_FOR_NON_FUNGIBLE_TOKEN";
    RevertReason1["TriedToMintNonFungibleForFungibleToken"] = "TRIED_TO_MINT_NON_FUNGIBLE_FOR_FUNGIBLE_TOKEN";
    RevertReason1["TransferRejected"] = "TRANSFER_REJECTED";
    RevertReason1["Uint256Underflow"] = "UINT256_UNDERFLOW";
    RevertReason1["InvalidIdsOffset"] = "INVALID_IDS_OFFSET";
    RevertReason1["InvalidValuesOffset"] = "INVALID_VALUES_OFFSET";
    RevertReason1["InvalidDataOffset"] = "INVALID_DATA_OFFSET";
    RevertReason1["InvalidAssetDataLength"] = "INVALID_ASSET_DATA_LENGTH";
    // StaticCall
    RevertReason1["InvalidStaticCallDataOffset"] = "INVALID_STATIC_CALL_DATA_OFFSET";
    RevertReason1["TargetNotEven"] = "TARGET_NOT_EVEN";
    RevertReason1["UnexpectedStaticCallResult"] = "UNEXPECTED_STATIC_CALL_RESULT";
})(RevertReason = exports.RevertReason || (exports.RevertReason = {}));
var StatusCodes;
(function(StatusCodes1) {
    StatusCodes1[StatusCodes1["Success"] = 200] = "Success";
    StatusCodes1[StatusCodes1["NotFound"] = 404] = "NotFound";
    StatusCodes1[StatusCodes1["InternalError"] = 500] = "InternalError";
    StatusCodes1[StatusCodes1["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    StatusCodes1[StatusCodes1["GatewayTimeout"] = 504] = "GatewayTimeout";
})(StatusCodes = exports.StatusCodes || (exports.StatusCodes = {}));
var OrdersChannelMessageTypes;
(function(OrdersChannelMessageTypes1) {
    OrdersChannelMessageTypes1["Update"] = "update";
    OrdersChannelMessageTypes1["Unknown"] = "unknown";
})(OrdersChannelMessageTypes = exports.OrdersChannelMessageTypes || (exports.OrdersChannelMessageTypes = {}));
var WebsocketConnectionEventType;
(function(WebsocketConnectionEventType1) {
    WebsocketConnectionEventType1["Close"] = "close";
    WebsocketConnectionEventType1["Error"] = "error";
    WebsocketConnectionEventType1["Message"] = "message";
})(WebsocketConnectionEventType = exports.WebsocketConnectionEventType || (exports.WebsocketConnectionEventType = {}));
var WebsocketClientEventType;
(function(WebsocketClientEventType1) {
    WebsocketClientEventType1["Connect"] = "connect";
    WebsocketClientEventType1["ConnectFailed"] = "connectFailed";
})(WebsocketClientEventType = exports.WebsocketClientEventType || (exports.WebsocketClientEventType = {}));
var TypeDocTypes;
(function(TypeDocTypes1) {
    TypeDocTypes1["Intrinsic"] = "intrinsic";
    TypeDocTypes1["Reference"] = "reference";
    TypeDocTypes1["Array"] = "array";
    TypeDocTypes1["StringLiteral"] = "stringLiteral";
    TypeDocTypes1["Reflection"] = "reflection";
    TypeDocTypes1["Union"] = "union";
    TypeDocTypes1["TypeParameter"] = "typeParameter";
    TypeDocTypes1["Intersection"] = "intersection";
    TypeDocTypes1["Tuple"] = "tuple";
    TypeDocTypes1["Unknown"] = "unknown";
})(TypeDocTypes = exports.TypeDocTypes || (exports.TypeDocTypes = {}));

},{}],"jmdQ7":[function(require,module,exports) {
module.exports = require('./lib/errors');

},{"./lib/errors":"58sSx"}],"58sSx":[function(require,module,exports) {
var inherits = require('inherits');
var JsonRpcError = function(message, code, data) {
    if (!(this instanceof JsonRpcError)) return new JsonRpcError(message, code, data);
    this.message = message;
    this.code = code;
    if (typeof data !== 'undefined') this.data = data;
};
inherits(JsonRpcError, Error);
var ParseError = function() {
    if (!(this instanceof ParseError)) return new ParseError();
    JsonRpcError.call(this, 'Parse error', -32700);
};
inherits(ParseError, JsonRpcError);
var InvalidRequest = function() {
    if (!(this instanceof InvalidRequest)) return new InvalidRequest();
    JsonRpcError.call(this, 'Invalid Request', -32600);
};
inherits(InvalidRequest, JsonRpcError);
var MethodNotFound = function() {
    if (!(this instanceof MethodNotFound)) return new MethodNotFound();
    JsonRpcError.call(this, 'Method not found', -32601);
};
inherits(MethodNotFound, JsonRpcError);
var InvalidParams = function() {
    if (!(this instanceof InvalidParams)) return new InvalidParams();
    JsonRpcError.call(this, 'Invalid params', -32602);
};
inherits(InvalidParams, JsonRpcError);
var InternalError = function(err) {
    var message;
    if (!(this instanceof InternalError)) return new InternalError(err);
    if (err && err.message) message = err.message;
    else message = 'Internal error';
    JsonRpcError.call(this, message, -32603);
};
inherits(InternalError, JsonRpcError);
var ServerError = function(code) {
    if (code < -32099 || code > -32000) throw new Error('Invalid error code');
    if (!(this instanceof ServerError)) return new ServerError(code);
    JsonRpcError.call(this, 'Server error', code);
};
inherits(ServerError, JsonRpcError);
JsonRpcError.ParseError = ParseError;
JsonRpcError.InvalidRequest = InvalidRequest;
JsonRpcError.MethodNotFound = MethodNotFound;
JsonRpcError.InvalidParams = InvalidParams;
JsonRpcError.InternalError = InternalError;
JsonRpcError.ServerError = ServerError;
module.exports = JsonRpcError;

},{"inherits":"bRL3M"}],"3hWn3":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var Ganache = require("ganache-core");
var subprovider_1 = require("./subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * It intercepts all JSON RPC requests and relays them to an in-process ganache instance.
 */ var GanacheSubprovider = /** @class */ function(_super) {
    __extends(GanacheSubprovider1, _super);
    /**
     * Instantiates a GanacheSubprovider
     * @param opts The desired opts with which to instantiate the Ganache provider
     */ function GanacheSubprovider1(opts) {
        var _this = _super.call(this) || this;
        _this._ganacheProvider = Ganache.provider(opts);
        return _this;
    }
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param _next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:prefer-function-over-method async-suffix
    GanacheSubprovider1.prototype.handleRequest = function(payload, _next, end) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                this._ganacheProvider.sendAsync(payload, function(err, result) {
                    end(err, result && result.result);
                });
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    return GanacheSubprovider1;
}(subprovider_1.Subprovider);
exports.GanacheSubprovider = GanacheSubprovider;

},{"ganache-core":"jhUEF","./subprovider":"4dgUK"}],"jWfjn":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _1 = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_1)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _1.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _1.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _1.ops.pop();
                    _1.trys.pop();
                    continue;
                default:
                    if (!(t = _1.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _1 = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _1.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _1.label < t[1]) {
                        _1.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _1.label < t[2]) {
                        _1.label = t[2];
                        _1.ops.push(op);
                        break;
                    }
                    if (t[2]) _1.ops.pop();
                    _1.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _1);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _ = require("lodash");
var ethereum_types_1 = require("ethereum-types");
var EthereumTx = require("ethereumjs-tx");
var ethUtil = require("ethereumjs-util");
var providerEngineUtils = require("web3-provider-engine/util/rpc-cache-utils");
var types_1 = require("../types");
var subprovider_1 = require("./subprovider");
var NONCE_TOO_LOW_ERROR_MESSAGE = 'Transaction nonce is too low';
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * It is heavily inspired by the [NonceSubprovider](https://github.com/MetaMask/provider-engine/blob/master/subproviders/nonce-tracker.js).
 * We added the additional feature of clearing the cached nonce value when a `nonce value too low` error occurs.
 */ var NonceTrackerSubprovider = /** @class */ function(_super) {
    __extends(NonceTrackerSubprovider1, _super);
    function NonceTrackerSubprovider1() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._nonceCache = {};
        return _this;
    }
    NonceTrackerSubprovider1._reconstructTransaction = function(payload) {
        var raw = payload.params[0];
        if (raw === undefined) throw new Error(types_1.NonceSubproviderErrors.EmptyParametersFound);
        var rawData = ethUtil.toBuffer(raw);
        var transaction = new EthereumTx(rawData);
        return transaction;
    };
    NonceTrackerSubprovider1._determineAddress = function(payload) {
        var address;
        switch(payload.method){
            case 'eth_getTransactionCount':
                address = payload.params[0].toLowerCase();
                return address;
            case 'eth_sendRawTransaction':
                var transaction = NonceTrackerSubprovider1._reconstructTransaction(payload);
                var addressRaw = transaction.getSenderAddress().toString('hex').toLowerCase();
                address = "0x" + addressRaw;
                return address;
            default:
                throw new Error(types_1.NonceSubproviderErrors.CannotDetermineAddressFromPayload);
        }
    };
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:async-suffix
    NonceTrackerSubprovider1.prototype.handleRequest = function(payload, next, end) {
        return __awaiter(this, void 0, void 0, function() {
            var requestDefaultBlock, address_1, cachedResult;
            var _this = this;
            return __generator(this, function(_a) {
                switch(payload.method){
                    case 'eth_getTransactionCount':
                        requestDefaultBlock = providerEngineUtils.blockTagForPayload(payload);
                        if (requestDefaultBlock === ethereum_types_1.BlockParamLiteral.Pending) {
                            address_1 = NonceTrackerSubprovider1._determineAddress(payload);
                            cachedResult = this._nonceCache[address_1];
                            if (cachedResult !== undefined) return [
                                2 /*return*/ ,
                                end(null, cachedResult)
                            ];
                            else return [
                                2 /*return*/ ,
                                next(function(requestError, requestResult, cb) {
                                    if (requestError === null) _this._nonceCache[address_1] = requestResult;
                                    cb();
                                })
                            ];
                        } else return [
                            2 /*return*/ ,
                            next()
                        ];
                    case 'eth_sendRawTransaction':
                        return [
                            2 /*return*/ ,
                            next(function(sendTransactionError, _txResult, cb) {
                                if (sendTransactionError === null) _this._handleSuccessfulTransaction(payload);
                                else _this._handleSendTransactionError(payload, sendTransactionError);
                                cb();
                            })
                        ];
                    default:
                        return [
                            2 /*return*/ ,
                            next()
                        ];
                }
                return [
                    2 /*return*/ 
                ];
            });
        });
    };
    NonceTrackerSubprovider1.prototype._handleSuccessfulTransaction = function(payload) {
        var address = NonceTrackerSubprovider1._determineAddress(payload);
        var transaction = NonceTrackerSubprovider1._reconstructTransaction(payload);
        // Increment the nonce from the previous successfully submitted transaction
        var nonce = ethUtil.bufferToInt(transaction.nonce);
        nonce++;
        var hexBase = 16;
        var nextHexNonce = nonce.toString(hexBase);
        if (nextHexNonce.length % 2) nextHexNonce = "0" + nextHexNonce;
        var nextPrefixedHexNonce = "0x" + nextHexNonce;
        this._nonceCache[address] = nextPrefixedHexNonce;
    };
    NonceTrackerSubprovider1.prototype._handleSendTransactionError = function(payload, err) {
        var address = NonceTrackerSubprovider1._determineAddress(payload);
        if (this._nonceCache[address] && _.includes(err.message, NONCE_TOO_LOW_ERROR_MESSAGE)) delete this._nonceCache[address];
    };
    return NonceTrackerSubprovider1;
}(subprovider_1.Subprovider);
exports.NonceTrackerSubprovider = NonceTrackerSubprovider;

},{"lodash":"3qBDj","ethereum-types":"i8oCe","ethereumjs-tx":"k7LMy","ethereumjs-util":"glktw","web3-provider-engine/util/rpc-cache-utils":"ihP89","../types":"cdJML","./subprovider":"4dgUK"}],"bdUwy":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assert_1 = require("@0x/assert");
var utils_1 = require("@0x/utils");
var EthereumTx = require("ethereumjs-tx");
var ethUtil = require("ethereumjs-util");
var types_1 = require("../types");
var base_wallet_subprovider_1 = require("./base_wallet_subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles
 * all requests with the supplied Ethereum private key.
 */ var PrivateKeyWalletSubprovider = /** @class */ function(_super) {
    __extends(PrivateKeyWalletSubprovider1, _super);
    /**
     * Instantiates a PrivateKeyWalletSubprovider.
     * @param privateKey The corresponding private key to an Ethereum address
     * @return PrivateKeyWalletSubprovider instance
     */ function PrivateKeyWalletSubprovider1(privateKey) {
        var _this = this;
        assert_1.assert.isString('privateKey', privateKey);
        _this = _super.call(this) || this;
        _this._privateKeyBuffer = Buffer.from(privateKey, 'hex');
        _this._address = "0x" + ethUtil.privateToAddress(_this._privateKeyBuffer).toString('hex');
        return _this;
    }
    /**
     * Retrieve the account associated with the supplied private key.
     * This method is implicitly called when issuing a `eth_accounts` JSON RPC request
     * via your providerEngine instance.
     * @return An array of accounts
     */ PrivateKeyWalletSubprovider1.prototype.getAccountsAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                return [
                    2 /*return*/ ,
                    [
                        this._address
                    ]
                ];
            });
        });
    };
    /**
     * Sign a transaction with the private key. If you've added this Subprovider to your
     * app's provider, you can simply send an `eth_sendTransaction` JSON RPC request, and
     * this method will be called auto-magically. If you are not using this via a ProviderEngine
     * instance, you can call it directly.
     * @param txParams Parameters of the transaction to sign
     * @return Signed transaction hex string
     */ PrivateKeyWalletSubprovider1.prototype.signTransactionAsync = function(txParams) {
        return __awaiter(this, void 0, void 0, function() {
            var tx, rawTx;
            return __generator(this, function(_a) {
                PrivateKeyWalletSubprovider1._validateTxParams(txParams);
                if (txParams.from !== undefined && txParams.from.toLowerCase() !== this._address.toLowerCase()) throw new Error("Requested to sign transaction with address: " + txParams.from + ", instantiated with address: " + this._address);
                tx = new EthereumTx(txParams);
                tx.sign(this._privateKeyBuffer);
                rawTx = "0x" + tx.serialize().toString('hex');
                return [
                    2 /*return*/ ,
                    rawTx
                ];
            });
        });
    };
    /**
     * Sign a personal Ethereum signed message. The signing address will be calculated from the private key.
     * The address must be provided it must match the address calculated from the private key.
     * If you've added this Subprovider to your app's provider, you can simply send an `eth_sign`
     * or `personal_sign` JSON RPC request, and this method will be called auto-magically.
     * If you are not using this via a ProviderEngine instance, you can call it directly.
     * @param data Hex string message to sign
     * @param address Address of the account to sign with
     * @return Signature hex string (order: rsv)
     */ PrivateKeyWalletSubprovider1.prototype.signPersonalMessageAsync = function(data, address) {
        return __awaiter(this, void 0, void 0, function() {
            var dataBuff, msgHashBuff, sig, rpcSig;
            return __generator(this, function(_a) {
                if (data === undefined) throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);
                assert_1.assert.isHexString('data', data);
                assert_1.assert.isETHAddressHex('address', address);
                if (address !== this._address) throw new Error("Requested to sign message with address: " + address + ", instantiated with address: " + this._address);
                dataBuff = ethUtil.toBuffer(data);
                msgHashBuff = ethUtil.hashPersonalMessage(dataBuff);
                sig = ethUtil.ecsign(msgHashBuff, this._privateKeyBuffer);
                rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);
                return [
                    2 /*return*/ ,
                    rpcSig
                ];
            });
        });
    };
    /**
     * Sign an EIP712 Typed Data message. The signing address will be calculated from the private key.
     * The address must be provided it must match the address calculated from the private key.
     * If you've added this Subprovider to your app's provider, you can simply send an `eth_signTypedData`
     * JSON RPC request, and this method will be called auto-magically.
     * If you are not using this via a ProviderEngine instance, you can call it directly.
     * @param address Address of the account to sign with
     * @param data the typed data object
     * @return Signature hex string (order: rsv)
     */ PrivateKeyWalletSubprovider1.prototype.signTypedDataAsync = function(address, typedData) {
        return __awaiter(this, void 0, void 0, function() {
            var dataBuff, sig, rpcSig;
            return __generator(this, function(_a) {
                if (typedData === undefined) throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignTypedData);
                assert_1.assert.isETHAddressHex('address', address);
                if (address !== this._address) throw new Error("Requested to sign message with address: " + address + ", instantiated with address: " + this._address);
                dataBuff = utils_1.signTypedDataUtils.generateTypedDataHash(typedData);
                sig = ethUtil.ecsign(dataBuff, this._privateKeyBuffer);
                rpcSig = ethUtil.toRpcSig(sig.v, sig.r, sig.s);
                return [
                    2 /*return*/ ,
                    rpcSig
                ];
            });
        });
    };
    return PrivateKeyWalletSubprovider1;
}(base_wallet_subprovider_1.BaseWalletSubprovider);
exports.PrivateKeyWalletSubprovider = PrivateKeyWalletSubprovider;

},{"buffer":"fCgem","@0x/assert":"5D3Nh","@0x/utils":"dgW7d","ethereumjs-tx":"k7LMy","ethereumjs-util":"glktw","../types":"cdJML","./base_wallet_subprovider":"kPcM4"}],"jFKzA":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _1 = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_1)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _1.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _1.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _1.ops.pop();
                    _1.trys.pop();
                    continue;
                default:
                    if (!(t = _1.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _1 = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _1.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _1.label < t[1]) {
                        _1.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _1.label < t[2]) {
                        _1.label = t[2];
                        _1.ops.push(op);
                        break;
                    }
                    if (t[2]) _1.ops.pop();
                    _1.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _1);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assert_1 = require("@0x/assert");
var utils_1 = require("@0x/utils");
var bip39 = require("bip39");
var HDNode = require("hdkey");
var _ = require("lodash");
var types_1 = require("../types");
var wallet_utils_1 = require("../utils/wallet_utils");
var base_wallet_subprovider_1 = require("./base_wallet_subprovider");
var private_key_wallet_1 = require("./private_key_wallet");
var DEFAULT_BASE_DERIVATION_PATH = "44'/60'/0'/0";
var DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;
var DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine) subprovider interface.
 * This subprovider intercepts all account related RPC requests (e.g message/transaction signing, etc...) and handles
 * all requests with accounts derived from the supplied mnemonic.
 */ var MnemonicWalletSubprovider = /** @class */ function(_super) {
    __extends(MnemonicWalletSubprovider1, _super);
    /**
     * Instantiates a MnemonicWalletSubprovider. Defaults to baseDerivationPath set to `44'/60'/0'/0`.
     * This is the default in TestRPC/Ganache, it can be overridden if desired.
     * @param config Configuration for the mnemonic wallet, must contain the mnemonic
     * @return MnemonicWalletSubprovider instance
     */ function MnemonicWalletSubprovider1(config) {
        var _this = this;
        assert_1.assert.isString('mnemonic', config.mnemonic);
        var baseDerivationPath = config.baseDerivationPath || DEFAULT_BASE_DERIVATION_PATH;
        assert_1.assert.isString('baseDerivationPath', baseDerivationPath);
        var addressSearchLimit = config.addressSearchLimit || DEFAULT_ADDRESS_SEARCH_LIMIT;
        assert_1.assert.isNumber('addressSearchLimit', addressSearchLimit);
        _this = _super.call(this) || this;
        _this._mnemonic = config.mnemonic;
        _this._baseDerivationPath = baseDerivationPath;
        _this._addressSearchLimit = addressSearchLimit;
        _this._derivedKeyInfo = _this._initialDerivedKeyInfo(_this._baseDerivationPath);
        return _this;
    }
    /**
     * Retrieve the set derivation path
     * @returns derivation path
     */ MnemonicWalletSubprovider1.prototype.getPath = function() {
        return this._baseDerivationPath;
    };
    /**
     * Set a desired derivation path when computing the available user addresses
     * @param baseDerivationPath The desired derivation path (e.g `44'/60'/0'`)
     */ MnemonicWalletSubprovider1.prototype.setPath = function(baseDerivationPath) {
        this._baseDerivationPath = baseDerivationPath;
        this._derivedKeyInfo = this._initialDerivedKeyInfo(this._baseDerivationPath);
    };
    /**
     * Retrieve the accounts associated with the mnemonic.
     * This method is implicitly called when issuing a `eth_accounts` JSON RPC request
     * via your providerEngine instance.
     * @param numberOfAccounts Number of accounts to retrieve (default: 10)
     * @return An array of accounts
     */ MnemonicWalletSubprovider1.prototype.getAccountsAsync = function(numberOfAccounts) {
        if (numberOfAccounts === void 0) numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;
        return __awaiter(this, void 0, void 0, function() {
            var derivedKeys, accounts;
            return __generator(this, function(_a) {
                derivedKeys = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(this._derivedKeyInfo, numberOfAccounts);
                accounts = _.map(derivedKeys, function(k) {
                    return k.address;
                });
                return [
                    2 /*return*/ ,
                    accounts
                ];
            });
        });
    };
    /**
     * Signs a transaction with the account specificed by the `from` field in txParams.
     * If you've added this Subprovider to your  app's provider, you can simply send
     * an `eth_sendTransaction` JSON RPC request, and this method will be called auto-magically.
     * If you are not using this via a ProviderEngine instance, you can call it directly.
     * @param txParams Parameters of the transaction to sign
     * @return Signed transaction hex string
     */ MnemonicWalletSubprovider1.prototype.signTransactionAsync = function(txParams) {
        return __awaiter(this, void 0, void 0, function() {
            var privateKeyWallet, signedTx;
            return __generator(this, function(_a) {
                if (txParams.from === undefined || !utils_1.addressUtils.isAddress(txParams.from)) throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);
                privateKeyWallet = this._privateKeyWalletForAddress(txParams.from);
                signedTx = privateKeyWallet.signTransactionAsync(txParams);
                return [
                    2 /*return*/ ,
                    signedTx
                ];
            });
        });
    };
    /**
     * Sign a personal Ethereum signed message. The signing account will be the account
     * associated with the provided address. If you've added the MnemonicWalletSubprovider to
     * your app's provider, you can simply send an `eth_sign` or `personal_sign` JSON RPC request,
     * and this method will be called auto-magically. If you are not using this via a ProviderEngine
     * instance, you can call it directly.
     * @param data Hex string message to sign
     * @param address Address of the account to sign with
     * @return Signature hex string (order: rsv)
     */ MnemonicWalletSubprovider1.prototype.signPersonalMessageAsync = function(data, address) {
        return __awaiter(this, void 0, void 0, function() {
            var privateKeyWallet, sig;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (data === undefined) throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);
                        assert_1.assert.isHexString('data', data);
                        assert_1.assert.isETHAddressHex('address', address);
                        privateKeyWallet = this._privateKeyWalletForAddress(address);
                        return [
                            4 /*yield*/ ,
                            privateKeyWallet.signPersonalMessageAsync(data, address)
                        ];
                    case 1:
                        sig = _a.sent();
                        return [
                            2 /*return*/ ,
                            sig
                        ];
                }
            });
        });
    };
    /**
     * Sign an EIP712 Typed Data message. The signing account will be the account
     * associated with the provided address. If you've added this MnemonicWalletSubprovider to
     * your app's provider, you can simply send an `eth_signTypedData` JSON RPC request, and
     * this method will be called auto-magically. If you are not using this via a ProviderEngine
     *  instance, you can call it directly.
     * @param address Address of the account to sign with
     * @param data the typed data object
     * @return Signature hex string (order: rsv)
     */ MnemonicWalletSubprovider1.prototype.signTypedDataAsync = function(address, typedData) {
        return __awaiter(this, void 0, void 0, function() {
            var privateKeyWallet, sig;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (typedData === undefined) throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);
                        assert_1.assert.isETHAddressHex('address', address);
                        privateKeyWallet = this._privateKeyWalletForAddress(address);
                        return [
                            4 /*yield*/ ,
                            privateKeyWallet.signTypedDataAsync(address, typedData)
                        ];
                    case 1:
                        sig = _a.sent();
                        return [
                            2 /*return*/ ,
                            sig
                        ];
                }
            });
        });
    };
    MnemonicWalletSubprovider1.prototype._privateKeyWalletForAddress = function(address) {
        var derivedKeyInfo = this._findDerivedKeyInfoForAddress(address);
        var privateKeyHex = derivedKeyInfo.hdKey.privateKey.toString('hex');
        var privateKeyWallet = new private_key_wallet_1.PrivateKeyWalletSubprovider(privateKeyHex);
        return privateKeyWallet;
    };
    MnemonicWalletSubprovider1.prototype._findDerivedKeyInfoForAddress = function(address) {
        var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, this._derivedKeyInfo, this._addressSearchLimit);
        if (matchedDerivedKeyInfo === undefined) throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + ": " + address);
        return matchedDerivedKeyInfo;
    };
    MnemonicWalletSubprovider1.prototype._initialDerivedKeyInfo = function(baseDerivationPath) {
        var seed = bip39.mnemonicToSeed(this._mnemonic);
        var hdKey = HDNode.fromMasterSeed(seed);
        // Walk down to base derivation level (i.e m/44'/60'/0') and create an initial key at that level
        // all children will then be walked relative (i.e m/0)
        var parentKeyDerivationPath = "m/" + baseDerivationPath;
        var parentHDKeyAtDerivationPath = hdKey.derive(parentKeyDerivationPath);
        var address = wallet_utils_1.walletUtils.addressOfHDKey(parentHDKeyAtDerivationPath);
        var derivedKeyInfo = {
            address: address,
            baseDerivationPath: baseDerivationPath,
            derivationPath: parentKeyDerivationPath,
            hdKey: parentHDKeyAtDerivationPath
        };
        return derivedKeyInfo;
    };
    return MnemonicWalletSubprovider1;
}(base_wallet_subprovider_1.BaseWalletSubprovider);
exports.MnemonicWalletSubprovider = MnemonicWalletSubprovider;

},{"@0x/assert":"5D3Nh","@0x/utils":"dgW7d","bip39":"c32WH","hdkey":"f0ePh","lodash":"3qBDj","../types":"cdJML","../utils/wallet_utils":"3wHC8","./base_wallet_subprovider":"kPcM4","./private_key_wallet":"bdUwy"}],"c32WH":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var createHash = require('create-hash');
var _pbkdf2 = require('pbkdf2');
var pbkdf2 = _pbkdf2.pbkdf2Sync;
var pbkdf2Async = _pbkdf2.pbkdf2;
var randomBytes = require('randombytes');
// use unorm until String.prototype.normalize gets better browser support
var unorm = require('unorm');
var CHINESE_SIMPLIFIED_WORDLIST = require('./wordlists/chinese_simplified.json');
var CHINESE_TRADITIONAL_WORDLIST = require('./wordlists/chinese_traditional.json');
var ENGLISH_WORDLIST = require('./wordlists/english.json');
var FRENCH_WORDLIST = require('./wordlists/french.json');
var ITALIAN_WORDLIST = require('./wordlists/italian.json');
var JAPANESE_WORDLIST = require('./wordlists/japanese.json');
var KOREAN_WORDLIST = require('./wordlists/korean.json');
var SPANISH_WORDLIST = require('./wordlists/spanish.json');
var DEFAULT_WORDLIST = ENGLISH_WORDLIST;
var INVALID_MNEMONIC = 'Invalid mnemonic';
var INVALID_ENTROPY = 'Invalid entropy';
var INVALID_CHECKSUM = 'Invalid mnemonic checksum';
function lpad(str, padString, length) {
    while(str.length < length)str = padString + str;
    return str;
}
function binaryToByte(bin) {
    return parseInt(bin, 2);
}
function bytesToBinary(bytes) {
    return bytes.map(function(x) {
        return lpad(x.toString(2), '0', 8);
    }).join('');
}
function deriveChecksumBits(entropyBuffer) {
    var ENT = entropyBuffer.length * 8;
    var CS = ENT / 32;
    var hash = createHash('sha256').update(entropyBuffer).digest();
    return bytesToBinary([].slice.call(hash)).slice(0, CS);
}
function salt(password) {
    return 'mnemonic' + (password || '');
}
function mnemonicToSeed(mnemonic, password) {
    var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8');
    var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8');
    return pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512');
}
function mnemonicToSeedHex(mnemonic, password) {
    return mnemonicToSeed(mnemonic, password).toString('hex');
}
function mnemonicToSeedAsync(mnemonic, password) {
    return new Promise(function(resolve, reject) {
        try {
            var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8');
            var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8');
        } catch (error) {
            return reject(error);
        }
        pbkdf2Async(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512', function(err, data) {
            if (err) return reject(err);
            else return resolve(data);
        });
    });
}
function mnemonicToSeedHexAsync(mnemonic, password) {
    return mnemonicToSeedAsync(mnemonic, password).then(function(buf) {
        return buf.toString('hex');
    });
}
function mnemonicToEntropy(mnemonic, wordlist) {
    wordlist = wordlist || DEFAULT_WORDLIST;
    var words = unorm.nfkd(mnemonic).split(' ');
    if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC);
    // convert word indices to 11 bit binary strings
    var bits = words.map(function(word) {
        var index = wordlist.indexOf(word);
        if (index === -1) throw new Error(INVALID_MNEMONIC);
        return lpad(index.toString(2), '0', 11);
    }).join('');
    // split the binary string into ENT/CS
    var dividerIndex = Math.floor(bits.length / 33) * 32;
    var entropyBits = bits.slice(0, dividerIndex);
    var checksumBits = bits.slice(dividerIndex);
    // calculate the checksum and compare
    var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte);
    if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY);
    if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY);
    if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY);
    var entropy = Buffer.from(entropyBytes);
    var newChecksum = deriveChecksumBits(entropy);
    if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM);
    return entropy.toString('hex');
}
function entropyToMnemonic(entropy, wordlist) {
    if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex');
    wordlist = wordlist || DEFAULT_WORDLIST;
    // 128 <= ENT <= 256
    if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY);
    if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY);
    if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY);
    var entropyBits = bytesToBinary([].slice.call(entropy));
    var checksumBits = deriveChecksumBits(entropy);
    var bits = entropyBits + checksumBits;
    var chunks = bits.match(/(.{1,11})/g);
    var words = chunks.map(function(binary) {
        var index = binaryToByte(binary);
        return wordlist[index];
    });
    return wordlist === JAPANESE_WORDLIST ? words.join('\u3000') : words.join(' ');
}
function generateMnemonic(strength, rng, wordlist) {
    strength = strength || 128;
    if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY);
    rng = rng || randomBytes;
    return entropyToMnemonic(rng(strength / 8), wordlist);
}
function validateMnemonic(mnemonic, wordlist) {
    try {
        mnemonicToEntropy(mnemonic, wordlist);
    } catch (e) {
        return false;
    }
    return true;
}
module.exports = {
    mnemonicToSeed: mnemonicToSeed,
    mnemonicToSeedAsync: mnemonicToSeedAsync,
    mnemonicToSeedHex: mnemonicToSeedHex,
    mnemonicToSeedHexAsync: mnemonicToSeedHexAsync,
    mnemonicToEntropy: mnemonicToEntropy,
    entropyToMnemonic: entropyToMnemonic,
    generateMnemonic: generateMnemonic,
    validateMnemonic: validateMnemonic,
    wordlists: {
        EN: ENGLISH_WORDLIST,
        JA: JAPANESE_WORDLIST,
        chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,
        chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,
        english: ENGLISH_WORDLIST,
        french: FRENCH_WORDLIST,
        italian: ITALIAN_WORDLIST,
        japanese: JAPANESE_WORDLIST,
        korean: KOREAN_WORDLIST,
        spanish: SPANISH_WORDLIST
    }
};

},{"safe-buffer":"eW7r9","create-hash":"2WyL8","pbkdf2":"g38Hg","randombytes":"8hjhE","unorm":"ieyAY","./wordlists/chinese_simplified.json":"02JGB","./wordlists/chinese_traditional.json":"3Cywo","./wordlists/english.json":"aDyy1","./wordlists/french.json":"9oUud","./wordlists/italian.json":"foiNv","./wordlists/japanese.json":"LOvP3","./wordlists/korean.json":"7rdQ9","./wordlists/spanish.json":"bKirf"}],"ieyAY":[function(require,module,exports) {
(function(root) {
    /***** unorm.js *****/ /*
 * UnicodeNormalizer 1.0.0
 * Copyright (c) 2008 Matsuza
 * Dual licensed under the MIT (MIT-LICENSE.txt) and GPL (GPL-LICENSE.txt) licenses.
 * $Date: 2008-06-05 16:44:17 +0200 (Thu, 05 Jun 2008) $
 * $Rev: 13309 $
 */ var DEFAULT_FEATURE = [
        null,
        0,
        {}
    ];
    var CACHE_THRESHOLD = 10;
    var SBase = 0xAC00, LBase = 0x1100, VBase = 0x1161, TBase = 0x11A7, LCount = 19, VCount = 21, TCount = 28;
    var NCount = VCount * TCount; // 588
    var SCount = LCount * NCount; // 11172
    var UChar = function(cp, feature) {
        this.codepoint = cp;
        this.feature = feature;
    };
    // Strategies
    var cache = {};
    var cacheCounter = [];
    for(var i1 = 0; i1 <= 0xFF; ++i1)cacheCounter[i1] = 0;
    function fromCache(next, cp, needFeature) {
        var ret = cache[cp];
        if (!ret) {
            ret = next(cp, needFeature);
            if (!!ret.feature && ++cacheCounter[cp >> 8 & 0xFF] > CACHE_THRESHOLD) cache[cp] = ret;
        }
        return ret;
    }
    function fromData(next, cp, needFeature) {
        var hash = cp & 0xFF00;
        var dunit = UChar.udata[hash] || {};
        var f = dunit[cp];
        return f ? new UChar(cp, f) : new UChar(cp, DEFAULT_FEATURE);
    }
    function fromCpOnly(next, cp, needFeature) {
        return !!needFeature ? next(cp, needFeature) : new UChar(cp, null);
    }
    function fromRuleBasedJamo(next, cp, needFeature) {
        var j;
        if (cp < LBase || LBase + LCount <= cp && cp < SBase || SBase + SCount < cp) return next(cp, needFeature);
        if (LBase <= cp && cp < LBase + LCount) {
            var c = {};
            var base = (cp - LBase) * VCount;
            for(j = 0; j < VCount; ++j)c[VBase + j] = SBase + TCount * (j + base);
            return new UChar(cp, [
                ,
                ,
                c
            ]);
        }
        var SIndex = cp - SBase;
        var TIndex = SIndex % TCount;
        var feature = [];
        if (TIndex !== 0) feature[0] = [
            SBase + SIndex - TIndex,
            TBase + TIndex
        ];
        else {
            feature[0] = [
                LBase + Math.floor(SIndex / NCount),
                VBase + Math.floor(SIndex % NCount / TCount)
            ];
            feature[2] = {};
            for(j = 1; j < TCount; ++j)feature[2][TBase + j] = cp + j;
        }
        return new UChar(cp, feature);
    }
    function fromCpFilter(next, cp, needFeature) {
        return cp < 60 || 13311 < cp && cp < 42607 ? new UChar(cp, DEFAULT_FEATURE) : next(cp, needFeature);
    }
    var strategies = [
        fromCpFilter,
        fromCache,
        fromCpOnly,
        fromRuleBasedJamo,
        fromData
    ];
    UChar.fromCharCode = strategies.reduceRight(function(next, strategy) {
        return function(cp, needFeature) {
            return strategy(next, cp, needFeature);
        };
    }, null);
    UChar.isHighSurrogate = function(cp) {
        return cp >= 0xD800 && cp <= 0xDBFF;
    };
    UChar.isLowSurrogate = function(cp) {
        return cp >= 0xDC00 && cp <= 0xDFFF;
    };
    UChar.prototype.prepFeature = function() {
        if (!this.feature) this.feature = UChar.fromCharCode(this.codepoint, true).feature;
    };
    UChar.prototype.toString = function() {
        if (this.codepoint < 0x10000) return String.fromCharCode(this.codepoint);
        else {
            var x = this.codepoint - 0x10000;
            return String.fromCharCode(Math.floor(x / 0x400) + 0xD800, x % 0x400 + 0xDC00);
        }
    };
    UChar.prototype.getDecomp = function() {
        this.prepFeature();
        return this.feature[0] || null;
    };
    UChar.prototype.isCompatibility = function() {
        this.prepFeature();
        return !!this.feature[1] && this.feature[1] & 256;
    };
    UChar.prototype.isExclude = function() {
        this.prepFeature();
        return !!this.feature[1] && this.feature[1] & 512;
    };
    UChar.prototype.getCanonicalClass = function() {
        this.prepFeature();
        return !!this.feature[1] ? this.feature[1] & 0xff : 0;
    };
    UChar.prototype.getComposite = function(following) {
        this.prepFeature();
        if (!this.feature[2]) return null;
        var cp = this.feature[2][following.codepoint];
        return cp ? UChar.fromCharCode(cp) : null;
    };
    var UCharIterator = function(str) {
        this.str = str;
        this.cursor = 0;
    };
    UCharIterator.prototype.next = function() {
        if (!!this.str && this.cursor < this.str.length) {
            var cp = this.str.charCodeAt(this.cursor++);
            var d;
            if (UChar.isHighSurrogate(cp) && this.cursor < this.str.length && UChar.isLowSurrogate(d = this.str.charCodeAt(this.cursor))) {
                cp = (cp - 0xD800) * 0x400 + (d - 0xDC00) + 0x10000;
                ++this.cursor;
            }
            return UChar.fromCharCode(cp);
        } else {
            this.str = null;
            return null;
        }
    };
    var RecursDecompIterator = function(it, cano) {
        this.it = it;
        this.canonical = cano;
        this.resBuf = [];
    };
    RecursDecompIterator.prototype.next = function() {
        function recursiveDecomp(cano, uchar) {
            var decomp = uchar.getDecomp();
            if (!!decomp && !(cano && uchar.isCompatibility())) {
                var ret = [];
                for(var i = 0; i < decomp.length; ++i){
                    var a = recursiveDecomp(cano, UChar.fromCharCode(decomp[i]));
                    ret = ret.concat(a);
                }
                return ret;
            } else return [
                uchar
            ];
        }
        if (this.resBuf.length === 0) {
            var uchar1 = this.it.next();
            if (!uchar1) return null;
            this.resBuf = recursiveDecomp(this.canonical, uchar1);
        }
        return this.resBuf.shift();
    };
    var DecompIterator = function(it) {
        this.it = it;
        this.resBuf = [];
    };
    DecompIterator.prototype.next = function() {
        var cc;
        if (this.resBuf.length === 0) do {
            var uchar = this.it.next();
            if (!uchar) break;
            cc = uchar.getCanonicalClass();
            var inspt = this.resBuf.length;
            if (cc !== 0) for(; inspt > 0; --inspt){
                var uchar2 = this.resBuf[inspt - 1];
                var cc2 = uchar2.getCanonicalClass();
                if (cc2 <= cc) break;
            }
            this.resBuf.splice(inspt, 0, uchar);
        }while (cc !== 0)
        return this.resBuf.shift();
    };
    var CompIterator = function(it) {
        this.it = it;
        this.procBuf = [];
        this.resBuf = [];
        this.lastClass = null;
    };
    CompIterator.prototype.next = function() {
        while(this.resBuf.length === 0){
            var uchar = this.it.next();
            if (!uchar) {
                this.resBuf = this.procBuf;
                this.procBuf = [];
                break;
            }
            if (this.procBuf.length === 0) {
                this.lastClass = uchar.getCanonicalClass();
                this.procBuf.push(uchar);
            } else {
                var starter = this.procBuf[0];
                var composite = starter.getComposite(uchar);
                var cc = uchar.getCanonicalClass();
                if (!!composite && (this.lastClass < cc || this.lastClass === 0)) this.procBuf[0] = composite;
                else {
                    if (cc === 0) {
                        this.resBuf = this.procBuf;
                        this.procBuf = [];
                    }
                    this.lastClass = cc;
                    this.procBuf.push(uchar);
                }
            }
        }
        return this.resBuf.shift();
    };
    var createIterator = function(mode, str) {
        switch(mode){
            case "NFD":
                return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true));
            case "NFKD":
                return new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false));
            case "NFC":
                return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), true)));
            case "NFKC":
                return new CompIterator(new DecompIterator(new RecursDecompIterator(new UCharIterator(str), false)));
        }
        throw mode + " is invalid";
    };
    var normalize = function(mode, str) {
        var it = createIterator(mode, str);
        var ret = "";
        var uchar;
        while(!!(uchar = it.next()))ret += uchar.toString();
        return ret;
    };
    /* API functions */ function nfd(str) {
        return normalize("NFD", str);
    }
    function nfkd(str) {
        return normalize("NFKD", str);
    }
    function nfc(str) {
        return normalize("NFC", str);
    }
    function nfkc(str) {
        return normalize("NFKC", str);
    }
    /* Unicode data */ UChar.udata = {
        0: {
            60: [
                ,
                ,
                {
                    824: 8814
                }
            ],
            61: [
                ,
                ,
                {
                    824: 8800
                }
            ],
            62: [
                ,
                ,
                {
                    824: 8815
                }
            ],
            65: [
                ,
                ,
                {
                    768: 192,
                    769: 193,
                    770: 194,
                    771: 195,
                    772: 256,
                    774: 258,
                    775: 550,
                    776: 196,
                    777: 7842,
                    778: 197,
                    780: 461,
                    783: 512,
                    785: 514,
                    803: 7840,
                    805: 7680,
                    808: 260
                }
            ],
            66: [
                ,
                ,
                {
                    775: 7682,
                    803: 7684,
                    817: 7686
                }
            ],
            67: [
                ,
                ,
                {
                    769: 262,
                    770: 264,
                    775: 266,
                    780: 268,
                    807: 199
                }
            ],
            68: [
                ,
                ,
                {
                    775: 7690,
                    780: 270,
                    803: 7692,
                    807: 7696,
                    813: 7698,
                    817: 7694
                }
            ],
            69: [
                ,
                ,
                {
                    768: 200,
                    769: 201,
                    770: 202,
                    771: 7868,
                    772: 274,
                    774: 276,
                    775: 278,
                    776: 203,
                    777: 7866,
                    780: 282,
                    783: 516,
                    785: 518,
                    803: 7864,
                    807: 552,
                    808: 280,
                    813: 7704,
                    816: 7706
                }
            ],
            70: [
                ,
                ,
                {
                    775: 7710
                }
            ],
            71: [
                ,
                ,
                {
                    769: 500,
                    770: 284,
                    772: 7712,
                    774: 286,
                    775: 288,
                    780: 486,
                    807: 290
                }
            ],
            72: [
                ,
                ,
                {
                    770: 292,
                    775: 7714,
                    776: 7718,
                    780: 542,
                    803: 7716,
                    807: 7720,
                    814: 7722
                }
            ],
            73: [
                ,
                ,
                {
                    768: 204,
                    769: 205,
                    770: 206,
                    771: 296,
                    772: 298,
                    774: 300,
                    775: 304,
                    776: 207,
                    777: 7880,
                    780: 463,
                    783: 520,
                    785: 522,
                    803: 7882,
                    808: 302,
                    816: 7724
                }
            ],
            74: [
                ,
                ,
                {
                    770: 308
                }
            ],
            75: [
                ,
                ,
                {
                    769: 7728,
                    780: 488,
                    803: 7730,
                    807: 310,
                    817: 7732
                }
            ],
            76: [
                ,
                ,
                {
                    769: 313,
                    780: 317,
                    803: 7734,
                    807: 315,
                    813: 7740,
                    817: 7738
                }
            ],
            77: [
                ,
                ,
                {
                    769: 7742,
                    775: 7744,
                    803: 7746
                }
            ],
            78: [
                ,
                ,
                {
                    768: 504,
                    769: 323,
                    771: 209,
                    775: 7748,
                    780: 327,
                    803: 7750,
                    807: 325,
                    813: 7754,
                    817: 7752
                }
            ],
            79: [
                ,
                ,
                {
                    768: 210,
                    769: 211,
                    770: 212,
                    771: 213,
                    772: 332,
                    774: 334,
                    775: 558,
                    776: 214,
                    777: 7886,
                    779: 336,
                    780: 465,
                    783: 524,
                    785: 526,
                    795: 416,
                    803: 7884,
                    808: 490
                }
            ],
            80: [
                ,
                ,
                {
                    769: 7764,
                    775: 7766
                }
            ],
            82: [
                ,
                ,
                {
                    769: 340,
                    775: 7768,
                    780: 344,
                    783: 528,
                    785: 530,
                    803: 7770,
                    807: 342,
                    817: 7774
                }
            ],
            83: [
                ,
                ,
                {
                    769: 346,
                    770: 348,
                    775: 7776,
                    780: 352,
                    803: 7778,
                    806: 536,
                    807: 350
                }
            ],
            84: [
                ,
                ,
                {
                    775: 7786,
                    780: 356,
                    803: 7788,
                    806: 538,
                    807: 354,
                    813: 7792,
                    817: 7790
                }
            ],
            85: [
                ,
                ,
                {
                    768: 217,
                    769: 218,
                    770: 219,
                    771: 360,
                    772: 362,
                    774: 364,
                    776: 220,
                    777: 7910,
                    778: 366,
                    779: 368,
                    780: 467,
                    783: 532,
                    785: 534,
                    795: 431,
                    803: 7908,
                    804: 7794,
                    808: 370,
                    813: 7798,
                    816: 7796
                }
            ],
            86: [
                ,
                ,
                {
                    771: 7804,
                    803: 7806
                }
            ],
            87: [
                ,
                ,
                {
                    768: 7808,
                    769: 7810,
                    770: 372,
                    775: 7814,
                    776: 7812,
                    803: 7816
                }
            ],
            88: [
                ,
                ,
                {
                    775: 7818,
                    776: 7820
                }
            ],
            89: [
                ,
                ,
                {
                    768: 7922,
                    769: 221,
                    770: 374,
                    771: 7928,
                    772: 562,
                    775: 7822,
                    776: 376,
                    777: 7926,
                    803: 7924
                }
            ],
            90: [
                ,
                ,
                {
                    769: 377,
                    770: 7824,
                    775: 379,
                    780: 381,
                    803: 7826,
                    817: 7828
                }
            ],
            97: [
                ,
                ,
                {
                    768: 224,
                    769: 225,
                    770: 226,
                    771: 227,
                    772: 257,
                    774: 259,
                    775: 551,
                    776: 228,
                    777: 7843,
                    778: 229,
                    780: 462,
                    783: 513,
                    785: 515,
                    803: 7841,
                    805: 7681,
                    808: 261
                }
            ],
            98: [
                ,
                ,
                {
                    775: 7683,
                    803: 7685,
                    817: 7687
                }
            ],
            99: [
                ,
                ,
                {
                    769: 263,
                    770: 265,
                    775: 267,
                    780: 269,
                    807: 231
                }
            ],
            100: [
                ,
                ,
                {
                    775: 7691,
                    780: 271,
                    803: 7693,
                    807: 7697,
                    813: 7699,
                    817: 7695
                }
            ],
            101: [
                ,
                ,
                {
                    768: 232,
                    769: 233,
                    770: 234,
                    771: 7869,
                    772: 275,
                    774: 277,
                    775: 279,
                    776: 235,
                    777: 7867,
                    780: 283,
                    783: 517,
                    785: 519,
                    803: 7865,
                    807: 553,
                    808: 281,
                    813: 7705,
                    816: 7707
                }
            ],
            102: [
                ,
                ,
                {
                    775: 7711
                }
            ],
            103: [
                ,
                ,
                {
                    769: 501,
                    770: 285,
                    772: 7713,
                    774: 287,
                    775: 289,
                    780: 487,
                    807: 291
                }
            ],
            104: [
                ,
                ,
                {
                    770: 293,
                    775: 7715,
                    776: 7719,
                    780: 543,
                    803: 7717,
                    807: 7721,
                    814: 7723,
                    817: 7830
                }
            ],
            105: [
                ,
                ,
                {
                    768: 236,
                    769: 237,
                    770: 238,
                    771: 297,
                    772: 299,
                    774: 301,
                    776: 239,
                    777: 7881,
                    780: 464,
                    783: 521,
                    785: 523,
                    803: 7883,
                    808: 303,
                    816: 7725
                }
            ],
            106: [
                ,
                ,
                {
                    770: 309,
                    780: 496
                }
            ],
            107: [
                ,
                ,
                {
                    769: 7729,
                    780: 489,
                    803: 7731,
                    807: 311,
                    817: 7733
                }
            ],
            108: [
                ,
                ,
                {
                    769: 314,
                    780: 318,
                    803: 7735,
                    807: 316,
                    813: 7741,
                    817: 7739
                }
            ],
            109: [
                ,
                ,
                {
                    769: 7743,
                    775: 7745,
                    803: 7747
                }
            ],
            110: [
                ,
                ,
                {
                    768: 505,
                    769: 324,
                    771: 241,
                    775: 7749,
                    780: 328,
                    803: 7751,
                    807: 326,
                    813: 7755,
                    817: 7753
                }
            ],
            111: [
                ,
                ,
                {
                    768: 242,
                    769: 243,
                    770: 244,
                    771: 245,
                    772: 333,
                    774: 335,
                    775: 559,
                    776: 246,
                    777: 7887,
                    779: 337,
                    780: 466,
                    783: 525,
                    785: 527,
                    795: 417,
                    803: 7885,
                    808: 491
                }
            ],
            112: [
                ,
                ,
                {
                    769: 7765,
                    775: 7767
                }
            ],
            114: [
                ,
                ,
                {
                    769: 341,
                    775: 7769,
                    780: 345,
                    783: 529,
                    785: 531,
                    803: 7771,
                    807: 343,
                    817: 7775
                }
            ],
            115: [
                ,
                ,
                {
                    769: 347,
                    770: 349,
                    775: 7777,
                    780: 353,
                    803: 7779,
                    806: 537,
                    807: 351
                }
            ],
            116: [
                ,
                ,
                {
                    775: 7787,
                    776: 7831,
                    780: 357,
                    803: 7789,
                    806: 539,
                    807: 355,
                    813: 7793,
                    817: 7791
                }
            ],
            117: [
                ,
                ,
                {
                    768: 249,
                    769: 250,
                    770: 251,
                    771: 361,
                    772: 363,
                    774: 365,
                    776: 252,
                    777: 7911,
                    778: 367,
                    779: 369,
                    780: 468,
                    783: 533,
                    785: 535,
                    795: 432,
                    803: 7909,
                    804: 7795,
                    808: 371,
                    813: 7799,
                    816: 7797
                }
            ],
            118: [
                ,
                ,
                {
                    771: 7805,
                    803: 7807
                }
            ],
            119: [
                ,
                ,
                {
                    768: 7809,
                    769: 7811,
                    770: 373,
                    775: 7815,
                    776: 7813,
                    778: 7832,
                    803: 7817
                }
            ],
            120: [
                ,
                ,
                {
                    775: 7819,
                    776: 7821
                }
            ],
            121: [
                ,
                ,
                {
                    768: 7923,
                    769: 253,
                    770: 375,
                    771: 7929,
                    772: 563,
                    775: 7823,
                    776: 255,
                    777: 7927,
                    778: 7833,
                    803: 7925
                }
            ],
            122: [
                ,
                ,
                {
                    769: 378,
                    770: 7825,
                    775: 380,
                    780: 382,
                    803: 7827,
                    817: 7829
                }
            ],
            160: [
                [
                    32
                ],
                256
            ],
            168: [
                [
                    32,
                    776
                ],
                256,
                {
                    768: 8173,
                    769: 901,
                    834: 8129
                }
            ],
            170: [
                [
                    97
                ],
                256
            ],
            175: [
                [
                    32,
                    772
                ],
                256
            ],
            178: [
                [
                    50
                ],
                256
            ],
            179: [
                [
                    51
                ],
                256
            ],
            180: [
                [
                    32,
                    769
                ],
                256
            ],
            181: [
                [
                    956
                ],
                256
            ],
            184: [
                [
                    32,
                    807
                ],
                256
            ],
            185: [
                [
                    49
                ],
                256
            ],
            186: [
                [
                    111
                ],
                256
            ],
            188: [
                [
                    49,
                    8260,
                    52
                ],
                256
            ],
            189: [
                [
                    49,
                    8260,
                    50
                ],
                256
            ],
            190: [
                [
                    51,
                    8260,
                    52
                ],
                256
            ],
            192: [
                [
                    65,
                    768
                ]
            ],
            193: [
                [
                    65,
                    769
                ]
            ],
            194: [
                [
                    65,
                    770
                ],
                ,
                {
                    768: 7846,
                    769: 7844,
                    771: 7850,
                    777: 7848
                }
            ],
            195: [
                [
                    65,
                    771
                ]
            ],
            196: [
                [
                    65,
                    776
                ],
                ,
                {
                    772: 478
                }
            ],
            197: [
                [
                    65,
                    778
                ],
                ,
                {
                    769: 506
                }
            ],
            198: [
                ,
                ,
                {
                    769: 508,
                    772: 482
                }
            ],
            199: [
                [
                    67,
                    807
                ],
                ,
                {
                    769: 7688
                }
            ],
            200: [
                [
                    69,
                    768
                ]
            ],
            201: [
                [
                    69,
                    769
                ]
            ],
            202: [
                [
                    69,
                    770
                ],
                ,
                {
                    768: 7872,
                    769: 7870,
                    771: 7876,
                    777: 7874
                }
            ],
            203: [
                [
                    69,
                    776
                ]
            ],
            204: [
                [
                    73,
                    768
                ]
            ],
            205: [
                [
                    73,
                    769
                ]
            ],
            206: [
                [
                    73,
                    770
                ]
            ],
            207: [
                [
                    73,
                    776
                ],
                ,
                {
                    769: 7726
                }
            ],
            209: [
                [
                    78,
                    771
                ]
            ],
            210: [
                [
                    79,
                    768
                ]
            ],
            211: [
                [
                    79,
                    769
                ]
            ],
            212: [
                [
                    79,
                    770
                ],
                ,
                {
                    768: 7890,
                    769: 7888,
                    771: 7894,
                    777: 7892
                }
            ],
            213: [
                [
                    79,
                    771
                ],
                ,
                {
                    769: 7756,
                    772: 556,
                    776: 7758
                }
            ],
            214: [
                [
                    79,
                    776
                ],
                ,
                {
                    772: 554
                }
            ],
            216: [
                ,
                ,
                {
                    769: 510
                }
            ],
            217: [
                [
                    85,
                    768
                ]
            ],
            218: [
                [
                    85,
                    769
                ]
            ],
            219: [
                [
                    85,
                    770
                ]
            ],
            220: [
                [
                    85,
                    776
                ],
                ,
                {
                    768: 475,
                    769: 471,
                    772: 469,
                    780: 473
                }
            ],
            221: [
                [
                    89,
                    769
                ]
            ],
            224: [
                [
                    97,
                    768
                ]
            ],
            225: [
                [
                    97,
                    769
                ]
            ],
            226: [
                [
                    97,
                    770
                ],
                ,
                {
                    768: 7847,
                    769: 7845,
                    771: 7851,
                    777: 7849
                }
            ],
            227: [
                [
                    97,
                    771
                ]
            ],
            228: [
                [
                    97,
                    776
                ],
                ,
                {
                    772: 479
                }
            ],
            229: [
                [
                    97,
                    778
                ],
                ,
                {
                    769: 507
                }
            ],
            230: [
                ,
                ,
                {
                    769: 509,
                    772: 483
                }
            ],
            231: [
                [
                    99,
                    807
                ],
                ,
                {
                    769: 7689
                }
            ],
            232: [
                [
                    101,
                    768
                ]
            ],
            233: [
                [
                    101,
                    769
                ]
            ],
            234: [
                [
                    101,
                    770
                ],
                ,
                {
                    768: 7873,
                    769: 7871,
                    771: 7877,
                    777: 7875
                }
            ],
            235: [
                [
                    101,
                    776
                ]
            ],
            236: [
                [
                    105,
                    768
                ]
            ],
            237: [
                [
                    105,
                    769
                ]
            ],
            238: [
                [
                    105,
                    770
                ]
            ],
            239: [
                [
                    105,
                    776
                ],
                ,
                {
                    769: 7727
                }
            ],
            241: [
                [
                    110,
                    771
                ]
            ],
            242: [
                [
                    111,
                    768
                ]
            ],
            243: [
                [
                    111,
                    769
                ]
            ],
            244: [
                [
                    111,
                    770
                ],
                ,
                {
                    768: 7891,
                    769: 7889,
                    771: 7895,
                    777: 7893
                }
            ],
            245: [
                [
                    111,
                    771
                ],
                ,
                {
                    769: 7757,
                    772: 557,
                    776: 7759
                }
            ],
            246: [
                [
                    111,
                    776
                ],
                ,
                {
                    772: 555
                }
            ],
            248: [
                ,
                ,
                {
                    769: 511
                }
            ],
            249: [
                [
                    117,
                    768
                ]
            ],
            250: [
                [
                    117,
                    769
                ]
            ],
            251: [
                [
                    117,
                    770
                ]
            ],
            252: [
                [
                    117,
                    776
                ],
                ,
                {
                    768: 476,
                    769: 472,
                    772: 470,
                    780: 474
                }
            ],
            253: [
                [
                    121,
                    769
                ]
            ],
            255: [
                [
                    121,
                    776
                ]
            ]
        },
        256: {
            256: [
                [
                    65,
                    772
                ]
            ],
            257: [
                [
                    97,
                    772
                ]
            ],
            258: [
                [
                    65,
                    774
                ],
                ,
                {
                    768: 7856,
                    769: 7854,
                    771: 7860,
                    777: 7858
                }
            ],
            259: [
                [
                    97,
                    774
                ],
                ,
                {
                    768: 7857,
                    769: 7855,
                    771: 7861,
                    777: 7859
                }
            ],
            260: [
                [
                    65,
                    808
                ]
            ],
            261: [
                [
                    97,
                    808
                ]
            ],
            262: [
                [
                    67,
                    769
                ]
            ],
            263: [
                [
                    99,
                    769
                ]
            ],
            264: [
                [
                    67,
                    770
                ]
            ],
            265: [
                [
                    99,
                    770
                ]
            ],
            266: [
                [
                    67,
                    775
                ]
            ],
            267: [
                [
                    99,
                    775
                ]
            ],
            268: [
                [
                    67,
                    780
                ]
            ],
            269: [
                [
                    99,
                    780
                ]
            ],
            270: [
                [
                    68,
                    780
                ]
            ],
            271: [
                [
                    100,
                    780
                ]
            ],
            274: [
                [
                    69,
                    772
                ],
                ,
                {
                    768: 7700,
                    769: 7702
                }
            ],
            275: [
                [
                    101,
                    772
                ],
                ,
                {
                    768: 7701,
                    769: 7703
                }
            ],
            276: [
                [
                    69,
                    774
                ]
            ],
            277: [
                [
                    101,
                    774
                ]
            ],
            278: [
                [
                    69,
                    775
                ]
            ],
            279: [
                [
                    101,
                    775
                ]
            ],
            280: [
                [
                    69,
                    808
                ]
            ],
            281: [
                [
                    101,
                    808
                ]
            ],
            282: [
                [
                    69,
                    780
                ]
            ],
            283: [
                [
                    101,
                    780
                ]
            ],
            284: [
                [
                    71,
                    770
                ]
            ],
            285: [
                [
                    103,
                    770
                ]
            ],
            286: [
                [
                    71,
                    774
                ]
            ],
            287: [
                [
                    103,
                    774
                ]
            ],
            288: [
                [
                    71,
                    775
                ]
            ],
            289: [
                [
                    103,
                    775
                ]
            ],
            290: [
                [
                    71,
                    807
                ]
            ],
            291: [
                [
                    103,
                    807
                ]
            ],
            292: [
                [
                    72,
                    770
                ]
            ],
            293: [
                [
                    104,
                    770
                ]
            ],
            296: [
                [
                    73,
                    771
                ]
            ],
            297: [
                [
                    105,
                    771
                ]
            ],
            298: [
                [
                    73,
                    772
                ]
            ],
            299: [
                [
                    105,
                    772
                ]
            ],
            300: [
                [
                    73,
                    774
                ]
            ],
            301: [
                [
                    105,
                    774
                ]
            ],
            302: [
                [
                    73,
                    808
                ]
            ],
            303: [
                [
                    105,
                    808
                ]
            ],
            304: [
                [
                    73,
                    775
                ]
            ],
            306: [
                [
                    73,
                    74
                ],
                256
            ],
            307: [
                [
                    105,
                    106
                ],
                256
            ],
            308: [
                [
                    74,
                    770
                ]
            ],
            309: [
                [
                    106,
                    770
                ]
            ],
            310: [
                [
                    75,
                    807
                ]
            ],
            311: [
                [
                    107,
                    807
                ]
            ],
            313: [
                [
                    76,
                    769
                ]
            ],
            314: [
                [
                    108,
                    769
                ]
            ],
            315: [
                [
                    76,
                    807
                ]
            ],
            316: [
                [
                    108,
                    807
                ]
            ],
            317: [
                [
                    76,
                    780
                ]
            ],
            318: [
                [
                    108,
                    780
                ]
            ],
            319: [
                [
                    76,
                    183
                ],
                256
            ],
            320: [
                [
                    108,
                    183
                ],
                256
            ],
            323: [
                [
                    78,
                    769
                ]
            ],
            324: [
                [
                    110,
                    769
                ]
            ],
            325: [
                [
                    78,
                    807
                ]
            ],
            326: [
                [
                    110,
                    807
                ]
            ],
            327: [
                [
                    78,
                    780
                ]
            ],
            328: [
                [
                    110,
                    780
                ]
            ],
            329: [
                [
                    700,
                    110
                ],
                256
            ],
            332: [
                [
                    79,
                    772
                ],
                ,
                {
                    768: 7760,
                    769: 7762
                }
            ],
            333: [
                [
                    111,
                    772
                ],
                ,
                {
                    768: 7761,
                    769: 7763
                }
            ],
            334: [
                [
                    79,
                    774
                ]
            ],
            335: [
                [
                    111,
                    774
                ]
            ],
            336: [
                [
                    79,
                    779
                ]
            ],
            337: [
                [
                    111,
                    779
                ]
            ],
            340: [
                [
                    82,
                    769
                ]
            ],
            341: [
                [
                    114,
                    769
                ]
            ],
            342: [
                [
                    82,
                    807
                ]
            ],
            343: [
                [
                    114,
                    807
                ]
            ],
            344: [
                [
                    82,
                    780
                ]
            ],
            345: [
                [
                    114,
                    780
                ]
            ],
            346: [
                [
                    83,
                    769
                ],
                ,
                {
                    775: 7780
                }
            ],
            347: [
                [
                    115,
                    769
                ],
                ,
                {
                    775: 7781
                }
            ],
            348: [
                [
                    83,
                    770
                ]
            ],
            349: [
                [
                    115,
                    770
                ]
            ],
            350: [
                [
                    83,
                    807
                ]
            ],
            351: [
                [
                    115,
                    807
                ]
            ],
            352: [
                [
                    83,
                    780
                ],
                ,
                {
                    775: 7782
                }
            ],
            353: [
                [
                    115,
                    780
                ],
                ,
                {
                    775: 7783
                }
            ],
            354: [
                [
                    84,
                    807
                ]
            ],
            355: [
                [
                    116,
                    807
                ]
            ],
            356: [
                [
                    84,
                    780
                ]
            ],
            357: [
                [
                    116,
                    780
                ]
            ],
            360: [
                [
                    85,
                    771
                ],
                ,
                {
                    769: 7800
                }
            ],
            361: [
                [
                    117,
                    771
                ],
                ,
                {
                    769: 7801
                }
            ],
            362: [
                [
                    85,
                    772
                ],
                ,
                {
                    776: 7802
                }
            ],
            363: [
                [
                    117,
                    772
                ],
                ,
                {
                    776: 7803
                }
            ],
            364: [
                [
                    85,
                    774
                ]
            ],
            365: [
                [
                    117,
                    774
                ]
            ],
            366: [
                [
                    85,
                    778
                ]
            ],
            367: [
                [
                    117,
                    778
                ]
            ],
            368: [
                [
                    85,
                    779
                ]
            ],
            369: [
                [
                    117,
                    779
                ]
            ],
            370: [
                [
                    85,
                    808
                ]
            ],
            371: [
                [
                    117,
                    808
                ]
            ],
            372: [
                [
                    87,
                    770
                ]
            ],
            373: [
                [
                    119,
                    770
                ]
            ],
            374: [
                [
                    89,
                    770
                ]
            ],
            375: [
                [
                    121,
                    770
                ]
            ],
            376: [
                [
                    89,
                    776
                ]
            ],
            377: [
                [
                    90,
                    769
                ]
            ],
            378: [
                [
                    122,
                    769
                ]
            ],
            379: [
                [
                    90,
                    775
                ]
            ],
            380: [
                [
                    122,
                    775
                ]
            ],
            381: [
                [
                    90,
                    780
                ]
            ],
            382: [
                [
                    122,
                    780
                ]
            ],
            383: [
                [
                    115
                ],
                256,
                {
                    775: 7835
                }
            ],
            416: [
                [
                    79,
                    795
                ],
                ,
                {
                    768: 7900,
                    769: 7898,
                    771: 7904,
                    777: 7902,
                    803: 7906
                }
            ],
            417: [
                [
                    111,
                    795
                ],
                ,
                {
                    768: 7901,
                    769: 7899,
                    771: 7905,
                    777: 7903,
                    803: 7907
                }
            ],
            431: [
                [
                    85,
                    795
                ],
                ,
                {
                    768: 7914,
                    769: 7912,
                    771: 7918,
                    777: 7916,
                    803: 7920
                }
            ],
            432: [
                [
                    117,
                    795
                ],
                ,
                {
                    768: 7915,
                    769: 7913,
                    771: 7919,
                    777: 7917,
                    803: 7921
                }
            ],
            439: [
                ,
                ,
                {
                    780: 494
                }
            ],
            452: [
                [
                    68,
                    381
                ],
                256
            ],
            453: [
                [
                    68,
                    382
                ],
                256
            ],
            454: [
                [
                    100,
                    382
                ],
                256
            ],
            455: [
                [
                    76,
                    74
                ],
                256
            ],
            456: [
                [
                    76,
                    106
                ],
                256
            ],
            457: [
                [
                    108,
                    106
                ],
                256
            ],
            458: [
                [
                    78,
                    74
                ],
                256
            ],
            459: [
                [
                    78,
                    106
                ],
                256
            ],
            460: [
                [
                    110,
                    106
                ],
                256
            ],
            461: [
                [
                    65,
                    780
                ]
            ],
            462: [
                [
                    97,
                    780
                ]
            ],
            463: [
                [
                    73,
                    780
                ]
            ],
            464: [
                [
                    105,
                    780
                ]
            ],
            465: [
                [
                    79,
                    780
                ]
            ],
            466: [
                [
                    111,
                    780
                ]
            ],
            467: [
                [
                    85,
                    780
                ]
            ],
            468: [
                [
                    117,
                    780
                ]
            ],
            469: [
                [
                    220,
                    772
                ]
            ],
            470: [
                [
                    252,
                    772
                ]
            ],
            471: [
                [
                    220,
                    769
                ]
            ],
            472: [
                [
                    252,
                    769
                ]
            ],
            473: [
                [
                    220,
                    780
                ]
            ],
            474: [
                [
                    252,
                    780
                ]
            ],
            475: [
                [
                    220,
                    768
                ]
            ],
            476: [
                [
                    252,
                    768
                ]
            ],
            478: [
                [
                    196,
                    772
                ]
            ],
            479: [
                [
                    228,
                    772
                ]
            ],
            480: [
                [
                    550,
                    772
                ]
            ],
            481: [
                [
                    551,
                    772
                ]
            ],
            482: [
                [
                    198,
                    772
                ]
            ],
            483: [
                [
                    230,
                    772
                ]
            ],
            486: [
                [
                    71,
                    780
                ]
            ],
            487: [
                [
                    103,
                    780
                ]
            ],
            488: [
                [
                    75,
                    780
                ]
            ],
            489: [
                [
                    107,
                    780
                ]
            ],
            490: [
                [
                    79,
                    808
                ],
                ,
                {
                    772: 492
                }
            ],
            491: [
                [
                    111,
                    808
                ],
                ,
                {
                    772: 493
                }
            ],
            492: [
                [
                    490,
                    772
                ]
            ],
            493: [
                [
                    491,
                    772
                ]
            ],
            494: [
                [
                    439,
                    780
                ]
            ],
            495: [
                [
                    658,
                    780
                ]
            ],
            496: [
                [
                    106,
                    780
                ]
            ],
            497: [
                [
                    68,
                    90
                ],
                256
            ],
            498: [
                [
                    68,
                    122
                ],
                256
            ],
            499: [
                [
                    100,
                    122
                ],
                256
            ],
            500: [
                [
                    71,
                    769
                ]
            ],
            501: [
                [
                    103,
                    769
                ]
            ],
            504: [
                [
                    78,
                    768
                ]
            ],
            505: [
                [
                    110,
                    768
                ]
            ],
            506: [
                [
                    197,
                    769
                ]
            ],
            507: [
                [
                    229,
                    769
                ]
            ],
            508: [
                [
                    198,
                    769
                ]
            ],
            509: [
                [
                    230,
                    769
                ]
            ],
            510: [
                [
                    216,
                    769
                ]
            ],
            511: [
                [
                    248,
                    769
                ]
            ],
            66045: [
                ,
                220
            ]
        },
        512: {
            512: [
                [
                    65,
                    783
                ]
            ],
            513: [
                [
                    97,
                    783
                ]
            ],
            514: [
                [
                    65,
                    785
                ]
            ],
            515: [
                [
                    97,
                    785
                ]
            ],
            516: [
                [
                    69,
                    783
                ]
            ],
            517: [
                [
                    101,
                    783
                ]
            ],
            518: [
                [
                    69,
                    785
                ]
            ],
            519: [
                [
                    101,
                    785
                ]
            ],
            520: [
                [
                    73,
                    783
                ]
            ],
            521: [
                [
                    105,
                    783
                ]
            ],
            522: [
                [
                    73,
                    785
                ]
            ],
            523: [
                [
                    105,
                    785
                ]
            ],
            524: [
                [
                    79,
                    783
                ]
            ],
            525: [
                [
                    111,
                    783
                ]
            ],
            526: [
                [
                    79,
                    785
                ]
            ],
            527: [
                [
                    111,
                    785
                ]
            ],
            528: [
                [
                    82,
                    783
                ]
            ],
            529: [
                [
                    114,
                    783
                ]
            ],
            530: [
                [
                    82,
                    785
                ]
            ],
            531: [
                [
                    114,
                    785
                ]
            ],
            532: [
                [
                    85,
                    783
                ]
            ],
            533: [
                [
                    117,
                    783
                ]
            ],
            534: [
                [
                    85,
                    785
                ]
            ],
            535: [
                [
                    117,
                    785
                ]
            ],
            536: [
                [
                    83,
                    806
                ]
            ],
            537: [
                [
                    115,
                    806
                ]
            ],
            538: [
                [
                    84,
                    806
                ]
            ],
            539: [
                [
                    116,
                    806
                ]
            ],
            542: [
                [
                    72,
                    780
                ]
            ],
            543: [
                [
                    104,
                    780
                ]
            ],
            550: [
                [
                    65,
                    775
                ],
                ,
                {
                    772: 480
                }
            ],
            551: [
                [
                    97,
                    775
                ],
                ,
                {
                    772: 481
                }
            ],
            552: [
                [
                    69,
                    807
                ],
                ,
                {
                    774: 7708
                }
            ],
            553: [
                [
                    101,
                    807
                ],
                ,
                {
                    774: 7709
                }
            ],
            554: [
                [
                    214,
                    772
                ]
            ],
            555: [
                [
                    246,
                    772
                ]
            ],
            556: [
                [
                    213,
                    772
                ]
            ],
            557: [
                [
                    245,
                    772
                ]
            ],
            558: [
                [
                    79,
                    775
                ],
                ,
                {
                    772: 560
                }
            ],
            559: [
                [
                    111,
                    775
                ],
                ,
                {
                    772: 561
                }
            ],
            560: [
                [
                    558,
                    772
                ]
            ],
            561: [
                [
                    559,
                    772
                ]
            ],
            562: [
                [
                    89,
                    772
                ]
            ],
            563: [
                [
                    121,
                    772
                ]
            ],
            658: [
                ,
                ,
                {
                    780: 495
                }
            ],
            688: [
                [
                    104
                ],
                256
            ],
            689: [
                [
                    614
                ],
                256
            ],
            690: [
                [
                    106
                ],
                256
            ],
            691: [
                [
                    114
                ],
                256
            ],
            692: [
                [
                    633
                ],
                256
            ],
            693: [
                [
                    635
                ],
                256
            ],
            694: [
                [
                    641
                ],
                256
            ],
            695: [
                [
                    119
                ],
                256
            ],
            696: [
                [
                    121
                ],
                256
            ],
            728: [
                [
                    32,
                    774
                ],
                256
            ],
            729: [
                [
                    32,
                    775
                ],
                256
            ],
            730: [
                [
                    32,
                    778
                ],
                256
            ],
            731: [
                [
                    32,
                    808
                ],
                256
            ],
            732: [
                [
                    32,
                    771
                ],
                256
            ],
            733: [
                [
                    32,
                    779
                ],
                256
            ],
            736: [
                [
                    611
                ],
                256
            ],
            737: [
                [
                    108
                ],
                256
            ],
            738: [
                [
                    115
                ],
                256
            ],
            739: [
                [
                    120
                ],
                256
            ],
            740: [
                [
                    661
                ],
                256
            ],
            66272: [
                ,
                220
            ]
        },
        768: {
            768: [
                ,
                230
            ],
            769: [
                ,
                230
            ],
            770: [
                ,
                230
            ],
            771: [
                ,
                230
            ],
            772: [
                ,
                230
            ],
            773: [
                ,
                230
            ],
            774: [
                ,
                230
            ],
            775: [
                ,
                230
            ],
            776: [
                ,
                230,
                {
                    769: 836
                }
            ],
            777: [
                ,
                230
            ],
            778: [
                ,
                230
            ],
            779: [
                ,
                230
            ],
            780: [
                ,
                230
            ],
            781: [
                ,
                230
            ],
            782: [
                ,
                230
            ],
            783: [
                ,
                230
            ],
            784: [
                ,
                230
            ],
            785: [
                ,
                230
            ],
            786: [
                ,
                230
            ],
            787: [
                ,
                230
            ],
            788: [
                ,
                230
            ],
            789: [
                ,
                232
            ],
            790: [
                ,
                220
            ],
            791: [
                ,
                220
            ],
            792: [
                ,
                220
            ],
            793: [
                ,
                220
            ],
            794: [
                ,
                232
            ],
            795: [
                ,
                216
            ],
            796: [
                ,
                220
            ],
            797: [
                ,
                220
            ],
            798: [
                ,
                220
            ],
            799: [
                ,
                220
            ],
            800: [
                ,
                220
            ],
            801: [
                ,
                202
            ],
            802: [
                ,
                202
            ],
            803: [
                ,
                220
            ],
            804: [
                ,
                220
            ],
            805: [
                ,
                220
            ],
            806: [
                ,
                220
            ],
            807: [
                ,
                202
            ],
            808: [
                ,
                202
            ],
            809: [
                ,
                220
            ],
            810: [
                ,
                220
            ],
            811: [
                ,
                220
            ],
            812: [
                ,
                220
            ],
            813: [
                ,
                220
            ],
            814: [
                ,
                220
            ],
            815: [
                ,
                220
            ],
            816: [
                ,
                220
            ],
            817: [
                ,
                220
            ],
            818: [
                ,
                220
            ],
            819: [
                ,
                220
            ],
            820: [
                ,
                1
            ],
            821: [
                ,
                1
            ],
            822: [
                ,
                1
            ],
            823: [
                ,
                1
            ],
            824: [
                ,
                1
            ],
            825: [
                ,
                220
            ],
            826: [
                ,
                220
            ],
            827: [
                ,
                220
            ],
            828: [
                ,
                220
            ],
            829: [
                ,
                230
            ],
            830: [
                ,
                230
            ],
            831: [
                ,
                230
            ],
            832: [
                [
                    768
                ],
                230
            ],
            833: [
                [
                    769
                ],
                230
            ],
            834: [
                ,
                230
            ],
            835: [
                [
                    787
                ],
                230
            ],
            836: [
                [
                    776,
                    769
                ],
                230
            ],
            837: [
                ,
                240
            ],
            838: [
                ,
                230
            ],
            839: [
                ,
                220
            ],
            840: [
                ,
                220
            ],
            841: [
                ,
                220
            ],
            842: [
                ,
                230
            ],
            843: [
                ,
                230
            ],
            844: [
                ,
                230
            ],
            845: [
                ,
                220
            ],
            846: [
                ,
                220
            ],
            848: [
                ,
                230
            ],
            849: [
                ,
                230
            ],
            850: [
                ,
                230
            ],
            851: [
                ,
                220
            ],
            852: [
                ,
                220
            ],
            853: [
                ,
                220
            ],
            854: [
                ,
                220
            ],
            855: [
                ,
                230
            ],
            856: [
                ,
                232
            ],
            857: [
                ,
                220
            ],
            858: [
                ,
                220
            ],
            859: [
                ,
                230
            ],
            860: [
                ,
                233
            ],
            861: [
                ,
                234
            ],
            862: [
                ,
                234
            ],
            863: [
                ,
                233
            ],
            864: [
                ,
                234
            ],
            865: [
                ,
                234
            ],
            866: [
                ,
                233
            ],
            867: [
                ,
                230
            ],
            868: [
                ,
                230
            ],
            869: [
                ,
                230
            ],
            870: [
                ,
                230
            ],
            871: [
                ,
                230
            ],
            872: [
                ,
                230
            ],
            873: [
                ,
                230
            ],
            874: [
                ,
                230
            ],
            875: [
                ,
                230
            ],
            876: [
                ,
                230
            ],
            877: [
                ,
                230
            ],
            878: [
                ,
                230
            ],
            879: [
                ,
                230
            ],
            884: [
                [
                    697
                ]
            ],
            890: [
                [
                    32,
                    837
                ],
                256
            ],
            894: [
                [
                    59
                ]
            ],
            900: [
                [
                    32,
                    769
                ],
                256
            ],
            901: [
                [
                    168,
                    769
                ]
            ],
            902: [
                [
                    913,
                    769
                ]
            ],
            903: [
                [
                    183
                ]
            ],
            904: [
                [
                    917,
                    769
                ]
            ],
            905: [
                [
                    919,
                    769
                ]
            ],
            906: [
                [
                    921,
                    769
                ]
            ],
            908: [
                [
                    927,
                    769
                ]
            ],
            910: [
                [
                    933,
                    769
                ]
            ],
            911: [
                [
                    937,
                    769
                ]
            ],
            912: [
                [
                    970,
                    769
                ]
            ],
            913: [
                ,
                ,
                {
                    768: 8122,
                    769: 902,
                    772: 8121,
                    774: 8120,
                    787: 7944,
                    788: 7945,
                    837: 8124
                }
            ],
            917: [
                ,
                ,
                {
                    768: 8136,
                    769: 904,
                    787: 7960,
                    788: 7961
                }
            ],
            919: [
                ,
                ,
                {
                    768: 8138,
                    769: 905,
                    787: 7976,
                    788: 7977,
                    837: 8140
                }
            ],
            921: [
                ,
                ,
                {
                    768: 8154,
                    769: 906,
                    772: 8153,
                    774: 8152,
                    776: 938,
                    787: 7992,
                    788: 7993
                }
            ],
            927: [
                ,
                ,
                {
                    768: 8184,
                    769: 908,
                    787: 8008,
                    788: 8009
                }
            ],
            929: [
                ,
                ,
                {
                    788: 8172
                }
            ],
            933: [
                ,
                ,
                {
                    768: 8170,
                    769: 910,
                    772: 8169,
                    774: 8168,
                    776: 939,
                    788: 8025
                }
            ],
            937: [
                ,
                ,
                {
                    768: 8186,
                    769: 911,
                    787: 8040,
                    788: 8041,
                    837: 8188
                }
            ],
            938: [
                [
                    921,
                    776
                ]
            ],
            939: [
                [
                    933,
                    776
                ]
            ],
            940: [
                [
                    945,
                    769
                ],
                ,
                {
                    837: 8116
                }
            ],
            941: [
                [
                    949,
                    769
                ]
            ],
            942: [
                [
                    951,
                    769
                ],
                ,
                {
                    837: 8132
                }
            ],
            943: [
                [
                    953,
                    769
                ]
            ],
            944: [
                [
                    971,
                    769
                ]
            ],
            945: [
                ,
                ,
                {
                    768: 8048,
                    769: 940,
                    772: 8113,
                    774: 8112,
                    787: 7936,
                    788: 7937,
                    834: 8118,
                    837: 8115
                }
            ],
            949: [
                ,
                ,
                {
                    768: 8050,
                    769: 941,
                    787: 7952,
                    788: 7953
                }
            ],
            951: [
                ,
                ,
                {
                    768: 8052,
                    769: 942,
                    787: 7968,
                    788: 7969,
                    834: 8134,
                    837: 8131
                }
            ],
            953: [
                ,
                ,
                {
                    768: 8054,
                    769: 943,
                    772: 8145,
                    774: 8144,
                    776: 970,
                    787: 7984,
                    788: 7985,
                    834: 8150
                }
            ],
            959: [
                ,
                ,
                {
                    768: 8056,
                    769: 972,
                    787: 8000,
                    788: 8001
                }
            ],
            961: [
                ,
                ,
                {
                    787: 8164,
                    788: 8165
                }
            ],
            965: [
                ,
                ,
                {
                    768: 8058,
                    769: 973,
                    772: 8161,
                    774: 8160,
                    776: 971,
                    787: 8016,
                    788: 8017,
                    834: 8166
                }
            ],
            969: [
                ,
                ,
                {
                    768: 8060,
                    769: 974,
                    787: 8032,
                    788: 8033,
                    834: 8182,
                    837: 8179
                }
            ],
            970: [
                [
                    953,
                    776
                ],
                ,
                {
                    768: 8146,
                    769: 912,
                    834: 8151
                }
            ],
            971: [
                [
                    965,
                    776
                ],
                ,
                {
                    768: 8162,
                    769: 944,
                    834: 8167
                }
            ],
            972: [
                [
                    959,
                    769
                ]
            ],
            973: [
                [
                    965,
                    769
                ]
            ],
            974: [
                [
                    969,
                    769
                ],
                ,
                {
                    837: 8180
                }
            ],
            976: [
                [
                    946
                ],
                256
            ],
            977: [
                [
                    952
                ],
                256
            ],
            978: [
                [
                    933
                ],
                256,
                {
                    769: 979,
                    776: 980
                }
            ],
            979: [
                [
                    978,
                    769
                ]
            ],
            980: [
                [
                    978,
                    776
                ]
            ],
            981: [
                [
                    966
                ],
                256
            ],
            982: [
                [
                    960
                ],
                256
            ],
            1008: [
                [
                    954
                ],
                256
            ],
            1009: [
                [
                    961
                ],
                256
            ],
            1010: [
                [
                    962
                ],
                256
            ],
            1012: [
                [
                    920
                ],
                256
            ],
            1013: [
                [
                    949
                ],
                256
            ],
            1017: [
                [
                    931
                ],
                256
            ],
            66422: [
                ,
                230
            ],
            66423: [
                ,
                230
            ],
            66424: [
                ,
                230
            ],
            66425: [
                ,
                230
            ],
            66426: [
                ,
                230
            ]
        },
        1024: {
            1024: [
                [
                    1045,
                    768
                ]
            ],
            1025: [
                [
                    1045,
                    776
                ]
            ],
            1027: [
                [
                    1043,
                    769
                ]
            ],
            1030: [
                ,
                ,
                {
                    776: 1031
                }
            ],
            1031: [
                [
                    1030,
                    776
                ]
            ],
            1036: [
                [
                    1050,
                    769
                ]
            ],
            1037: [
                [
                    1048,
                    768
                ]
            ],
            1038: [
                [
                    1059,
                    774
                ]
            ],
            1040: [
                ,
                ,
                {
                    774: 1232,
                    776: 1234
                }
            ],
            1043: [
                ,
                ,
                {
                    769: 1027
                }
            ],
            1045: [
                ,
                ,
                {
                    768: 1024,
                    774: 1238,
                    776: 1025
                }
            ],
            1046: [
                ,
                ,
                {
                    774: 1217,
                    776: 1244
                }
            ],
            1047: [
                ,
                ,
                {
                    776: 1246
                }
            ],
            1048: [
                ,
                ,
                {
                    768: 1037,
                    772: 1250,
                    774: 1049,
                    776: 1252
                }
            ],
            1049: [
                [
                    1048,
                    774
                ]
            ],
            1050: [
                ,
                ,
                {
                    769: 1036
                }
            ],
            1054: [
                ,
                ,
                {
                    776: 1254
                }
            ],
            1059: [
                ,
                ,
                {
                    772: 1262,
                    774: 1038,
                    776: 1264,
                    779: 1266
                }
            ],
            1063: [
                ,
                ,
                {
                    776: 1268
                }
            ],
            1067: [
                ,
                ,
                {
                    776: 1272
                }
            ],
            1069: [
                ,
                ,
                {
                    776: 1260
                }
            ],
            1072: [
                ,
                ,
                {
                    774: 1233,
                    776: 1235
                }
            ],
            1075: [
                ,
                ,
                {
                    769: 1107
                }
            ],
            1077: [
                ,
                ,
                {
                    768: 1104,
                    774: 1239,
                    776: 1105
                }
            ],
            1078: [
                ,
                ,
                {
                    774: 1218,
                    776: 1245
                }
            ],
            1079: [
                ,
                ,
                {
                    776: 1247
                }
            ],
            1080: [
                ,
                ,
                {
                    768: 1117,
                    772: 1251,
                    774: 1081,
                    776: 1253
                }
            ],
            1081: [
                [
                    1080,
                    774
                ]
            ],
            1082: [
                ,
                ,
                {
                    769: 1116
                }
            ],
            1086: [
                ,
                ,
                {
                    776: 1255
                }
            ],
            1091: [
                ,
                ,
                {
                    772: 1263,
                    774: 1118,
                    776: 1265,
                    779: 1267
                }
            ],
            1095: [
                ,
                ,
                {
                    776: 1269
                }
            ],
            1099: [
                ,
                ,
                {
                    776: 1273
                }
            ],
            1101: [
                ,
                ,
                {
                    776: 1261
                }
            ],
            1104: [
                [
                    1077,
                    768
                ]
            ],
            1105: [
                [
                    1077,
                    776
                ]
            ],
            1107: [
                [
                    1075,
                    769
                ]
            ],
            1110: [
                ,
                ,
                {
                    776: 1111
                }
            ],
            1111: [
                [
                    1110,
                    776
                ]
            ],
            1116: [
                [
                    1082,
                    769
                ]
            ],
            1117: [
                [
                    1080,
                    768
                ]
            ],
            1118: [
                [
                    1091,
                    774
                ]
            ],
            1140: [
                ,
                ,
                {
                    783: 1142
                }
            ],
            1141: [
                ,
                ,
                {
                    783: 1143
                }
            ],
            1142: [
                [
                    1140,
                    783
                ]
            ],
            1143: [
                [
                    1141,
                    783
                ]
            ],
            1155: [
                ,
                230
            ],
            1156: [
                ,
                230
            ],
            1157: [
                ,
                230
            ],
            1158: [
                ,
                230
            ],
            1159: [
                ,
                230
            ],
            1217: [
                [
                    1046,
                    774
                ]
            ],
            1218: [
                [
                    1078,
                    774
                ]
            ],
            1232: [
                [
                    1040,
                    774
                ]
            ],
            1233: [
                [
                    1072,
                    774
                ]
            ],
            1234: [
                [
                    1040,
                    776
                ]
            ],
            1235: [
                [
                    1072,
                    776
                ]
            ],
            1238: [
                [
                    1045,
                    774
                ]
            ],
            1239: [
                [
                    1077,
                    774
                ]
            ],
            1240: [
                ,
                ,
                {
                    776: 1242
                }
            ],
            1241: [
                ,
                ,
                {
                    776: 1243
                }
            ],
            1242: [
                [
                    1240,
                    776
                ]
            ],
            1243: [
                [
                    1241,
                    776
                ]
            ],
            1244: [
                [
                    1046,
                    776
                ]
            ],
            1245: [
                [
                    1078,
                    776
                ]
            ],
            1246: [
                [
                    1047,
                    776
                ]
            ],
            1247: [
                [
                    1079,
                    776
                ]
            ],
            1250: [
                [
                    1048,
                    772
                ]
            ],
            1251: [
                [
                    1080,
                    772
                ]
            ],
            1252: [
                [
                    1048,
                    776
                ]
            ],
            1253: [
                [
                    1080,
                    776
                ]
            ],
            1254: [
                [
                    1054,
                    776
                ]
            ],
            1255: [
                [
                    1086,
                    776
                ]
            ],
            1256: [
                ,
                ,
                {
                    776: 1258
                }
            ],
            1257: [
                ,
                ,
                {
                    776: 1259
                }
            ],
            1258: [
                [
                    1256,
                    776
                ]
            ],
            1259: [
                [
                    1257,
                    776
                ]
            ],
            1260: [
                [
                    1069,
                    776
                ]
            ],
            1261: [
                [
                    1101,
                    776
                ]
            ],
            1262: [
                [
                    1059,
                    772
                ]
            ],
            1263: [
                [
                    1091,
                    772
                ]
            ],
            1264: [
                [
                    1059,
                    776
                ]
            ],
            1265: [
                [
                    1091,
                    776
                ]
            ],
            1266: [
                [
                    1059,
                    779
                ]
            ],
            1267: [
                [
                    1091,
                    779
                ]
            ],
            1268: [
                [
                    1063,
                    776
                ]
            ],
            1269: [
                [
                    1095,
                    776
                ]
            ],
            1272: [
                [
                    1067,
                    776
                ]
            ],
            1273: [
                [
                    1099,
                    776
                ]
            ]
        },
        1280: {
            1415: [
                [
                    1381,
                    1410
                ],
                256
            ],
            1425: [
                ,
                220
            ],
            1426: [
                ,
                230
            ],
            1427: [
                ,
                230
            ],
            1428: [
                ,
                230
            ],
            1429: [
                ,
                230
            ],
            1430: [
                ,
                220
            ],
            1431: [
                ,
                230
            ],
            1432: [
                ,
                230
            ],
            1433: [
                ,
                230
            ],
            1434: [
                ,
                222
            ],
            1435: [
                ,
                220
            ],
            1436: [
                ,
                230
            ],
            1437: [
                ,
                230
            ],
            1438: [
                ,
                230
            ],
            1439: [
                ,
                230
            ],
            1440: [
                ,
                230
            ],
            1441: [
                ,
                230
            ],
            1442: [
                ,
                220
            ],
            1443: [
                ,
                220
            ],
            1444: [
                ,
                220
            ],
            1445: [
                ,
                220
            ],
            1446: [
                ,
                220
            ],
            1447: [
                ,
                220
            ],
            1448: [
                ,
                230
            ],
            1449: [
                ,
                230
            ],
            1450: [
                ,
                220
            ],
            1451: [
                ,
                230
            ],
            1452: [
                ,
                230
            ],
            1453: [
                ,
                222
            ],
            1454: [
                ,
                228
            ],
            1455: [
                ,
                230
            ],
            1456: [
                ,
                10
            ],
            1457: [
                ,
                11
            ],
            1458: [
                ,
                12
            ],
            1459: [
                ,
                13
            ],
            1460: [
                ,
                14
            ],
            1461: [
                ,
                15
            ],
            1462: [
                ,
                16
            ],
            1463: [
                ,
                17
            ],
            1464: [
                ,
                18
            ],
            1465: [
                ,
                19
            ],
            1466: [
                ,
                19
            ],
            1467: [
                ,
                20
            ],
            1468: [
                ,
                21
            ],
            1469: [
                ,
                22
            ],
            1471: [
                ,
                23
            ],
            1473: [
                ,
                24
            ],
            1474: [
                ,
                25
            ],
            1476: [
                ,
                230
            ],
            1477: [
                ,
                220
            ],
            1479: [
                ,
                18
            ]
        },
        1536: {
            1552: [
                ,
                230
            ],
            1553: [
                ,
                230
            ],
            1554: [
                ,
                230
            ],
            1555: [
                ,
                230
            ],
            1556: [
                ,
                230
            ],
            1557: [
                ,
                230
            ],
            1558: [
                ,
                230
            ],
            1559: [
                ,
                230
            ],
            1560: [
                ,
                30
            ],
            1561: [
                ,
                31
            ],
            1562: [
                ,
                32
            ],
            1570: [
                [
                    1575,
                    1619
                ]
            ],
            1571: [
                [
                    1575,
                    1620
                ]
            ],
            1572: [
                [
                    1608,
                    1620
                ]
            ],
            1573: [
                [
                    1575,
                    1621
                ]
            ],
            1574: [
                [
                    1610,
                    1620
                ]
            ],
            1575: [
                ,
                ,
                {
                    1619: 1570,
                    1620: 1571,
                    1621: 1573
                }
            ],
            1608: [
                ,
                ,
                {
                    1620: 1572
                }
            ],
            1610: [
                ,
                ,
                {
                    1620: 1574
                }
            ],
            1611: [
                ,
                27
            ],
            1612: [
                ,
                28
            ],
            1613: [
                ,
                29
            ],
            1614: [
                ,
                30
            ],
            1615: [
                ,
                31
            ],
            1616: [
                ,
                32
            ],
            1617: [
                ,
                33
            ],
            1618: [
                ,
                34
            ],
            1619: [
                ,
                230
            ],
            1620: [
                ,
                230
            ],
            1621: [
                ,
                220
            ],
            1622: [
                ,
                220
            ],
            1623: [
                ,
                230
            ],
            1624: [
                ,
                230
            ],
            1625: [
                ,
                230
            ],
            1626: [
                ,
                230
            ],
            1627: [
                ,
                230
            ],
            1628: [
                ,
                220
            ],
            1629: [
                ,
                230
            ],
            1630: [
                ,
                230
            ],
            1631: [
                ,
                220
            ],
            1648: [
                ,
                35
            ],
            1653: [
                [
                    1575,
                    1652
                ],
                256
            ],
            1654: [
                [
                    1608,
                    1652
                ],
                256
            ],
            1655: [
                [
                    1735,
                    1652
                ],
                256
            ],
            1656: [
                [
                    1610,
                    1652
                ],
                256
            ],
            1728: [
                [
                    1749,
                    1620
                ]
            ],
            1729: [
                ,
                ,
                {
                    1620: 1730
                }
            ],
            1730: [
                [
                    1729,
                    1620
                ]
            ],
            1746: [
                ,
                ,
                {
                    1620: 1747
                }
            ],
            1747: [
                [
                    1746,
                    1620
                ]
            ],
            1749: [
                ,
                ,
                {
                    1620: 1728
                }
            ],
            1750: [
                ,
                230
            ],
            1751: [
                ,
                230
            ],
            1752: [
                ,
                230
            ],
            1753: [
                ,
                230
            ],
            1754: [
                ,
                230
            ],
            1755: [
                ,
                230
            ],
            1756: [
                ,
                230
            ],
            1759: [
                ,
                230
            ],
            1760: [
                ,
                230
            ],
            1761: [
                ,
                230
            ],
            1762: [
                ,
                230
            ],
            1763: [
                ,
                220
            ],
            1764: [
                ,
                230
            ],
            1767: [
                ,
                230
            ],
            1768: [
                ,
                230
            ],
            1770: [
                ,
                220
            ],
            1771: [
                ,
                230
            ],
            1772: [
                ,
                230
            ],
            1773: [
                ,
                220
            ]
        },
        1792: {
            1809: [
                ,
                36
            ],
            1840: [
                ,
                230
            ],
            1841: [
                ,
                220
            ],
            1842: [
                ,
                230
            ],
            1843: [
                ,
                230
            ],
            1844: [
                ,
                220
            ],
            1845: [
                ,
                230
            ],
            1846: [
                ,
                230
            ],
            1847: [
                ,
                220
            ],
            1848: [
                ,
                220
            ],
            1849: [
                ,
                220
            ],
            1850: [
                ,
                230
            ],
            1851: [
                ,
                220
            ],
            1852: [
                ,
                220
            ],
            1853: [
                ,
                230
            ],
            1854: [
                ,
                220
            ],
            1855: [
                ,
                230
            ],
            1856: [
                ,
                230
            ],
            1857: [
                ,
                230
            ],
            1858: [
                ,
                220
            ],
            1859: [
                ,
                230
            ],
            1860: [
                ,
                220
            ],
            1861: [
                ,
                230
            ],
            1862: [
                ,
                220
            ],
            1863: [
                ,
                230
            ],
            1864: [
                ,
                220
            ],
            1865: [
                ,
                230
            ],
            1866: [
                ,
                230
            ],
            2027: [
                ,
                230
            ],
            2028: [
                ,
                230
            ],
            2029: [
                ,
                230
            ],
            2030: [
                ,
                230
            ],
            2031: [
                ,
                230
            ],
            2032: [
                ,
                230
            ],
            2033: [
                ,
                230
            ],
            2034: [
                ,
                220
            ],
            2035: [
                ,
                230
            ]
        },
        2048: {
            2070: [
                ,
                230
            ],
            2071: [
                ,
                230
            ],
            2072: [
                ,
                230
            ],
            2073: [
                ,
                230
            ],
            2075: [
                ,
                230
            ],
            2076: [
                ,
                230
            ],
            2077: [
                ,
                230
            ],
            2078: [
                ,
                230
            ],
            2079: [
                ,
                230
            ],
            2080: [
                ,
                230
            ],
            2081: [
                ,
                230
            ],
            2082: [
                ,
                230
            ],
            2083: [
                ,
                230
            ],
            2085: [
                ,
                230
            ],
            2086: [
                ,
                230
            ],
            2087: [
                ,
                230
            ],
            2089: [
                ,
                230
            ],
            2090: [
                ,
                230
            ],
            2091: [
                ,
                230
            ],
            2092: [
                ,
                230
            ],
            2093: [
                ,
                230
            ],
            2137: [
                ,
                220
            ],
            2138: [
                ,
                220
            ],
            2139: [
                ,
                220
            ],
            2276: [
                ,
                230
            ],
            2277: [
                ,
                230
            ],
            2278: [
                ,
                220
            ],
            2279: [
                ,
                230
            ],
            2280: [
                ,
                230
            ],
            2281: [
                ,
                220
            ],
            2282: [
                ,
                230
            ],
            2283: [
                ,
                230
            ],
            2284: [
                ,
                230
            ],
            2285: [
                ,
                220
            ],
            2286: [
                ,
                220
            ],
            2287: [
                ,
                220
            ],
            2288: [
                ,
                27
            ],
            2289: [
                ,
                28
            ],
            2290: [
                ,
                29
            ],
            2291: [
                ,
                230
            ],
            2292: [
                ,
                230
            ],
            2293: [
                ,
                230
            ],
            2294: [
                ,
                220
            ],
            2295: [
                ,
                230
            ],
            2296: [
                ,
                230
            ],
            2297: [
                ,
                220
            ],
            2298: [
                ,
                220
            ],
            2299: [
                ,
                230
            ],
            2300: [
                ,
                230
            ],
            2301: [
                ,
                230
            ],
            2302: [
                ,
                230
            ],
            2303: [
                ,
                230
            ]
        },
        2304: {
            2344: [
                ,
                ,
                {
                    2364: 2345
                }
            ],
            2345: [
                [
                    2344,
                    2364
                ]
            ],
            2352: [
                ,
                ,
                {
                    2364: 2353
                }
            ],
            2353: [
                [
                    2352,
                    2364
                ]
            ],
            2355: [
                ,
                ,
                {
                    2364: 2356
                }
            ],
            2356: [
                [
                    2355,
                    2364
                ]
            ],
            2364: [
                ,
                7
            ],
            2381: [
                ,
                9
            ],
            2385: [
                ,
                230
            ],
            2386: [
                ,
                220
            ],
            2387: [
                ,
                230
            ],
            2388: [
                ,
                230
            ],
            2392: [
                [
                    2325,
                    2364
                ],
                512
            ],
            2393: [
                [
                    2326,
                    2364
                ],
                512
            ],
            2394: [
                [
                    2327,
                    2364
                ],
                512
            ],
            2395: [
                [
                    2332,
                    2364
                ],
                512
            ],
            2396: [
                [
                    2337,
                    2364
                ],
                512
            ],
            2397: [
                [
                    2338,
                    2364
                ],
                512
            ],
            2398: [
                [
                    2347,
                    2364
                ],
                512
            ],
            2399: [
                [
                    2351,
                    2364
                ],
                512
            ],
            2492: [
                ,
                7
            ],
            2503: [
                ,
                ,
                {
                    2494: 2507,
                    2519: 2508
                }
            ],
            2507: [
                [
                    2503,
                    2494
                ]
            ],
            2508: [
                [
                    2503,
                    2519
                ]
            ],
            2509: [
                ,
                9
            ],
            2524: [
                [
                    2465,
                    2492
                ],
                512
            ],
            2525: [
                [
                    2466,
                    2492
                ],
                512
            ],
            2527: [
                [
                    2479,
                    2492
                ],
                512
            ]
        },
        2560: {
            2611: [
                [
                    2610,
                    2620
                ],
                512
            ],
            2614: [
                [
                    2616,
                    2620
                ],
                512
            ],
            2620: [
                ,
                7
            ],
            2637: [
                ,
                9
            ],
            2649: [
                [
                    2582,
                    2620
                ],
                512
            ],
            2650: [
                [
                    2583,
                    2620
                ],
                512
            ],
            2651: [
                [
                    2588,
                    2620
                ],
                512
            ],
            2654: [
                [
                    2603,
                    2620
                ],
                512
            ],
            2748: [
                ,
                7
            ],
            2765: [
                ,
                9
            ],
            68109: [
                ,
                220
            ],
            68111: [
                ,
                230
            ],
            68152: [
                ,
                230
            ],
            68153: [
                ,
                1
            ],
            68154: [
                ,
                220
            ],
            68159: [
                ,
                9
            ],
            68325: [
                ,
                230
            ],
            68326: [
                ,
                220
            ]
        },
        2816: {
            2876: [
                ,
                7
            ],
            2887: [
                ,
                ,
                {
                    2878: 2891,
                    2902: 2888,
                    2903: 2892
                }
            ],
            2888: [
                [
                    2887,
                    2902
                ]
            ],
            2891: [
                [
                    2887,
                    2878
                ]
            ],
            2892: [
                [
                    2887,
                    2903
                ]
            ],
            2893: [
                ,
                9
            ],
            2908: [
                [
                    2849,
                    2876
                ],
                512
            ],
            2909: [
                [
                    2850,
                    2876
                ],
                512
            ],
            2962: [
                ,
                ,
                {
                    3031: 2964
                }
            ],
            2964: [
                [
                    2962,
                    3031
                ]
            ],
            3014: [
                ,
                ,
                {
                    3006: 3018,
                    3031: 3020
                }
            ],
            3015: [
                ,
                ,
                {
                    3006: 3019
                }
            ],
            3018: [
                [
                    3014,
                    3006
                ]
            ],
            3019: [
                [
                    3015,
                    3006
                ]
            ],
            3020: [
                [
                    3014,
                    3031
                ]
            ],
            3021: [
                ,
                9
            ]
        },
        3072: {
            3142: [
                ,
                ,
                {
                    3158: 3144
                }
            ],
            3144: [
                [
                    3142,
                    3158
                ]
            ],
            3149: [
                ,
                9
            ],
            3157: [
                ,
                84
            ],
            3158: [
                ,
                91
            ],
            3260: [
                ,
                7
            ],
            3263: [
                ,
                ,
                {
                    3285: 3264
                }
            ],
            3264: [
                [
                    3263,
                    3285
                ]
            ],
            3270: [
                ,
                ,
                {
                    3266: 3274,
                    3285: 3271,
                    3286: 3272
                }
            ],
            3271: [
                [
                    3270,
                    3285
                ]
            ],
            3272: [
                [
                    3270,
                    3286
                ]
            ],
            3274: [
                [
                    3270,
                    3266
                ],
                ,
                {
                    3285: 3275
                }
            ],
            3275: [
                [
                    3274,
                    3285
                ]
            ],
            3277: [
                ,
                9
            ]
        },
        3328: {
            3398: [
                ,
                ,
                {
                    3390: 3402,
                    3415: 3404
                }
            ],
            3399: [
                ,
                ,
                {
                    3390: 3403
                }
            ],
            3402: [
                [
                    3398,
                    3390
                ]
            ],
            3403: [
                [
                    3399,
                    3390
                ]
            ],
            3404: [
                [
                    3398,
                    3415
                ]
            ],
            3405: [
                ,
                9
            ],
            3530: [
                ,
                9
            ],
            3545: [
                ,
                ,
                {
                    3530: 3546,
                    3535: 3548,
                    3551: 3550
                }
            ],
            3546: [
                [
                    3545,
                    3530
                ]
            ],
            3548: [
                [
                    3545,
                    3535
                ],
                ,
                {
                    3530: 3549
                }
            ],
            3549: [
                [
                    3548,
                    3530
                ]
            ],
            3550: [
                [
                    3545,
                    3551
                ]
            ]
        },
        3584: {
            3635: [
                [
                    3661,
                    3634
                ],
                256
            ],
            3640: [
                ,
                103
            ],
            3641: [
                ,
                103
            ],
            3642: [
                ,
                9
            ],
            3656: [
                ,
                107
            ],
            3657: [
                ,
                107
            ],
            3658: [
                ,
                107
            ],
            3659: [
                ,
                107
            ],
            3763: [
                [
                    3789,
                    3762
                ],
                256
            ],
            3768: [
                ,
                118
            ],
            3769: [
                ,
                118
            ],
            3784: [
                ,
                122
            ],
            3785: [
                ,
                122
            ],
            3786: [
                ,
                122
            ],
            3787: [
                ,
                122
            ],
            3804: [
                [
                    3755,
                    3737
                ],
                256
            ],
            3805: [
                [
                    3755,
                    3745
                ],
                256
            ]
        },
        3840: {
            3852: [
                [
                    3851
                ],
                256
            ],
            3864: [
                ,
                220
            ],
            3865: [
                ,
                220
            ],
            3893: [
                ,
                220
            ],
            3895: [
                ,
                220
            ],
            3897: [
                ,
                216
            ],
            3907: [
                [
                    3906,
                    4023
                ],
                512
            ],
            3917: [
                [
                    3916,
                    4023
                ],
                512
            ],
            3922: [
                [
                    3921,
                    4023
                ],
                512
            ],
            3927: [
                [
                    3926,
                    4023
                ],
                512
            ],
            3932: [
                [
                    3931,
                    4023
                ],
                512
            ],
            3945: [
                [
                    3904,
                    4021
                ],
                512
            ],
            3953: [
                ,
                129
            ],
            3954: [
                ,
                130
            ],
            3955: [
                [
                    3953,
                    3954
                ],
                512
            ],
            3956: [
                ,
                132
            ],
            3957: [
                [
                    3953,
                    3956
                ],
                512
            ],
            3958: [
                [
                    4018,
                    3968
                ],
                512
            ],
            3959: [
                [
                    4018,
                    3969
                ],
                256
            ],
            3960: [
                [
                    4019,
                    3968
                ],
                512
            ],
            3961: [
                [
                    4019,
                    3969
                ],
                256
            ],
            3962: [
                ,
                130
            ],
            3963: [
                ,
                130
            ],
            3964: [
                ,
                130
            ],
            3965: [
                ,
                130
            ],
            3968: [
                ,
                130
            ],
            3969: [
                [
                    3953,
                    3968
                ],
                512
            ],
            3970: [
                ,
                230
            ],
            3971: [
                ,
                230
            ],
            3972: [
                ,
                9
            ],
            3974: [
                ,
                230
            ],
            3975: [
                ,
                230
            ],
            3987: [
                [
                    3986,
                    4023
                ],
                512
            ],
            3997: [
                [
                    3996,
                    4023
                ],
                512
            ],
            4002: [
                [
                    4001,
                    4023
                ],
                512
            ],
            4007: [
                [
                    4006,
                    4023
                ],
                512
            ],
            4012: [
                [
                    4011,
                    4023
                ],
                512
            ],
            4025: [
                [
                    3984,
                    4021
                ],
                512
            ],
            4038: [
                ,
                220
            ]
        },
        4096: {
            4133: [
                ,
                ,
                {
                    4142: 4134
                }
            ],
            4134: [
                [
                    4133,
                    4142
                ]
            ],
            4151: [
                ,
                7
            ],
            4153: [
                ,
                9
            ],
            4154: [
                ,
                9
            ],
            4237: [
                ,
                220
            ],
            4348: [
                [
                    4316
                ],
                256
            ],
            69702: [
                ,
                9
            ],
            69759: [
                ,
                9
            ],
            69785: [
                ,
                ,
                {
                    69818: 69786
                }
            ],
            69786: [
                [
                    69785,
                    69818
                ]
            ],
            69787: [
                ,
                ,
                {
                    69818: 69788
                }
            ],
            69788: [
                [
                    69787,
                    69818
                ]
            ],
            69797: [
                ,
                ,
                {
                    69818: 69803
                }
            ],
            69803: [
                [
                    69797,
                    69818
                ]
            ],
            69817: [
                ,
                9
            ],
            69818: [
                ,
                7
            ]
        },
        4352: {
            69888: [
                ,
                230
            ],
            69889: [
                ,
                230
            ],
            69890: [
                ,
                230
            ],
            69934: [
                [
                    69937,
                    69927
                ]
            ],
            69935: [
                [
                    69938,
                    69927
                ]
            ],
            69937: [
                ,
                ,
                {
                    69927: 69934
                }
            ],
            69938: [
                ,
                ,
                {
                    69927: 69935
                }
            ],
            69939: [
                ,
                9
            ],
            69940: [
                ,
                9
            ],
            70003: [
                ,
                7
            ],
            70080: [
                ,
                9
            ]
        },
        4608: {
            70197: [
                ,
                9
            ],
            70198: [
                ,
                7
            ],
            70377: [
                ,
                7
            ],
            70378: [
                ,
                9
            ]
        },
        4864: {
            4957: [
                ,
                230
            ],
            4958: [
                ,
                230
            ],
            4959: [
                ,
                230
            ],
            70460: [
                ,
                7
            ],
            70471: [
                ,
                ,
                {
                    70462: 70475,
                    70487: 70476
                }
            ],
            70475: [
                [
                    70471,
                    70462
                ]
            ],
            70476: [
                [
                    70471,
                    70487
                ]
            ],
            70477: [
                ,
                9
            ],
            70502: [
                ,
                230
            ],
            70503: [
                ,
                230
            ],
            70504: [
                ,
                230
            ],
            70505: [
                ,
                230
            ],
            70506: [
                ,
                230
            ],
            70507: [
                ,
                230
            ],
            70508: [
                ,
                230
            ],
            70512: [
                ,
                230
            ],
            70513: [
                ,
                230
            ],
            70514: [
                ,
                230
            ],
            70515: [
                ,
                230
            ],
            70516: [
                ,
                230
            ]
        },
        5120: {
            70841: [
                ,
                ,
                {
                    70832: 70844,
                    70842: 70843,
                    70845: 70846
                }
            ],
            70843: [
                [
                    70841,
                    70842
                ]
            ],
            70844: [
                [
                    70841,
                    70832
                ]
            ],
            70846: [
                [
                    70841,
                    70845
                ]
            ],
            70850: [
                ,
                9
            ],
            70851: [
                ,
                7
            ]
        },
        5376: {
            71096: [
                ,
                ,
                {
                    71087: 71098
                }
            ],
            71097: [
                ,
                ,
                {
                    71087: 71099
                }
            ],
            71098: [
                [
                    71096,
                    71087
                ]
            ],
            71099: [
                [
                    71097,
                    71087
                ]
            ],
            71103: [
                ,
                9
            ],
            71104: [
                ,
                7
            ]
        },
        5632: {
            71231: [
                ,
                9
            ],
            71350: [
                ,
                9
            ],
            71351: [
                ,
                7
            ]
        },
        5888: {
            5908: [
                ,
                9
            ],
            5940: [
                ,
                9
            ],
            6098: [
                ,
                9
            ],
            6109: [
                ,
                230
            ]
        },
        6144: {
            6313: [
                ,
                228
            ]
        },
        6400: {
            6457: [
                ,
                222
            ],
            6458: [
                ,
                230
            ],
            6459: [
                ,
                220
            ]
        },
        6656: {
            6679: [
                ,
                230
            ],
            6680: [
                ,
                220
            ],
            6752: [
                ,
                9
            ],
            6773: [
                ,
                230
            ],
            6774: [
                ,
                230
            ],
            6775: [
                ,
                230
            ],
            6776: [
                ,
                230
            ],
            6777: [
                ,
                230
            ],
            6778: [
                ,
                230
            ],
            6779: [
                ,
                230
            ],
            6780: [
                ,
                230
            ],
            6783: [
                ,
                220
            ],
            6832: [
                ,
                230
            ],
            6833: [
                ,
                230
            ],
            6834: [
                ,
                230
            ],
            6835: [
                ,
                230
            ],
            6836: [
                ,
                230
            ],
            6837: [
                ,
                220
            ],
            6838: [
                ,
                220
            ],
            6839: [
                ,
                220
            ],
            6840: [
                ,
                220
            ],
            6841: [
                ,
                220
            ],
            6842: [
                ,
                220
            ],
            6843: [
                ,
                230
            ],
            6844: [
                ,
                230
            ],
            6845: [
                ,
                220
            ]
        },
        6912: {
            6917: [
                ,
                ,
                {
                    6965: 6918
                }
            ],
            6918: [
                [
                    6917,
                    6965
                ]
            ],
            6919: [
                ,
                ,
                {
                    6965: 6920
                }
            ],
            6920: [
                [
                    6919,
                    6965
                ]
            ],
            6921: [
                ,
                ,
                {
                    6965: 6922
                }
            ],
            6922: [
                [
                    6921,
                    6965
                ]
            ],
            6923: [
                ,
                ,
                {
                    6965: 6924
                }
            ],
            6924: [
                [
                    6923,
                    6965
                ]
            ],
            6925: [
                ,
                ,
                {
                    6965: 6926
                }
            ],
            6926: [
                [
                    6925,
                    6965
                ]
            ],
            6929: [
                ,
                ,
                {
                    6965: 6930
                }
            ],
            6930: [
                [
                    6929,
                    6965
                ]
            ],
            6964: [
                ,
                7
            ],
            6970: [
                ,
                ,
                {
                    6965: 6971
                }
            ],
            6971: [
                [
                    6970,
                    6965
                ]
            ],
            6972: [
                ,
                ,
                {
                    6965: 6973
                }
            ],
            6973: [
                [
                    6972,
                    6965
                ]
            ],
            6974: [
                ,
                ,
                {
                    6965: 6976
                }
            ],
            6975: [
                ,
                ,
                {
                    6965: 6977
                }
            ],
            6976: [
                [
                    6974,
                    6965
                ]
            ],
            6977: [
                [
                    6975,
                    6965
                ]
            ],
            6978: [
                ,
                ,
                {
                    6965: 6979
                }
            ],
            6979: [
                [
                    6978,
                    6965
                ]
            ],
            6980: [
                ,
                9
            ],
            7019: [
                ,
                230
            ],
            7020: [
                ,
                220
            ],
            7021: [
                ,
                230
            ],
            7022: [
                ,
                230
            ],
            7023: [
                ,
                230
            ],
            7024: [
                ,
                230
            ],
            7025: [
                ,
                230
            ],
            7026: [
                ,
                230
            ],
            7027: [
                ,
                230
            ],
            7082: [
                ,
                9
            ],
            7083: [
                ,
                9
            ],
            7142: [
                ,
                7
            ],
            7154: [
                ,
                9
            ],
            7155: [
                ,
                9
            ]
        },
        7168: {
            7223: [
                ,
                7
            ],
            7376: [
                ,
                230
            ],
            7377: [
                ,
                230
            ],
            7378: [
                ,
                230
            ],
            7380: [
                ,
                1
            ],
            7381: [
                ,
                220
            ],
            7382: [
                ,
                220
            ],
            7383: [
                ,
                220
            ],
            7384: [
                ,
                220
            ],
            7385: [
                ,
                220
            ],
            7386: [
                ,
                230
            ],
            7387: [
                ,
                230
            ],
            7388: [
                ,
                220
            ],
            7389: [
                ,
                220
            ],
            7390: [
                ,
                220
            ],
            7391: [
                ,
                220
            ],
            7392: [
                ,
                230
            ],
            7394: [
                ,
                1
            ],
            7395: [
                ,
                1
            ],
            7396: [
                ,
                1
            ],
            7397: [
                ,
                1
            ],
            7398: [
                ,
                1
            ],
            7399: [
                ,
                1
            ],
            7400: [
                ,
                1
            ],
            7405: [
                ,
                220
            ],
            7412: [
                ,
                230
            ],
            7416: [
                ,
                230
            ],
            7417: [
                ,
                230
            ]
        },
        7424: {
            7468: [
                [
                    65
                ],
                256
            ],
            7469: [
                [
                    198
                ],
                256
            ],
            7470: [
                [
                    66
                ],
                256
            ],
            7472: [
                [
                    68
                ],
                256
            ],
            7473: [
                [
                    69
                ],
                256
            ],
            7474: [
                [
                    398
                ],
                256
            ],
            7475: [
                [
                    71
                ],
                256
            ],
            7476: [
                [
                    72
                ],
                256
            ],
            7477: [
                [
                    73
                ],
                256
            ],
            7478: [
                [
                    74
                ],
                256
            ],
            7479: [
                [
                    75
                ],
                256
            ],
            7480: [
                [
                    76
                ],
                256
            ],
            7481: [
                [
                    77
                ],
                256
            ],
            7482: [
                [
                    78
                ],
                256
            ],
            7484: [
                [
                    79
                ],
                256
            ],
            7485: [
                [
                    546
                ],
                256
            ],
            7486: [
                [
                    80
                ],
                256
            ],
            7487: [
                [
                    82
                ],
                256
            ],
            7488: [
                [
                    84
                ],
                256
            ],
            7489: [
                [
                    85
                ],
                256
            ],
            7490: [
                [
                    87
                ],
                256
            ],
            7491: [
                [
                    97
                ],
                256
            ],
            7492: [
                [
                    592
                ],
                256
            ],
            7493: [
                [
                    593
                ],
                256
            ],
            7494: [
                [
                    7426
                ],
                256
            ],
            7495: [
                [
                    98
                ],
                256
            ],
            7496: [
                [
                    100
                ],
                256
            ],
            7497: [
                [
                    101
                ],
                256
            ],
            7498: [
                [
                    601
                ],
                256
            ],
            7499: [
                [
                    603
                ],
                256
            ],
            7500: [
                [
                    604
                ],
                256
            ],
            7501: [
                [
                    103
                ],
                256
            ],
            7503: [
                [
                    107
                ],
                256
            ],
            7504: [
                [
                    109
                ],
                256
            ],
            7505: [
                [
                    331
                ],
                256
            ],
            7506: [
                [
                    111
                ],
                256
            ],
            7507: [
                [
                    596
                ],
                256
            ],
            7508: [
                [
                    7446
                ],
                256
            ],
            7509: [
                [
                    7447
                ],
                256
            ],
            7510: [
                [
                    112
                ],
                256
            ],
            7511: [
                [
                    116
                ],
                256
            ],
            7512: [
                [
                    117
                ],
                256
            ],
            7513: [
                [
                    7453
                ],
                256
            ],
            7514: [
                [
                    623
                ],
                256
            ],
            7515: [
                [
                    118
                ],
                256
            ],
            7516: [
                [
                    7461
                ],
                256
            ],
            7517: [
                [
                    946
                ],
                256
            ],
            7518: [
                [
                    947
                ],
                256
            ],
            7519: [
                [
                    948
                ],
                256
            ],
            7520: [
                [
                    966
                ],
                256
            ],
            7521: [
                [
                    967
                ],
                256
            ],
            7522: [
                [
                    105
                ],
                256
            ],
            7523: [
                [
                    114
                ],
                256
            ],
            7524: [
                [
                    117
                ],
                256
            ],
            7525: [
                [
                    118
                ],
                256
            ],
            7526: [
                [
                    946
                ],
                256
            ],
            7527: [
                [
                    947
                ],
                256
            ],
            7528: [
                [
                    961
                ],
                256
            ],
            7529: [
                [
                    966
                ],
                256
            ],
            7530: [
                [
                    967
                ],
                256
            ],
            7544: [
                [
                    1085
                ],
                256
            ],
            7579: [
                [
                    594
                ],
                256
            ],
            7580: [
                [
                    99
                ],
                256
            ],
            7581: [
                [
                    597
                ],
                256
            ],
            7582: [
                [
                    240
                ],
                256
            ],
            7583: [
                [
                    604
                ],
                256
            ],
            7584: [
                [
                    102
                ],
                256
            ],
            7585: [
                [
                    607
                ],
                256
            ],
            7586: [
                [
                    609
                ],
                256
            ],
            7587: [
                [
                    613
                ],
                256
            ],
            7588: [
                [
                    616
                ],
                256
            ],
            7589: [
                [
                    617
                ],
                256
            ],
            7590: [
                [
                    618
                ],
                256
            ],
            7591: [
                [
                    7547
                ],
                256
            ],
            7592: [
                [
                    669
                ],
                256
            ],
            7593: [
                [
                    621
                ],
                256
            ],
            7594: [
                [
                    7557
                ],
                256
            ],
            7595: [
                [
                    671
                ],
                256
            ],
            7596: [
                [
                    625
                ],
                256
            ],
            7597: [
                [
                    624
                ],
                256
            ],
            7598: [
                [
                    626
                ],
                256
            ],
            7599: [
                [
                    627
                ],
                256
            ],
            7600: [
                [
                    628
                ],
                256
            ],
            7601: [
                [
                    629
                ],
                256
            ],
            7602: [
                [
                    632
                ],
                256
            ],
            7603: [
                [
                    642
                ],
                256
            ],
            7604: [
                [
                    643
                ],
                256
            ],
            7605: [
                [
                    427
                ],
                256
            ],
            7606: [
                [
                    649
                ],
                256
            ],
            7607: [
                [
                    650
                ],
                256
            ],
            7608: [
                [
                    7452
                ],
                256
            ],
            7609: [
                [
                    651
                ],
                256
            ],
            7610: [
                [
                    652
                ],
                256
            ],
            7611: [
                [
                    122
                ],
                256
            ],
            7612: [
                [
                    656
                ],
                256
            ],
            7613: [
                [
                    657
                ],
                256
            ],
            7614: [
                [
                    658
                ],
                256
            ],
            7615: [
                [
                    952
                ],
                256
            ],
            7616: [
                ,
                230
            ],
            7617: [
                ,
                230
            ],
            7618: [
                ,
                220
            ],
            7619: [
                ,
                230
            ],
            7620: [
                ,
                230
            ],
            7621: [
                ,
                230
            ],
            7622: [
                ,
                230
            ],
            7623: [
                ,
                230
            ],
            7624: [
                ,
                230
            ],
            7625: [
                ,
                230
            ],
            7626: [
                ,
                220
            ],
            7627: [
                ,
                230
            ],
            7628: [
                ,
                230
            ],
            7629: [
                ,
                234
            ],
            7630: [
                ,
                214
            ],
            7631: [
                ,
                220
            ],
            7632: [
                ,
                202
            ],
            7633: [
                ,
                230
            ],
            7634: [
                ,
                230
            ],
            7635: [
                ,
                230
            ],
            7636: [
                ,
                230
            ],
            7637: [
                ,
                230
            ],
            7638: [
                ,
                230
            ],
            7639: [
                ,
                230
            ],
            7640: [
                ,
                230
            ],
            7641: [
                ,
                230
            ],
            7642: [
                ,
                230
            ],
            7643: [
                ,
                230
            ],
            7644: [
                ,
                230
            ],
            7645: [
                ,
                230
            ],
            7646: [
                ,
                230
            ],
            7647: [
                ,
                230
            ],
            7648: [
                ,
                230
            ],
            7649: [
                ,
                230
            ],
            7650: [
                ,
                230
            ],
            7651: [
                ,
                230
            ],
            7652: [
                ,
                230
            ],
            7653: [
                ,
                230
            ],
            7654: [
                ,
                230
            ],
            7655: [
                ,
                230
            ],
            7656: [
                ,
                230
            ],
            7657: [
                ,
                230
            ],
            7658: [
                ,
                230
            ],
            7659: [
                ,
                230
            ],
            7660: [
                ,
                230
            ],
            7661: [
                ,
                230
            ],
            7662: [
                ,
                230
            ],
            7663: [
                ,
                230
            ],
            7664: [
                ,
                230
            ],
            7665: [
                ,
                230
            ],
            7666: [
                ,
                230
            ],
            7667: [
                ,
                230
            ],
            7668: [
                ,
                230
            ],
            7669: [
                ,
                230
            ],
            7676: [
                ,
                233
            ],
            7677: [
                ,
                220
            ],
            7678: [
                ,
                230
            ],
            7679: [
                ,
                220
            ]
        },
        7680: {
            7680: [
                [
                    65,
                    805
                ]
            ],
            7681: [
                [
                    97,
                    805
                ]
            ],
            7682: [
                [
                    66,
                    775
                ]
            ],
            7683: [
                [
                    98,
                    775
                ]
            ],
            7684: [
                [
                    66,
                    803
                ]
            ],
            7685: [
                [
                    98,
                    803
                ]
            ],
            7686: [
                [
                    66,
                    817
                ]
            ],
            7687: [
                [
                    98,
                    817
                ]
            ],
            7688: [
                [
                    199,
                    769
                ]
            ],
            7689: [
                [
                    231,
                    769
                ]
            ],
            7690: [
                [
                    68,
                    775
                ]
            ],
            7691: [
                [
                    100,
                    775
                ]
            ],
            7692: [
                [
                    68,
                    803
                ]
            ],
            7693: [
                [
                    100,
                    803
                ]
            ],
            7694: [
                [
                    68,
                    817
                ]
            ],
            7695: [
                [
                    100,
                    817
                ]
            ],
            7696: [
                [
                    68,
                    807
                ]
            ],
            7697: [
                [
                    100,
                    807
                ]
            ],
            7698: [
                [
                    68,
                    813
                ]
            ],
            7699: [
                [
                    100,
                    813
                ]
            ],
            7700: [
                [
                    274,
                    768
                ]
            ],
            7701: [
                [
                    275,
                    768
                ]
            ],
            7702: [
                [
                    274,
                    769
                ]
            ],
            7703: [
                [
                    275,
                    769
                ]
            ],
            7704: [
                [
                    69,
                    813
                ]
            ],
            7705: [
                [
                    101,
                    813
                ]
            ],
            7706: [
                [
                    69,
                    816
                ]
            ],
            7707: [
                [
                    101,
                    816
                ]
            ],
            7708: [
                [
                    552,
                    774
                ]
            ],
            7709: [
                [
                    553,
                    774
                ]
            ],
            7710: [
                [
                    70,
                    775
                ]
            ],
            7711: [
                [
                    102,
                    775
                ]
            ],
            7712: [
                [
                    71,
                    772
                ]
            ],
            7713: [
                [
                    103,
                    772
                ]
            ],
            7714: [
                [
                    72,
                    775
                ]
            ],
            7715: [
                [
                    104,
                    775
                ]
            ],
            7716: [
                [
                    72,
                    803
                ]
            ],
            7717: [
                [
                    104,
                    803
                ]
            ],
            7718: [
                [
                    72,
                    776
                ]
            ],
            7719: [
                [
                    104,
                    776
                ]
            ],
            7720: [
                [
                    72,
                    807
                ]
            ],
            7721: [
                [
                    104,
                    807
                ]
            ],
            7722: [
                [
                    72,
                    814
                ]
            ],
            7723: [
                [
                    104,
                    814
                ]
            ],
            7724: [
                [
                    73,
                    816
                ]
            ],
            7725: [
                [
                    105,
                    816
                ]
            ],
            7726: [
                [
                    207,
                    769
                ]
            ],
            7727: [
                [
                    239,
                    769
                ]
            ],
            7728: [
                [
                    75,
                    769
                ]
            ],
            7729: [
                [
                    107,
                    769
                ]
            ],
            7730: [
                [
                    75,
                    803
                ]
            ],
            7731: [
                [
                    107,
                    803
                ]
            ],
            7732: [
                [
                    75,
                    817
                ]
            ],
            7733: [
                [
                    107,
                    817
                ]
            ],
            7734: [
                [
                    76,
                    803
                ],
                ,
                {
                    772: 7736
                }
            ],
            7735: [
                [
                    108,
                    803
                ],
                ,
                {
                    772: 7737
                }
            ],
            7736: [
                [
                    7734,
                    772
                ]
            ],
            7737: [
                [
                    7735,
                    772
                ]
            ],
            7738: [
                [
                    76,
                    817
                ]
            ],
            7739: [
                [
                    108,
                    817
                ]
            ],
            7740: [
                [
                    76,
                    813
                ]
            ],
            7741: [
                [
                    108,
                    813
                ]
            ],
            7742: [
                [
                    77,
                    769
                ]
            ],
            7743: [
                [
                    109,
                    769
                ]
            ],
            7744: [
                [
                    77,
                    775
                ]
            ],
            7745: [
                [
                    109,
                    775
                ]
            ],
            7746: [
                [
                    77,
                    803
                ]
            ],
            7747: [
                [
                    109,
                    803
                ]
            ],
            7748: [
                [
                    78,
                    775
                ]
            ],
            7749: [
                [
                    110,
                    775
                ]
            ],
            7750: [
                [
                    78,
                    803
                ]
            ],
            7751: [
                [
                    110,
                    803
                ]
            ],
            7752: [
                [
                    78,
                    817
                ]
            ],
            7753: [
                [
                    110,
                    817
                ]
            ],
            7754: [
                [
                    78,
                    813
                ]
            ],
            7755: [
                [
                    110,
                    813
                ]
            ],
            7756: [
                [
                    213,
                    769
                ]
            ],
            7757: [
                [
                    245,
                    769
                ]
            ],
            7758: [
                [
                    213,
                    776
                ]
            ],
            7759: [
                [
                    245,
                    776
                ]
            ],
            7760: [
                [
                    332,
                    768
                ]
            ],
            7761: [
                [
                    333,
                    768
                ]
            ],
            7762: [
                [
                    332,
                    769
                ]
            ],
            7763: [
                [
                    333,
                    769
                ]
            ],
            7764: [
                [
                    80,
                    769
                ]
            ],
            7765: [
                [
                    112,
                    769
                ]
            ],
            7766: [
                [
                    80,
                    775
                ]
            ],
            7767: [
                [
                    112,
                    775
                ]
            ],
            7768: [
                [
                    82,
                    775
                ]
            ],
            7769: [
                [
                    114,
                    775
                ]
            ],
            7770: [
                [
                    82,
                    803
                ],
                ,
                {
                    772: 7772
                }
            ],
            7771: [
                [
                    114,
                    803
                ],
                ,
                {
                    772: 7773
                }
            ],
            7772: [
                [
                    7770,
                    772
                ]
            ],
            7773: [
                [
                    7771,
                    772
                ]
            ],
            7774: [
                [
                    82,
                    817
                ]
            ],
            7775: [
                [
                    114,
                    817
                ]
            ],
            7776: [
                [
                    83,
                    775
                ]
            ],
            7777: [
                [
                    115,
                    775
                ]
            ],
            7778: [
                [
                    83,
                    803
                ],
                ,
                {
                    775: 7784
                }
            ],
            7779: [
                [
                    115,
                    803
                ],
                ,
                {
                    775: 7785
                }
            ],
            7780: [
                [
                    346,
                    775
                ]
            ],
            7781: [
                [
                    347,
                    775
                ]
            ],
            7782: [
                [
                    352,
                    775
                ]
            ],
            7783: [
                [
                    353,
                    775
                ]
            ],
            7784: [
                [
                    7778,
                    775
                ]
            ],
            7785: [
                [
                    7779,
                    775
                ]
            ],
            7786: [
                [
                    84,
                    775
                ]
            ],
            7787: [
                [
                    116,
                    775
                ]
            ],
            7788: [
                [
                    84,
                    803
                ]
            ],
            7789: [
                [
                    116,
                    803
                ]
            ],
            7790: [
                [
                    84,
                    817
                ]
            ],
            7791: [
                [
                    116,
                    817
                ]
            ],
            7792: [
                [
                    84,
                    813
                ]
            ],
            7793: [
                [
                    116,
                    813
                ]
            ],
            7794: [
                [
                    85,
                    804
                ]
            ],
            7795: [
                [
                    117,
                    804
                ]
            ],
            7796: [
                [
                    85,
                    816
                ]
            ],
            7797: [
                [
                    117,
                    816
                ]
            ],
            7798: [
                [
                    85,
                    813
                ]
            ],
            7799: [
                [
                    117,
                    813
                ]
            ],
            7800: [
                [
                    360,
                    769
                ]
            ],
            7801: [
                [
                    361,
                    769
                ]
            ],
            7802: [
                [
                    362,
                    776
                ]
            ],
            7803: [
                [
                    363,
                    776
                ]
            ],
            7804: [
                [
                    86,
                    771
                ]
            ],
            7805: [
                [
                    118,
                    771
                ]
            ],
            7806: [
                [
                    86,
                    803
                ]
            ],
            7807: [
                [
                    118,
                    803
                ]
            ],
            7808: [
                [
                    87,
                    768
                ]
            ],
            7809: [
                [
                    119,
                    768
                ]
            ],
            7810: [
                [
                    87,
                    769
                ]
            ],
            7811: [
                [
                    119,
                    769
                ]
            ],
            7812: [
                [
                    87,
                    776
                ]
            ],
            7813: [
                [
                    119,
                    776
                ]
            ],
            7814: [
                [
                    87,
                    775
                ]
            ],
            7815: [
                [
                    119,
                    775
                ]
            ],
            7816: [
                [
                    87,
                    803
                ]
            ],
            7817: [
                [
                    119,
                    803
                ]
            ],
            7818: [
                [
                    88,
                    775
                ]
            ],
            7819: [
                [
                    120,
                    775
                ]
            ],
            7820: [
                [
                    88,
                    776
                ]
            ],
            7821: [
                [
                    120,
                    776
                ]
            ],
            7822: [
                [
                    89,
                    775
                ]
            ],
            7823: [
                [
                    121,
                    775
                ]
            ],
            7824: [
                [
                    90,
                    770
                ]
            ],
            7825: [
                [
                    122,
                    770
                ]
            ],
            7826: [
                [
                    90,
                    803
                ]
            ],
            7827: [
                [
                    122,
                    803
                ]
            ],
            7828: [
                [
                    90,
                    817
                ]
            ],
            7829: [
                [
                    122,
                    817
                ]
            ],
            7830: [
                [
                    104,
                    817
                ]
            ],
            7831: [
                [
                    116,
                    776
                ]
            ],
            7832: [
                [
                    119,
                    778
                ]
            ],
            7833: [
                [
                    121,
                    778
                ]
            ],
            7834: [
                [
                    97,
                    702
                ],
                256
            ],
            7835: [
                [
                    383,
                    775
                ]
            ],
            7840: [
                [
                    65,
                    803
                ],
                ,
                {
                    770: 7852,
                    774: 7862
                }
            ],
            7841: [
                [
                    97,
                    803
                ],
                ,
                {
                    770: 7853,
                    774: 7863
                }
            ],
            7842: [
                [
                    65,
                    777
                ]
            ],
            7843: [
                [
                    97,
                    777
                ]
            ],
            7844: [
                [
                    194,
                    769
                ]
            ],
            7845: [
                [
                    226,
                    769
                ]
            ],
            7846: [
                [
                    194,
                    768
                ]
            ],
            7847: [
                [
                    226,
                    768
                ]
            ],
            7848: [
                [
                    194,
                    777
                ]
            ],
            7849: [
                [
                    226,
                    777
                ]
            ],
            7850: [
                [
                    194,
                    771
                ]
            ],
            7851: [
                [
                    226,
                    771
                ]
            ],
            7852: [
                [
                    7840,
                    770
                ]
            ],
            7853: [
                [
                    7841,
                    770
                ]
            ],
            7854: [
                [
                    258,
                    769
                ]
            ],
            7855: [
                [
                    259,
                    769
                ]
            ],
            7856: [
                [
                    258,
                    768
                ]
            ],
            7857: [
                [
                    259,
                    768
                ]
            ],
            7858: [
                [
                    258,
                    777
                ]
            ],
            7859: [
                [
                    259,
                    777
                ]
            ],
            7860: [
                [
                    258,
                    771
                ]
            ],
            7861: [
                [
                    259,
                    771
                ]
            ],
            7862: [
                [
                    7840,
                    774
                ]
            ],
            7863: [
                [
                    7841,
                    774
                ]
            ],
            7864: [
                [
                    69,
                    803
                ],
                ,
                {
                    770: 7878
                }
            ],
            7865: [
                [
                    101,
                    803
                ],
                ,
                {
                    770: 7879
                }
            ],
            7866: [
                [
                    69,
                    777
                ]
            ],
            7867: [
                [
                    101,
                    777
                ]
            ],
            7868: [
                [
                    69,
                    771
                ]
            ],
            7869: [
                [
                    101,
                    771
                ]
            ],
            7870: [
                [
                    202,
                    769
                ]
            ],
            7871: [
                [
                    234,
                    769
                ]
            ],
            7872: [
                [
                    202,
                    768
                ]
            ],
            7873: [
                [
                    234,
                    768
                ]
            ],
            7874: [
                [
                    202,
                    777
                ]
            ],
            7875: [
                [
                    234,
                    777
                ]
            ],
            7876: [
                [
                    202,
                    771
                ]
            ],
            7877: [
                [
                    234,
                    771
                ]
            ],
            7878: [
                [
                    7864,
                    770
                ]
            ],
            7879: [
                [
                    7865,
                    770
                ]
            ],
            7880: [
                [
                    73,
                    777
                ]
            ],
            7881: [
                [
                    105,
                    777
                ]
            ],
            7882: [
                [
                    73,
                    803
                ]
            ],
            7883: [
                [
                    105,
                    803
                ]
            ],
            7884: [
                [
                    79,
                    803
                ],
                ,
                {
                    770: 7896
                }
            ],
            7885: [
                [
                    111,
                    803
                ],
                ,
                {
                    770: 7897
                }
            ],
            7886: [
                [
                    79,
                    777
                ]
            ],
            7887: [
                [
                    111,
                    777
                ]
            ],
            7888: [
                [
                    212,
                    769
                ]
            ],
            7889: [
                [
                    244,
                    769
                ]
            ],
            7890: [
                [
                    212,
                    768
                ]
            ],
            7891: [
                [
                    244,
                    768
                ]
            ],
            7892: [
                [
                    212,
                    777
                ]
            ],
            7893: [
                [
                    244,
                    777
                ]
            ],
            7894: [
                [
                    212,
                    771
                ]
            ],
            7895: [
                [
                    244,
                    771
                ]
            ],
            7896: [
                [
                    7884,
                    770
                ]
            ],
            7897: [
                [
                    7885,
                    770
                ]
            ],
            7898: [
                [
                    416,
                    769
                ]
            ],
            7899: [
                [
                    417,
                    769
                ]
            ],
            7900: [
                [
                    416,
                    768
                ]
            ],
            7901: [
                [
                    417,
                    768
                ]
            ],
            7902: [
                [
                    416,
                    777
                ]
            ],
            7903: [
                [
                    417,
                    777
                ]
            ],
            7904: [
                [
                    416,
                    771
                ]
            ],
            7905: [
                [
                    417,
                    771
                ]
            ],
            7906: [
                [
                    416,
                    803
                ]
            ],
            7907: [
                [
                    417,
                    803
                ]
            ],
            7908: [
                [
                    85,
                    803
                ]
            ],
            7909: [
                [
                    117,
                    803
                ]
            ],
            7910: [
                [
                    85,
                    777
                ]
            ],
            7911: [
                [
                    117,
                    777
                ]
            ],
            7912: [
                [
                    431,
                    769
                ]
            ],
            7913: [
                [
                    432,
                    769
                ]
            ],
            7914: [
                [
                    431,
                    768
                ]
            ],
            7915: [
                [
                    432,
                    768
                ]
            ],
            7916: [
                [
                    431,
                    777
                ]
            ],
            7917: [
                [
                    432,
                    777
                ]
            ],
            7918: [
                [
                    431,
                    771
                ]
            ],
            7919: [
                [
                    432,
                    771
                ]
            ],
            7920: [
                [
                    431,
                    803
                ]
            ],
            7921: [
                [
                    432,
                    803
                ]
            ],
            7922: [
                [
                    89,
                    768
                ]
            ],
            7923: [
                [
                    121,
                    768
                ]
            ],
            7924: [
                [
                    89,
                    803
                ]
            ],
            7925: [
                [
                    121,
                    803
                ]
            ],
            7926: [
                [
                    89,
                    777
                ]
            ],
            7927: [
                [
                    121,
                    777
                ]
            ],
            7928: [
                [
                    89,
                    771
                ]
            ],
            7929: [
                [
                    121,
                    771
                ]
            ]
        },
        7936: {
            7936: [
                [
                    945,
                    787
                ],
                ,
                {
                    768: 7938,
                    769: 7940,
                    834: 7942,
                    837: 8064
                }
            ],
            7937: [
                [
                    945,
                    788
                ],
                ,
                {
                    768: 7939,
                    769: 7941,
                    834: 7943,
                    837: 8065
                }
            ],
            7938: [
                [
                    7936,
                    768
                ],
                ,
                {
                    837: 8066
                }
            ],
            7939: [
                [
                    7937,
                    768
                ],
                ,
                {
                    837: 8067
                }
            ],
            7940: [
                [
                    7936,
                    769
                ],
                ,
                {
                    837: 8068
                }
            ],
            7941: [
                [
                    7937,
                    769
                ],
                ,
                {
                    837: 8069
                }
            ],
            7942: [
                [
                    7936,
                    834
                ],
                ,
                {
                    837: 8070
                }
            ],
            7943: [
                [
                    7937,
                    834
                ],
                ,
                {
                    837: 8071
                }
            ],
            7944: [
                [
                    913,
                    787
                ],
                ,
                {
                    768: 7946,
                    769: 7948,
                    834: 7950,
                    837: 8072
                }
            ],
            7945: [
                [
                    913,
                    788
                ],
                ,
                {
                    768: 7947,
                    769: 7949,
                    834: 7951,
                    837: 8073
                }
            ],
            7946: [
                [
                    7944,
                    768
                ],
                ,
                {
                    837: 8074
                }
            ],
            7947: [
                [
                    7945,
                    768
                ],
                ,
                {
                    837: 8075
                }
            ],
            7948: [
                [
                    7944,
                    769
                ],
                ,
                {
                    837: 8076
                }
            ],
            7949: [
                [
                    7945,
                    769
                ],
                ,
                {
                    837: 8077
                }
            ],
            7950: [
                [
                    7944,
                    834
                ],
                ,
                {
                    837: 8078
                }
            ],
            7951: [
                [
                    7945,
                    834
                ],
                ,
                {
                    837: 8079
                }
            ],
            7952: [
                [
                    949,
                    787
                ],
                ,
                {
                    768: 7954,
                    769: 7956
                }
            ],
            7953: [
                [
                    949,
                    788
                ],
                ,
                {
                    768: 7955,
                    769: 7957
                }
            ],
            7954: [
                [
                    7952,
                    768
                ]
            ],
            7955: [
                [
                    7953,
                    768
                ]
            ],
            7956: [
                [
                    7952,
                    769
                ]
            ],
            7957: [
                [
                    7953,
                    769
                ]
            ],
            7960: [
                [
                    917,
                    787
                ],
                ,
                {
                    768: 7962,
                    769: 7964
                }
            ],
            7961: [
                [
                    917,
                    788
                ],
                ,
                {
                    768: 7963,
                    769: 7965
                }
            ],
            7962: [
                [
                    7960,
                    768
                ]
            ],
            7963: [
                [
                    7961,
                    768
                ]
            ],
            7964: [
                [
                    7960,
                    769
                ]
            ],
            7965: [
                [
                    7961,
                    769
                ]
            ],
            7968: [
                [
                    951,
                    787
                ],
                ,
                {
                    768: 7970,
                    769: 7972,
                    834: 7974,
                    837: 8080
                }
            ],
            7969: [
                [
                    951,
                    788
                ],
                ,
                {
                    768: 7971,
                    769: 7973,
                    834: 7975,
                    837: 8081
                }
            ],
            7970: [
                [
                    7968,
                    768
                ],
                ,
                {
                    837: 8082
                }
            ],
            7971: [
                [
                    7969,
                    768
                ],
                ,
                {
                    837: 8083
                }
            ],
            7972: [
                [
                    7968,
                    769
                ],
                ,
                {
                    837: 8084
                }
            ],
            7973: [
                [
                    7969,
                    769
                ],
                ,
                {
                    837: 8085
                }
            ],
            7974: [
                [
                    7968,
                    834
                ],
                ,
                {
                    837: 8086
                }
            ],
            7975: [
                [
                    7969,
                    834
                ],
                ,
                {
                    837: 8087
                }
            ],
            7976: [
                [
                    919,
                    787
                ],
                ,
                {
                    768: 7978,
                    769: 7980,
                    834: 7982,
                    837: 8088
                }
            ],
            7977: [
                [
                    919,
                    788
                ],
                ,
                {
                    768: 7979,
                    769: 7981,
                    834: 7983,
                    837: 8089
                }
            ],
            7978: [
                [
                    7976,
                    768
                ],
                ,
                {
                    837: 8090
                }
            ],
            7979: [
                [
                    7977,
                    768
                ],
                ,
                {
                    837: 8091
                }
            ],
            7980: [
                [
                    7976,
                    769
                ],
                ,
                {
                    837: 8092
                }
            ],
            7981: [
                [
                    7977,
                    769
                ],
                ,
                {
                    837: 8093
                }
            ],
            7982: [
                [
                    7976,
                    834
                ],
                ,
                {
                    837: 8094
                }
            ],
            7983: [
                [
                    7977,
                    834
                ],
                ,
                {
                    837: 8095
                }
            ],
            7984: [
                [
                    953,
                    787
                ],
                ,
                {
                    768: 7986,
                    769: 7988,
                    834: 7990
                }
            ],
            7985: [
                [
                    953,
                    788
                ],
                ,
                {
                    768: 7987,
                    769: 7989,
                    834: 7991
                }
            ],
            7986: [
                [
                    7984,
                    768
                ]
            ],
            7987: [
                [
                    7985,
                    768
                ]
            ],
            7988: [
                [
                    7984,
                    769
                ]
            ],
            7989: [
                [
                    7985,
                    769
                ]
            ],
            7990: [
                [
                    7984,
                    834
                ]
            ],
            7991: [
                [
                    7985,
                    834
                ]
            ],
            7992: [
                [
                    921,
                    787
                ],
                ,
                {
                    768: 7994,
                    769: 7996,
                    834: 7998
                }
            ],
            7993: [
                [
                    921,
                    788
                ],
                ,
                {
                    768: 7995,
                    769: 7997,
                    834: 7999
                }
            ],
            7994: [
                [
                    7992,
                    768
                ]
            ],
            7995: [
                [
                    7993,
                    768
                ]
            ],
            7996: [
                [
                    7992,
                    769
                ]
            ],
            7997: [
                [
                    7993,
                    769
                ]
            ],
            7998: [
                [
                    7992,
                    834
                ]
            ],
            7999: [
                [
                    7993,
                    834
                ]
            ],
            8000: [
                [
                    959,
                    787
                ],
                ,
                {
                    768: 8002,
                    769: 8004
                }
            ],
            8001: [
                [
                    959,
                    788
                ],
                ,
                {
                    768: 8003,
                    769: 8005
                }
            ],
            8002: [
                [
                    8000,
                    768
                ]
            ],
            8003: [
                [
                    8001,
                    768
                ]
            ],
            8004: [
                [
                    8000,
                    769
                ]
            ],
            8005: [
                [
                    8001,
                    769
                ]
            ],
            8008: [
                [
                    927,
                    787
                ],
                ,
                {
                    768: 8010,
                    769: 8012
                }
            ],
            8009: [
                [
                    927,
                    788
                ],
                ,
                {
                    768: 8011,
                    769: 8013
                }
            ],
            8010: [
                [
                    8008,
                    768
                ]
            ],
            8011: [
                [
                    8009,
                    768
                ]
            ],
            8012: [
                [
                    8008,
                    769
                ]
            ],
            8013: [
                [
                    8009,
                    769
                ]
            ],
            8016: [
                [
                    965,
                    787
                ],
                ,
                {
                    768: 8018,
                    769: 8020,
                    834: 8022
                }
            ],
            8017: [
                [
                    965,
                    788
                ],
                ,
                {
                    768: 8019,
                    769: 8021,
                    834: 8023
                }
            ],
            8018: [
                [
                    8016,
                    768
                ]
            ],
            8019: [
                [
                    8017,
                    768
                ]
            ],
            8020: [
                [
                    8016,
                    769
                ]
            ],
            8021: [
                [
                    8017,
                    769
                ]
            ],
            8022: [
                [
                    8016,
                    834
                ]
            ],
            8023: [
                [
                    8017,
                    834
                ]
            ],
            8025: [
                [
                    933,
                    788
                ],
                ,
                {
                    768: 8027,
                    769: 8029,
                    834: 8031
                }
            ],
            8027: [
                [
                    8025,
                    768
                ]
            ],
            8029: [
                [
                    8025,
                    769
                ]
            ],
            8031: [
                [
                    8025,
                    834
                ]
            ],
            8032: [
                [
                    969,
                    787
                ],
                ,
                {
                    768: 8034,
                    769: 8036,
                    834: 8038,
                    837: 8096
                }
            ],
            8033: [
                [
                    969,
                    788
                ],
                ,
                {
                    768: 8035,
                    769: 8037,
                    834: 8039,
                    837: 8097
                }
            ],
            8034: [
                [
                    8032,
                    768
                ],
                ,
                {
                    837: 8098
                }
            ],
            8035: [
                [
                    8033,
                    768
                ],
                ,
                {
                    837: 8099
                }
            ],
            8036: [
                [
                    8032,
                    769
                ],
                ,
                {
                    837: 8100
                }
            ],
            8037: [
                [
                    8033,
                    769
                ],
                ,
                {
                    837: 8101
                }
            ],
            8038: [
                [
                    8032,
                    834
                ],
                ,
                {
                    837: 8102
                }
            ],
            8039: [
                [
                    8033,
                    834
                ],
                ,
                {
                    837: 8103
                }
            ],
            8040: [
                [
                    937,
                    787
                ],
                ,
                {
                    768: 8042,
                    769: 8044,
                    834: 8046,
                    837: 8104
                }
            ],
            8041: [
                [
                    937,
                    788
                ],
                ,
                {
                    768: 8043,
                    769: 8045,
                    834: 8047,
                    837: 8105
                }
            ],
            8042: [
                [
                    8040,
                    768
                ],
                ,
                {
                    837: 8106
                }
            ],
            8043: [
                [
                    8041,
                    768
                ],
                ,
                {
                    837: 8107
                }
            ],
            8044: [
                [
                    8040,
                    769
                ],
                ,
                {
                    837: 8108
                }
            ],
            8045: [
                [
                    8041,
                    769
                ],
                ,
                {
                    837: 8109
                }
            ],
            8046: [
                [
                    8040,
                    834
                ],
                ,
                {
                    837: 8110
                }
            ],
            8047: [
                [
                    8041,
                    834
                ],
                ,
                {
                    837: 8111
                }
            ],
            8048: [
                [
                    945,
                    768
                ],
                ,
                {
                    837: 8114
                }
            ],
            8049: [
                [
                    940
                ]
            ],
            8050: [
                [
                    949,
                    768
                ]
            ],
            8051: [
                [
                    941
                ]
            ],
            8052: [
                [
                    951,
                    768
                ],
                ,
                {
                    837: 8130
                }
            ],
            8053: [
                [
                    942
                ]
            ],
            8054: [
                [
                    953,
                    768
                ]
            ],
            8055: [
                [
                    943
                ]
            ],
            8056: [
                [
                    959,
                    768
                ]
            ],
            8057: [
                [
                    972
                ]
            ],
            8058: [
                [
                    965,
                    768
                ]
            ],
            8059: [
                [
                    973
                ]
            ],
            8060: [
                [
                    969,
                    768
                ],
                ,
                {
                    837: 8178
                }
            ],
            8061: [
                [
                    974
                ]
            ],
            8064: [
                [
                    7936,
                    837
                ]
            ],
            8065: [
                [
                    7937,
                    837
                ]
            ],
            8066: [
                [
                    7938,
                    837
                ]
            ],
            8067: [
                [
                    7939,
                    837
                ]
            ],
            8068: [
                [
                    7940,
                    837
                ]
            ],
            8069: [
                [
                    7941,
                    837
                ]
            ],
            8070: [
                [
                    7942,
                    837
                ]
            ],
            8071: [
                [
                    7943,
                    837
                ]
            ],
            8072: [
                [
                    7944,
                    837
                ]
            ],
            8073: [
                [
                    7945,
                    837
                ]
            ],
            8074: [
                [
                    7946,
                    837
                ]
            ],
            8075: [
                [
                    7947,
                    837
                ]
            ],
            8076: [
                [
                    7948,
                    837
                ]
            ],
            8077: [
                [
                    7949,
                    837
                ]
            ],
            8078: [
                [
                    7950,
                    837
                ]
            ],
            8079: [
                [
                    7951,
                    837
                ]
            ],
            8080: [
                [
                    7968,
                    837
                ]
            ],
            8081: [
                [
                    7969,
                    837
                ]
            ],
            8082: [
                [
                    7970,
                    837
                ]
            ],
            8083: [
                [
                    7971,
                    837
                ]
            ],
            8084: [
                [
                    7972,
                    837
                ]
            ],
            8085: [
                [
                    7973,
                    837
                ]
            ],
            8086: [
                [
                    7974,
                    837
                ]
            ],
            8087: [
                [
                    7975,
                    837
                ]
            ],
            8088: [
                [
                    7976,
                    837
                ]
            ],
            8089: [
                [
                    7977,
                    837
                ]
            ],
            8090: [
                [
                    7978,
                    837
                ]
            ],
            8091: [
                [
                    7979,
                    837
                ]
            ],
            8092: [
                [
                    7980,
                    837
                ]
            ],
            8093: [
                [
                    7981,
                    837
                ]
            ],
            8094: [
                [
                    7982,
                    837
                ]
            ],
            8095: [
                [
                    7983,
                    837
                ]
            ],
            8096: [
                [
                    8032,
                    837
                ]
            ],
            8097: [
                [
                    8033,
                    837
                ]
            ],
            8098: [
                [
                    8034,
                    837
                ]
            ],
            8099: [
                [
                    8035,
                    837
                ]
            ],
            8100: [
                [
                    8036,
                    837
                ]
            ],
            8101: [
                [
                    8037,
                    837
                ]
            ],
            8102: [
                [
                    8038,
                    837
                ]
            ],
            8103: [
                [
                    8039,
                    837
                ]
            ],
            8104: [
                [
                    8040,
                    837
                ]
            ],
            8105: [
                [
                    8041,
                    837
                ]
            ],
            8106: [
                [
                    8042,
                    837
                ]
            ],
            8107: [
                [
                    8043,
                    837
                ]
            ],
            8108: [
                [
                    8044,
                    837
                ]
            ],
            8109: [
                [
                    8045,
                    837
                ]
            ],
            8110: [
                [
                    8046,
                    837
                ]
            ],
            8111: [
                [
                    8047,
                    837
                ]
            ],
            8112: [
                [
                    945,
                    774
                ]
            ],
            8113: [
                [
                    945,
                    772
                ]
            ],
            8114: [
                [
                    8048,
                    837
                ]
            ],
            8115: [
                [
                    945,
                    837
                ]
            ],
            8116: [
                [
                    940,
                    837
                ]
            ],
            8118: [
                [
                    945,
                    834
                ],
                ,
                {
                    837: 8119
                }
            ],
            8119: [
                [
                    8118,
                    837
                ]
            ],
            8120: [
                [
                    913,
                    774
                ]
            ],
            8121: [
                [
                    913,
                    772
                ]
            ],
            8122: [
                [
                    913,
                    768
                ]
            ],
            8123: [
                [
                    902
                ]
            ],
            8124: [
                [
                    913,
                    837
                ]
            ],
            8125: [
                [
                    32,
                    787
                ],
                256
            ],
            8126: [
                [
                    953
                ]
            ],
            8127: [
                [
                    32,
                    787
                ],
                256,
                {
                    768: 8141,
                    769: 8142,
                    834: 8143
                }
            ],
            8128: [
                [
                    32,
                    834
                ],
                256
            ],
            8129: [
                [
                    168,
                    834
                ]
            ],
            8130: [
                [
                    8052,
                    837
                ]
            ],
            8131: [
                [
                    951,
                    837
                ]
            ],
            8132: [
                [
                    942,
                    837
                ]
            ],
            8134: [
                [
                    951,
                    834
                ],
                ,
                {
                    837: 8135
                }
            ],
            8135: [
                [
                    8134,
                    837
                ]
            ],
            8136: [
                [
                    917,
                    768
                ]
            ],
            8137: [
                [
                    904
                ]
            ],
            8138: [
                [
                    919,
                    768
                ]
            ],
            8139: [
                [
                    905
                ]
            ],
            8140: [
                [
                    919,
                    837
                ]
            ],
            8141: [
                [
                    8127,
                    768
                ]
            ],
            8142: [
                [
                    8127,
                    769
                ]
            ],
            8143: [
                [
                    8127,
                    834
                ]
            ],
            8144: [
                [
                    953,
                    774
                ]
            ],
            8145: [
                [
                    953,
                    772
                ]
            ],
            8146: [
                [
                    970,
                    768
                ]
            ],
            8147: [
                [
                    912
                ]
            ],
            8150: [
                [
                    953,
                    834
                ]
            ],
            8151: [
                [
                    970,
                    834
                ]
            ],
            8152: [
                [
                    921,
                    774
                ]
            ],
            8153: [
                [
                    921,
                    772
                ]
            ],
            8154: [
                [
                    921,
                    768
                ]
            ],
            8155: [
                [
                    906
                ]
            ],
            8157: [
                [
                    8190,
                    768
                ]
            ],
            8158: [
                [
                    8190,
                    769
                ]
            ],
            8159: [
                [
                    8190,
                    834
                ]
            ],
            8160: [
                [
                    965,
                    774
                ]
            ],
            8161: [
                [
                    965,
                    772
                ]
            ],
            8162: [
                [
                    971,
                    768
                ]
            ],
            8163: [
                [
                    944
                ]
            ],
            8164: [
                [
                    961,
                    787
                ]
            ],
            8165: [
                [
                    961,
                    788
                ]
            ],
            8166: [
                [
                    965,
                    834
                ]
            ],
            8167: [
                [
                    971,
                    834
                ]
            ],
            8168: [
                [
                    933,
                    774
                ]
            ],
            8169: [
                [
                    933,
                    772
                ]
            ],
            8170: [
                [
                    933,
                    768
                ]
            ],
            8171: [
                [
                    910
                ]
            ],
            8172: [
                [
                    929,
                    788
                ]
            ],
            8173: [
                [
                    168,
                    768
                ]
            ],
            8174: [
                [
                    901
                ]
            ],
            8175: [
                [
                    96
                ]
            ],
            8178: [
                [
                    8060,
                    837
                ]
            ],
            8179: [
                [
                    969,
                    837
                ]
            ],
            8180: [
                [
                    974,
                    837
                ]
            ],
            8182: [
                [
                    969,
                    834
                ],
                ,
                {
                    837: 8183
                }
            ],
            8183: [
                [
                    8182,
                    837
                ]
            ],
            8184: [
                [
                    927,
                    768
                ]
            ],
            8185: [
                [
                    908
                ]
            ],
            8186: [
                [
                    937,
                    768
                ]
            ],
            8187: [
                [
                    911
                ]
            ],
            8188: [
                [
                    937,
                    837
                ]
            ],
            8189: [
                [
                    180
                ]
            ],
            8190: [
                [
                    32,
                    788
                ],
                256,
                {
                    768: 8157,
                    769: 8158,
                    834: 8159
                }
            ]
        },
        8192: {
            8192: [
                [
                    8194
                ]
            ],
            8193: [
                [
                    8195
                ]
            ],
            8194: [
                [
                    32
                ],
                256
            ],
            8195: [
                [
                    32
                ],
                256
            ],
            8196: [
                [
                    32
                ],
                256
            ],
            8197: [
                [
                    32
                ],
                256
            ],
            8198: [
                [
                    32
                ],
                256
            ],
            8199: [
                [
                    32
                ],
                256
            ],
            8200: [
                [
                    32
                ],
                256
            ],
            8201: [
                [
                    32
                ],
                256
            ],
            8202: [
                [
                    32
                ],
                256
            ],
            8209: [
                [
                    8208
                ],
                256
            ],
            8215: [
                [
                    32,
                    819
                ],
                256
            ],
            8228: [
                [
                    46
                ],
                256
            ],
            8229: [
                [
                    46,
                    46
                ],
                256
            ],
            8230: [
                [
                    46,
                    46,
                    46
                ],
                256
            ],
            8239: [
                [
                    32
                ],
                256
            ],
            8243: [
                [
                    8242,
                    8242
                ],
                256
            ],
            8244: [
                [
                    8242,
                    8242,
                    8242
                ],
                256
            ],
            8246: [
                [
                    8245,
                    8245
                ],
                256
            ],
            8247: [
                [
                    8245,
                    8245,
                    8245
                ],
                256
            ],
            8252: [
                [
                    33,
                    33
                ],
                256
            ],
            8254: [
                [
                    32,
                    773
                ],
                256
            ],
            8263: [
                [
                    63,
                    63
                ],
                256
            ],
            8264: [
                [
                    63,
                    33
                ],
                256
            ],
            8265: [
                [
                    33,
                    63
                ],
                256
            ],
            8279: [
                [
                    8242,
                    8242,
                    8242,
                    8242
                ],
                256
            ],
            8287: [
                [
                    32
                ],
                256
            ],
            8304: [
                [
                    48
                ],
                256
            ],
            8305: [
                [
                    105
                ],
                256
            ],
            8308: [
                [
                    52
                ],
                256
            ],
            8309: [
                [
                    53
                ],
                256
            ],
            8310: [
                [
                    54
                ],
                256
            ],
            8311: [
                [
                    55
                ],
                256
            ],
            8312: [
                [
                    56
                ],
                256
            ],
            8313: [
                [
                    57
                ],
                256
            ],
            8314: [
                [
                    43
                ],
                256
            ],
            8315: [
                [
                    8722
                ],
                256
            ],
            8316: [
                [
                    61
                ],
                256
            ],
            8317: [
                [
                    40
                ],
                256
            ],
            8318: [
                [
                    41
                ],
                256
            ],
            8319: [
                [
                    110
                ],
                256
            ],
            8320: [
                [
                    48
                ],
                256
            ],
            8321: [
                [
                    49
                ],
                256
            ],
            8322: [
                [
                    50
                ],
                256
            ],
            8323: [
                [
                    51
                ],
                256
            ],
            8324: [
                [
                    52
                ],
                256
            ],
            8325: [
                [
                    53
                ],
                256
            ],
            8326: [
                [
                    54
                ],
                256
            ],
            8327: [
                [
                    55
                ],
                256
            ],
            8328: [
                [
                    56
                ],
                256
            ],
            8329: [
                [
                    57
                ],
                256
            ],
            8330: [
                [
                    43
                ],
                256
            ],
            8331: [
                [
                    8722
                ],
                256
            ],
            8332: [
                [
                    61
                ],
                256
            ],
            8333: [
                [
                    40
                ],
                256
            ],
            8334: [
                [
                    41
                ],
                256
            ],
            8336: [
                [
                    97
                ],
                256
            ],
            8337: [
                [
                    101
                ],
                256
            ],
            8338: [
                [
                    111
                ],
                256
            ],
            8339: [
                [
                    120
                ],
                256
            ],
            8340: [
                [
                    601
                ],
                256
            ],
            8341: [
                [
                    104
                ],
                256
            ],
            8342: [
                [
                    107
                ],
                256
            ],
            8343: [
                [
                    108
                ],
                256
            ],
            8344: [
                [
                    109
                ],
                256
            ],
            8345: [
                [
                    110
                ],
                256
            ],
            8346: [
                [
                    112
                ],
                256
            ],
            8347: [
                [
                    115
                ],
                256
            ],
            8348: [
                [
                    116
                ],
                256
            ],
            8360: [
                [
                    82,
                    115
                ],
                256
            ],
            8400: [
                ,
                230
            ],
            8401: [
                ,
                230
            ],
            8402: [
                ,
                1
            ],
            8403: [
                ,
                1
            ],
            8404: [
                ,
                230
            ],
            8405: [
                ,
                230
            ],
            8406: [
                ,
                230
            ],
            8407: [
                ,
                230
            ],
            8408: [
                ,
                1
            ],
            8409: [
                ,
                1
            ],
            8410: [
                ,
                1
            ],
            8411: [
                ,
                230
            ],
            8412: [
                ,
                230
            ],
            8417: [
                ,
                230
            ],
            8421: [
                ,
                1
            ],
            8422: [
                ,
                1
            ],
            8423: [
                ,
                230
            ],
            8424: [
                ,
                220
            ],
            8425: [
                ,
                230
            ],
            8426: [
                ,
                1
            ],
            8427: [
                ,
                1
            ],
            8428: [
                ,
                220
            ],
            8429: [
                ,
                220
            ],
            8430: [
                ,
                220
            ],
            8431: [
                ,
                220
            ],
            8432: [
                ,
                230
            ]
        },
        8448: {
            8448: [
                [
                    97,
                    47,
                    99
                ],
                256
            ],
            8449: [
                [
                    97,
                    47,
                    115
                ],
                256
            ],
            8450: [
                [
                    67
                ],
                256
            ],
            8451: [
                [
                    176,
                    67
                ],
                256
            ],
            8453: [
                [
                    99,
                    47,
                    111
                ],
                256
            ],
            8454: [
                [
                    99,
                    47,
                    117
                ],
                256
            ],
            8455: [
                [
                    400
                ],
                256
            ],
            8457: [
                [
                    176,
                    70
                ],
                256
            ],
            8458: [
                [
                    103
                ],
                256
            ],
            8459: [
                [
                    72
                ],
                256
            ],
            8460: [
                [
                    72
                ],
                256
            ],
            8461: [
                [
                    72
                ],
                256
            ],
            8462: [
                [
                    104
                ],
                256
            ],
            8463: [
                [
                    295
                ],
                256
            ],
            8464: [
                [
                    73
                ],
                256
            ],
            8465: [
                [
                    73
                ],
                256
            ],
            8466: [
                [
                    76
                ],
                256
            ],
            8467: [
                [
                    108
                ],
                256
            ],
            8469: [
                [
                    78
                ],
                256
            ],
            8470: [
                [
                    78,
                    111
                ],
                256
            ],
            8473: [
                [
                    80
                ],
                256
            ],
            8474: [
                [
                    81
                ],
                256
            ],
            8475: [
                [
                    82
                ],
                256
            ],
            8476: [
                [
                    82
                ],
                256
            ],
            8477: [
                [
                    82
                ],
                256
            ],
            8480: [
                [
                    83,
                    77
                ],
                256
            ],
            8481: [
                [
                    84,
                    69,
                    76
                ],
                256
            ],
            8482: [
                [
                    84,
                    77
                ],
                256
            ],
            8484: [
                [
                    90
                ],
                256
            ],
            8486: [
                [
                    937
                ]
            ],
            8488: [
                [
                    90
                ],
                256
            ],
            8490: [
                [
                    75
                ]
            ],
            8491: [
                [
                    197
                ]
            ],
            8492: [
                [
                    66
                ],
                256
            ],
            8493: [
                [
                    67
                ],
                256
            ],
            8495: [
                [
                    101
                ],
                256
            ],
            8496: [
                [
                    69
                ],
                256
            ],
            8497: [
                [
                    70
                ],
                256
            ],
            8499: [
                [
                    77
                ],
                256
            ],
            8500: [
                [
                    111
                ],
                256
            ],
            8501: [
                [
                    1488
                ],
                256
            ],
            8502: [
                [
                    1489
                ],
                256
            ],
            8503: [
                [
                    1490
                ],
                256
            ],
            8504: [
                [
                    1491
                ],
                256
            ],
            8505: [
                [
                    105
                ],
                256
            ],
            8507: [
                [
                    70,
                    65,
                    88
                ],
                256
            ],
            8508: [
                [
                    960
                ],
                256
            ],
            8509: [
                [
                    947
                ],
                256
            ],
            8510: [
                [
                    915
                ],
                256
            ],
            8511: [
                [
                    928
                ],
                256
            ],
            8512: [
                [
                    8721
                ],
                256
            ],
            8517: [
                [
                    68
                ],
                256
            ],
            8518: [
                [
                    100
                ],
                256
            ],
            8519: [
                [
                    101
                ],
                256
            ],
            8520: [
                [
                    105
                ],
                256
            ],
            8521: [
                [
                    106
                ],
                256
            ],
            8528: [
                [
                    49,
                    8260,
                    55
                ],
                256
            ],
            8529: [
                [
                    49,
                    8260,
                    57
                ],
                256
            ],
            8530: [
                [
                    49,
                    8260,
                    49,
                    48
                ],
                256
            ],
            8531: [
                [
                    49,
                    8260,
                    51
                ],
                256
            ],
            8532: [
                [
                    50,
                    8260,
                    51
                ],
                256
            ],
            8533: [
                [
                    49,
                    8260,
                    53
                ],
                256
            ],
            8534: [
                [
                    50,
                    8260,
                    53
                ],
                256
            ],
            8535: [
                [
                    51,
                    8260,
                    53
                ],
                256
            ],
            8536: [
                [
                    52,
                    8260,
                    53
                ],
                256
            ],
            8537: [
                [
                    49,
                    8260,
                    54
                ],
                256
            ],
            8538: [
                [
                    53,
                    8260,
                    54
                ],
                256
            ],
            8539: [
                [
                    49,
                    8260,
                    56
                ],
                256
            ],
            8540: [
                [
                    51,
                    8260,
                    56
                ],
                256
            ],
            8541: [
                [
                    53,
                    8260,
                    56
                ],
                256
            ],
            8542: [
                [
                    55,
                    8260,
                    56
                ],
                256
            ],
            8543: [
                [
                    49,
                    8260
                ],
                256
            ],
            8544: [
                [
                    73
                ],
                256
            ],
            8545: [
                [
                    73,
                    73
                ],
                256
            ],
            8546: [
                [
                    73,
                    73,
                    73
                ],
                256
            ],
            8547: [
                [
                    73,
                    86
                ],
                256
            ],
            8548: [
                [
                    86
                ],
                256
            ],
            8549: [
                [
                    86,
                    73
                ],
                256
            ],
            8550: [
                [
                    86,
                    73,
                    73
                ],
                256
            ],
            8551: [
                [
                    86,
                    73,
                    73,
                    73
                ],
                256
            ],
            8552: [
                [
                    73,
                    88
                ],
                256
            ],
            8553: [
                [
                    88
                ],
                256
            ],
            8554: [
                [
                    88,
                    73
                ],
                256
            ],
            8555: [
                [
                    88,
                    73,
                    73
                ],
                256
            ],
            8556: [
                [
                    76
                ],
                256
            ],
            8557: [
                [
                    67
                ],
                256
            ],
            8558: [
                [
                    68
                ],
                256
            ],
            8559: [
                [
                    77
                ],
                256
            ],
            8560: [
                [
                    105
                ],
                256
            ],
            8561: [
                [
                    105,
                    105
                ],
                256
            ],
            8562: [
                [
                    105,
                    105,
                    105
                ],
                256
            ],
            8563: [
                [
                    105,
                    118
                ],
                256
            ],
            8564: [
                [
                    118
                ],
                256
            ],
            8565: [
                [
                    118,
                    105
                ],
                256
            ],
            8566: [
                [
                    118,
                    105,
                    105
                ],
                256
            ],
            8567: [
                [
                    118,
                    105,
                    105,
                    105
                ],
                256
            ],
            8568: [
                [
                    105,
                    120
                ],
                256
            ],
            8569: [
                [
                    120
                ],
                256
            ],
            8570: [
                [
                    120,
                    105
                ],
                256
            ],
            8571: [
                [
                    120,
                    105,
                    105
                ],
                256
            ],
            8572: [
                [
                    108
                ],
                256
            ],
            8573: [
                [
                    99
                ],
                256
            ],
            8574: [
                [
                    100
                ],
                256
            ],
            8575: [
                [
                    109
                ],
                256
            ],
            8585: [
                [
                    48,
                    8260,
                    51
                ],
                256
            ],
            8592: [
                ,
                ,
                {
                    824: 8602
                }
            ],
            8594: [
                ,
                ,
                {
                    824: 8603
                }
            ],
            8596: [
                ,
                ,
                {
                    824: 8622
                }
            ],
            8602: [
                [
                    8592,
                    824
                ]
            ],
            8603: [
                [
                    8594,
                    824
                ]
            ],
            8622: [
                [
                    8596,
                    824
                ]
            ],
            8653: [
                [
                    8656,
                    824
                ]
            ],
            8654: [
                [
                    8660,
                    824
                ]
            ],
            8655: [
                [
                    8658,
                    824
                ]
            ],
            8656: [
                ,
                ,
                {
                    824: 8653
                }
            ],
            8658: [
                ,
                ,
                {
                    824: 8655
                }
            ],
            8660: [
                ,
                ,
                {
                    824: 8654
                }
            ]
        },
        8704: {
            8707: [
                ,
                ,
                {
                    824: 8708
                }
            ],
            8708: [
                [
                    8707,
                    824
                ]
            ],
            8712: [
                ,
                ,
                {
                    824: 8713
                }
            ],
            8713: [
                [
                    8712,
                    824
                ]
            ],
            8715: [
                ,
                ,
                {
                    824: 8716
                }
            ],
            8716: [
                [
                    8715,
                    824
                ]
            ],
            8739: [
                ,
                ,
                {
                    824: 8740
                }
            ],
            8740: [
                [
                    8739,
                    824
                ]
            ],
            8741: [
                ,
                ,
                {
                    824: 8742
                }
            ],
            8742: [
                [
                    8741,
                    824
                ]
            ],
            8748: [
                [
                    8747,
                    8747
                ],
                256
            ],
            8749: [
                [
                    8747,
                    8747,
                    8747
                ],
                256
            ],
            8751: [
                [
                    8750,
                    8750
                ],
                256
            ],
            8752: [
                [
                    8750,
                    8750,
                    8750
                ],
                256
            ],
            8764: [
                ,
                ,
                {
                    824: 8769
                }
            ],
            8769: [
                [
                    8764,
                    824
                ]
            ],
            8771: [
                ,
                ,
                {
                    824: 8772
                }
            ],
            8772: [
                [
                    8771,
                    824
                ]
            ],
            8773: [
                ,
                ,
                {
                    824: 8775
                }
            ],
            8775: [
                [
                    8773,
                    824
                ]
            ],
            8776: [
                ,
                ,
                {
                    824: 8777
                }
            ],
            8777: [
                [
                    8776,
                    824
                ]
            ],
            8781: [
                ,
                ,
                {
                    824: 8813
                }
            ],
            8800: [
                [
                    61,
                    824
                ]
            ],
            8801: [
                ,
                ,
                {
                    824: 8802
                }
            ],
            8802: [
                [
                    8801,
                    824
                ]
            ],
            8804: [
                ,
                ,
                {
                    824: 8816
                }
            ],
            8805: [
                ,
                ,
                {
                    824: 8817
                }
            ],
            8813: [
                [
                    8781,
                    824
                ]
            ],
            8814: [
                [
                    60,
                    824
                ]
            ],
            8815: [
                [
                    62,
                    824
                ]
            ],
            8816: [
                [
                    8804,
                    824
                ]
            ],
            8817: [
                [
                    8805,
                    824
                ]
            ],
            8818: [
                ,
                ,
                {
                    824: 8820
                }
            ],
            8819: [
                ,
                ,
                {
                    824: 8821
                }
            ],
            8820: [
                [
                    8818,
                    824
                ]
            ],
            8821: [
                [
                    8819,
                    824
                ]
            ],
            8822: [
                ,
                ,
                {
                    824: 8824
                }
            ],
            8823: [
                ,
                ,
                {
                    824: 8825
                }
            ],
            8824: [
                [
                    8822,
                    824
                ]
            ],
            8825: [
                [
                    8823,
                    824
                ]
            ],
            8826: [
                ,
                ,
                {
                    824: 8832
                }
            ],
            8827: [
                ,
                ,
                {
                    824: 8833
                }
            ],
            8828: [
                ,
                ,
                {
                    824: 8928
                }
            ],
            8829: [
                ,
                ,
                {
                    824: 8929
                }
            ],
            8832: [
                [
                    8826,
                    824
                ]
            ],
            8833: [
                [
                    8827,
                    824
                ]
            ],
            8834: [
                ,
                ,
                {
                    824: 8836
                }
            ],
            8835: [
                ,
                ,
                {
                    824: 8837
                }
            ],
            8836: [
                [
                    8834,
                    824
                ]
            ],
            8837: [
                [
                    8835,
                    824
                ]
            ],
            8838: [
                ,
                ,
                {
                    824: 8840
                }
            ],
            8839: [
                ,
                ,
                {
                    824: 8841
                }
            ],
            8840: [
                [
                    8838,
                    824
                ]
            ],
            8841: [
                [
                    8839,
                    824
                ]
            ],
            8849: [
                ,
                ,
                {
                    824: 8930
                }
            ],
            8850: [
                ,
                ,
                {
                    824: 8931
                }
            ],
            8866: [
                ,
                ,
                {
                    824: 8876
                }
            ],
            8872: [
                ,
                ,
                {
                    824: 8877
                }
            ],
            8873: [
                ,
                ,
                {
                    824: 8878
                }
            ],
            8875: [
                ,
                ,
                {
                    824: 8879
                }
            ],
            8876: [
                [
                    8866,
                    824
                ]
            ],
            8877: [
                [
                    8872,
                    824
                ]
            ],
            8878: [
                [
                    8873,
                    824
                ]
            ],
            8879: [
                [
                    8875,
                    824
                ]
            ],
            8882: [
                ,
                ,
                {
                    824: 8938
                }
            ],
            8883: [
                ,
                ,
                {
                    824: 8939
                }
            ],
            8884: [
                ,
                ,
                {
                    824: 8940
                }
            ],
            8885: [
                ,
                ,
                {
                    824: 8941
                }
            ],
            8928: [
                [
                    8828,
                    824
                ]
            ],
            8929: [
                [
                    8829,
                    824
                ]
            ],
            8930: [
                [
                    8849,
                    824
                ]
            ],
            8931: [
                [
                    8850,
                    824
                ]
            ],
            8938: [
                [
                    8882,
                    824
                ]
            ],
            8939: [
                [
                    8883,
                    824
                ]
            ],
            8940: [
                [
                    8884,
                    824
                ]
            ],
            8941: [
                [
                    8885,
                    824
                ]
            ]
        },
        8960: {
            9001: [
                [
                    12296
                ]
            ],
            9002: [
                [
                    12297
                ]
            ]
        },
        9216: {
            9312: [
                [
                    49
                ],
                256
            ],
            9313: [
                [
                    50
                ],
                256
            ],
            9314: [
                [
                    51
                ],
                256
            ],
            9315: [
                [
                    52
                ],
                256
            ],
            9316: [
                [
                    53
                ],
                256
            ],
            9317: [
                [
                    54
                ],
                256
            ],
            9318: [
                [
                    55
                ],
                256
            ],
            9319: [
                [
                    56
                ],
                256
            ],
            9320: [
                [
                    57
                ],
                256
            ],
            9321: [
                [
                    49,
                    48
                ],
                256
            ],
            9322: [
                [
                    49,
                    49
                ],
                256
            ],
            9323: [
                [
                    49,
                    50
                ],
                256
            ],
            9324: [
                [
                    49,
                    51
                ],
                256
            ],
            9325: [
                [
                    49,
                    52
                ],
                256
            ],
            9326: [
                [
                    49,
                    53
                ],
                256
            ],
            9327: [
                [
                    49,
                    54
                ],
                256
            ],
            9328: [
                [
                    49,
                    55
                ],
                256
            ],
            9329: [
                [
                    49,
                    56
                ],
                256
            ],
            9330: [
                [
                    49,
                    57
                ],
                256
            ],
            9331: [
                [
                    50,
                    48
                ],
                256
            ],
            9332: [
                [
                    40,
                    49,
                    41
                ],
                256
            ],
            9333: [
                [
                    40,
                    50,
                    41
                ],
                256
            ],
            9334: [
                [
                    40,
                    51,
                    41
                ],
                256
            ],
            9335: [
                [
                    40,
                    52,
                    41
                ],
                256
            ],
            9336: [
                [
                    40,
                    53,
                    41
                ],
                256
            ],
            9337: [
                [
                    40,
                    54,
                    41
                ],
                256
            ],
            9338: [
                [
                    40,
                    55,
                    41
                ],
                256
            ],
            9339: [
                [
                    40,
                    56,
                    41
                ],
                256
            ],
            9340: [
                [
                    40,
                    57,
                    41
                ],
                256
            ],
            9341: [
                [
                    40,
                    49,
                    48,
                    41
                ],
                256
            ],
            9342: [
                [
                    40,
                    49,
                    49,
                    41
                ],
                256
            ],
            9343: [
                [
                    40,
                    49,
                    50,
                    41
                ],
                256
            ],
            9344: [
                [
                    40,
                    49,
                    51,
                    41
                ],
                256
            ],
            9345: [
                [
                    40,
                    49,
                    52,
                    41
                ],
                256
            ],
            9346: [
                [
                    40,
                    49,
                    53,
                    41
                ],
                256
            ],
            9347: [
                [
                    40,
                    49,
                    54,
                    41
                ],
                256
            ],
            9348: [
                [
                    40,
                    49,
                    55,
                    41
                ],
                256
            ],
            9349: [
                [
                    40,
                    49,
                    56,
                    41
                ],
                256
            ],
            9350: [
                [
                    40,
                    49,
                    57,
                    41
                ],
                256
            ],
            9351: [
                [
                    40,
                    50,
                    48,
                    41
                ],
                256
            ],
            9352: [
                [
                    49,
                    46
                ],
                256
            ],
            9353: [
                [
                    50,
                    46
                ],
                256
            ],
            9354: [
                [
                    51,
                    46
                ],
                256
            ],
            9355: [
                [
                    52,
                    46
                ],
                256
            ],
            9356: [
                [
                    53,
                    46
                ],
                256
            ],
            9357: [
                [
                    54,
                    46
                ],
                256
            ],
            9358: [
                [
                    55,
                    46
                ],
                256
            ],
            9359: [
                [
                    56,
                    46
                ],
                256
            ],
            9360: [
                [
                    57,
                    46
                ],
                256
            ],
            9361: [
                [
                    49,
                    48,
                    46
                ],
                256
            ],
            9362: [
                [
                    49,
                    49,
                    46
                ],
                256
            ],
            9363: [
                [
                    49,
                    50,
                    46
                ],
                256
            ],
            9364: [
                [
                    49,
                    51,
                    46
                ],
                256
            ],
            9365: [
                [
                    49,
                    52,
                    46
                ],
                256
            ],
            9366: [
                [
                    49,
                    53,
                    46
                ],
                256
            ],
            9367: [
                [
                    49,
                    54,
                    46
                ],
                256
            ],
            9368: [
                [
                    49,
                    55,
                    46
                ],
                256
            ],
            9369: [
                [
                    49,
                    56,
                    46
                ],
                256
            ],
            9370: [
                [
                    49,
                    57,
                    46
                ],
                256
            ],
            9371: [
                [
                    50,
                    48,
                    46
                ],
                256
            ],
            9372: [
                [
                    40,
                    97,
                    41
                ],
                256
            ],
            9373: [
                [
                    40,
                    98,
                    41
                ],
                256
            ],
            9374: [
                [
                    40,
                    99,
                    41
                ],
                256
            ],
            9375: [
                [
                    40,
                    100,
                    41
                ],
                256
            ],
            9376: [
                [
                    40,
                    101,
                    41
                ],
                256
            ],
            9377: [
                [
                    40,
                    102,
                    41
                ],
                256
            ],
            9378: [
                [
                    40,
                    103,
                    41
                ],
                256
            ],
            9379: [
                [
                    40,
                    104,
                    41
                ],
                256
            ],
            9380: [
                [
                    40,
                    105,
                    41
                ],
                256
            ],
            9381: [
                [
                    40,
                    106,
                    41
                ],
                256
            ],
            9382: [
                [
                    40,
                    107,
                    41
                ],
                256
            ],
            9383: [
                [
                    40,
                    108,
                    41
                ],
                256
            ],
            9384: [
                [
                    40,
                    109,
                    41
                ],
                256
            ],
            9385: [
                [
                    40,
                    110,
                    41
                ],
                256
            ],
            9386: [
                [
                    40,
                    111,
                    41
                ],
                256
            ],
            9387: [
                [
                    40,
                    112,
                    41
                ],
                256
            ],
            9388: [
                [
                    40,
                    113,
                    41
                ],
                256
            ],
            9389: [
                [
                    40,
                    114,
                    41
                ],
                256
            ],
            9390: [
                [
                    40,
                    115,
                    41
                ],
                256
            ],
            9391: [
                [
                    40,
                    116,
                    41
                ],
                256
            ],
            9392: [
                [
                    40,
                    117,
                    41
                ],
                256
            ],
            9393: [
                [
                    40,
                    118,
                    41
                ],
                256
            ],
            9394: [
                [
                    40,
                    119,
                    41
                ],
                256
            ],
            9395: [
                [
                    40,
                    120,
                    41
                ],
                256
            ],
            9396: [
                [
                    40,
                    121,
                    41
                ],
                256
            ],
            9397: [
                [
                    40,
                    122,
                    41
                ],
                256
            ],
            9398: [
                [
                    65
                ],
                256
            ],
            9399: [
                [
                    66
                ],
                256
            ],
            9400: [
                [
                    67
                ],
                256
            ],
            9401: [
                [
                    68
                ],
                256
            ],
            9402: [
                [
                    69
                ],
                256
            ],
            9403: [
                [
                    70
                ],
                256
            ],
            9404: [
                [
                    71
                ],
                256
            ],
            9405: [
                [
                    72
                ],
                256
            ],
            9406: [
                [
                    73
                ],
                256
            ],
            9407: [
                [
                    74
                ],
                256
            ],
            9408: [
                [
                    75
                ],
                256
            ],
            9409: [
                [
                    76
                ],
                256
            ],
            9410: [
                [
                    77
                ],
                256
            ],
            9411: [
                [
                    78
                ],
                256
            ],
            9412: [
                [
                    79
                ],
                256
            ],
            9413: [
                [
                    80
                ],
                256
            ],
            9414: [
                [
                    81
                ],
                256
            ],
            9415: [
                [
                    82
                ],
                256
            ],
            9416: [
                [
                    83
                ],
                256
            ],
            9417: [
                [
                    84
                ],
                256
            ],
            9418: [
                [
                    85
                ],
                256
            ],
            9419: [
                [
                    86
                ],
                256
            ],
            9420: [
                [
                    87
                ],
                256
            ],
            9421: [
                [
                    88
                ],
                256
            ],
            9422: [
                [
                    89
                ],
                256
            ],
            9423: [
                [
                    90
                ],
                256
            ],
            9424: [
                [
                    97
                ],
                256
            ],
            9425: [
                [
                    98
                ],
                256
            ],
            9426: [
                [
                    99
                ],
                256
            ],
            9427: [
                [
                    100
                ],
                256
            ],
            9428: [
                [
                    101
                ],
                256
            ],
            9429: [
                [
                    102
                ],
                256
            ],
            9430: [
                [
                    103
                ],
                256
            ],
            9431: [
                [
                    104
                ],
                256
            ],
            9432: [
                [
                    105
                ],
                256
            ],
            9433: [
                [
                    106
                ],
                256
            ],
            9434: [
                [
                    107
                ],
                256
            ],
            9435: [
                [
                    108
                ],
                256
            ],
            9436: [
                [
                    109
                ],
                256
            ],
            9437: [
                [
                    110
                ],
                256
            ],
            9438: [
                [
                    111
                ],
                256
            ],
            9439: [
                [
                    112
                ],
                256
            ],
            9440: [
                [
                    113
                ],
                256
            ],
            9441: [
                [
                    114
                ],
                256
            ],
            9442: [
                [
                    115
                ],
                256
            ],
            9443: [
                [
                    116
                ],
                256
            ],
            9444: [
                [
                    117
                ],
                256
            ],
            9445: [
                [
                    118
                ],
                256
            ],
            9446: [
                [
                    119
                ],
                256
            ],
            9447: [
                [
                    120
                ],
                256
            ],
            9448: [
                [
                    121
                ],
                256
            ],
            9449: [
                [
                    122
                ],
                256
            ],
            9450: [
                [
                    48
                ],
                256
            ]
        },
        10752: {
            10764: [
                [
                    8747,
                    8747,
                    8747,
                    8747
                ],
                256
            ],
            10868: [
                [
                    58,
                    58,
                    61
                ],
                256
            ],
            10869: [
                [
                    61,
                    61
                ],
                256
            ],
            10870: [
                [
                    61,
                    61,
                    61
                ],
                256
            ],
            10972: [
                [
                    10973,
                    824
                ],
                512
            ]
        },
        11264: {
            11388: [
                [
                    106
                ],
                256
            ],
            11389: [
                [
                    86
                ],
                256
            ],
            11503: [
                ,
                230
            ],
            11504: [
                ,
                230
            ],
            11505: [
                ,
                230
            ]
        },
        11520: {
            11631: [
                [
                    11617
                ],
                256
            ],
            11647: [
                ,
                9
            ],
            11744: [
                ,
                230
            ],
            11745: [
                ,
                230
            ],
            11746: [
                ,
                230
            ],
            11747: [
                ,
                230
            ],
            11748: [
                ,
                230
            ],
            11749: [
                ,
                230
            ],
            11750: [
                ,
                230
            ],
            11751: [
                ,
                230
            ],
            11752: [
                ,
                230
            ],
            11753: [
                ,
                230
            ],
            11754: [
                ,
                230
            ],
            11755: [
                ,
                230
            ],
            11756: [
                ,
                230
            ],
            11757: [
                ,
                230
            ],
            11758: [
                ,
                230
            ],
            11759: [
                ,
                230
            ],
            11760: [
                ,
                230
            ],
            11761: [
                ,
                230
            ],
            11762: [
                ,
                230
            ],
            11763: [
                ,
                230
            ],
            11764: [
                ,
                230
            ],
            11765: [
                ,
                230
            ],
            11766: [
                ,
                230
            ],
            11767: [
                ,
                230
            ],
            11768: [
                ,
                230
            ],
            11769: [
                ,
                230
            ],
            11770: [
                ,
                230
            ],
            11771: [
                ,
                230
            ],
            11772: [
                ,
                230
            ],
            11773: [
                ,
                230
            ],
            11774: [
                ,
                230
            ],
            11775: [
                ,
                230
            ]
        },
        11776: {
            11935: [
                [
                    27597
                ],
                256
            ],
            12019: [
                [
                    40863
                ],
                256
            ]
        },
        12032: {
            12032: [
                [
                    19968
                ],
                256
            ],
            12033: [
                [
                    20008
                ],
                256
            ],
            12034: [
                [
                    20022
                ],
                256
            ],
            12035: [
                [
                    20031
                ],
                256
            ],
            12036: [
                [
                    20057
                ],
                256
            ],
            12037: [
                [
                    20101
                ],
                256
            ],
            12038: [
                [
                    20108
                ],
                256
            ],
            12039: [
                [
                    20128
                ],
                256
            ],
            12040: [
                [
                    20154
                ],
                256
            ],
            12041: [
                [
                    20799
                ],
                256
            ],
            12042: [
                [
                    20837
                ],
                256
            ],
            12043: [
                [
                    20843
                ],
                256
            ],
            12044: [
                [
                    20866
                ],
                256
            ],
            12045: [
                [
                    20886
                ],
                256
            ],
            12046: [
                [
                    20907
                ],
                256
            ],
            12047: [
                [
                    20960
                ],
                256
            ],
            12048: [
                [
                    20981
                ],
                256
            ],
            12049: [
                [
                    20992
                ],
                256
            ],
            12050: [
                [
                    21147
                ],
                256
            ],
            12051: [
                [
                    21241
                ],
                256
            ],
            12052: [
                [
                    21269
                ],
                256
            ],
            12053: [
                [
                    21274
                ],
                256
            ],
            12054: [
                [
                    21304
                ],
                256
            ],
            12055: [
                [
                    21313
                ],
                256
            ],
            12056: [
                [
                    21340
                ],
                256
            ],
            12057: [
                [
                    21353
                ],
                256
            ],
            12058: [
                [
                    21378
                ],
                256
            ],
            12059: [
                [
                    21430
                ],
                256
            ],
            12060: [
                [
                    21448
                ],
                256
            ],
            12061: [
                [
                    21475
                ],
                256
            ],
            12062: [
                [
                    22231
                ],
                256
            ],
            12063: [
                [
                    22303
                ],
                256
            ],
            12064: [
                [
                    22763
                ],
                256
            ],
            12065: [
                [
                    22786
                ],
                256
            ],
            12066: [
                [
                    22794
                ],
                256
            ],
            12067: [
                [
                    22805
                ],
                256
            ],
            12068: [
                [
                    22823
                ],
                256
            ],
            12069: [
                [
                    22899
                ],
                256
            ],
            12070: [
                [
                    23376
                ],
                256
            ],
            12071: [
                [
                    23424
                ],
                256
            ],
            12072: [
                [
                    23544
                ],
                256
            ],
            12073: [
                [
                    23567
                ],
                256
            ],
            12074: [
                [
                    23586
                ],
                256
            ],
            12075: [
                [
                    23608
                ],
                256
            ],
            12076: [
                [
                    23662
                ],
                256
            ],
            12077: [
                [
                    23665
                ],
                256
            ],
            12078: [
                [
                    24027
                ],
                256
            ],
            12079: [
                [
                    24037
                ],
                256
            ],
            12080: [
                [
                    24049
                ],
                256
            ],
            12081: [
                [
                    24062
                ],
                256
            ],
            12082: [
                [
                    24178
                ],
                256
            ],
            12083: [
                [
                    24186
                ],
                256
            ],
            12084: [
                [
                    24191
                ],
                256
            ],
            12085: [
                [
                    24308
                ],
                256
            ],
            12086: [
                [
                    24318
                ],
                256
            ],
            12087: [
                [
                    24331
                ],
                256
            ],
            12088: [
                [
                    24339
                ],
                256
            ],
            12089: [
                [
                    24400
                ],
                256
            ],
            12090: [
                [
                    24417
                ],
                256
            ],
            12091: [
                [
                    24435
                ],
                256
            ],
            12092: [
                [
                    24515
                ],
                256
            ],
            12093: [
                [
                    25096
                ],
                256
            ],
            12094: [
                [
                    25142
                ],
                256
            ],
            12095: [
                [
                    25163
                ],
                256
            ],
            12096: [
                [
                    25903
                ],
                256
            ],
            12097: [
                [
                    25908
                ],
                256
            ],
            12098: [
                [
                    25991
                ],
                256
            ],
            12099: [
                [
                    26007
                ],
                256
            ],
            12100: [
                [
                    26020
                ],
                256
            ],
            12101: [
                [
                    26041
                ],
                256
            ],
            12102: [
                [
                    26080
                ],
                256
            ],
            12103: [
                [
                    26085
                ],
                256
            ],
            12104: [
                [
                    26352
                ],
                256
            ],
            12105: [
                [
                    26376
                ],
                256
            ],
            12106: [
                [
                    26408
                ],
                256
            ],
            12107: [
                [
                    27424
                ],
                256
            ],
            12108: [
                [
                    27490
                ],
                256
            ],
            12109: [
                [
                    27513
                ],
                256
            ],
            12110: [
                [
                    27571
                ],
                256
            ],
            12111: [
                [
                    27595
                ],
                256
            ],
            12112: [
                [
                    27604
                ],
                256
            ],
            12113: [
                [
                    27611
                ],
                256
            ],
            12114: [
                [
                    27663
                ],
                256
            ],
            12115: [
                [
                    27668
                ],
                256
            ],
            12116: [
                [
                    27700
                ],
                256
            ],
            12117: [
                [
                    28779
                ],
                256
            ],
            12118: [
                [
                    29226
                ],
                256
            ],
            12119: [
                [
                    29238
                ],
                256
            ],
            12120: [
                [
                    29243
                ],
                256
            ],
            12121: [
                [
                    29247
                ],
                256
            ],
            12122: [
                [
                    29255
                ],
                256
            ],
            12123: [
                [
                    29273
                ],
                256
            ],
            12124: [
                [
                    29275
                ],
                256
            ],
            12125: [
                [
                    29356
                ],
                256
            ],
            12126: [
                [
                    29572
                ],
                256
            ],
            12127: [
                [
                    29577
                ],
                256
            ],
            12128: [
                [
                    29916
                ],
                256
            ],
            12129: [
                [
                    29926
                ],
                256
            ],
            12130: [
                [
                    29976
                ],
                256
            ],
            12131: [
                [
                    29983
                ],
                256
            ],
            12132: [
                [
                    29992
                ],
                256
            ],
            12133: [
                [
                    30000
                ],
                256
            ],
            12134: [
                [
                    30091
                ],
                256
            ],
            12135: [
                [
                    30098
                ],
                256
            ],
            12136: [
                [
                    30326
                ],
                256
            ],
            12137: [
                [
                    30333
                ],
                256
            ],
            12138: [
                [
                    30382
                ],
                256
            ],
            12139: [
                [
                    30399
                ],
                256
            ],
            12140: [
                [
                    30446
                ],
                256
            ],
            12141: [
                [
                    30683
                ],
                256
            ],
            12142: [
                [
                    30690
                ],
                256
            ],
            12143: [
                [
                    30707
                ],
                256
            ],
            12144: [
                [
                    31034
                ],
                256
            ],
            12145: [
                [
                    31160
                ],
                256
            ],
            12146: [
                [
                    31166
                ],
                256
            ],
            12147: [
                [
                    31348
                ],
                256
            ],
            12148: [
                [
                    31435
                ],
                256
            ],
            12149: [
                [
                    31481
                ],
                256
            ],
            12150: [
                [
                    31859
                ],
                256
            ],
            12151: [
                [
                    31992
                ],
                256
            ],
            12152: [
                [
                    32566
                ],
                256
            ],
            12153: [
                [
                    32593
                ],
                256
            ],
            12154: [
                [
                    32650
                ],
                256
            ],
            12155: [
                [
                    32701
                ],
                256
            ],
            12156: [
                [
                    32769
                ],
                256
            ],
            12157: [
                [
                    32780
                ],
                256
            ],
            12158: [
                [
                    32786
                ],
                256
            ],
            12159: [
                [
                    32819
                ],
                256
            ],
            12160: [
                [
                    32895
                ],
                256
            ],
            12161: [
                [
                    32905
                ],
                256
            ],
            12162: [
                [
                    33251
                ],
                256
            ],
            12163: [
                [
                    33258
                ],
                256
            ],
            12164: [
                [
                    33267
                ],
                256
            ],
            12165: [
                [
                    33276
                ],
                256
            ],
            12166: [
                [
                    33292
                ],
                256
            ],
            12167: [
                [
                    33307
                ],
                256
            ],
            12168: [
                [
                    33311
                ],
                256
            ],
            12169: [
                [
                    33390
                ],
                256
            ],
            12170: [
                [
                    33394
                ],
                256
            ],
            12171: [
                [
                    33400
                ],
                256
            ],
            12172: [
                [
                    34381
                ],
                256
            ],
            12173: [
                [
                    34411
                ],
                256
            ],
            12174: [
                [
                    34880
                ],
                256
            ],
            12175: [
                [
                    34892
                ],
                256
            ],
            12176: [
                [
                    34915
                ],
                256
            ],
            12177: [
                [
                    35198
                ],
                256
            ],
            12178: [
                [
                    35211
                ],
                256
            ],
            12179: [
                [
                    35282
                ],
                256
            ],
            12180: [
                [
                    35328
                ],
                256
            ],
            12181: [
                [
                    35895
                ],
                256
            ],
            12182: [
                [
                    35910
                ],
                256
            ],
            12183: [
                [
                    35925
                ],
                256
            ],
            12184: [
                [
                    35960
                ],
                256
            ],
            12185: [
                [
                    35997
                ],
                256
            ],
            12186: [
                [
                    36196
                ],
                256
            ],
            12187: [
                [
                    36208
                ],
                256
            ],
            12188: [
                [
                    36275
                ],
                256
            ],
            12189: [
                [
                    36523
                ],
                256
            ],
            12190: [
                [
                    36554
                ],
                256
            ],
            12191: [
                [
                    36763
                ],
                256
            ],
            12192: [
                [
                    36784
                ],
                256
            ],
            12193: [
                [
                    36789
                ],
                256
            ],
            12194: [
                [
                    37009
                ],
                256
            ],
            12195: [
                [
                    37193
                ],
                256
            ],
            12196: [
                [
                    37318
                ],
                256
            ],
            12197: [
                [
                    37324
                ],
                256
            ],
            12198: [
                [
                    37329
                ],
                256
            ],
            12199: [
                [
                    38263
                ],
                256
            ],
            12200: [
                [
                    38272
                ],
                256
            ],
            12201: [
                [
                    38428
                ],
                256
            ],
            12202: [
                [
                    38582
                ],
                256
            ],
            12203: [
                [
                    38585
                ],
                256
            ],
            12204: [
                [
                    38632
                ],
                256
            ],
            12205: [
                [
                    38737
                ],
                256
            ],
            12206: [
                [
                    38750
                ],
                256
            ],
            12207: [
                [
                    38754
                ],
                256
            ],
            12208: [
                [
                    38761
                ],
                256
            ],
            12209: [
                [
                    38859
                ],
                256
            ],
            12210: [
                [
                    38893
                ],
                256
            ],
            12211: [
                [
                    38899
                ],
                256
            ],
            12212: [
                [
                    38913
                ],
                256
            ],
            12213: [
                [
                    39080
                ],
                256
            ],
            12214: [
                [
                    39131
                ],
                256
            ],
            12215: [
                [
                    39135
                ],
                256
            ],
            12216: [
                [
                    39318
                ],
                256
            ],
            12217: [
                [
                    39321
                ],
                256
            ],
            12218: [
                [
                    39340
                ],
                256
            ],
            12219: [
                [
                    39592
                ],
                256
            ],
            12220: [
                [
                    39640
                ],
                256
            ],
            12221: [
                [
                    39647
                ],
                256
            ],
            12222: [
                [
                    39717
                ],
                256
            ],
            12223: [
                [
                    39727
                ],
                256
            ],
            12224: [
                [
                    39730
                ],
                256
            ],
            12225: [
                [
                    39740
                ],
                256
            ],
            12226: [
                [
                    39770
                ],
                256
            ],
            12227: [
                [
                    40165
                ],
                256
            ],
            12228: [
                [
                    40565
                ],
                256
            ],
            12229: [
                [
                    40575
                ],
                256
            ],
            12230: [
                [
                    40613
                ],
                256
            ],
            12231: [
                [
                    40635
                ],
                256
            ],
            12232: [
                [
                    40643
                ],
                256
            ],
            12233: [
                [
                    40653
                ],
                256
            ],
            12234: [
                [
                    40657
                ],
                256
            ],
            12235: [
                [
                    40697
                ],
                256
            ],
            12236: [
                [
                    40701
                ],
                256
            ],
            12237: [
                [
                    40718
                ],
                256
            ],
            12238: [
                [
                    40723
                ],
                256
            ],
            12239: [
                [
                    40736
                ],
                256
            ],
            12240: [
                [
                    40763
                ],
                256
            ],
            12241: [
                [
                    40778
                ],
                256
            ],
            12242: [
                [
                    40786
                ],
                256
            ],
            12243: [
                [
                    40845
                ],
                256
            ],
            12244: [
                [
                    40860
                ],
                256
            ],
            12245: [
                [
                    40864
                ],
                256
            ]
        },
        12288: {
            12288: [
                [
                    32
                ],
                256
            ],
            12330: [
                ,
                218
            ],
            12331: [
                ,
                228
            ],
            12332: [
                ,
                232
            ],
            12333: [
                ,
                222
            ],
            12334: [
                ,
                224
            ],
            12335: [
                ,
                224
            ],
            12342: [
                [
                    12306
                ],
                256
            ],
            12344: [
                [
                    21313
                ],
                256
            ],
            12345: [
                [
                    21316
                ],
                256
            ],
            12346: [
                [
                    21317
                ],
                256
            ],
            12358: [
                ,
                ,
                {
                    12441: 12436
                }
            ],
            12363: [
                ,
                ,
                {
                    12441: 12364
                }
            ],
            12364: [
                [
                    12363,
                    12441
                ]
            ],
            12365: [
                ,
                ,
                {
                    12441: 12366
                }
            ],
            12366: [
                [
                    12365,
                    12441
                ]
            ],
            12367: [
                ,
                ,
                {
                    12441: 12368
                }
            ],
            12368: [
                [
                    12367,
                    12441
                ]
            ],
            12369: [
                ,
                ,
                {
                    12441: 12370
                }
            ],
            12370: [
                [
                    12369,
                    12441
                ]
            ],
            12371: [
                ,
                ,
                {
                    12441: 12372
                }
            ],
            12372: [
                [
                    12371,
                    12441
                ]
            ],
            12373: [
                ,
                ,
                {
                    12441: 12374
                }
            ],
            12374: [
                [
                    12373,
                    12441
                ]
            ],
            12375: [
                ,
                ,
                {
                    12441: 12376
                }
            ],
            12376: [
                [
                    12375,
                    12441
                ]
            ],
            12377: [
                ,
                ,
                {
                    12441: 12378
                }
            ],
            12378: [
                [
                    12377,
                    12441
                ]
            ],
            12379: [
                ,
                ,
                {
                    12441: 12380
                }
            ],
            12380: [
                [
                    12379,
                    12441
                ]
            ],
            12381: [
                ,
                ,
                {
                    12441: 12382
                }
            ],
            12382: [
                [
                    12381,
                    12441
                ]
            ],
            12383: [
                ,
                ,
                {
                    12441: 12384
                }
            ],
            12384: [
                [
                    12383,
                    12441
                ]
            ],
            12385: [
                ,
                ,
                {
                    12441: 12386
                }
            ],
            12386: [
                [
                    12385,
                    12441
                ]
            ],
            12388: [
                ,
                ,
                {
                    12441: 12389
                }
            ],
            12389: [
                [
                    12388,
                    12441
                ]
            ],
            12390: [
                ,
                ,
                {
                    12441: 12391
                }
            ],
            12391: [
                [
                    12390,
                    12441
                ]
            ],
            12392: [
                ,
                ,
                {
                    12441: 12393
                }
            ],
            12393: [
                [
                    12392,
                    12441
                ]
            ],
            12399: [
                ,
                ,
                {
                    12441: 12400,
                    12442: 12401
                }
            ],
            12400: [
                [
                    12399,
                    12441
                ]
            ],
            12401: [
                [
                    12399,
                    12442
                ]
            ],
            12402: [
                ,
                ,
                {
                    12441: 12403,
                    12442: 12404
                }
            ],
            12403: [
                [
                    12402,
                    12441
                ]
            ],
            12404: [
                [
                    12402,
                    12442
                ]
            ],
            12405: [
                ,
                ,
                {
                    12441: 12406,
                    12442: 12407
                }
            ],
            12406: [
                [
                    12405,
                    12441
                ]
            ],
            12407: [
                [
                    12405,
                    12442
                ]
            ],
            12408: [
                ,
                ,
                {
                    12441: 12409,
                    12442: 12410
                }
            ],
            12409: [
                [
                    12408,
                    12441
                ]
            ],
            12410: [
                [
                    12408,
                    12442
                ]
            ],
            12411: [
                ,
                ,
                {
                    12441: 12412,
                    12442: 12413
                }
            ],
            12412: [
                [
                    12411,
                    12441
                ]
            ],
            12413: [
                [
                    12411,
                    12442
                ]
            ],
            12436: [
                [
                    12358,
                    12441
                ]
            ],
            12441: [
                ,
                8
            ],
            12442: [
                ,
                8
            ],
            12443: [
                [
                    32,
                    12441
                ],
                256
            ],
            12444: [
                [
                    32,
                    12442
                ],
                256
            ],
            12445: [
                ,
                ,
                {
                    12441: 12446
                }
            ],
            12446: [
                [
                    12445,
                    12441
                ]
            ],
            12447: [
                [
                    12424,
                    12426
                ],
                256
            ],
            12454: [
                ,
                ,
                {
                    12441: 12532
                }
            ],
            12459: [
                ,
                ,
                {
                    12441: 12460
                }
            ],
            12460: [
                [
                    12459,
                    12441
                ]
            ],
            12461: [
                ,
                ,
                {
                    12441: 12462
                }
            ],
            12462: [
                [
                    12461,
                    12441
                ]
            ],
            12463: [
                ,
                ,
                {
                    12441: 12464
                }
            ],
            12464: [
                [
                    12463,
                    12441
                ]
            ],
            12465: [
                ,
                ,
                {
                    12441: 12466
                }
            ],
            12466: [
                [
                    12465,
                    12441
                ]
            ],
            12467: [
                ,
                ,
                {
                    12441: 12468
                }
            ],
            12468: [
                [
                    12467,
                    12441
                ]
            ],
            12469: [
                ,
                ,
                {
                    12441: 12470
                }
            ],
            12470: [
                [
                    12469,
                    12441
                ]
            ],
            12471: [
                ,
                ,
                {
                    12441: 12472
                }
            ],
            12472: [
                [
                    12471,
                    12441
                ]
            ],
            12473: [
                ,
                ,
                {
                    12441: 12474
                }
            ],
            12474: [
                [
                    12473,
                    12441
                ]
            ],
            12475: [
                ,
                ,
                {
                    12441: 12476
                }
            ],
            12476: [
                [
                    12475,
                    12441
                ]
            ],
            12477: [
                ,
                ,
                {
                    12441: 12478
                }
            ],
            12478: [
                [
                    12477,
                    12441
                ]
            ],
            12479: [
                ,
                ,
                {
                    12441: 12480
                }
            ],
            12480: [
                [
                    12479,
                    12441
                ]
            ],
            12481: [
                ,
                ,
                {
                    12441: 12482
                }
            ],
            12482: [
                [
                    12481,
                    12441
                ]
            ],
            12484: [
                ,
                ,
                {
                    12441: 12485
                }
            ],
            12485: [
                [
                    12484,
                    12441
                ]
            ],
            12486: [
                ,
                ,
                {
                    12441: 12487
                }
            ],
            12487: [
                [
                    12486,
                    12441
                ]
            ],
            12488: [
                ,
                ,
                {
                    12441: 12489
                }
            ],
            12489: [
                [
                    12488,
                    12441
                ]
            ],
            12495: [
                ,
                ,
                {
                    12441: 12496,
                    12442: 12497
                }
            ],
            12496: [
                [
                    12495,
                    12441
                ]
            ],
            12497: [
                [
                    12495,
                    12442
                ]
            ],
            12498: [
                ,
                ,
                {
                    12441: 12499,
                    12442: 12500
                }
            ],
            12499: [
                [
                    12498,
                    12441
                ]
            ],
            12500: [
                [
                    12498,
                    12442
                ]
            ],
            12501: [
                ,
                ,
                {
                    12441: 12502,
                    12442: 12503
                }
            ],
            12502: [
                [
                    12501,
                    12441
                ]
            ],
            12503: [
                [
                    12501,
                    12442
                ]
            ],
            12504: [
                ,
                ,
                {
                    12441: 12505,
                    12442: 12506
                }
            ],
            12505: [
                [
                    12504,
                    12441
                ]
            ],
            12506: [
                [
                    12504,
                    12442
                ]
            ],
            12507: [
                ,
                ,
                {
                    12441: 12508,
                    12442: 12509
                }
            ],
            12508: [
                [
                    12507,
                    12441
                ]
            ],
            12509: [
                [
                    12507,
                    12442
                ]
            ],
            12527: [
                ,
                ,
                {
                    12441: 12535
                }
            ],
            12528: [
                ,
                ,
                {
                    12441: 12536
                }
            ],
            12529: [
                ,
                ,
                {
                    12441: 12537
                }
            ],
            12530: [
                ,
                ,
                {
                    12441: 12538
                }
            ],
            12532: [
                [
                    12454,
                    12441
                ]
            ],
            12535: [
                [
                    12527,
                    12441
                ]
            ],
            12536: [
                [
                    12528,
                    12441
                ]
            ],
            12537: [
                [
                    12529,
                    12441
                ]
            ],
            12538: [
                [
                    12530,
                    12441
                ]
            ],
            12541: [
                ,
                ,
                {
                    12441: 12542
                }
            ],
            12542: [
                [
                    12541,
                    12441
                ]
            ],
            12543: [
                [
                    12467,
                    12488
                ],
                256
            ]
        },
        12544: {
            12593: [
                [
                    4352
                ],
                256
            ],
            12594: [
                [
                    4353
                ],
                256
            ],
            12595: [
                [
                    4522
                ],
                256
            ],
            12596: [
                [
                    4354
                ],
                256
            ],
            12597: [
                [
                    4524
                ],
                256
            ],
            12598: [
                [
                    4525
                ],
                256
            ],
            12599: [
                [
                    4355
                ],
                256
            ],
            12600: [
                [
                    4356
                ],
                256
            ],
            12601: [
                [
                    4357
                ],
                256
            ],
            12602: [
                [
                    4528
                ],
                256
            ],
            12603: [
                [
                    4529
                ],
                256
            ],
            12604: [
                [
                    4530
                ],
                256
            ],
            12605: [
                [
                    4531
                ],
                256
            ],
            12606: [
                [
                    4532
                ],
                256
            ],
            12607: [
                [
                    4533
                ],
                256
            ],
            12608: [
                [
                    4378
                ],
                256
            ],
            12609: [
                [
                    4358
                ],
                256
            ],
            12610: [
                [
                    4359
                ],
                256
            ],
            12611: [
                [
                    4360
                ],
                256
            ],
            12612: [
                [
                    4385
                ],
                256
            ],
            12613: [
                [
                    4361
                ],
                256
            ],
            12614: [
                [
                    4362
                ],
                256
            ],
            12615: [
                [
                    4363
                ],
                256
            ],
            12616: [
                [
                    4364
                ],
                256
            ],
            12617: [
                [
                    4365
                ],
                256
            ],
            12618: [
                [
                    4366
                ],
                256
            ],
            12619: [
                [
                    4367
                ],
                256
            ],
            12620: [
                [
                    4368
                ],
                256
            ],
            12621: [
                [
                    4369
                ],
                256
            ],
            12622: [
                [
                    4370
                ],
                256
            ],
            12623: [
                [
                    4449
                ],
                256
            ],
            12624: [
                [
                    4450
                ],
                256
            ],
            12625: [
                [
                    4451
                ],
                256
            ],
            12626: [
                [
                    4452
                ],
                256
            ],
            12627: [
                [
                    4453
                ],
                256
            ],
            12628: [
                [
                    4454
                ],
                256
            ],
            12629: [
                [
                    4455
                ],
                256
            ],
            12630: [
                [
                    4456
                ],
                256
            ],
            12631: [
                [
                    4457
                ],
                256
            ],
            12632: [
                [
                    4458
                ],
                256
            ],
            12633: [
                [
                    4459
                ],
                256
            ],
            12634: [
                [
                    4460
                ],
                256
            ],
            12635: [
                [
                    4461
                ],
                256
            ],
            12636: [
                [
                    4462
                ],
                256
            ],
            12637: [
                [
                    4463
                ],
                256
            ],
            12638: [
                [
                    4464
                ],
                256
            ],
            12639: [
                [
                    4465
                ],
                256
            ],
            12640: [
                [
                    4466
                ],
                256
            ],
            12641: [
                [
                    4467
                ],
                256
            ],
            12642: [
                [
                    4468
                ],
                256
            ],
            12643: [
                [
                    4469
                ],
                256
            ],
            12644: [
                [
                    4448
                ],
                256
            ],
            12645: [
                [
                    4372
                ],
                256
            ],
            12646: [
                [
                    4373
                ],
                256
            ],
            12647: [
                [
                    4551
                ],
                256
            ],
            12648: [
                [
                    4552
                ],
                256
            ],
            12649: [
                [
                    4556
                ],
                256
            ],
            12650: [
                [
                    4558
                ],
                256
            ],
            12651: [
                [
                    4563
                ],
                256
            ],
            12652: [
                [
                    4567
                ],
                256
            ],
            12653: [
                [
                    4569
                ],
                256
            ],
            12654: [
                [
                    4380
                ],
                256
            ],
            12655: [
                [
                    4573
                ],
                256
            ],
            12656: [
                [
                    4575
                ],
                256
            ],
            12657: [
                [
                    4381
                ],
                256
            ],
            12658: [
                [
                    4382
                ],
                256
            ],
            12659: [
                [
                    4384
                ],
                256
            ],
            12660: [
                [
                    4386
                ],
                256
            ],
            12661: [
                [
                    4387
                ],
                256
            ],
            12662: [
                [
                    4391
                ],
                256
            ],
            12663: [
                [
                    4393
                ],
                256
            ],
            12664: [
                [
                    4395
                ],
                256
            ],
            12665: [
                [
                    4396
                ],
                256
            ],
            12666: [
                [
                    4397
                ],
                256
            ],
            12667: [
                [
                    4398
                ],
                256
            ],
            12668: [
                [
                    4399
                ],
                256
            ],
            12669: [
                [
                    4402
                ],
                256
            ],
            12670: [
                [
                    4406
                ],
                256
            ],
            12671: [
                [
                    4416
                ],
                256
            ],
            12672: [
                [
                    4423
                ],
                256
            ],
            12673: [
                [
                    4428
                ],
                256
            ],
            12674: [
                [
                    4593
                ],
                256
            ],
            12675: [
                [
                    4594
                ],
                256
            ],
            12676: [
                [
                    4439
                ],
                256
            ],
            12677: [
                [
                    4440
                ],
                256
            ],
            12678: [
                [
                    4441
                ],
                256
            ],
            12679: [
                [
                    4484
                ],
                256
            ],
            12680: [
                [
                    4485
                ],
                256
            ],
            12681: [
                [
                    4488
                ],
                256
            ],
            12682: [
                [
                    4497
                ],
                256
            ],
            12683: [
                [
                    4498
                ],
                256
            ],
            12684: [
                [
                    4500
                ],
                256
            ],
            12685: [
                [
                    4510
                ],
                256
            ],
            12686: [
                [
                    4513
                ],
                256
            ],
            12690: [
                [
                    19968
                ],
                256
            ],
            12691: [
                [
                    20108
                ],
                256
            ],
            12692: [
                [
                    19977
                ],
                256
            ],
            12693: [
                [
                    22235
                ],
                256
            ],
            12694: [
                [
                    19978
                ],
                256
            ],
            12695: [
                [
                    20013
                ],
                256
            ],
            12696: [
                [
                    19979
                ],
                256
            ],
            12697: [
                [
                    30002
                ],
                256
            ],
            12698: [
                [
                    20057
                ],
                256
            ],
            12699: [
                [
                    19993
                ],
                256
            ],
            12700: [
                [
                    19969
                ],
                256
            ],
            12701: [
                [
                    22825
                ],
                256
            ],
            12702: [
                [
                    22320
                ],
                256
            ],
            12703: [
                [
                    20154
                ],
                256
            ]
        },
        12800: {
            12800: [
                [
                    40,
                    4352,
                    41
                ],
                256
            ],
            12801: [
                [
                    40,
                    4354,
                    41
                ],
                256
            ],
            12802: [
                [
                    40,
                    4355,
                    41
                ],
                256
            ],
            12803: [
                [
                    40,
                    4357,
                    41
                ],
                256
            ],
            12804: [
                [
                    40,
                    4358,
                    41
                ],
                256
            ],
            12805: [
                [
                    40,
                    4359,
                    41
                ],
                256
            ],
            12806: [
                [
                    40,
                    4361,
                    41
                ],
                256
            ],
            12807: [
                [
                    40,
                    4363,
                    41
                ],
                256
            ],
            12808: [
                [
                    40,
                    4364,
                    41
                ],
                256
            ],
            12809: [
                [
                    40,
                    4366,
                    41
                ],
                256
            ],
            12810: [
                [
                    40,
                    4367,
                    41
                ],
                256
            ],
            12811: [
                [
                    40,
                    4368,
                    41
                ],
                256
            ],
            12812: [
                [
                    40,
                    4369,
                    41
                ],
                256
            ],
            12813: [
                [
                    40,
                    4370,
                    41
                ],
                256
            ],
            12814: [
                [
                    40,
                    4352,
                    4449,
                    41
                ],
                256
            ],
            12815: [
                [
                    40,
                    4354,
                    4449,
                    41
                ],
                256
            ],
            12816: [
                [
                    40,
                    4355,
                    4449,
                    41
                ],
                256
            ],
            12817: [
                [
                    40,
                    4357,
                    4449,
                    41
                ],
                256
            ],
            12818: [
                [
                    40,
                    4358,
                    4449,
                    41
                ],
                256
            ],
            12819: [
                [
                    40,
                    4359,
                    4449,
                    41
                ],
                256
            ],
            12820: [
                [
                    40,
                    4361,
                    4449,
                    41
                ],
                256
            ],
            12821: [
                [
                    40,
                    4363,
                    4449,
                    41
                ],
                256
            ],
            12822: [
                [
                    40,
                    4364,
                    4449,
                    41
                ],
                256
            ],
            12823: [
                [
                    40,
                    4366,
                    4449,
                    41
                ],
                256
            ],
            12824: [
                [
                    40,
                    4367,
                    4449,
                    41
                ],
                256
            ],
            12825: [
                [
                    40,
                    4368,
                    4449,
                    41
                ],
                256
            ],
            12826: [
                [
                    40,
                    4369,
                    4449,
                    41
                ],
                256
            ],
            12827: [
                [
                    40,
                    4370,
                    4449,
                    41
                ],
                256
            ],
            12828: [
                [
                    40,
                    4364,
                    4462,
                    41
                ],
                256
            ],
            12829: [
                [
                    40,
                    4363,
                    4457,
                    4364,
                    4453,
                    4523,
                    41
                ],
                256
            ],
            12830: [
                [
                    40,
                    4363,
                    4457,
                    4370,
                    4462,
                    41
                ],
                256
            ],
            12832: [
                [
                    40,
                    19968,
                    41
                ],
                256
            ],
            12833: [
                [
                    40,
                    20108,
                    41
                ],
                256
            ],
            12834: [
                [
                    40,
                    19977,
                    41
                ],
                256
            ],
            12835: [
                [
                    40,
                    22235,
                    41
                ],
                256
            ],
            12836: [
                [
                    40,
                    20116,
                    41
                ],
                256
            ],
            12837: [
                [
                    40,
                    20845,
                    41
                ],
                256
            ],
            12838: [
                [
                    40,
                    19971,
                    41
                ],
                256
            ],
            12839: [
                [
                    40,
                    20843,
                    41
                ],
                256
            ],
            12840: [
                [
                    40,
                    20061,
                    41
                ],
                256
            ],
            12841: [
                [
                    40,
                    21313,
                    41
                ],
                256
            ],
            12842: [
                [
                    40,
                    26376,
                    41
                ],
                256
            ],
            12843: [
                [
                    40,
                    28779,
                    41
                ],
                256
            ],
            12844: [
                [
                    40,
                    27700,
                    41
                ],
                256
            ],
            12845: [
                [
                    40,
                    26408,
                    41
                ],
                256
            ],
            12846: [
                [
                    40,
                    37329,
                    41
                ],
                256
            ],
            12847: [
                [
                    40,
                    22303,
                    41
                ],
                256
            ],
            12848: [
                [
                    40,
                    26085,
                    41
                ],
                256
            ],
            12849: [
                [
                    40,
                    26666,
                    41
                ],
                256
            ],
            12850: [
                [
                    40,
                    26377,
                    41
                ],
                256
            ],
            12851: [
                [
                    40,
                    31038,
                    41
                ],
                256
            ],
            12852: [
                [
                    40,
                    21517,
                    41
                ],
                256
            ],
            12853: [
                [
                    40,
                    29305,
                    41
                ],
                256
            ],
            12854: [
                [
                    40,
                    36001,
                    41
                ],
                256
            ],
            12855: [
                [
                    40,
                    31069,
                    41
                ],
                256
            ],
            12856: [
                [
                    40,
                    21172,
                    41
                ],
                256
            ],
            12857: [
                [
                    40,
                    20195,
                    41
                ],
                256
            ],
            12858: [
                [
                    40,
                    21628,
                    41
                ],
                256
            ],
            12859: [
                [
                    40,
                    23398,
                    41
                ],
                256
            ],
            12860: [
                [
                    40,
                    30435,
                    41
                ],
                256
            ],
            12861: [
                [
                    40,
                    20225,
                    41
                ],
                256
            ],
            12862: [
                [
                    40,
                    36039,
                    41
                ],
                256
            ],
            12863: [
                [
                    40,
                    21332,
                    41
                ],
                256
            ],
            12864: [
                [
                    40,
                    31085,
                    41
                ],
                256
            ],
            12865: [
                [
                    40,
                    20241,
                    41
                ],
                256
            ],
            12866: [
                [
                    40,
                    33258,
                    41
                ],
                256
            ],
            12867: [
                [
                    40,
                    33267,
                    41
                ],
                256
            ],
            12868: [
                [
                    21839
                ],
                256
            ],
            12869: [
                [
                    24188
                ],
                256
            ],
            12870: [
                [
                    25991
                ],
                256
            ],
            12871: [
                [
                    31631
                ],
                256
            ],
            12880: [
                [
                    80,
                    84,
                    69
                ],
                256
            ],
            12881: [
                [
                    50,
                    49
                ],
                256
            ],
            12882: [
                [
                    50,
                    50
                ],
                256
            ],
            12883: [
                [
                    50,
                    51
                ],
                256
            ],
            12884: [
                [
                    50,
                    52
                ],
                256
            ],
            12885: [
                [
                    50,
                    53
                ],
                256
            ],
            12886: [
                [
                    50,
                    54
                ],
                256
            ],
            12887: [
                [
                    50,
                    55
                ],
                256
            ],
            12888: [
                [
                    50,
                    56
                ],
                256
            ],
            12889: [
                [
                    50,
                    57
                ],
                256
            ],
            12890: [
                [
                    51,
                    48
                ],
                256
            ],
            12891: [
                [
                    51,
                    49
                ],
                256
            ],
            12892: [
                [
                    51,
                    50
                ],
                256
            ],
            12893: [
                [
                    51,
                    51
                ],
                256
            ],
            12894: [
                [
                    51,
                    52
                ],
                256
            ],
            12895: [
                [
                    51,
                    53
                ],
                256
            ],
            12896: [
                [
                    4352
                ],
                256
            ],
            12897: [
                [
                    4354
                ],
                256
            ],
            12898: [
                [
                    4355
                ],
                256
            ],
            12899: [
                [
                    4357
                ],
                256
            ],
            12900: [
                [
                    4358
                ],
                256
            ],
            12901: [
                [
                    4359
                ],
                256
            ],
            12902: [
                [
                    4361
                ],
                256
            ],
            12903: [
                [
                    4363
                ],
                256
            ],
            12904: [
                [
                    4364
                ],
                256
            ],
            12905: [
                [
                    4366
                ],
                256
            ],
            12906: [
                [
                    4367
                ],
                256
            ],
            12907: [
                [
                    4368
                ],
                256
            ],
            12908: [
                [
                    4369
                ],
                256
            ],
            12909: [
                [
                    4370
                ],
                256
            ],
            12910: [
                [
                    4352,
                    4449
                ],
                256
            ],
            12911: [
                [
                    4354,
                    4449
                ],
                256
            ],
            12912: [
                [
                    4355,
                    4449
                ],
                256
            ],
            12913: [
                [
                    4357,
                    4449
                ],
                256
            ],
            12914: [
                [
                    4358,
                    4449
                ],
                256
            ],
            12915: [
                [
                    4359,
                    4449
                ],
                256
            ],
            12916: [
                [
                    4361,
                    4449
                ],
                256
            ],
            12917: [
                [
                    4363,
                    4449
                ],
                256
            ],
            12918: [
                [
                    4364,
                    4449
                ],
                256
            ],
            12919: [
                [
                    4366,
                    4449
                ],
                256
            ],
            12920: [
                [
                    4367,
                    4449
                ],
                256
            ],
            12921: [
                [
                    4368,
                    4449
                ],
                256
            ],
            12922: [
                [
                    4369,
                    4449
                ],
                256
            ],
            12923: [
                [
                    4370,
                    4449
                ],
                256
            ],
            12924: [
                [
                    4366,
                    4449,
                    4535,
                    4352,
                    4457
                ],
                256
            ],
            12925: [
                [
                    4364,
                    4462,
                    4363,
                    4468
                ],
                256
            ],
            12926: [
                [
                    4363,
                    4462
                ],
                256
            ],
            12928: [
                [
                    19968
                ],
                256
            ],
            12929: [
                [
                    20108
                ],
                256
            ],
            12930: [
                [
                    19977
                ],
                256
            ],
            12931: [
                [
                    22235
                ],
                256
            ],
            12932: [
                [
                    20116
                ],
                256
            ],
            12933: [
                [
                    20845
                ],
                256
            ],
            12934: [
                [
                    19971
                ],
                256
            ],
            12935: [
                [
                    20843
                ],
                256
            ],
            12936: [
                [
                    20061
                ],
                256
            ],
            12937: [
                [
                    21313
                ],
                256
            ],
            12938: [
                [
                    26376
                ],
                256
            ],
            12939: [
                [
                    28779
                ],
                256
            ],
            12940: [
                [
                    27700
                ],
                256
            ],
            12941: [
                [
                    26408
                ],
                256
            ],
            12942: [
                [
                    37329
                ],
                256
            ],
            12943: [
                [
                    22303
                ],
                256
            ],
            12944: [
                [
                    26085
                ],
                256
            ],
            12945: [
                [
                    26666
                ],
                256
            ],
            12946: [
                [
                    26377
                ],
                256
            ],
            12947: [
                [
                    31038
                ],
                256
            ],
            12948: [
                [
                    21517
                ],
                256
            ],
            12949: [
                [
                    29305
                ],
                256
            ],
            12950: [
                [
                    36001
                ],
                256
            ],
            12951: [
                [
                    31069
                ],
                256
            ],
            12952: [
                [
                    21172
                ],
                256
            ],
            12953: [
                [
                    31192
                ],
                256
            ],
            12954: [
                [
                    30007
                ],
                256
            ],
            12955: [
                [
                    22899
                ],
                256
            ],
            12956: [
                [
                    36969
                ],
                256
            ],
            12957: [
                [
                    20778
                ],
                256
            ],
            12958: [
                [
                    21360
                ],
                256
            ],
            12959: [
                [
                    27880
                ],
                256
            ],
            12960: [
                [
                    38917
                ],
                256
            ],
            12961: [
                [
                    20241
                ],
                256
            ],
            12962: [
                [
                    20889
                ],
                256
            ],
            12963: [
                [
                    27491
                ],
                256
            ],
            12964: [
                [
                    19978
                ],
                256
            ],
            12965: [
                [
                    20013
                ],
                256
            ],
            12966: [
                [
                    19979
                ],
                256
            ],
            12967: [
                [
                    24038
                ],
                256
            ],
            12968: [
                [
                    21491
                ],
                256
            ],
            12969: [
                [
                    21307
                ],
                256
            ],
            12970: [
                [
                    23447
                ],
                256
            ],
            12971: [
                [
                    23398
                ],
                256
            ],
            12972: [
                [
                    30435
                ],
                256
            ],
            12973: [
                [
                    20225
                ],
                256
            ],
            12974: [
                [
                    36039
                ],
                256
            ],
            12975: [
                [
                    21332
                ],
                256
            ],
            12976: [
                [
                    22812
                ],
                256
            ],
            12977: [
                [
                    51,
                    54
                ],
                256
            ],
            12978: [
                [
                    51,
                    55
                ],
                256
            ],
            12979: [
                [
                    51,
                    56
                ],
                256
            ],
            12980: [
                [
                    51,
                    57
                ],
                256
            ],
            12981: [
                [
                    52,
                    48
                ],
                256
            ],
            12982: [
                [
                    52,
                    49
                ],
                256
            ],
            12983: [
                [
                    52,
                    50
                ],
                256
            ],
            12984: [
                [
                    52,
                    51
                ],
                256
            ],
            12985: [
                [
                    52,
                    52
                ],
                256
            ],
            12986: [
                [
                    52,
                    53
                ],
                256
            ],
            12987: [
                [
                    52,
                    54
                ],
                256
            ],
            12988: [
                [
                    52,
                    55
                ],
                256
            ],
            12989: [
                [
                    52,
                    56
                ],
                256
            ],
            12990: [
                [
                    52,
                    57
                ],
                256
            ],
            12991: [
                [
                    53,
                    48
                ],
                256
            ],
            12992: [
                [
                    49,
                    26376
                ],
                256
            ],
            12993: [
                [
                    50,
                    26376
                ],
                256
            ],
            12994: [
                [
                    51,
                    26376
                ],
                256
            ],
            12995: [
                [
                    52,
                    26376
                ],
                256
            ],
            12996: [
                [
                    53,
                    26376
                ],
                256
            ],
            12997: [
                [
                    54,
                    26376
                ],
                256
            ],
            12998: [
                [
                    55,
                    26376
                ],
                256
            ],
            12999: [
                [
                    56,
                    26376
                ],
                256
            ],
            13000: [
                [
                    57,
                    26376
                ],
                256
            ],
            13001: [
                [
                    49,
                    48,
                    26376
                ],
                256
            ],
            13002: [
                [
                    49,
                    49,
                    26376
                ],
                256
            ],
            13003: [
                [
                    49,
                    50,
                    26376
                ],
                256
            ],
            13004: [
                [
                    72,
                    103
                ],
                256
            ],
            13005: [
                [
                    101,
                    114,
                    103
                ],
                256
            ],
            13006: [
                [
                    101,
                    86
                ],
                256
            ],
            13007: [
                [
                    76,
                    84,
                    68
                ],
                256
            ],
            13008: [
                [
                    12450
                ],
                256
            ],
            13009: [
                [
                    12452
                ],
                256
            ],
            13010: [
                [
                    12454
                ],
                256
            ],
            13011: [
                [
                    12456
                ],
                256
            ],
            13012: [
                [
                    12458
                ],
                256
            ],
            13013: [
                [
                    12459
                ],
                256
            ],
            13014: [
                [
                    12461
                ],
                256
            ],
            13015: [
                [
                    12463
                ],
                256
            ],
            13016: [
                [
                    12465
                ],
                256
            ],
            13017: [
                [
                    12467
                ],
                256
            ],
            13018: [
                [
                    12469
                ],
                256
            ],
            13019: [
                [
                    12471
                ],
                256
            ],
            13020: [
                [
                    12473
                ],
                256
            ],
            13021: [
                [
                    12475
                ],
                256
            ],
            13022: [
                [
                    12477
                ],
                256
            ],
            13023: [
                [
                    12479
                ],
                256
            ],
            13024: [
                [
                    12481
                ],
                256
            ],
            13025: [
                [
                    12484
                ],
                256
            ],
            13026: [
                [
                    12486
                ],
                256
            ],
            13027: [
                [
                    12488
                ],
                256
            ],
            13028: [
                [
                    12490
                ],
                256
            ],
            13029: [
                [
                    12491
                ],
                256
            ],
            13030: [
                [
                    12492
                ],
                256
            ],
            13031: [
                [
                    12493
                ],
                256
            ],
            13032: [
                [
                    12494
                ],
                256
            ],
            13033: [
                [
                    12495
                ],
                256
            ],
            13034: [
                [
                    12498
                ],
                256
            ],
            13035: [
                [
                    12501
                ],
                256
            ],
            13036: [
                [
                    12504
                ],
                256
            ],
            13037: [
                [
                    12507
                ],
                256
            ],
            13038: [
                [
                    12510
                ],
                256
            ],
            13039: [
                [
                    12511
                ],
                256
            ],
            13040: [
                [
                    12512
                ],
                256
            ],
            13041: [
                [
                    12513
                ],
                256
            ],
            13042: [
                [
                    12514
                ],
                256
            ],
            13043: [
                [
                    12516
                ],
                256
            ],
            13044: [
                [
                    12518
                ],
                256
            ],
            13045: [
                [
                    12520
                ],
                256
            ],
            13046: [
                [
                    12521
                ],
                256
            ],
            13047: [
                [
                    12522
                ],
                256
            ],
            13048: [
                [
                    12523
                ],
                256
            ],
            13049: [
                [
                    12524
                ],
                256
            ],
            13050: [
                [
                    12525
                ],
                256
            ],
            13051: [
                [
                    12527
                ],
                256
            ],
            13052: [
                [
                    12528
                ],
                256
            ],
            13053: [
                [
                    12529
                ],
                256
            ],
            13054: [
                [
                    12530
                ],
                256
            ]
        },
        13056: {
            13056: [
                [
                    12450,
                    12497,
                    12540,
                    12488
                ],
                256
            ],
            13057: [
                [
                    12450,
                    12523,
                    12501,
                    12449
                ],
                256
            ],
            13058: [
                [
                    12450,
                    12531,
                    12506,
                    12450
                ],
                256
            ],
            13059: [
                [
                    12450,
                    12540,
                    12523
                ],
                256
            ],
            13060: [
                [
                    12452,
                    12491,
                    12531,
                    12464
                ],
                256
            ],
            13061: [
                [
                    12452,
                    12531,
                    12481
                ],
                256
            ],
            13062: [
                [
                    12454,
                    12457,
                    12531
                ],
                256
            ],
            13063: [
                [
                    12456,
                    12473,
                    12463,
                    12540,
                    12489
                ],
                256
            ],
            13064: [
                [
                    12456,
                    12540,
                    12459,
                    12540
                ],
                256
            ],
            13065: [
                [
                    12458,
                    12531,
                    12473
                ],
                256
            ],
            13066: [
                [
                    12458,
                    12540,
                    12512
                ],
                256
            ],
            13067: [
                [
                    12459,
                    12452,
                    12522
                ],
                256
            ],
            13068: [
                [
                    12459,
                    12521,
                    12483,
                    12488
                ],
                256
            ],
            13069: [
                [
                    12459,
                    12525,
                    12522,
                    12540
                ],
                256
            ],
            13070: [
                [
                    12460,
                    12525,
                    12531
                ],
                256
            ],
            13071: [
                [
                    12460,
                    12531,
                    12510
                ],
                256
            ],
            13072: [
                [
                    12462,
                    12460
                ],
                256
            ],
            13073: [
                [
                    12462,
                    12491,
                    12540
                ],
                256
            ],
            13074: [
                [
                    12461,
                    12517,
                    12522,
                    12540
                ],
                256
            ],
            13075: [
                [
                    12462,
                    12523,
                    12480,
                    12540
                ],
                256
            ],
            13076: [
                [
                    12461,
                    12525
                ],
                256
            ],
            13077: [
                [
                    12461,
                    12525,
                    12464,
                    12521,
                    12512
                ],
                256
            ],
            13078: [
                [
                    12461,
                    12525,
                    12513,
                    12540,
                    12488,
                    12523
                ],
                256
            ],
            13079: [
                [
                    12461,
                    12525,
                    12527,
                    12483,
                    12488
                ],
                256
            ],
            13080: [
                [
                    12464,
                    12521,
                    12512
                ],
                256
            ],
            13081: [
                [
                    12464,
                    12521,
                    12512,
                    12488,
                    12531
                ],
                256
            ],
            13082: [
                [
                    12463,
                    12523,
                    12476,
                    12452,
                    12525
                ],
                256
            ],
            13083: [
                [
                    12463,
                    12525,
                    12540,
                    12493
                ],
                256
            ],
            13084: [
                [
                    12465,
                    12540,
                    12473
                ],
                256
            ],
            13085: [
                [
                    12467,
                    12523,
                    12490
                ],
                256
            ],
            13086: [
                [
                    12467,
                    12540,
                    12509
                ],
                256
            ],
            13087: [
                [
                    12469,
                    12452,
                    12463,
                    12523
                ],
                256
            ],
            13088: [
                [
                    12469,
                    12531,
                    12481,
                    12540,
                    12512
                ],
                256
            ],
            13089: [
                [
                    12471,
                    12522,
                    12531,
                    12464
                ],
                256
            ],
            13090: [
                [
                    12475,
                    12531,
                    12481
                ],
                256
            ],
            13091: [
                [
                    12475,
                    12531,
                    12488
                ],
                256
            ],
            13092: [
                [
                    12480,
                    12540,
                    12473
                ],
                256
            ],
            13093: [
                [
                    12487,
                    12471
                ],
                256
            ],
            13094: [
                [
                    12489,
                    12523
                ],
                256
            ],
            13095: [
                [
                    12488,
                    12531
                ],
                256
            ],
            13096: [
                [
                    12490,
                    12494
                ],
                256
            ],
            13097: [
                [
                    12494,
                    12483,
                    12488
                ],
                256
            ],
            13098: [
                [
                    12495,
                    12452,
                    12484
                ],
                256
            ],
            13099: [
                [
                    12497,
                    12540,
                    12475,
                    12531,
                    12488
                ],
                256
            ],
            13100: [
                [
                    12497,
                    12540,
                    12484
                ],
                256
            ],
            13101: [
                [
                    12496,
                    12540,
                    12524,
                    12523
                ],
                256
            ],
            13102: [
                [
                    12500,
                    12450,
                    12473,
                    12488,
                    12523
                ],
                256
            ],
            13103: [
                [
                    12500,
                    12463,
                    12523
                ],
                256
            ],
            13104: [
                [
                    12500,
                    12467
                ],
                256
            ],
            13105: [
                [
                    12499,
                    12523
                ],
                256
            ],
            13106: [
                [
                    12501,
                    12449,
                    12521,
                    12483,
                    12489
                ],
                256
            ],
            13107: [
                [
                    12501,
                    12451,
                    12540,
                    12488
                ],
                256
            ],
            13108: [
                [
                    12502,
                    12483,
                    12471,
                    12455,
                    12523
                ],
                256
            ],
            13109: [
                [
                    12501,
                    12521,
                    12531
                ],
                256
            ],
            13110: [
                [
                    12504,
                    12463,
                    12479,
                    12540,
                    12523
                ],
                256
            ],
            13111: [
                [
                    12506,
                    12477
                ],
                256
            ],
            13112: [
                [
                    12506,
                    12491,
                    12498
                ],
                256
            ],
            13113: [
                [
                    12504,
                    12523,
                    12484
                ],
                256
            ],
            13114: [
                [
                    12506,
                    12531,
                    12473
                ],
                256
            ],
            13115: [
                [
                    12506,
                    12540,
                    12472
                ],
                256
            ],
            13116: [
                [
                    12505,
                    12540,
                    12479
                ],
                256
            ],
            13117: [
                [
                    12509,
                    12452,
                    12531,
                    12488
                ],
                256
            ],
            13118: [
                [
                    12508,
                    12523,
                    12488
                ],
                256
            ],
            13119: [
                [
                    12507,
                    12531
                ],
                256
            ],
            13120: [
                [
                    12509,
                    12531,
                    12489
                ],
                256
            ],
            13121: [
                [
                    12507,
                    12540,
                    12523
                ],
                256
            ],
            13122: [
                [
                    12507,
                    12540,
                    12531
                ],
                256
            ],
            13123: [
                [
                    12510,
                    12452,
                    12463,
                    12525
                ],
                256
            ],
            13124: [
                [
                    12510,
                    12452,
                    12523
                ],
                256
            ],
            13125: [
                [
                    12510,
                    12483,
                    12495
                ],
                256
            ],
            13126: [
                [
                    12510,
                    12523,
                    12463
                ],
                256
            ],
            13127: [
                [
                    12510,
                    12531,
                    12471,
                    12519,
                    12531
                ],
                256
            ],
            13128: [
                [
                    12511,
                    12463,
                    12525,
                    12531
                ],
                256
            ],
            13129: [
                [
                    12511,
                    12522
                ],
                256
            ],
            13130: [
                [
                    12511,
                    12522,
                    12496,
                    12540,
                    12523
                ],
                256
            ],
            13131: [
                [
                    12513,
                    12460
                ],
                256
            ],
            13132: [
                [
                    12513,
                    12460,
                    12488,
                    12531
                ],
                256
            ],
            13133: [
                [
                    12513,
                    12540,
                    12488,
                    12523
                ],
                256
            ],
            13134: [
                [
                    12516,
                    12540,
                    12489
                ],
                256
            ],
            13135: [
                [
                    12516,
                    12540,
                    12523
                ],
                256
            ],
            13136: [
                [
                    12518,
                    12450,
                    12531
                ],
                256
            ],
            13137: [
                [
                    12522,
                    12483,
                    12488,
                    12523
                ],
                256
            ],
            13138: [
                [
                    12522,
                    12521
                ],
                256
            ],
            13139: [
                [
                    12523,
                    12500,
                    12540
                ],
                256
            ],
            13140: [
                [
                    12523,
                    12540,
                    12502,
                    12523
                ],
                256
            ],
            13141: [
                [
                    12524,
                    12512
                ],
                256
            ],
            13142: [
                [
                    12524,
                    12531,
                    12488,
                    12466,
                    12531
                ],
                256
            ],
            13143: [
                [
                    12527,
                    12483,
                    12488
                ],
                256
            ],
            13144: [
                [
                    48,
                    28857
                ],
                256
            ],
            13145: [
                [
                    49,
                    28857
                ],
                256
            ],
            13146: [
                [
                    50,
                    28857
                ],
                256
            ],
            13147: [
                [
                    51,
                    28857
                ],
                256
            ],
            13148: [
                [
                    52,
                    28857
                ],
                256
            ],
            13149: [
                [
                    53,
                    28857
                ],
                256
            ],
            13150: [
                [
                    54,
                    28857
                ],
                256
            ],
            13151: [
                [
                    55,
                    28857
                ],
                256
            ],
            13152: [
                [
                    56,
                    28857
                ],
                256
            ],
            13153: [
                [
                    57,
                    28857
                ],
                256
            ],
            13154: [
                [
                    49,
                    48,
                    28857
                ],
                256
            ],
            13155: [
                [
                    49,
                    49,
                    28857
                ],
                256
            ],
            13156: [
                [
                    49,
                    50,
                    28857
                ],
                256
            ],
            13157: [
                [
                    49,
                    51,
                    28857
                ],
                256
            ],
            13158: [
                [
                    49,
                    52,
                    28857
                ],
                256
            ],
            13159: [
                [
                    49,
                    53,
                    28857
                ],
                256
            ],
            13160: [
                [
                    49,
                    54,
                    28857
                ],
                256
            ],
            13161: [
                [
                    49,
                    55,
                    28857
                ],
                256
            ],
            13162: [
                [
                    49,
                    56,
                    28857
                ],
                256
            ],
            13163: [
                [
                    49,
                    57,
                    28857
                ],
                256
            ],
            13164: [
                [
                    50,
                    48,
                    28857
                ],
                256
            ],
            13165: [
                [
                    50,
                    49,
                    28857
                ],
                256
            ],
            13166: [
                [
                    50,
                    50,
                    28857
                ],
                256
            ],
            13167: [
                [
                    50,
                    51,
                    28857
                ],
                256
            ],
            13168: [
                [
                    50,
                    52,
                    28857
                ],
                256
            ],
            13169: [
                [
                    104,
                    80,
                    97
                ],
                256
            ],
            13170: [
                [
                    100,
                    97
                ],
                256
            ],
            13171: [
                [
                    65,
                    85
                ],
                256
            ],
            13172: [
                [
                    98,
                    97,
                    114
                ],
                256
            ],
            13173: [
                [
                    111,
                    86
                ],
                256
            ],
            13174: [
                [
                    112,
                    99
                ],
                256
            ],
            13175: [
                [
                    100,
                    109
                ],
                256
            ],
            13176: [
                [
                    100,
                    109,
                    178
                ],
                256
            ],
            13177: [
                [
                    100,
                    109,
                    179
                ],
                256
            ],
            13178: [
                [
                    73,
                    85
                ],
                256
            ],
            13179: [
                [
                    24179,
                    25104
                ],
                256
            ],
            13180: [
                [
                    26157,
                    21644
                ],
                256
            ],
            13181: [
                [
                    22823,
                    27491
                ],
                256
            ],
            13182: [
                [
                    26126,
                    27835
                ],
                256
            ],
            13183: [
                [
                    26666,
                    24335,
                    20250,
                    31038
                ],
                256
            ],
            13184: [
                [
                    112,
                    65
                ],
                256
            ],
            13185: [
                [
                    110,
                    65
                ],
                256
            ],
            13186: [
                [
                    956,
                    65
                ],
                256
            ],
            13187: [
                [
                    109,
                    65
                ],
                256
            ],
            13188: [
                [
                    107,
                    65
                ],
                256
            ],
            13189: [
                [
                    75,
                    66
                ],
                256
            ],
            13190: [
                [
                    77,
                    66
                ],
                256
            ],
            13191: [
                [
                    71,
                    66
                ],
                256
            ],
            13192: [
                [
                    99,
                    97,
                    108
                ],
                256
            ],
            13193: [
                [
                    107,
                    99,
                    97,
                    108
                ],
                256
            ],
            13194: [
                [
                    112,
                    70
                ],
                256
            ],
            13195: [
                [
                    110,
                    70
                ],
                256
            ],
            13196: [
                [
                    956,
                    70
                ],
                256
            ],
            13197: [
                [
                    956,
                    103
                ],
                256
            ],
            13198: [
                [
                    109,
                    103
                ],
                256
            ],
            13199: [
                [
                    107,
                    103
                ],
                256
            ],
            13200: [
                [
                    72,
                    122
                ],
                256
            ],
            13201: [
                [
                    107,
                    72,
                    122
                ],
                256
            ],
            13202: [
                [
                    77,
                    72,
                    122
                ],
                256
            ],
            13203: [
                [
                    71,
                    72,
                    122
                ],
                256
            ],
            13204: [
                [
                    84,
                    72,
                    122
                ],
                256
            ],
            13205: [
                [
                    956,
                    8467
                ],
                256
            ],
            13206: [
                [
                    109,
                    8467
                ],
                256
            ],
            13207: [
                [
                    100,
                    8467
                ],
                256
            ],
            13208: [
                [
                    107,
                    8467
                ],
                256
            ],
            13209: [
                [
                    102,
                    109
                ],
                256
            ],
            13210: [
                [
                    110,
                    109
                ],
                256
            ],
            13211: [
                [
                    956,
                    109
                ],
                256
            ],
            13212: [
                [
                    109,
                    109
                ],
                256
            ],
            13213: [
                [
                    99,
                    109
                ],
                256
            ],
            13214: [
                [
                    107,
                    109
                ],
                256
            ],
            13215: [
                [
                    109,
                    109,
                    178
                ],
                256
            ],
            13216: [
                [
                    99,
                    109,
                    178
                ],
                256
            ],
            13217: [
                [
                    109,
                    178
                ],
                256
            ],
            13218: [
                [
                    107,
                    109,
                    178
                ],
                256
            ],
            13219: [
                [
                    109,
                    109,
                    179
                ],
                256
            ],
            13220: [
                [
                    99,
                    109,
                    179
                ],
                256
            ],
            13221: [
                [
                    109,
                    179
                ],
                256
            ],
            13222: [
                [
                    107,
                    109,
                    179
                ],
                256
            ],
            13223: [
                [
                    109,
                    8725,
                    115
                ],
                256
            ],
            13224: [
                [
                    109,
                    8725,
                    115,
                    178
                ],
                256
            ],
            13225: [
                [
                    80,
                    97
                ],
                256
            ],
            13226: [
                [
                    107,
                    80,
                    97
                ],
                256
            ],
            13227: [
                [
                    77,
                    80,
                    97
                ],
                256
            ],
            13228: [
                [
                    71,
                    80,
                    97
                ],
                256
            ],
            13229: [
                [
                    114,
                    97,
                    100
                ],
                256
            ],
            13230: [
                [
                    114,
                    97,
                    100,
                    8725,
                    115
                ],
                256
            ],
            13231: [
                [
                    114,
                    97,
                    100,
                    8725,
                    115,
                    178
                ],
                256
            ],
            13232: [
                [
                    112,
                    115
                ],
                256
            ],
            13233: [
                [
                    110,
                    115
                ],
                256
            ],
            13234: [
                [
                    956,
                    115
                ],
                256
            ],
            13235: [
                [
                    109,
                    115
                ],
                256
            ],
            13236: [
                [
                    112,
                    86
                ],
                256
            ],
            13237: [
                [
                    110,
                    86
                ],
                256
            ],
            13238: [
                [
                    956,
                    86
                ],
                256
            ],
            13239: [
                [
                    109,
                    86
                ],
                256
            ],
            13240: [
                [
                    107,
                    86
                ],
                256
            ],
            13241: [
                [
                    77,
                    86
                ],
                256
            ],
            13242: [
                [
                    112,
                    87
                ],
                256
            ],
            13243: [
                [
                    110,
                    87
                ],
                256
            ],
            13244: [
                [
                    956,
                    87
                ],
                256
            ],
            13245: [
                [
                    109,
                    87
                ],
                256
            ],
            13246: [
                [
                    107,
                    87
                ],
                256
            ],
            13247: [
                [
                    77,
                    87
                ],
                256
            ],
            13248: [
                [
                    107,
                    937
                ],
                256
            ],
            13249: [
                [
                    77,
                    937
                ],
                256
            ],
            13250: [
                [
                    97,
                    46,
                    109,
                    46
                ],
                256
            ],
            13251: [
                [
                    66,
                    113
                ],
                256
            ],
            13252: [
                [
                    99,
                    99
                ],
                256
            ],
            13253: [
                [
                    99,
                    100
                ],
                256
            ],
            13254: [
                [
                    67,
                    8725,
                    107,
                    103
                ],
                256
            ],
            13255: [
                [
                    67,
                    111,
                    46
                ],
                256
            ],
            13256: [
                [
                    100,
                    66
                ],
                256
            ],
            13257: [
                [
                    71,
                    121
                ],
                256
            ],
            13258: [
                [
                    104,
                    97
                ],
                256
            ],
            13259: [
                [
                    72,
                    80
                ],
                256
            ],
            13260: [
                [
                    105,
                    110
                ],
                256
            ],
            13261: [
                [
                    75,
                    75
                ],
                256
            ],
            13262: [
                [
                    75,
                    77
                ],
                256
            ],
            13263: [
                [
                    107,
                    116
                ],
                256
            ],
            13264: [
                [
                    108,
                    109
                ],
                256
            ],
            13265: [
                [
                    108,
                    110
                ],
                256
            ],
            13266: [
                [
                    108,
                    111,
                    103
                ],
                256
            ],
            13267: [
                [
                    108,
                    120
                ],
                256
            ],
            13268: [
                [
                    109,
                    98
                ],
                256
            ],
            13269: [
                [
                    109,
                    105,
                    108
                ],
                256
            ],
            13270: [
                [
                    109,
                    111,
                    108
                ],
                256
            ],
            13271: [
                [
                    80,
                    72
                ],
                256
            ],
            13272: [
                [
                    112,
                    46,
                    109,
                    46
                ],
                256
            ],
            13273: [
                [
                    80,
                    80,
                    77
                ],
                256
            ],
            13274: [
                [
                    80,
                    82
                ],
                256
            ],
            13275: [
                [
                    115,
                    114
                ],
                256
            ],
            13276: [
                [
                    83,
                    118
                ],
                256
            ],
            13277: [
                [
                    87,
                    98
                ],
                256
            ],
            13278: [
                [
                    86,
                    8725,
                    109
                ],
                256
            ],
            13279: [
                [
                    65,
                    8725,
                    109
                ],
                256
            ],
            13280: [
                [
                    49,
                    26085
                ],
                256
            ],
            13281: [
                [
                    50,
                    26085
                ],
                256
            ],
            13282: [
                [
                    51,
                    26085
                ],
                256
            ],
            13283: [
                [
                    52,
                    26085
                ],
                256
            ],
            13284: [
                [
                    53,
                    26085
                ],
                256
            ],
            13285: [
                [
                    54,
                    26085
                ],
                256
            ],
            13286: [
                [
                    55,
                    26085
                ],
                256
            ],
            13287: [
                [
                    56,
                    26085
                ],
                256
            ],
            13288: [
                [
                    57,
                    26085
                ],
                256
            ],
            13289: [
                [
                    49,
                    48,
                    26085
                ],
                256
            ],
            13290: [
                [
                    49,
                    49,
                    26085
                ],
                256
            ],
            13291: [
                [
                    49,
                    50,
                    26085
                ],
                256
            ],
            13292: [
                [
                    49,
                    51,
                    26085
                ],
                256
            ],
            13293: [
                [
                    49,
                    52,
                    26085
                ],
                256
            ],
            13294: [
                [
                    49,
                    53,
                    26085
                ],
                256
            ],
            13295: [
                [
                    49,
                    54,
                    26085
                ],
                256
            ],
            13296: [
                [
                    49,
                    55,
                    26085
                ],
                256
            ],
            13297: [
                [
                    49,
                    56,
                    26085
                ],
                256
            ],
            13298: [
                [
                    49,
                    57,
                    26085
                ],
                256
            ],
            13299: [
                [
                    50,
                    48,
                    26085
                ],
                256
            ],
            13300: [
                [
                    50,
                    49,
                    26085
                ],
                256
            ],
            13301: [
                [
                    50,
                    50,
                    26085
                ],
                256
            ],
            13302: [
                [
                    50,
                    51,
                    26085
                ],
                256
            ],
            13303: [
                [
                    50,
                    52,
                    26085
                ],
                256
            ],
            13304: [
                [
                    50,
                    53,
                    26085
                ],
                256
            ],
            13305: [
                [
                    50,
                    54,
                    26085
                ],
                256
            ],
            13306: [
                [
                    50,
                    55,
                    26085
                ],
                256
            ],
            13307: [
                [
                    50,
                    56,
                    26085
                ],
                256
            ],
            13308: [
                [
                    50,
                    57,
                    26085
                ],
                256
            ],
            13309: [
                [
                    51,
                    48,
                    26085
                ],
                256
            ],
            13310: [
                [
                    51,
                    49,
                    26085
                ],
                256
            ],
            13311: [
                [
                    103,
                    97,
                    108
                ],
                256
            ]
        },
        27136: {
            92912: [
                ,
                1
            ],
            92913: [
                ,
                1
            ],
            92914: [
                ,
                1
            ],
            92915: [
                ,
                1
            ],
            92916: [
                ,
                1
            ]
        },
        27392: {
            92976: [
                ,
                230
            ],
            92977: [
                ,
                230
            ],
            92978: [
                ,
                230
            ],
            92979: [
                ,
                230
            ],
            92980: [
                ,
                230
            ],
            92981: [
                ,
                230
            ],
            92982: [
                ,
                230
            ]
        },
        42496: {
            42607: [
                ,
                230
            ],
            42612: [
                ,
                230
            ],
            42613: [
                ,
                230
            ],
            42614: [
                ,
                230
            ],
            42615: [
                ,
                230
            ],
            42616: [
                ,
                230
            ],
            42617: [
                ,
                230
            ],
            42618: [
                ,
                230
            ],
            42619: [
                ,
                230
            ],
            42620: [
                ,
                230
            ],
            42621: [
                ,
                230
            ],
            42652: [
                [
                    1098
                ],
                256
            ],
            42653: [
                [
                    1100
                ],
                256
            ],
            42655: [
                ,
                230
            ],
            42736: [
                ,
                230
            ],
            42737: [
                ,
                230
            ]
        },
        42752: {
            42864: [
                [
                    42863
                ],
                256
            ],
            43000: [
                [
                    294
                ],
                256
            ],
            43001: [
                [
                    339
                ],
                256
            ]
        },
        43008: {
            43014: [
                ,
                9
            ],
            43204: [
                ,
                9
            ],
            43232: [
                ,
                230
            ],
            43233: [
                ,
                230
            ],
            43234: [
                ,
                230
            ],
            43235: [
                ,
                230
            ],
            43236: [
                ,
                230
            ],
            43237: [
                ,
                230
            ],
            43238: [
                ,
                230
            ],
            43239: [
                ,
                230
            ],
            43240: [
                ,
                230
            ],
            43241: [
                ,
                230
            ],
            43242: [
                ,
                230
            ],
            43243: [
                ,
                230
            ],
            43244: [
                ,
                230
            ],
            43245: [
                ,
                230
            ],
            43246: [
                ,
                230
            ],
            43247: [
                ,
                230
            ],
            43248: [
                ,
                230
            ],
            43249: [
                ,
                230
            ]
        },
        43264: {
            43307: [
                ,
                220
            ],
            43308: [
                ,
                220
            ],
            43309: [
                ,
                220
            ],
            43347: [
                ,
                9
            ],
            43443: [
                ,
                7
            ],
            43456: [
                ,
                9
            ]
        },
        43520: {
            43696: [
                ,
                230
            ],
            43698: [
                ,
                230
            ],
            43699: [
                ,
                230
            ],
            43700: [
                ,
                220
            ],
            43703: [
                ,
                230
            ],
            43704: [
                ,
                230
            ],
            43710: [
                ,
                230
            ],
            43711: [
                ,
                230
            ],
            43713: [
                ,
                230
            ],
            43766: [
                ,
                9
            ]
        },
        43776: {
            43868: [
                [
                    42791
                ],
                256
            ],
            43869: [
                [
                    43831
                ],
                256
            ],
            43870: [
                [
                    619
                ],
                256
            ],
            43871: [
                [
                    43858
                ],
                256
            ],
            44013: [
                ,
                9
            ]
        },
        48128: {
            113822: [
                ,
                1
            ]
        },
        53504: {
            119134: [
                [
                    119127,
                    119141
                ],
                512
            ],
            119135: [
                [
                    119128,
                    119141
                ],
                512
            ],
            119136: [
                [
                    119135,
                    119150
                ],
                512
            ],
            119137: [
                [
                    119135,
                    119151
                ],
                512
            ],
            119138: [
                [
                    119135,
                    119152
                ],
                512
            ],
            119139: [
                [
                    119135,
                    119153
                ],
                512
            ],
            119140: [
                [
                    119135,
                    119154
                ],
                512
            ],
            119141: [
                ,
                216
            ],
            119142: [
                ,
                216
            ],
            119143: [
                ,
                1
            ],
            119144: [
                ,
                1
            ],
            119145: [
                ,
                1
            ],
            119149: [
                ,
                226
            ],
            119150: [
                ,
                216
            ],
            119151: [
                ,
                216
            ],
            119152: [
                ,
                216
            ],
            119153: [
                ,
                216
            ],
            119154: [
                ,
                216
            ],
            119163: [
                ,
                220
            ],
            119164: [
                ,
                220
            ],
            119165: [
                ,
                220
            ],
            119166: [
                ,
                220
            ],
            119167: [
                ,
                220
            ],
            119168: [
                ,
                220
            ],
            119169: [
                ,
                220
            ],
            119170: [
                ,
                220
            ],
            119173: [
                ,
                230
            ],
            119174: [
                ,
                230
            ],
            119175: [
                ,
                230
            ],
            119176: [
                ,
                230
            ],
            119177: [
                ,
                230
            ],
            119178: [
                ,
                220
            ],
            119179: [
                ,
                220
            ],
            119210: [
                ,
                230
            ],
            119211: [
                ,
                230
            ],
            119212: [
                ,
                230
            ],
            119213: [
                ,
                230
            ],
            119227: [
                [
                    119225,
                    119141
                ],
                512
            ],
            119228: [
                [
                    119226,
                    119141
                ],
                512
            ],
            119229: [
                [
                    119227,
                    119150
                ],
                512
            ],
            119230: [
                [
                    119228,
                    119150
                ],
                512
            ],
            119231: [
                [
                    119227,
                    119151
                ],
                512
            ],
            119232: [
                [
                    119228,
                    119151
                ],
                512
            ]
        },
        53760: {
            119362: [
                ,
                230
            ],
            119363: [
                ,
                230
            ],
            119364: [
                ,
                230
            ]
        },
        54272: {
            119808: [
                [
                    65
                ],
                256
            ],
            119809: [
                [
                    66
                ],
                256
            ],
            119810: [
                [
                    67
                ],
                256
            ],
            119811: [
                [
                    68
                ],
                256
            ],
            119812: [
                [
                    69
                ],
                256
            ],
            119813: [
                [
                    70
                ],
                256
            ],
            119814: [
                [
                    71
                ],
                256
            ],
            119815: [
                [
                    72
                ],
                256
            ],
            119816: [
                [
                    73
                ],
                256
            ],
            119817: [
                [
                    74
                ],
                256
            ],
            119818: [
                [
                    75
                ],
                256
            ],
            119819: [
                [
                    76
                ],
                256
            ],
            119820: [
                [
                    77
                ],
                256
            ],
            119821: [
                [
                    78
                ],
                256
            ],
            119822: [
                [
                    79
                ],
                256
            ],
            119823: [
                [
                    80
                ],
                256
            ],
            119824: [
                [
                    81
                ],
                256
            ],
            119825: [
                [
                    82
                ],
                256
            ],
            119826: [
                [
                    83
                ],
                256
            ],
            119827: [
                [
                    84
                ],
                256
            ],
            119828: [
                [
                    85
                ],
                256
            ],
            119829: [
                [
                    86
                ],
                256
            ],
            119830: [
                [
                    87
                ],
                256
            ],
            119831: [
                [
                    88
                ],
                256
            ],
            119832: [
                [
                    89
                ],
                256
            ],
            119833: [
                [
                    90
                ],
                256
            ],
            119834: [
                [
                    97
                ],
                256
            ],
            119835: [
                [
                    98
                ],
                256
            ],
            119836: [
                [
                    99
                ],
                256
            ],
            119837: [
                [
                    100
                ],
                256
            ],
            119838: [
                [
                    101
                ],
                256
            ],
            119839: [
                [
                    102
                ],
                256
            ],
            119840: [
                [
                    103
                ],
                256
            ],
            119841: [
                [
                    104
                ],
                256
            ],
            119842: [
                [
                    105
                ],
                256
            ],
            119843: [
                [
                    106
                ],
                256
            ],
            119844: [
                [
                    107
                ],
                256
            ],
            119845: [
                [
                    108
                ],
                256
            ],
            119846: [
                [
                    109
                ],
                256
            ],
            119847: [
                [
                    110
                ],
                256
            ],
            119848: [
                [
                    111
                ],
                256
            ],
            119849: [
                [
                    112
                ],
                256
            ],
            119850: [
                [
                    113
                ],
                256
            ],
            119851: [
                [
                    114
                ],
                256
            ],
            119852: [
                [
                    115
                ],
                256
            ],
            119853: [
                [
                    116
                ],
                256
            ],
            119854: [
                [
                    117
                ],
                256
            ],
            119855: [
                [
                    118
                ],
                256
            ],
            119856: [
                [
                    119
                ],
                256
            ],
            119857: [
                [
                    120
                ],
                256
            ],
            119858: [
                [
                    121
                ],
                256
            ],
            119859: [
                [
                    122
                ],
                256
            ],
            119860: [
                [
                    65
                ],
                256
            ],
            119861: [
                [
                    66
                ],
                256
            ],
            119862: [
                [
                    67
                ],
                256
            ],
            119863: [
                [
                    68
                ],
                256
            ],
            119864: [
                [
                    69
                ],
                256
            ],
            119865: [
                [
                    70
                ],
                256
            ],
            119866: [
                [
                    71
                ],
                256
            ],
            119867: [
                [
                    72
                ],
                256
            ],
            119868: [
                [
                    73
                ],
                256
            ],
            119869: [
                [
                    74
                ],
                256
            ],
            119870: [
                [
                    75
                ],
                256
            ],
            119871: [
                [
                    76
                ],
                256
            ],
            119872: [
                [
                    77
                ],
                256
            ],
            119873: [
                [
                    78
                ],
                256
            ],
            119874: [
                [
                    79
                ],
                256
            ],
            119875: [
                [
                    80
                ],
                256
            ],
            119876: [
                [
                    81
                ],
                256
            ],
            119877: [
                [
                    82
                ],
                256
            ],
            119878: [
                [
                    83
                ],
                256
            ],
            119879: [
                [
                    84
                ],
                256
            ],
            119880: [
                [
                    85
                ],
                256
            ],
            119881: [
                [
                    86
                ],
                256
            ],
            119882: [
                [
                    87
                ],
                256
            ],
            119883: [
                [
                    88
                ],
                256
            ],
            119884: [
                [
                    89
                ],
                256
            ],
            119885: [
                [
                    90
                ],
                256
            ],
            119886: [
                [
                    97
                ],
                256
            ],
            119887: [
                [
                    98
                ],
                256
            ],
            119888: [
                [
                    99
                ],
                256
            ],
            119889: [
                [
                    100
                ],
                256
            ],
            119890: [
                [
                    101
                ],
                256
            ],
            119891: [
                [
                    102
                ],
                256
            ],
            119892: [
                [
                    103
                ],
                256
            ],
            119894: [
                [
                    105
                ],
                256
            ],
            119895: [
                [
                    106
                ],
                256
            ],
            119896: [
                [
                    107
                ],
                256
            ],
            119897: [
                [
                    108
                ],
                256
            ],
            119898: [
                [
                    109
                ],
                256
            ],
            119899: [
                [
                    110
                ],
                256
            ],
            119900: [
                [
                    111
                ],
                256
            ],
            119901: [
                [
                    112
                ],
                256
            ],
            119902: [
                [
                    113
                ],
                256
            ],
            119903: [
                [
                    114
                ],
                256
            ],
            119904: [
                [
                    115
                ],
                256
            ],
            119905: [
                [
                    116
                ],
                256
            ],
            119906: [
                [
                    117
                ],
                256
            ],
            119907: [
                [
                    118
                ],
                256
            ],
            119908: [
                [
                    119
                ],
                256
            ],
            119909: [
                [
                    120
                ],
                256
            ],
            119910: [
                [
                    121
                ],
                256
            ],
            119911: [
                [
                    122
                ],
                256
            ],
            119912: [
                [
                    65
                ],
                256
            ],
            119913: [
                [
                    66
                ],
                256
            ],
            119914: [
                [
                    67
                ],
                256
            ],
            119915: [
                [
                    68
                ],
                256
            ],
            119916: [
                [
                    69
                ],
                256
            ],
            119917: [
                [
                    70
                ],
                256
            ],
            119918: [
                [
                    71
                ],
                256
            ],
            119919: [
                [
                    72
                ],
                256
            ],
            119920: [
                [
                    73
                ],
                256
            ],
            119921: [
                [
                    74
                ],
                256
            ],
            119922: [
                [
                    75
                ],
                256
            ],
            119923: [
                [
                    76
                ],
                256
            ],
            119924: [
                [
                    77
                ],
                256
            ],
            119925: [
                [
                    78
                ],
                256
            ],
            119926: [
                [
                    79
                ],
                256
            ],
            119927: [
                [
                    80
                ],
                256
            ],
            119928: [
                [
                    81
                ],
                256
            ],
            119929: [
                [
                    82
                ],
                256
            ],
            119930: [
                [
                    83
                ],
                256
            ],
            119931: [
                [
                    84
                ],
                256
            ],
            119932: [
                [
                    85
                ],
                256
            ],
            119933: [
                [
                    86
                ],
                256
            ],
            119934: [
                [
                    87
                ],
                256
            ],
            119935: [
                [
                    88
                ],
                256
            ],
            119936: [
                [
                    89
                ],
                256
            ],
            119937: [
                [
                    90
                ],
                256
            ],
            119938: [
                [
                    97
                ],
                256
            ],
            119939: [
                [
                    98
                ],
                256
            ],
            119940: [
                [
                    99
                ],
                256
            ],
            119941: [
                [
                    100
                ],
                256
            ],
            119942: [
                [
                    101
                ],
                256
            ],
            119943: [
                [
                    102
                ],
                256
            ],
            119944: [
                [
                    103
                ],
                256
            ],
            119945: [
                [
                    104
                ],
                256
            ],
            119946: [
                [
                    105
                ],
                256
            ],
            119947: [
                [
                    106
                ],
                256
            ],
            119948: [
                [
                    107
                ],
                256
            ],
            119949: [
                [
                    108
                ],
                256
            ],
            119950: [
                [
                    109
                ],
                256
            ],
            119951: [
                [
                    110
                ],
                256
            ],
            119952: [
                [
                    111
                ],
                256
            ],
            119953: [
                [
                    112
                ],
                256
            ],
            119954: [
                [
                    113
                ],
                256
            ],
            119955: [
                [
                    114
                ],
                256
            ],
            119956: [
                [
                    115
                ],
                256
            ],
            119957: [
                [
                    116
                ],
                256
            ],
            119958: [
                [
                    117
                ],
                256
            ],
            119959: [
                [
                    118
                ],
                256
            ],
            119960: [
                [
                    119
                ],
                256
            ],
            119961: [
                [
                    120
                ],
                256
            ],
            119962: [
                [
                    121
                ],
                256
            ],
            119963: [
                [
                    122
                ],
                256
            ],
            119964: [
                [
                    65
                ],
                256
            ],
            119966: [
                [
                    67
                ],
                256
            ],
            119967: [
                [
                    68
                ],
                256
            ],
            119970: [
                [
                    71
                ],
                256
            ],
            119973: [
                [
                    74
                ],
                256
            ],
            119974: [
                [
                    75
                ],
                256
            ],
            119977: [
                [
                    78
                ],
                256
            ],
            119978: [
                [
                    79
                ],
                256
            ],
            119979: [
                [
                    80
                ],
                256
            ],
            119980: [
                [
                    81
                ],
                256
            ],
            119982: [
                [
                    83
                ],
                256
            ],
            119983: [
                [
                    84
                ],
                256
            ],
            119984: [
                [
                    85
                ],
                256
            ],
            119985: [
                [
                    86
                ],
                256
            ],
            119986: [
                [
                    87
                ],
                256
            ],
            119987: [
                [
                    88
                ],
                256
            ],
            119988: [
                [
                    89
                ],
                256
            ],
            119989: [
                [
                    90
                ],
                256
            ],
            119990: [
                [
                    97
                ],
                256
            ],
            119991: [
                [
                    98
                ],
                256
            ],
            119992: [
                [
                    99
                ],
                256
            ],
            119993: [
                [
                    100
                ],
                256
            ],
            119995: [
                [
                    102
                ],
                256
            ],
            119997: [
                [
                    104
                ],
                256
            ],
            119998: [
                [
                    105
                ],
                256
            ],
            119999: [
                [
                    106
                ],
                256
            ],
            120000: [
                [
                    107
                ],
                256
            ],
            120001: [
                [
                    108
                ],
                256
            ],
            120002: [
                [
                    109
                ],
                256
            ],
            120003: [
                [
                    110
                ],
                256
            ],
            120005: [
                [
                    112
                ],
                256
            ],
            120006: [
                [
                    113
                ],
                256
            ],
            120007: [
                [
                    114
                ],
                256
            ],
            120008: [
                [
                    115
                ],
                256
            ],
            120009: [
                [
                    116
                ],
                256
            ],
            120010: [
                [
                    117
                ],
                256
            ],
            120011: [
                [
                    118
                ],
                256
            ],
            120012: [
                [
                    119
                ],
                256
            ],
            120013: [
                [
                    120
                ],
                256
            ],
            120014: [
                [
                    121
                ],
                256
            ],
            120015: [
                [
                    122
                ],
                256
            ],
            120016: [
                [
                    65
                ],
                256
            ],
            120017: [
                [
                    66
                ],
                256
            ],
            120018: [
                [
                    67
                ],
                256
            ],
            120019: [
                [
                    68
                ],
                256
            ],
            120020: [
                [
                    69
                ],
                256
            ],
            120021: [
                [
                    70
                ],
                256
            ],
            120022: [
                [
                    71
                ],
                256
            ],
            120023: [
                [
                    72
                ],
                256
            ],
            120024: [
                [
                    73
                ],
                256
            ],
            120025: [
                [
                    74
                ],
                256
            ],
            120026: [
                [
                    75
                ],
                256
            ],
            120027: [
                [
                    76
                ],
                256
            ],
            120028: [
                [
                    77
                ],
                256
            ],
            120029: [
                [
                    78
                ],
                256
            ],
            120030: [
                [
                    79
                ],
                256
            ],
            120031: [
                [
                    80
                ],
                256
            ],
            120032: [
                [
                    81
                ],
                256
            ],
            120033: [
                [
                    82
                ],
                256
            ],
            120034: [
                [
                    83
                ],
                256
            ],
            120035: [
                [
                    84
                ],
                256
            ],
            120036: [
                [
                    85
                ],
                256
            ],
            120037: [
                [
                    86
                ],
                256
            ],
            120038: [
                [
                    87
                ],
                256
            ],
            120039: [
                [
                    88
                ],
                256
            ],
            120040: [
                [
                    89
                ],
                256
            ],
            120041: [
                [
                    90
                ],
                256
            ],
            120042: [
                [
                    97
                ],
                256
            ],
            120043: [
                [
                    98
                ],
                256
            ],
            120044: [
                [
                    99
                ],
                256
            ],
            120045: [
                [
                    100
                ],
                256
            ],
            120046: [
                [
                    101
                ],
                256
            ],
            120047: [
                [
                    102
                ],
                256
            ],
            120048: [
                [
                    103
                ],
                256
            ],
            120049: [
                [
                    104
                ],
                256
            ],
            120050: [
                [
                    105
                ],
                256
            ],
            120051: [
                [
                    106
                ],
                256
            ],
            120052: [
                [
                    107
                ],
                256
            ],
            120053: [
                [
                    108
                ],
                256
            ],
            120054: [
                [
                    109
                ],
                256
            ],
            120055: [
                [
                    110
                ],
                256
            ],
            120056: [
                [
                    111
                ],
                256
            ],
            120057: [
                [
                    112
                ],
                256
            ],
            120058: [
                [
                    113
                ],
                256
            ],
            120059: [
                [
                    114
                ],
                256
            ],
            120060: [
                [
                    115
                ],
                256
            ],
            120061: [
                [
                    116
                ],
                256
            ],
            120062: [
                [
                    117
                ],
                256
            ],
            120063: [
                [
                    118
                ],
                256
            ]
        },
        54528: {
            120064: [
                [
                    119
                ],
                256
            ],
            120065: [
                [
                    120
                ],
                256
            ],
            120066: [
                [
                    121
                ],
                256
            ],
            120067: [
                [
                    122
                ],
                256
            ],
            120068: [
                [
                    65
                ],
                256
            ],
            120069: [
                [
                    66
                ],
                256
            ],
            120071: [
                [
                    68
                ],
                256
            ],
            120072: [
                [
                    69
                ],
                256
            ],
            120073: [
                [
                    70
                ],
                256
            ],
            120074: [
                [
                    71
                ],
                256
            ],
            120077: [
                [
                    74
                ],
                256
            ],
            120078: [
                [
                    75
                ],
                256
            ],
            120079: [
                [
                    76
                ],
                256
            ],
            120080: [
                [
                    77
                ],
                256
            ],
            120081: [
                [
                    78
                ],
                256
            ],
            120082: [
                [
                    79
                ],
                256
            ],
            120083: [
                [
                    80
                ],
                256
            ],
            120084: [
                [
                    81
                ],
                256
            ],
            120086: [
                [
                    83
                ],
                256
            ],
            120087: [
                [
                    84
                ],
                256
            ],
            120088: [
                [
                    85
                ],
                256
            ],
            120089: [
                [
                    86
                ],
                256
            ],
            120090: [
                [
                    87
                ],
                256
            ],
            120091: [
                [
                    88
                ],
                256
            ],
            120092: [
                [
                    89
                ],
                256
            ],
            120094: [
                [
                    97
                ],
                256
            ],
            120095: [
                [
                    98
                ],
                256
            ],
            120096: [
                [
                    99
                ],
                256
            ],
            120097: [
                [
                    100
                ],
                256
            ],
            120098: [
                [
                    101
                ],
                256
            ],
            120099: [
                [
                    102
                ],
                256
            ],
            120100: [
                [
                    103
                ],
                256
            ],
            120101: [
                [
                    104
                ],
                256
            ],
            120102: [
                [
                    105
                ],
                256
            ],
            120103: [
                [
                    106
                ],
                256
            ],
            120104: [
                [
                    107
                ],
                256
            ],
            120105: [
                [
                    108
                ],
                256
            ],
            120106: [
                [
                    109
                ],
                256
            ],
            120107: [
                [
                    110
                ],
                256
            ],
            120108: [
                [
                    111
                ],
                256
            ],
            120109: [
                [
                    112
                ],
                256
            ],
            120110: [
                [
                    113
                ],
                256
            ],
            120111: [
                [
                    114
                ],
                256
            ],
            120112: [
                [
                    115
                ],
                256
            ],
            120113: [
                [
                    116
                ],
                256
            ],
            120114: [
                [
                    117
                ],
                256
            ],
            120115: [
                [
                    118
                ],
                256
            ],
            120116: [
                [
                    119
                ],
                256
            ],
            120117: [
                [
                    120
                ],
                256
            ],
            120118: [
                [
                    121
                ],
                256
            ],
            120119: [
                [
                    122
                ],
                256
            ],
            120120: [
                [
                    65
                ],
                256
            ],
            120121: [
                [
                    66
                ],
                256
            ],
            120123: [
                [
                    68
                ],
                256
            ],
            120124: [
                [
                    69
                ],
                256
            ],
            120125: [
                [
                    70
                ],
                256
            ],
            120126: [
                [
                    71
                ],
                256
            ],
            120128: [
                [
                    73
                ],
                256
            ],
            120129: [
                [
                    74
                ],
                256
            ],
            120130: [
                [
                    75
                ],
                256
            ],
            120131: [
                [
                    76
                ],
                256
            ],
            120132: [
                [
                    77
                ],
                256
            ],
            120134: [
                [
                    79
                ],
                256
            ],
            120138: [
                [
                    83
                ],
                256
            ],
            120139: [
                [
                    84
                ],
                256
            ],
            120140: [
                [
                    85
                ],
                256
            ],
            120141: [
                [
                    86
                ],
                256
            ],
            120142: [
                [
                    87
                ],
                256
            ],
            120143: [
                [
                    88
                ],
                256
            ],
            120144: [
                [
                    89
                ],
                256
            ],
            120146: [
                [
                    97
                ],
                256
            ],
            120147: [
                [
                    98
                ],
                256
            ],
            120148: [
                [
                    99
                ],
                256
            ],
            120149: [
                [
                    100
                ],
                256
            ],
            120150: [
                [
                    101
                ],
                256
            ],
            120151: [
                [
                    102
                ],
                256
            ],
            120152: [
                [
                    103
                ],
                256
            ],
            120153: [
                [
                    104
                ],
                256
            ],
            120154: [
                [
                    105
                ],
                256
            ],
            120155: [
                [
                    106
                ],
                256
            ],
            120156: [
                [
                    107
                ],
                256
            ],
            120157: [
                [
                    108
                ],
                256
            ],
            120158: [
                [
                    109
                ],
                256
            ],
            120159: [
                [
                    110
                ],
                256
            ],
            120160: [
                [
                    111
                ],
                256
            ],
            120161: [
                [
                    112
                ],
                256
            ],
            120162: [
                [
                    113
                ],
                256
            ],
            120163: [
                [
                    114
                ],
                256
            ],
            120164: [
                [
                    115
                ],
                256
            ],
            120165: [
                [
                    116
                ],
                256
            ],
            120166: [
                [
                    117
                ],
                256
            ],
            120167: [
                [
                    118
                ],
                256
            ],
            120168: [
                [
                    119
                ],
                256
            ],
            120169: [
                [
                    120
                ],
                256
            ],
            120170: [
                [
                    121
                ],
                256
            ],
            120171: [
                [
                    122
                ],
                256
            ],
            120172: [
                [
                    65
                ],
                256
            ],
            120173: [
                [
                    66
                ],
                256
            ],
            120174: [
                [
                    67
                ],
                256
            ],
            120175: [
                [
                    68
                ],
                256
            ],
            120176: [
                [
                    69
                ],
                256
            ],
            120177: [
                [
                    70
                ],
                256
            ],
            120178: [
                [
                    71
                ],
                256
            ],
            120179: [
                [
                    72
                ],
                256
            ],
            120180: [
                [
                    73
                ],
                256
            ],
            120181: [
                [
                    74
                ],
                256
            ],
            120182: [
                [
                    75
                ],
                256
            ],
            120183: [
                [
                    76
                ],
                256
            ],
            120184: [
                [
                    77
                ],
                256
            ],
            120185: [
                [
                    78
                ],
                256
            ],
            120186: [
                [
                    79
                ],
                256
            ],
            120187: [
                [
                    80
                ],
                256
            ],
            120188: [
                [
                    81
                ],
                256
            ],
            120189: [
                [
                    82
                ],
                256
            ],
            120190: [
                [
                    83
                ],
                256
            ],
            120191: [
                [
                    84
                ],
                256
            ],
            120192: [
                [
                    85
                ],
                256
            ],
            120193: [
                [
                    86
                ],
                256
            ],
            120194: [
                [
                    87
                ],
                256
            ],
            120195: [
                [
                    88
                ],
                256
            ],
            120196: [
                [
                    89
                ],
                256
            ],
            120197: [
                [
                    90
                ],
                256
            ],
            120198: [
                [
                    97
                ],
                256
            ],
            120199: [
                [
                    98
                ],
                256
            ],
            120200: [
                [
                    99
                ],
                256
            ],
            120201: [
                [
                    100
                ],
                256
            ],
            120202: [
                [
                    101
                ],
                256
            ],
            120203: [
                [
                    102
                ],
                256
            ],
            120204: [
                [
                    103
                ],
                256
            ],
            120205: [
                [
                    104
                ],
                256
            ],
            120206: [
                [
                    105
                ],
                256
            ],
            120207: [
                [
                    106
                ],
                256
            ],
            120208: [
                [
                    107
                ],
                256
            ],
            120209: [
                [
                    108
                ],
                256
            ],
            120210: [
                [
                    109
                ],
                256
            ],
            120211: [
                [
                    110
                ],
                256
            ],
            120212: [
                [
                    111
                ],
                256
            ],
            120213: [
                [
                    112
                ],
                256
            ],
            120214: [
                [
                    113
                ],
                256
            ],
            120215: [
                [
                    114
                ],
                256
            ],
            120216: [
                [
                    115
                ],
                256
            ],
            120217: [
                [
                    116
                ],
                256
            ],
            120218: [
                [
                    117
                ],
                256
            ],
            120219: [
                [
                    118
                ],
                256
            ],
            120220: [
                [
                    119
                ],
                256
            ],
            120221: [
                [
                    120
                ],
                256
            ],
            120222: [
                [
                    121
                ],
                256
            ],
            120223: [
                [
                    122
                ],
                256
            ],
            120224: [
                [
                    65
                ],
                256
            ],
            120225: [
                [
                    66
                ],
                256
            ],
            120226: [
                [
                    67
                ],
                256
            ],
            120227: [
                [
                    68
                ],
                256
            ],
            120228: [
                [
                    69
                ],
                256
            ],
            120229: [
                [
                    70
                ],
                256
            ],
            120230: [
                [
                    71
                ],
                256
            ],
            120231: [
                [
                    72
                ],
                256
            ],
            120232: [
                [
                    73
                ],
                256
            ],
            120233: [
                [
                    74
                ],
                256
            ],
            120234: [
                [
                    75
                ],
                256
            ],
            120235: [
                [
                    76
                ],
                256
            ],
            120236: [
                [
                    77
                ],
                256
            ],
            120237: [
                [
                    78
                ],
                256
            ],
            120238: [
                [
                    79
                ],
                256
            ],
            120239: [
                [
                    80
                ],
                256
            ],
            120240: [
                [
                    81
                ],
                256
            ],
            120241: [
                [
                    82
                ],
                256
            ],
            120242: [
                [
                    83
                ],
                256
            ],
            120243: [
                [
                    84
                ],
                256
            ],
            120244: [
                [
                    85
                ],
                256
            ],
            120245: [
                [
                    86
                ],
                256
            ],
            120246: [
                [
                    87
                ],
                256
            ],
            120247: [
                [
                    88
                ],
                256
            ],
            120248: [
                [
                    89
                ],
                256
            ],
            120249: [
                [
                    90
                ],
                256
            ],
            120250: [
                [
                    97
                ],
                256
            ],
            120251: [
                [
                    98
                ],
                256
            ],
            120252: [
                [
                    99
                ],
                256
            ],
            120253: [
                [
                    100
                ],
                256
            ],
            120254: [
                [
                    101
                ],
                256
            ],
            120255: [
                [
                    102
                ],
                256
            ],
            120256: [
                [
                    103
                ],
                256
            ],
            120257: [
                [
                    104
                ],
                256
            ],
            120258: [
                [
                    105
                ],
                256
            ],
            120259: [
                [
                    106
                ],
                256
            ],
            120260: [
                [
                    107
                ],
                256
            ],
            120261: [
                [
                    108
                ],
                256
            ],
            120262: [
                [
                    109
                ],
                256
            ],
            120263: [
                [
                    110
                ],
                256
            ],
            120264: [
                [
                    111
                ],
                256
            ],
            120265: [
                [
                    112
                ],
                256
            ],
            120266: [
                [
                    113
                ],
                256
            ],
            120267: [
                [
                    114
                ],
                256
            ],
            120268: [
                [
                    115
                ],
                256
            ],
            120269: [
                [
                    116
                ],
                256
            ],
            120270: [
                [
                    117
                ],
                256
            ],
            120271: [
                [
                    118
                ],
                256
            ],
            120272: [
                [
                    119
                ],
                256
            ],
            120273: [
                [
                    120
                ],
                256
            ],
            120274: [
                [
                    121
                ],
                256
            ],
            120275: [
                [
                    122
                ],
                256
            ],
            120276: [
                [
                    65
                ],
                256
            ],
            120277: [
                [
                    66
                ],
                256
            ],
            120278: [
                [
                    67
                ],
                256
            ],
            120279: [
                [
                    68
                ],
                256
            ],
            120280: [
                [
                    69
                ],
                256
            ],
            120281: [
                [
                    70
                ],
                256
            ],
            120282: [
                [
                    71
                ],
                256
            ],
            120283: [
                [
                    72
                ],
                256
            ],
            120284: [
                [
                    73
                ],
                256
            ],
            120285: [
                [
                    74
                ],
                256
            ],
            120286: [
                [
                    75
                ],
                256
            ],
            120287: [
                [
                    76
                ],
                256
            ],
            120288: [
                [
                    77
                ],
                256
            ],
            120289: [
                [
                    78
                ],
                256
            ],
            120290: [
                [
                    79
                ],
                256
            ],
            120291: [
                [
                    80
                ],
                256
            ],
            120292: [
                [
                    81
                ],
                256
            ],
            120293: [
                [
                    82
                ],
                256
            ],
            120294: [
                [
                    83
                ],
                256
            ],
            120295: [
                [
                    84
                ],
                256
            ],
            120296: [
                [
                    85
                ],
                256
            ],
            120297: [
                [
                    86
                ],
                256
            ],
            120298: [
                [
                    87
                ],
                256
            ],
            120299: [
                [
                    88
                ],
                256
            ],
            120300: [
                [
                    89
                ],
                256
            ],
            120301: [
                [
                    90
                ],
                256
            ],
            120302: [
                [
                    97
                ],
                256
            ],
            120303: [
                [
                    98
                ],
                256
            ],
            120304: [
                [
                    99
                ],
                256
            ],
            120305: [
                [
                    100
                ],
                256
            ],
            120306: [
                [
                    101
                ],
                256
            ],
            120307: [
                [
                    102
                ],
                256
            ],
            120308: [
                [
                    103
                ],
                256
            ],
            120309: [
                [
                    104
                ],
                256
            ],
            120310: [
                [
                    105
                ],
                256
            ],
            120311: [
                [
                    106
                ],
                256
            ],
            120312: [
                [
                    107
                ],
                256
            ],
            120313: [
                [
                    108
                ],
                256
            ],
            120314: [
                [
                    109
                ],
                256
            ],
            120315: [
                [
                    110
                ],
                256
            ],
            120316: [
                [
                    111
                ],
                256
            ],
            120317: [
                [
                    112
                ],
                256
            ],
            120318: [
                [
                    113
                ],
                256
            ],
            120319: [
                [
                    114
                ],
                256
            ]
        },
        54784: {
            120320: [
                [
                    115
                ],
                256
            ],
            120321: [
                [
                    116
                ],
                256
            ],
            120322: [
                [
                    117
                ],
                256
            ],
            120323: [
                [
                    118
                ],
                256
            ],
            120324: [
                [
                    119
                ],
                256
            ],
            120325: [
                [
                    120
                ],
                256
            ],
            120326: [
                [
                    121
                ],
                256
            ],
            120327: [
                [
                    122
                ],
                256
            ],
            120328: [
                [
                    65
                ],
                256
            ],
            120329: [
                [
                    66
                ],
                256
            ],
            120330: [
                [
                    67
                ],
                256
            ],
            120331: [
                [
                    68
                ],
                256
            ],
            120332: [
                [
                    69
                ],
                256
            ],
            120333: [
                [
                    70
                ],
                256
            ],
            120334: [
                [
                    71
                ],
                256
            ],
            120335: [
                [
                    72
                ],
                256
            ],
            120336: [
                [
                    73
                ],
                256
            ],
            120337: [
                [
                    74
                ],
                256
            ],
            120338: [
                [
                    75
                ],
                256
            ],
            120339: [
                [
                    76
                ],
                256
            ],
            120340: [
                [
                    77
                ],
                256
            ],
            120341: [
                [
                    78
                ],
                256
            ],
            120342: [
                [
                    79
                ],
                256
            ],
            120343: [
                [
                    80
                ],
                256
            ],
            120344: [
                [
                    81
                ],
                256
            ],
            120345: [
                [
                    82
                ],
                256
            ],
            120346: [
                [
                    83
                ],
                256
            ],
            120347: [
                [
                    84
                ],
                256
            ],
            120348: [
                [
                    85
                ],
                256
            ],
            120349: [
                [
                    86
                ],
                256
            ],
            120350: [
                [
                    87
                ],
                256
            ],
            120351: [
                [
                    88
                ],
                256
            ],
            120352: [
                [
                    89
                ],
                256
            ],
            120353: [
                [
                    90
                ],
                256
            ],
            120354: [
                [
                    97
                ],
                256
            ],
            120355: [
                [
                    98
                ],
                256
            ],
            120356: [
                [
                    99
                ],
                256
            ],
            120357: [
                [
                    100
                ],
                256
            ],
            120358: [
                [
                    101
                ],
                256
            ],
            120359: [
                [
                    102
                ],
                256
            ],
            120360: [
                [
                    103
                ],
                256
            ],
            120361: [
                [
                    104
                ],
                256
            ],
            120362: [
                [
                    105
                ],
                256
            ],
            120363: [
                [
                    106
                ],
                256
            ],
            120364: [
                [
                    107
                ],
                256
            ],
            120365: [
                [
                    108
                ],
                256
            ],
            120366: [
                [
                    109
                ],
                256
            ],
            120367: [
                [
                    110
                ],
                256
            ],
            120368: [
                [
                    111
                ],
                256
            ],
            120369: [
                [
                    112
                ],
                256
            ],
            120370: [
                [
                    113
                ],
                256
            ],
            120371: [
                [
                    114
                ],
                256
            ],
            120372: [
                [
                    115
                ],
                256
            ],
            120373: [
                [
                    116
                ],
                256
            ],
            120374: [
                [
                    117
                ],
                256
            ],
            120375: [
                [
                    118
                ],
                256
            ],
            120376: [
                [
                    119
                ],
                256
            ],
            120377: [
                [
                    120
                ],
                256
            ],
            120378: [
                [
                    121
                ],
                256
            ],
            120379: [
                [
                    122
                ],
                256
            ],
            120380: [
                [
                    65
                ],
                256
            ],
            120381: [
                [
                    66
                ],
                256
            ],
            120382: [
                [
                    67
                ],
                256
            ],
            120383: [
                [
                    68
                ],
                256
            ],
            120384: [
                [
                    69
                ],
                256
            ],
            120385: [
                [
                    70
                ],
                256
            ],
            120386: [
                [
                    71
                ],
                256
            ],
            120387: [
                [
                    72
                ],
                256
            ],
            120388: [
                [
                    73
                ],
                256
            ],
            120389: [
                [
                    74
                ],
                256
            ],
            120390: [
                [
                    75
                ],
                256
            ],
            120391: [
                [
                    76
                ],
                256
            ],
            120392: [
                [
                    77
                ],
                256
            ],
            120393: [
                [
                    78
                ],
                256
            ],
            120394: [
                [
                    79
                ],
                256
            ],
            120395: [
                [
                    80
                ],
                256
            ],
            120396: [
                [
                    81
                ],
                256
            ],
            120397: [
                [
                    82
                ],
                256
            ],
            120398: [
                [
                    83
                ],
                256
            ],
            120399: [
                [
                    84
                ],
                256
            ],
            120400: [
                [
                    85
                ],
                256
            ],
            120401: [
                [
                    86
                ],
                256
            ],
            120402: [
                [
                    87
                ],
                256
            ],
            120403: [
                [
                    88
                ],
                256
            ],
            120404: [
                [
                    89
                ],
                256
            ],
            120405: [
                [
                    90
                ],
                256
            ],
            120406: [
                [
                    97
                ],
                256
            ],
            120407: [
                [
                    98
                ],
                256
            ],
            120408: [
                [
                    99
                ],
                256
            ],
            120409: [
                [
                    100
                ],
                256
            ],
            120410: [
                [
                    101
                ],
                256
            ],
            120411: [
                [
                    102
                ],
                256
            ],
            120412: [
                [
                    103
                ],
                256
            ],
            120413: [
                [
                    104
                ],
                256
            ],
            120414: [
                [
                    105
                ],
                256
            ],
            120415: [
                [
                    106
                ],
                256
            ],
            120416: [
                [
                    107
                ],
                256
            ],
            120417: [
                [
                    108
                ],
                256
            ],
            120418: [
                [
                    109
                ],
                256
            ],
            120419: [
                [
                    110
                ],
                256
            ],
            120420: [
                [
                    111
                ],
                256
            ],
            120421: [
                [
                    112
                ],
                256
            ],
            120422: [
                [
                    113
                ],
                256
            ],
            120423: [
                [
                    114
                ],
                256
            ],
            120424: [
                [
                    115
                ],
                256
            ],
            120425: [
                [
                    116
                ],
                256
            ],
            120426: [
                [
                    117
                ],
                256
            ],
            120427: [
                [
                    118
                ],
                256
            ],
            120428: [
                [
                    119
                ],
                256
            ],
            120429: [
                [
                    120
                ],
                256
            ],
            120430: [
                [
                    121
                ],
                256
            ],
            120431: [
                [
                    122
                ],
                256
            ],
            120432: [
                [
                    65
                ],
                256
            ],
            120433: [
                [
                    66
                ],
                256
            ],
            120434: [
                [
                    67
                ],
                256
            ],
            120435: [
                [
                    68
                ],
                256
            ],
            120436: [
                [
                    69
                ],
                256
            ],
            120437: [
                [
                    70
                ],
                256
            ],
            120438: [
                [
                    71
                ],
                256
            ],
            120439: [
                [
                    72
                ],
                256
            ],
            120440: [
                [
                    73
                ],
                256
            ],
            120441: [
                [
                    74
                ],
                256
            ],
            120442: [
                [
                    75
                ],
                256
            ],
            120443: [
                [
                    76
                ],
                256
            ],
            120444: [
                [
                    77
                ],
                256
            ],
            120445: [
                [
                    78
                ],
                256
            ],
            120446: [
                [
                    79
                ],
                256
            ],
            120447: [
                [
                    80
                ],
                256
            ],
            120448: [
                [
                    81
                ],
                256
            ],
            120449: [
                [
                    82
                ],
                256
            ],
            120450: [
                [
                    83
                ],
                256
            ],
            120451: [
                [
                    84
                ],
                256
            ],
            120452: [
                [
                    85
                ],
                256
            ],
            120453: [
                [
                    86
                ],
                256
            ],
            120454: [
                [
                    87
                ],
                256
            ],
            120455: [
                [
                    88
                ],
                256
            ],
            120456: [
                [
                    89
                ],
                256
            ],
            120457: [
                [
                    90
                ],
                256
            ],
            120458: [
                [
                    97
                ],
                256
            ],
            120459: [
                [
                    98
                ],
                256
            ],
            120460: [
                [
                    99
                ],
                256
            ],
            120461: [
                [
                    100
                ],
                256
            ],
            120462: [
                [
                    101
                ],
                256
            ],
            120463: [
                [
                    102
                ],
                256
            ],
            120464: [
                [
                    103
                ],
                256
            ],
            120465: [
                [
                    104
                ],
                256
            ],
            120466: [
                [
                    105
                ],
                256
            ],
            120467: [
                [
                    106
                ],
                256
            ],
            120468: [
                [
                    107
                ],
                256
            ],
            120469: [
                [
                    108
                ],
                256
            ],
            120470: [
                [
                    109
                ],
                256
            ],
            120471: [
                [
                    110
                ],
                256
            ],
            120472: [
                [
                    111
                ],
                256
            ],
            120473: [
                [
                    112
                ],
                256
            ],
            120474: [
                [
                    113
                ],
                256
            ],
            120475: [
                [
                    114
                ],
                256
            ],
            120476: [
                [
                    115
                ],
                256
            ],
            120477: [
                [
                    116
                ],
                256
            ],
            120478: [
                [
                    117
                ],
                256
            ],
            120479: [
                [
                    118
                ],
                256
            ],
            120480: [
                [
                    119
                ],
                256
            ],
            120481: [
                [
                    120
                ],
                256
            ],
            120482: [
                [
                    121
                ],
                256
            ],
            120483: [
                [
                    122
                ],
                256
            ],
            120484: [
                [
                    305
                ],
                256
            ],
            120485: [
                [
                    567
                ],
                256
            ],
            120488: [
                [
                    913
                ],
                256
            ],
            120489: [
                [
                    914
                ],
                256
            ],
            120490: [
                [
                    915
                ],
                256
            ],
            120491: [
                [
                    916
                ],
                256
            ],
            120492: [
                [
                    917
                ],
                256
            ],
            120493: [
                [
                    918
                ],
                256
            ],
            120494: [
                [
                    919
                ],
                256
            ],
            120495: [
                [
                    920
                ],
                256
            ],
            120496: [
                [
                    921
                ],
                256
            ],
            120497: [
                [
                    922
                ],
                256
            ],
            120498: [
                [
                    923
                ],
                256
            ],
            120499: [
                [
                    924
                ],
                256
            ],
            120500: [
                [
                    925
                ],
                256
            ],
            120501: [
                [
                    926
                ],
                256
            ],
            120502: [
                [
                    927
                ],
                256
            ],
            120503: [
                [
                    928
                ],
                256
            ],
            120504: [
                [
                    929
                ],
                256
            ],
            120505: [
                [
                    1012
                ],
                256
            ],
            120506: [
                [
                    931
                ],
                256
            ],
            120507: [
                [
                    932
                ],
                256
            ],
            120508: [
                [
                    933
                ],
                256
            ],
            120509: [
                [
                    934
                ],
                256
            ],
            120510: [
                [
                    935
                ],
                256
            ],
            120511: [
                [
                    936
                ],
                256
            ],
            120512: [
                [
                    937
                ],
                256
            ],
            120513: [
                [
                    8711
                ],
                256
            ],
            120514: [
                [
                    945
                ],
                256
            ],
            120515: [
                [
                    946
                ],
                256
            ],
            120516: [
                [
                    947
                ],
                256
            ],
            120517: [
                [
                    948
                ],
                256
            ],
            120518: [
                [
                    949
                ],
                256
            ],
            120519: [
                [
                    950
                ],
                256
            ],
            120520: [
                [
                    951
                ],
                256
            ],
            120521: [
                [
                    952
                ],
                256
            ],
            120522: [
                [
                    953
                ],
                256
            ],
            120523: [
                [
                    954
                ],
                256
            ],
            120524: [
                [
                    955
                ],
                256
            ],
            120525: [
                [
                    956
                ],
                256
            ],
            120526: [
                [
                    957
                ],
                256
            ],
            120527: [
                [
                    958
                ],
                256
            ],
            120528: [
                [
                    959
                ],
                256
            ],
            120529: [
                [
                    960
                ],
                256
            ],
            120530: [
                [
                    961
                ],
                256
            ],
            120531: [
                [
                    962
                ],
                256
            ],
            120532: [
                [
                    963
                ],
                256
            ],
            120533: [
                [
                    964
                ],
                256
            ],
            120534: [
                [
                    965
                ],
                256
            ],
            120535: [
                [
                    966
                ],
                256
            ],
            120536: [
                [
                    967
                ],
                256
            ],
            120537: [
                [
                    968
                ],
                256
            ],
            120538: [
                [
                    969
                ],
                256
            ],
            120539: [
                [
                    8706
                ],
                256
            ],
            120540: [
                [
                    1013
                ],
                256
            ],
            120541: [
                [
                    977
                ],
                256
            ],
            120542: [
                [
                    1008
                ],
                256
            ],
            120543: [
                [
                    981
                ],
                256
            ],
            120544: [
                [
                    1009
                ],
                256
            ],
            120545: [
                [
                    982
                ],
                256
            ],
            120546: [
                [
                    913
                ],
                256
            ],
            120547: [
                [
                    914
                ],
                256
            ],
            120548: [
                [
                    915
                ],
                256
            ],
            120549: [
                [
                    916
                ],
                256
            ],
            120550: [
                [
                    917
                ],
                256
            ],
            120551: [
                [
                    918
                ],
                256
            ],
            120552: [
                [
                    919
                ],
                256
            ],
            120553: [
                [
                    920
                ],
                256
            ],
            120554: [
                [
                    921
                ],
                256
            ],
            120555: [
                [
                    922
                ],
                256
            ],
            120556: [
                [
                    923
                ],
                256
            ],
            120557: [
                [
                    924
                ],
                256
            ],
            120558: [
                [
                    925
                ],
                256
            ],
            120559: [
                [
                    926
                ],
                256
            ],
            120560: [
                [
                    927
                ],
                256
            ],
            120561: [
                [
                    928
                ],
                256
            ],
            120562: [
                [
                    929
                ],
                256
            ],
            120563: [
                [
                    1012
                ],
                256
            ],
            120564: [
                [
                    931
                ],
                256
            ],
            120565: [
                [
                    932
                ],
                256
            ],
            120566: [
                [
                    933
                ],
                256
            ],
            120567: [
                [
                    934
                ],
                256
            ],
            120568: [
                [
                    935
                ],
                256
            ],
            120569: [
                [
                    936
                ],
                256
            ],
            120570: [
                [
                    937
                ],
                256
            ],
            120571: [
                [
                    8711
                ],
                256
            ],
            120572: [
                [
                    945
                ],
                256
            ],
            120573: [
                [
                    946
                ],
                256
            ],
            120574: [
                [
                    947
                ],
                256
            ],
            120575: [
                [
                    948
                ],
                256
            ]
        },
        55040: {
            120576: [
                [
                    949
                ],
                256
            ],
            120577: [
                [
                    950
                ],
                256
            ],
            120578: [
                [
                    951
                ],
                256
            ],
            120579: [
                [
                    952
                ],
                256
            ],
            120580: [
                [
                    953
                ],
                256
            ],
            120581: [
                [
                    954
                ],
                256
            ],
            120582: [
                [
                    955
                ],
                256
            ],
            120583: [
                [
                    956
                ],
                256
            ],
            120584: [
                [
                    957
                ],
                256
            ],
            120585: [
                [
                    958
                ],
                256
            ],
            120586: [
                [
                    959
                ],
                256
            ],
            120587: [
                [
                    960
                ],
                256
            ],
            120588: [
                [
                    961
                ],
                256
            ],
            120589: [
                [
                    962
                ],
                256
            ],
            120590: [
                [
                    963
                ],
                256
            ],
            120591: [
                [
                    964
                ],
                256
            ],
            120592: [
                [
                    965
                ],
                256
            ],
            120593: [
                [
                    966
                ],
                256
            ],
            120594: [
                [
                    967
                ],
                256
            ],
            120595: [
                [
                    968
                ],
                256
            ],
            120596: [
                [
                    969
                ],
                256
            ],
            120597: [
                [
                    8706
                ],
                256
            ],
            120598: [
                [
                    1013
                ],
                256
            ],
            120599: [
                [
                    977
                ],
                256
            ],
            120600: [
                [
                    1008
                ],
                256
            ],
            120601: [
                [
                    981
                ],
                256
            ],
            120602: [
                [
                    1009
                ],
                256
            ],
            120603: [
                [
                    982
                ],
                256
            ],
            120604: [
                [
                    913
                ],
                256
            ],
            120605: [
                [
                    914
                ],
                256
            ],
            120606: [
                [
                    915
                ],
                256
            ],
            120607: [
                [
                    916
                ],
                256
            ],
            120608: [
                [
                    917
                ],
                256
            ],
            120609: [
                [
                    918
                ],
                256
            ],
            120610: [
                [
                    919
                ],
                256
            ],
            120611: [
                [
                    920
                ],
                256
            ],
            120612: [
                [
                    921
                ],
                256
            ],
            120613: [
                [
                    922
                ],
                256
            ],
            120614: [
                [
                    923
                ],
                256
            ],
            120615: [
                [
                    924
                ],
                256
            ],
            120616: [
                [
                    925
                ],
                256
            ],
            120617: [
                [
                    926
                ],
                256
            ],
            120618: [
                [
                    927
                ],
                256
            ],
            120619: [
                [
                    928
                ],
                256
            ],
            120620: [
                [
                    929
                ],
                256
            ],
            120621: [
                [
                    1012
                ],
                256
            ],
            120622: [
                [
                    931
                ],
                256
            ],
            120623: [
                [
                    932
                ],
                256
            ],
            120624: [
                [
                    933
                ],
                256
            ],
            120625: [
                [
                    934
                ],
                256
            ],
            120626: [
                [
                    935
                ],
                256
            ],
            120627: [
                [
                    936
                ],
                256
            ],
            120628: [
                [
                    937
                ],
                256
            ],
            120629: [
                [
                    8711
                ],
                256
            ],
            120630: [
                [
                    945
                ],
                256
            ],
            120631: [
                [
                    946
                ],
                256
            ],
            120632: [
                [
                    947
                ],
                256
            ],
            120633: [
                [
                    948
                ],
                256
            ],
            120634: [
                [
                    949
                ],
                256
            ],
            120635: [
                [
                    950
                ],
                256
            ],
            120636: [
                [
                    951
                ],
                256
            ],
            120637: [
                [
                    952
                ],
                256
            ],
            120638: [
                [
                    953
                ],
                256
            ],
            120639: [
                [
                    954
                ],
                256
            ],
            120640: [
                [
                    955
                ],
                256
            ],
            120641: [
                [
                    956
                ],
                256
            ],
            120642: [
                [
                    957
                ],
                256
            ],
            120643: [
                [
                    958
                ],
                256
            ],
            120644: [
                [
                    959
                ],
                256
            ],
            120645: [
                [
                    960
                ],
                256
            ],
            120646: [
                [
                    961
                ],
                256
            ],
            120647: [
                [
                    962
                ],
                256
            ],
            120648: [
                [
                    963
                ],
                256
            ],
            120649: [
                [
                    964
                ],
                256
            ],
            120650: [
                [
                    965
                ],
                256
            ],
            120651: [
                [
                    966
                ],
                256
            ],
            120652: [
                [
                    967
                ],
                256
            ],
            120653: [
                [
                    968
                ],
                256
            ],
            120654: [
                [
                    969
                ],
                256
            ],
            120655: [
                [
                    8706
                ],
                256
            ],
            120656: [
                [
                    1013
                ],
                256
            ],
            120657: [
                [
                    977
                ],
                256
            ],
            120658: [
                [
                    1008
                ],
                256
            ],
            120659: [
                [
                    981
                ],
                256
            ],
            120660: [
                [
                    1009
                ],
                256
            ],
            120661: [
                [
                    982
                ],
                256
            ],
            120662: [
                [
                    913
                ],
                256
            ],
            120663: [
                [
                    914
                ],
                256
            ],
            120664: [
                [
                    915
                ],
                256
            ],
            120665: [
                [
                    916
                ],
                256
            ],
            120666: [
                [
                    917
                ],
                256
            ],
            120667: [
                [
                    918
                ],
                256
            ],
            120668: [
                [
                    919
                ],
                256
            ],
            120669: [
                [
                    920
                ],
                256
            ],
            120670: [
                [
                    921
                ],
                256
            ],
            120671: [
                [
                    922
                ],
                256
            ],
            120672: [
                [
                    923
                ],
                256
            ],
            120673: [
                [
                    924
                ],
                256
            ],
            120674: [
                [
                    925
                ],
                256
            ],
            120675: [
                [
                    926
                ],
                256
            ],
            120676: [
                [
                    927
                ],
                256
            ],
            120677: [
                [
                    928
                ],
                256
            ],
            120678: [
                [
                    929
                ],
                256
            ],
            120679: [
                [
                    1012
                ],
                256
            ],
            120680: [
                [
                    931
                ],
                256
            ],
            120681: [
                [
                    932
                ],
                256
            ],
            120682: [
                [
                    933
                ],
                256
            ],
            120683: [
                [
                    934
                ],
                256
            ],
            120684: [
                [
                    935
                ],
                256
            ],
            120685: [
                [
                    936
                ],
                256
            ],
            120686: [
                [
                    937
                ],
                256
            ],
            120687: [
                [
                    8711
                ],
                256
            ],
            120688: [
                [
                    945
                ],
                256
            ],
            120689: [
                [
                    946
                ],
                256
            ],
            120690: [
                [
                    947
                ],
                256
            ],
            120691: [
                [
                    948
                ],
                256
            ],
            120692: [
                [
                    949
                ],
                256
            ],
            120693: [
                [
                    950
                ],
                256
            ],
            120694: [
                [
                    951
                ],
                256
            ],
            120695: [
                [
                    952
                ],
                256
            ],
            120696: [
                [
                    953
                ],
                256
            ],
            120697: [
                [
                    954
                ],
                256
            ],
            120698: [
                [
                    955
                ],
                256
            ],
            120699: [
                [
                    956
                ],
                256
            ],
            120700: [
                [
                    957
                ],
                256
            ],
            120701: [
                [
                    958
                ],
                256
            ],
            120702: [
                [
                    959
                ],
                256
            ],
            120703: [
                [
                    960
                ],
                256
            ],
            120704: [
                [
                    961
                ],
                256
            ],
            120705: [
                [
                    962
                ],
                256
            ],
            120706: [
                [
                    963
                ],
                256
            ],
            120707: [
                [
                    964
                ],
                256
            ],
            120708: [
                [
                    965
                ],
                256
            ],
            120709: [
                [
                    966
                ],
                256
            ],
            120710: [
                [
                    967
                ],
                256
            ],
            120711: [
                [
                    968
                ],
                256
            ],
            120712: [
                [
                    969
                ],
                256
            ],
            120713: [
                [
                    8706
                ],
                256
            ],
            120714: [
                [
                    1013
                ],
                256
            ],
            120715: [
                [
                    977
                ],
                256
            ],
            120716: [
                [
                    1008
                ],
                256
            ],
            120717: [
                [
                    981
                ],
                256
            ],
            120718: [
                [
                    1009
                ],
                256
            ],
            120719: [
                [
                    982
                ],
                256
            ],
            120720: [
                [
                    913
                ],
                256
            ],
            120721: [
                [
                    914
                ],
                256
            ],
            120722: [
                [
                    915
                ],
                256
            ],
            120723: [
                [
                    916
                ],
                256
            ],
            120724: [
                [
                    917
                ],
                256
            ],
            120725: [
                [
                    918
                ],
                256
            ],
            120726: [
                [
                    919
                ],
                256
            ],
            120727: [
                [
                    920
                ],
                256
            ],
            120728: [
                [
                    921
                ],
                256
            ],
            120729: [
                [
                    922
                ],
                256
            ],
            120730: [
                [
                    923
                ],
                256
            ],
            120731: [
                [
                    924
                ],
                256
            ],
            120732: [
                [
                    925
                ],
                256
            ],
            120733: [
                [
                    926
                ],
                256
            ],
            120734: [
                [
                    927
                ],
                256
            ],
            120735: [
                [
                    928
                ],
                256
            ],
            120736: [
                [
                    929
                ],
                256
            ],
            120737: [
                [
                    1012
                ],
                256
            ],
            120738: [
                [
                    931
                ],
                256
            ],
            120739: [
                [
                    932
                ],
                256
            ],
            120740: [
                [
                    933
                ],
                256
            ],
            120741: [
                [
                    934
                ],
                256
            ],
            120742: [
                [
                    935
                ],
                256
            ],
            120743: [
                [
                    936
                ],
                256
            ],
            120744: [
                [
                    937
                ],
                256
            ],
            120745: [
                [
                    8711
                ],
                256
            ],
            120746: [
                [
                    945
                ],
                256
            ],
            120747: [
                [
                    946
                ],
                256
            ],
            120748: [
                [
                    947
                ],
                256
            ],
            120749: [
                [
                    948
                ],
                256
            ],
            120750: [
                [
                    949
                ],
                256
            ],
            120751: [
                [
                    950
                ],
                256
            ],
            120752: [
                [
                    951
                ],
                256
            ],
            120753: [
                [
                    952
                ],
                256
            ],
            120754: [
                [
                    953
                ],
                256
            ],
            120755: [
                [
                    954
                ],
                256
            ],
            120756: [
                [
                    955
                ],
                256
            ],
            120757: [
                [
                    956
                ],
                256
            ],
            120758: [
                [
                    957
                ],
                256
            ],
            120759: [
                [
                    958
                ],
                256
            ],
            120760: [
                [
                    959
                ],
                256
            ],
            120761: [
                [
                    960
                ],
                256
            ],
            120762: [
                [
                    961
                ],
                256
            ],
            120763: [
                [
                    962
                ],
                256
            ],
            120764: [
                [
                    963
                ],
                256
            ],
            120765: [
                [
                    964
                ],
                256
            ],
            120766: [
                [
                    965
                ],
                256
            ],
            120767: [
                [
                    966
                ],
                256
            ],
            120768: [
                [
                    967
                ],
                256
            ],
            120769: [
                [
                    968
                ],
                256
            ],
            120770: [
                [
                    969
                ],
                256
            ],
            120771: [
                [
                    8706
                ],
                256
            ],
            120772: [
                [
                    1013
                ],
                256
            ],
            120773: [
                [
                    977
                ],
                256
            ],
            120774: [
                [
                    1008
                ],
                256
            ],
            120775: [
                [
                    981
                ],
                256
            ],
            120776: [
                [
                    1009
                ],
                256
            ],
            120777: [
                [
                    982
                ],
                256
            ],
            120778: [
                [
                    988
                ],
                256
            ],
            120779: [
                [
                    989
                ],
                256
            ],
            120782: [
                [
                    48
                ],
                256
            ],
            120783: [
                [
                    49
                ],
                256
            ],
            120784: [
                [
                    50
                ],
                256
            ],
            120785: [
                [
                    51
                ],
                256
            ],
            120786: [
                [
                    52
                ],
                256
            ],
            120787: [
                [
                    53
                ],
                256
            ],
            120788: [
                [
                    54
                ],
                256
            ],
            120789: [
                [
                    55
                ],
                256
            ],
            120790: [
                [
                    56
                ],
                256
            ],
            120791: [
                [
                    57
                ],
                256
            ],
            120792: [
                [
                    48
                ],
                256
            ],
            120793: [
                [
                    49
                ],
                256
            ],
            120794: [
                [
                    50
                ],
                256
            ],
            120795: [
                [
                    51
                ],
                256
            ],
            120796: [
                [
                    52
                ],
                256
            ],
            120797: [
                [
                    53
                ],
                256
            ],
            120798: [
                [
                    54
                ],
                256
            ],
            120799: [
                [
                    55
                ],
                256
            ],
            120800: [
                [
                    56
                ],
                256
            ],
            120801: [
                [
                    57
                ],
                256
            ],
            120802: [
                [
                    48
                ],
                256
            ],
            120803: [
                [
                    49
                ],
                256
            ],
            120804: [
                [
                    50
                ],
                256
            ],
            120805: [
                [
                    51
                ],
                256
            ],
            120806: [
                [
                    52
                ],
                256
            ],
            120807: [
                [
                    53
                ],
                256
            ],
            120808: [
                [
                    54
                ],
                256
            ],
            120809: [
                [
                    55
                ],
                256
            ],
            120810: [
                [
                    56
                ],
                256
            ],
            120811: [
                [
                    57
                ],
                256
            ],
            120812: [
                [
                    48
                ],
                256
            ],
            120813: [
                [
                    49
                ],
                256
            ],
            120814: [
                [
                    50
                ],
                256
            ],
            120815: [
                [
                    51
                ],
                256
            ],
            120816: [
                [
                    52
                ],
                256
            ],
            120817: [
                [
                    53
                ],
                256
            ],
            120818: [
                [
                    54
                ],
                256
            ],
            120819: [
                [
                    55
                ],
                256
            ],
            120820: [
                [
                    56
                ],
                256
            ],
            120821: [
                [
                    57
                ],
                256
            ],
            120822: [
                [
                    48
                ],
                256
            ],
            120823: [
                [
                    49
                ],
                256
            ],
            120824: [
                [
                    50
                ],
                256
            ],
            120825: [
                [
                    51
                ],
                256
            ],
            120826: [
                [
                    52
                ],
                256
            ],
            120827: [
                [
                    53
                ],
                256
            ],
            120828: [
                [
                    54
                ],
                256
            ],
            120829: [
                [
                    55
                ],
                256
            ],
            120830: [
                [
                    56
                ],
                256
            ],
            120831: [
                [
                    57
                ],
                256
            ]
        },
        59392: {
            125136: [
                ,
                220
            ],
            125137: [
                ,
                220
            ],
            125138: [
                ,
                220
            ],
            125139: [
                ,
                220
            ],
            125140: [
                ,
                220
            ],
            125141: [
                ,
                220
            ],
            125142: [
                ,
                220
            ]
        },
        60928: {
            126464: [
                [
                    1575
                ],
                256
            ],
            126465: [
                [
                    1576
                ],
                256
            ],
            126466: [
                [
                    1580
                ],
                256
            ],
            126467: [
                [
                    1583
                ],
                256
            ],
            126469: [
                [
                    1608
                ],
                256
            ],
            126470: [
                [
                    1586
                ],
                256
            ],
            126471: [
                [
                    1581
                ],
                256
            ],
            126472: [
                [
                    1591
                ],
                256
            ],
            126473: [
                [
                    1610
                ],
                256
            ],
            126474: [
                [
                    1603
                ],
                256
            ],
            126475: [
                [
                    1604
                ],
                256
            ],
            126476: [
                [
                    1605
                ],
                256
            ],
            126477: [
                [
                    1606
                ],
                256
            ],
            126478: [
                [
                    1587
                ],
                256
            ],
            126479: [
                [
                    1593
                ],
                256
            ],
            126480: [
                [
                    1601
                ],
                256
            ],
            126481: [
                [
                    1589
                ],
                256
            ],
            126482: [
                [
                    1602
                ],
                256
            ],
            126483: [
                [
                    1585
                ],
                256
            ],
            126484: [
                [
                    1588
                ],
                256
            ],
            126485: [
                [
                    1578
                ],
                256
            ],
            126486: [
                [
                    1579
                ],
                256
            ],
            126487: [
                [
                    1582
                ],
                256
            ],
            126488: [
                [
                    1584
                ],
                256
            ],
            126489: [
                [
                    1590
                ],
                256
            ],
            126490: [
                [
                    1592
                ],
                256
            ],
            126491: [
                [
                    1594
                ],
                256
            ],
            126492: [
                [
                    1646
                ],
                256
            ],
            126493: [
                [
                    1722
                ],
                256
            ],
            126494: [
                [
                    1697
                ],
                256
            ],
            126495: [
                [
                    1647
                ],
                256
            ],
            126497: [
                [
                    1576
                ],
                256
            ],
            126498: [
                [
                    1580
                ],
                256
            ],
            126500: [
                [
                    1607
                ],
                256
            ],
            126503: [
                [
                    1581
                ],
                256
            ],
            126505: [
                [
                    1610
                ],
                256
            ],
            126506: [
                [
                    1603
                ],
                256
            ],
            126507: [
                [
                    1604
                ],
                256
            ],
            126508: [
                [
                    1605
                ],
                256
            ],
            126509: [
                [
                    1606
                ],
                256
            ],
            126510: [
                [
                    1587
                ],
                256
            ],
            126511: [
                [
                    1593
                ],
                256
            ],
            126512: [
                [
                    1601
                ],
                256
            ],
            126513: [
                [
                    1589
                ],
                256
            ],
            126514: [
                [
                    1602
                ],
                256
            ],
            126516: [
                [
                    1588
                ],
                256
            ],
            126517: [
                [
                    1578
                ],
                256
            ],
            126518: [
                [
                    1579
                ],
                256
            ],
            126519: [
                [
                    1582
                ],
                256
            ],
            126521: [
                [
                    1590
                ],
                256
            ],
            126523: [
                [
                    1594
                ],
                256
            ],
            126530: [
                [
                    1580
                ],
                256
            ],
            126535: [
                [
                    1581
                ],
                256
            ],
            126537: [
                [
                    1610
                ],
                256
            ],
            126539: [
                [
                    1604
                ],
                256
            ],
            126541: [
                [
                    1606
                ],
                256
            ],
            126542: [
                [
                    1587
                ],
                256
            ],
            126543: [
                [
                    1593
                ],
                256
            ],
            126545: [
                [
                    1589
                ],
                256
            ],
            126546: [
                [
                    1602
                ],
                256
            ],
            126548: [
                [
                    1588
                ],
                256
            ],
            126551: [
                [
                    1582
                ],
                256
            ],
            126553: [
                [
                    1590
                ],
                256
            ],
            126555: [
                [
                    1594
                ],
                256
            ],
            126557: [
                [
                    1722
                ],
                256
            ],
            126559: [
                [
                    1647
                ],
                256
            ],
            126561: [
                [
                    1576
                ],
                256
            ],
            126562: [
                [
                    1580
                ],
                256
            ],
            126564: [
                [
                    1607
                ],
                256
            ],
            126567: [
                [
                    1581
                ],
                256
            ],
            126568: [
                [
                    1591
                ],
                256
            ],
            126569: [
                [
                    1610
                ],
                256
            ],
            126570: [
                [
                    1603
                ],
                256
            ],
            126572: [
                [
                    1605
                ],
                256
            ],
            126573: [
                [
                    1606
                ],
                256
            ],
            126574: [
                [
                    1587
                ],
                256
            ],
            126575: [
                [
                    1593
                ],
                256
            ],
            126576: [
                [
                    1601
                ],
                256
            ],
            126577: [
                [
                    1589
                ],
                256
            ],
            126578: [
                [
                    1602
                ],
                256
            ],
            126580: [
                [
                    1588
                ],
                256
            ],
            126581: [
                [
                    1578
                ],
                256
            ],
            126582: [
                [
                    1579
                ],
                256
            ],
            126583: [
                [
                    1582
                ],
                256
            ],
            126585: [
                [
                    1590
                ],
                256
            ],
            126586: [
                [
                    1592
                ],
                256
            ],
            126587: [
                [
                    1594
                ],
                256
            ],
            126588: [
                [
                    1646
                ],
                256
            ],
            126590: [
                [
                    1697
                ],
                256
            ],
            126592: [
                [
                    1575
                ],
                256
            ],
            126593: [
                [
                    1576
                ],
                256
            ],
            126594: [
                [
                    1580
                ],
                256
            ],
            126595: [
                [
                    1583
                ],
                256
            ],
            126596: [
                [
                    1607
                ],
                256
            ],
            126597: [
                [
                    1608
                ],
                256
            ],
            126598: [
                [
                    1586
                ],
                256
            ],
            126599: [
                [
                    1581
                ],
                256
            ],
            126600: [
                [
                    1591
                ],
                256
            ],
            126601: [
                [
                    1610
                ],
                256
            ],
            126603: [
                [
                    1604
                ],
                256
            ],
            126604: [
                [
                    1605
                ],
                256
            ],
            126605: [
                [
                    1606
                ],
                256
            ],
            126606: [
                [
                    1587
                ],
                256
            ],
            126607: [
                [
                    1593
                ],
                256
            ],
            126608: [
                [
                    1601
                ],
                256
            ],
            126609: [
                [
                    1589
                ],
                256
            ],
            126610: [
                [
                    1602
                ],
                256
            ],
            126611: [
                [
                    1585
                ],
                256
            ],
            126612: [
                [
                    1588
                ],
                256
            ],
            126613: [
                [
                    1578
                ],
                256
            ],
            126614: [
                [
                    1579
                ],
                256
            ],
            126615: [
                [
                    1582
                ],
                256
            ],
            126616: [
                [
                    1584
                ],
                256
            ],
            126617: [
                [
                    1590
                ],
                256
            ],
            126618: [
                [
                    1592
                ],
                256
            ],
            126619: [
                [
                    1594
                ],
                256
            ],
            126625: [
                [
                    1576
                ],
                256
            ],
            126626: [
                [
                    1580
                ],
                256
            ],
            126627: [
                [
                    1583
                ],
                256
            ],
            126629: [
                [
                    1608
                ],
                256
            ],
            126630: [
                [
                    1586
                ],
                256
            ],
            126631: [
                [
                    1581
                ],
                256
            ],
            126632: [
                [
                    1591
                ],
                256
            ],
            126633: [
                [
                    1610
                ],
                256
            ],
            126635: [
                [
                    1604
                ],
                256
            ],
            126636: [
                [
                    1605
                ],
                256
            ],
            126637: [
                [
                    1606
                ],
                256
            ],
            126638: [
                [
                    1587
                ],
                256
            ],
            126639: [
                [
                    1593
                ],
                256
            ],
            126640: [
                [
                    1601
                ],
                256
            ],
            126641: [
                [
                    1589
                ],
                256
            ],
            126642: [
                [
                    1602
                ],
                256
            ],
            126643: [
                [
                    1585
                ],
                256
            ],
            126644: [
                [
                    1588
                ],
                256
            ],
            126645: [
                [
                    1578
                ],
                256
            ],
            126646: [
                [
                    1579
                ],
                256
            ],
            126647: [
                [
                    1582
                ],
                256
            ],
            126648: [
                [
                    1584
                ],
                256
            ],
            126649: [
                [
                    1590
                ],
                256
            ],
            126650: [
                [
                    1592
                ],
                256
            ],
            126651: [
                [
                    1594
                ],
                256
            ]
        },
        61696: {
            127232: [
                [
                    48,
                    46
                ],
                256
            ],
            127233: [
                [
                    48,
                    44
                ],
                256
            ],
            127234: [
                [
                    49,
                    44
                ],
                256
            ],
            127235: [
                [
                    50,
                    44
                ],
                256
            ],
            127236: [
                [
                    51,
                    44
                ],
                256
            ],
            127237: [
                [
                    52,
                    44
                ],
                256
            ],
            127238: [
                [
                    53,
                    44
                ],
                256
            ],
            127239: [
                [
                    54,
                    44
                ],
                256
            ],
            127240: [
                [
                    55,
                    44
                ],
                256
            ],
            127241: [
                [
                    56,
                    44
                ],
                256
            ],
            127242: [
                [
                    57,
                    44
                ],
                256
            ],
            127248: [
                [
                    40,
                    65,
                    41
                ],
                256
            ],
            127249: [
                [
                    40,
                    66,
                    41
                ],
                256
            ],
            127250: [
                [
                    40,
                    67,
                    41
                ],
                256
            ],
            127251: [
                [
                    40,
                    68,
                    41
                ],
                256
            ],
            127252: [
                [
                    40,
                    69,
                    41
                ],
                256
            ],
            127253: [
                [
                    40,
                    70,
                    41
                ],
                256
            ],
            127254: [
                [
                    40,
                    71,
                    41
                ],
                256
            ],
            127255: [
                [
                    40,
                    72,
                    41
                ],
                256
            ],
            127256: [
                [
                    40,
                    73,
                    41
                ],
                256
            ],
            127257: [
                [
                    40,
                    74,
                    41
                ],
                256
            ],
            127258: [
                [
                    40,
                    75,
                    41
                ],
                256
            ],
            127259: [
                [
                    40,
                    76,
                    41
                ],
                256
            ],
            127260: [
                [
                    40,
                    77,
                    41
                ],
                256
            ],
            127261: [
                [
                    40,
                    78,
                    41
                ],
                256
            ],
            127262: [
                [
                    40,
                    79,
                    41
                ],
                256
            ],
            127263: [
                [
                    40,
                    80,
                    41
                ],
                256
            ],
            127264: [
                [
                    40,
                    81,
                    41
                ],
                256
            ],
            127265: [
                [
                    40,
                    82,
                    41
                ],
                256
            ],
            127266: [
                [
                    40,
                    83,
                    41
                ],
                256
            ],
            127267: [
                [
                    40,
                    84,
                    41
                ],
                256
            ],
            127268: [
                [
                    40,
                    85,
                    41
                ],
                256
            ],
            127269: [
                [
                    40,
                    86,
                    41
                ],
                256
            ],
            127270: [
                [
                    40,
                    87,
                    41
                ],
                256
            ],
            127271: [
                [
                    40,
                    88,
                    41
                ],
                256
            ],
            127272: [
                [
                    40,
                    89,
                    41
                ],
                256
            ],
            127273: [
                [
                    40,
                    90,
                    41
                ],
                256
            ],
            127274: [
                [
                    12308,
                    83,
                    12309
                ],
                256
            ],
            127275: [
                [
                    67
                ],
                256
            ],
            127276: [
                [
                    82
                ],
                256
            ],
            127277: [
                [
                    67,
                    68
                ],
                256
            ],
            127278: [
                [
                    87,
                    90
                ],
                256
            ],
            127280: [
                [
                    65
                ],
                256
            ],
            127281: [
                [
                    66
                ],
                256
            ],
            127282: [
                [
                    67
                ],
                256
            ],
            127283: [
                [
                    68
                ],
                256
            ],
            127284: [
                [
                    69
                ],
                256
            ],
            127285: [
                [
                    70
                ],
                256
            ],
            127286: [
                [
                    71
                ],
                256
            ],
            127287: [
                [
                    72
                ],
                256
            ],
            127288: [
                [
                    73
                ],
                256
            ],
            127289: [
                [
                    74
                ],
                256
            ],
            127290: [
                [
                    75
                ],
                256
            ],
            127291: [
                [
                    76
                ],
                256
            ],
            127292: [
                [
                    77
                ],
                256
            ],
            127293: [
                [
                    78
                ],
                256
            ],
            127294: [
                [
                    79
                ],
                256
            ],
            127295: [
                [
                    80
                ],
                256
            ],
            127296: [
                [
                    81
                ],
                256
            ],
            127297: [
                [
                    82
                ],
                256
            ],
            127298: [
                [
                    83
                ],
                256
            ],
            127299: [
                [
                    84
                ],
                256
            ],
            127300: [
                [
                    85
                ],
                256
            ],
            127301: [
                [
                    86
                ],
                256
            ],
            127302: [
                [
                    87
                ],
                256
            ],
            127303: [
                [
                    88
                ],
                256
            ],
            127304: [
                [
                    89
                ],
                256
            ],
            127305: [
                [
                    90
                ],
                256
            ],
            127306: [
                [
                    72,
                    86
                ],
                256
            ],
            127307: [
                [
                    77,
                    86
                ],
                256
            ],
            127308: [
                [
                    83,
                    68
                ],
                256
            ],
            127309: [
                [
                    83,
                    83
                ],
                256
            ],
            127310: [
                [
                    80,
                    80,
                    86
                ],
                256
            ],
            127311: [
                [
                    87,
                    67
                ],
                256
            ],
            127338: [
                [
                    77,
                    67
                ],
                256
            ],
            127339: [
                [
                    77,
                    68
                ],
                256
            ],
            127376: [
                [
                    68,
                    74
                ],
                256
            ]
        },
        61952: {
            127488: [
                [
                    12411,
                    12363
                ],
                256
            ],
            127489: [
                [
                    12467,
                    12467
                ],
                256
            ],
            127490: [
                [
                    12469
                ],
                256
            ],
            127504: [
                [
                    25163
                ],
                256
            ],
            127505: [
                [
                    23383
                ],
                256
            ],
            127506: [
                [
                    21452
                ],
                256
            ],
            127507: [
                [
                    12487
                ],
                256
            ],
            127508: [
                [
                    20108
                ],
                256
            ],
            127509: [
                [
                    22810
                ],
                256
            ],
            127510: [
                [
                    35299
                ],
                256
            ],
            127511: [
                [
                    22825
                ],
                256
            ],
            127512: [
                [
                    20132
                ],
                256
            ],
            127513: [
                [
                    26144
                ],
                256
            ],
            127514: [
                [
                    28961
                ],
                256
            ],
            127515: [
                [
                    26009
                ],
                256
            ],
            127516: [
                [
                    21069
                ],
                256
            ],
            127517: [
                [
                    24460
                ],
                256
            ],
            127518: [
                [
                    20877
                ],
                256
            ],
            127519: [
                [
                    26032
                ],
                256
            ],
            127520: [
                [
                    21021
                ],
                256
            ],
            127521: [
                [
                    32066
                ],
                256
            ],
            127522: [
                [
                    29983
                ],
                256
            ],
            127523: [
                [
                    36009
                ],
                256
            ],
            127524: [
                [
                    22768
                ],
                256
            ],
            127525: [
                [
                    21561
                ],
                256
            ],
            127526: [
                [
                    28436
                ],
                256
            ],
            127527: [
                [
                    25237
                ],
                256
            ],
            127528: [
                [
                    25429
                ],
                256
            ],
            127529: [
                [
                    19968
                ],
                256
            ],
            127530: [
                [
                    19977
                ],
                256
            ],
            127531: [
                [
                    36938
                ],
                256
            ],
            127532: [
                [
                    24038
                ],
                256
            ],
            127533: [
                [
                    20013
                ],
                256
            ],
            127534: [
                [
                    21491
                ],
                256
            ],
            127535: [
                [
                    25351
                ],
                256
            ],
            127536: [
                [
                    36208
                ],
                256
            ],
            127537: [
                [
                    25171
                ],
                256
            ],
            127538: [
                [
                    31105
                ],
                256
            ],
            127539: [
                [
                    31354
                ],
                256
            ],
            127540: [
                [
                    21512
                ],
                256
            ],
            127541: [
                [
                    28288
                ],
                256
            ],
            127542: [
                [
                    26377
                ],
                256
            ],
            127543: [
                [
                    26376
                ],
                256
            ],
            127544: [
                [
                    30003
                ],
                256
            ],
            127545: [
                [
                    21106
                ],
                256
            ],
            127546: [
                [
                    21942
                ],
                256
            ],
            127552: [
                [
                    12308,
                    26412,
                    12309
                ],
                256
            ],
            127553: [
                [
                    12308,
                    19977,
                    12309
                ],
                256
            ],
            127554: [
                [
                    12308,
                    20108,
                    12309
                ],
                256
            ],
            127555: [
                [
                    12308,
                    23433,
                    12309
                ],
                256
            ],
            127556: [
                [
                    12308,
                    28857,
                    12309
                ],
                256
            ],
            127557: [
                [
                    12308,
                    25171,
                    12309
                ],
                256
            ],
            127558: [
                [
                    12308,
                    30423,
                    12309
                ],
                256
            ],
            127559: [
                [
                    12308,
                    21213,
                    12309
                ],
                256
            ],
            127560: [
                [
                    12308,
                    25943,
                    12309
                ],
                256
            ],
            127568: [
                [
                    24471
                ],
                256
            ],
            127569: [
                [
                    21487
                ],
                256
            ]
        },
        63488: {
            194560: [
                [
                    20029
                ]
            ],
            194561: [
                [
                    20024
                ]
            ],
            194562: [
                [
                    20033
                ]
            ],
            194563: [
                [
                    131362
                ]
            ],
            194564: [
                [
                    20320
                ]
            ],
            194565: [
                [
                    20398
                ]
            ],
            194566: [
                [
                    20411
                ]
            ],
            194567: [
                [
                    20482
                ]
            ],
            194568: [
                [
                    20602
                ]
            ],
            194569: [
                [
                    20633
                ]
            ],
            194570: [
                [
                    20711
                ]
            ],
            194571: [
                [
                    20687
                ]
            ],
            194572: [
                [
                    13470
                ]
            ],
            194573: [
                [
                    132666
                ]
            ],
            194574: [
                [
                    20813
                ]
            ],
            194575: [
                [
                    20820
                ]
            ],
            194576: [
                [
                    20836
                ]
            ],
            194577: [
                [
                    20855
                ]
            ],
            194578: [
                [
                    132380
                ]
            ],
            194579: [
                [
                    13497
                ]
            ],
            194580: [
                [
                    20839
                ]
            ],
            194581: [
                [
                    20877
                ]
            ],
            194582: [
                [
                    132427
                ]
            ],
            194583: [
                [
                    20887
                ]
            ],
            194584: [
                [
                    20900
                ]
            ],
            194585: [
                [
                    20172
                ]
            ],
            194586: [
                [
                    20908
                ]
            ],
            194587: [
                [
                    20917
                ]
            ],
            194588: [
                [
                    168415
                ]
            ],
            194589: [
                [
                    20981
                ]
            ],
            194590: [
                [
                    20995
                ]
            ],
            194591: [
                [
                    13535
                ]
            ],
            194592: [
                [
                    21051
                ]
            ],
            194593: [
                [
                    21062
                ]
            ],
            194594: [
                [
                    21106
                ]
            ],
            194595: [
                [
                    21111
                ]
            ],
            194596: [
                [
                    13589
                ]
            ],
            194597: [
                [
                    21191
                ]
            ],
            194598: [
                [
                    21193
                ]
            ],
            194599: [
                [
                    21220
                ]
            ],
            194600: [
                [
                    21242
                ]
            ],
            194601: [
                [
                    21253
                ]
            ],
            194602: [
                [
                    21254
                ]
            ],
            194603: [
                [
                    21271
                ]
            ],
            194604: [
                [
                    21321
                ]
            ],
            194605: [
                [
                    21329
                ]
            ],
            194606: [
                [
                    21338
                ]
            ],
            194607: [
                [
                    21363
                ]
            ],
            194608: [
                [
                    21373
                ]
            ],
            194609: [
                [
                    21375
                ]
            ],
            194610: [
                [
                    21375
                ]
            ],
            194611: [
                [
                    21375
                ]
            ],
            194612: [
                [
                    133676
                ]
            ],
            194613: [
                [
                    28784
                ]
            ],
            194614: [
                [
                    21450
                ]
            ],
            194615: [
                [
                    21471
                ]
            ],
            194616: [
                [
                    133987
                ]
            ],
            194617: [
                [
                    21483
                ]
            ],
            194618: [
                [
                    21489
                ]
            ],
            194619: [
                [
                    21510
                ]
            ],
            194620: [
                [
                    21662
                ]
            ],
            194621: [
                [
                    21560
                ]
            ],
            194622: [
                [
                    21576
                ]
            ],
            194623: [
                [
                    21608
                ]
            ],
            194624: [
                [
                    21666
                ]
            ],
            194625: [
                [
                    21750
                ]
            ],
            194626: [
                [
                    21776
                ]
            ],
            194627: [
                [
                    21843
                ]
            ],
            194628: [
                [
                    21859
                ]
            ],
            194629: [
                [
                    21892
                ]
            ],
            194630: [
                [
                    21892
                ]
            ],
            194631: [
                [
                    21913
                ]
            ],
            194632: [
                [
                    21931
                ]
            ],
            194633: [
                [
                    21939
                ]
            ],
            194634: [
                [
                    21954
                ]
            ],
            194635: [
                [
                    22294
                ]
            ],
            194636: [
                [
                    22022
                ]
            ],
            194637: [
                [
                    22295
                ]
            ],
            194638: [
                [
                    22097
                ]
            ],
            194639: [
                [
                    22132
                ]
            ],
            194640: [
                [
                    20999
                ]
            ],
            194641: [
                [
                    22766
                ]
            ],
            194642: [
                [
                    22478
                ]
            ],
            194643: [
                [
                    22516
                ]
            ],
            194644: [
                [
                    22541
                ]
            ],
            194645: [
                [
                    22411
                ]
            ],
            194646: [
                [
                    22578
                ]
            ],
            194647: [
                [
                    22577
                ]
            ],
            194648: [
                [
                    22700
                ]
            ],
            194649: [
                [
                    136420
                ]
            ],
            194650: [
                [
                    22770
                ]
            ],
            194651: [
                [
                    22775
                ]
            ],
            194652: [
                [
                    22790
                ]
            ],
            194653: [
                [
                    22810
                ]
            ],
            194654: [
                [
                    22818
                ]
            ],
            194655: [
                [
                    22882
                ]
            ],
            194656: [
                [
                    136872
                ]
            ],
            194657: [
                [
                    136938
                ]
            ],
            194658: [
                [
                    23020
                ]
            ],
            194659: [
                [
                    23067
                ]
            ],
            194660: [
                [
                    23079
                ]
            ],
            194661: [
                [
                    23000
                ]
            ],
            194662: [
                [
                    23142
                ]
            ],
            194663: [
                [
                    14062
                ]
            ],
            194664: [
                [
                    14076
                ]
            ],
            194665: [
                [
                    23304
                ]
            ],
            194666: [
                [
                    23358
                ]
            ],
            194667: [
                [
                    23358
                ]
            ],
            194668: [
                [
                    137672
                ]
            ],
            194669: [
                [
                    23491
                ]
            ],
            194670: [
                [
                    23512
                ]
            ],
            194671: [
                [
                    23527
                ]
            ],
            194672: [
                [
                    23539
                ]
            ],
            194673: [
                [
                    138008
                ]
            ],
            194674: [
                [
                    23551
                ]
            ],
            194675: [
                [
                    23558
                ]
            ],
            194676: [
                [
                    24403
                ]
            ],
            194677: [
                [
                    23586
                ]
            ],
            194678: [
                [
                    14209
                ]
            ],
            194679: [
                [
                    23648
                ]
            ],
            194680: [
                [
                    23662
                ]
            ],
            194681: [
                [
                    23744
                ]
            ],
            194682: [
                [
                    23693
                ]
            ],
            194683: [
                [
                    138724
                ]
            ],
            194684: [
                [
                    23875
                ]
            ],
            194685: [
                [
                    138726
                ]
            ],
            194686: [
                [
                    23918
                ]
            ],
            194687: [
                [
                    23915
                ]
            ],
            194688: [
                [
                    23932
                ]
            ],
            194689: [
                [
                    24033
                ]
            ],
            194690: [
                [
                    24034
                ]
            ],
            194691: [
                [
                    14383
                ]
            ],
            194692: [
                [
                    24061
                ]
            ],
            194693: [
                [
                    24104
                ]
            ],
            194694: [
                [
                    24125
                ]
            ],
            194695: [
                [
                    24169
                ]
            ],
            194696: [
                [
                    14434
                ]
            ],
            194697: [
                [
                    139651
                ]
            ],
            194698: [
                [
                    14460
                ]
            ],
            194699: [
                [
                    24240
                ]
            ],
            194700: [
                [
                    24243
                ]
            ],
            194701: [
                [
                    24246
                ]
            ],
            194702: [
                [
                    24266
                ]
            ],
            194703: [
                [
                    172946
                ]
            ],
            194704: [
                [
                    24318
                ]
            ],
            194705: [
                [
                    140081
                ]
            ],
            194706: [
                [
                    140081
                ]
            ],
            194707: [
                [
                    33281
                ]
            ],
            194708: [
                [
                    24354
                ]
            ],
            194709: [
                [
                    24354
                ]
            ],
            194710: [
                [
                    14535
                ]
            ],
            194711: [
                [
                    144056
                ]
            ],
            194712: [
                [
                    156122
                ]
            ],
            194713: [
                [
                    24418
                ]
            ],
            194714: [
                [
                    24427
                ]
            ],
            194715: [
                [
                    14563
                ]
            ],
            194716: [
                [
                    24474
                ]
            ],
            194717: [
                [
                    24525
                ]
            ],
            194718: [
                [
                    24535
                ]
            ],
            194719: [
                [
                    24569
                ]
            ],
            194720: [
                [
                    24705
                ]
            ],
            194721: [
                [
                    14650
                ]
            ],
            194722: [
                [
                    14620
                ]
            ],
            194723: [
                [
                    24724
                ]
            ],
            194724: [
                [
                    141012
                ]
            ],
            194725: [
                [
                    24775
                ]
            ],
            194726: [
                [
                    24904
                ]
            ],
            194727: [
                [
                    24908
                ]
            ],
            194728: [
                [
                    24910
                ]
            ],
            194729: [
                [
                    24908
                ]
            ],
            194730: [
                [
                    24954
                ]
            ],
            194731: [
                [
                    24974
                ]
            ],
            194732: [
                [
                    25010
                ]
            ],
            194733: [
                [
                    24996
                ]
            ],
            194734: [
                [
                    25007
                ]
            ],
            194735: [
                [
                    25054
                ]
            ],
            194736: [
                [
                    25074
                ]
            ],
            194737: [
                [
                    25078
                ]
            ],
            194738: [
                [
                    25104
                ]
            ],
            194739: [
                [
                    25115
                ]
            ],
            194740: [
                [
                    25181
                ]
            ],
            194741: [
                [
                    25265
                ]
            ],
            194742: [
                [
                    25300
                ]
            ],
            194743: [
                [
                    25424
                ]
            ],
            194744: [
                [
                    142092
                ]
            ],
            194745: [
                [
                    25405
                ]
            ],
            194746: [
                [
                    25340
                ]
            ],
            194747: [
                [
                    25448
                ]
            ],
            194748: [
                [
                    25475
                ]
            ],
            194749: [
                [
                    25572
                ]
            ],
            194750: [
                [
                    142321
                ]
            ],
            194751: [
                [
                    25634
                ]
            ],
            194752: [
                [
                    25541
                ]
            ],
            194753: [
                [
                    25513
                ]
            ],
            194754: [
                [
                    14894
                ]
            ],
            194755: [
                [
                    25705
                ]
            ],
            194756: [
                [
                    25726
                ]
            ],
            194757: [
                [
                    25757
                ]
            ],
            194758: [
                [
                    25719
                ]
            ],
            194759: [
                [
                    14956
                ]
            ],
            194760: [
                [
                    25935
                ]
            ],
            194761: [
                [
                    25964
                ]
            ],
            194762: [
                [
                    143370
                ]
            ],
            194763: [
                [
                    26083
                ]
            ],
            194764: [
                [
                    26360
                ]
            ],
            194765: [
                [
                    26185
                ]
            ],
            194766: [
                [
                    15129
                ]
            ],
            194767: [
                [
                    26257
                ]
            ],
            194768: [
                [
                    15112
                ]
            ],
            194769: [
                [
                    15076
                ]
            ],
            194770: [
                [
                    20882
                ]
            ],
            194771: [
                [
                    20885
                ]
            ],
            194772: [
                [
                    26368
                ]
            ],
            194773: [
                [
                    26268
                ]
            ],
            194774: [
                [
                    32941
                ]
            ],
            194775: [
                [
                    17369
                ]
            ],
            194776: [
                [
                    26391
                ]
            ],
            194777: [
                [
                    26395
                ]
            ],
            194778: [
                [
                    26401
                ]
            ],
            194779: [
                [
                    26462
                ]
            ],
            194780: [
                [
                    26451
                ]
            ],
            194781: [
                [
                    144323
                ]
            ],
            194782: [
                [
                    15177
                ]
            ],
            194783: [
                [
                    26618
                ]
            ],
            194784: [
                [
                    26501
                ]
            ],
            194785: [
                [
                    26706
                ]
            ],
            194786: [
                [
                    26757
                ]
            ],
            194787: [
                [
                    144493
                ]
            ],
            194788: [
                [
                    26766
                ]
            ],
            194789: [
                [
                    26655
                ]
            ],
            194790: [
                [
                    26900
                ]
            ],
            194791: [
                [
                    15261
                ]
            ],
            194792: [
                [
                    26946
                ]
            ],
            194793: [
                [
                    27043
                ]
            ],
            194794: [
                [
                    27114
                ]
            ],
            194795: [
                [
                    27304
                ]
            ],
            194796: [
                [
                    145059
                ]
            ],
            194797: [
                [
                    27355
                ]
            ],
            194798: [
                [
                    15384
                ]
            ],
            194799: [
                [
                    27425
                ]
            ],
            194800: [
                [
                    145575
                ]
            ],
            194801: [
                [
                    27476
                ]
            ],
            194802: [
                [
                    15438
                ]
            ],
            194803: [
                [
                    27506
                ]
            ],
            194804: [
                [
                    27551
                ]
            ],
            194805: [
                [
                    27578
                ]
            ],
            194806: [
                [
                    27579
                ]
            ],
            194807: [
                [
                    146061
                ]
            ],
            194808: [
                [
                    138507
                ]
            ],
            194809: [
                [
                    146170
                ]
            ],
            194810: [
                [
                    27726
                ]
            ],
            194811: [
                [
                    146620
                ]
            ],
            194812: [
                [
                    27839
                ]
            ],
            194813: [
                [
                    27853
                ]
            ],
            194814: [
                [
                    27751
                ]
            ],
            194815: [
                [
                    27926
                ]
            ]
        },
        63744: {
            63744: [
                [
                    35912
                ]
            ],
            63745: [
                [
                    26356
                ]
            ],
            63746: [
                [
                    36554
                ]
            ],
            63747: [
                [
                    36040
                ]
            ],
            63748: [
                [
                    28369
                ]
            ],
            63749: [
                [
                    20018
                ]
            ],
            63750: [
                [
                    21477
                ]
            ],
            63751: [
                [
                    40860
                ]
            ],
            63752: [
                [
                    40860
                ]
            ],
            63753: [
                [
                    22865
                ]
            ],
            63754: [
                [
                    37329
                ]
            ],
            63755: [
                [
                    21895
                ]
            ],
            63756: [
                [
                    22856
                ]
            ],
            63757: [
                [
                    25078
                ]
            ],
            63758: [
                [
                    30313
                ]
            ],
            63759: [
                [
                    32645
                ]
            ],
            63760: [
                [
                    34367
                ]
            ],
            63761: [
                [
                    34746
                ]
            ],
            63762: [
                [
                    35064
                ]
            ],
            63763: [
                [
                    37007
                ]
            ],
            63764: [
                [
                    27138
                ]
            ],
            63765: [
                [
                    27931
                ]
            ],
            63766: [
                [
                    28889
                ]
            ],
            63767: [
                [
                    29662
                ]
            ],
            63768: [
                [
                    33853
                ]
            ],
            63769: [
                [
                    37226
                ]
            ],
            63770: [
                [
                    39409
                ]
            ],
            63771: [
                [
                    20098
                ]
            ],
            63772: [
                [
                    21365
                ]
            ],
            63773: [
                [
                    27396
                ]
            ],
            63774: [
                [
                    29211
                ]
            ],
            63775: [
                [
                    34349
                ]
            ],
            63776: [
                [
                    40478
                ]
            ],
            63777: [
                [
                    23888
                ]
            ],
            63778: [
                [
                    28651
                ]
            ],
            63779: [
                [
                    34253
                ]
            ],
            63780: [
                [
                    35172
                ]
            ],
            63781: [
                [
                    25289
                ]
            ],
            63782: [
                [
                    33240
                ]
            ],
            63783: [
                [
                    34847
                ]
            ],
            63784: [
                [
                    24266
                ]
            ],
            63785: [
                [
                    26391
                ]
            ],
            63786: [
                [
                    28010
                ]
            ],
            63787: [
                [
                    29436
                ]
            ],
            63788: [
                [
                    37070
                ]
            ],
            63789: [
                [
                    20358
                ]
            ],
            63790: [
                [
                    20919
                ]
            ],
            63791: [
                [
                    21214
                ]
            ],
            63792: [
                [
                    25796
                ]
            ],
            63793: [
                [
                    27347
                ]
            ],
            63794: [
                [
                    29200
                ]
            ],
            63795: [
                [
                    30439
                ]
            ],
            63796: [
                [
                    32769
                ]
            ],
            63797: [
                [
                    34310
                ]
            ],
            63798: [
                [
                    34396
                ]
            ],
            63799: [
                [
                    36335
                ]
            ],
            63800: [
                [
                    38706
                ]
            ],
            63801: [
                [
                    39791
                ]
            ],
            63802: [
                [
                    40442
                ]
            ],
            63803: [
                [
                    30860
                ]
            ],
            63804: [
                [
                    31103
                ]
            ],
            63805: [
                [
                    32160
                ]
            ],
            63806: [
                [
                    33737
                ]
            ],
            63807: [
                [
                    37636
                ]
            ],
            63808: [
                [
                    40575
                ]
            ],
            63809: [
                [
                    35542
                ]
            ],
            63810: [
                [
                    22751
                ]
            ],
            63811: [
                [
                    24324
                ]
            ],
            63812: [
                [
                    31840
                ]
            ],
            63813: [
                [
                    32894
                ]
            ],
            63814: [
                [
                    29282
                ]
            ],
            63815: [
                [
                    30922
                ]
            ],
            63816: [
                [
                    36034
                ]
            ],
            63817: [
                [
                    38647
                ]
            ],
            63818: [
                [
                    22744
                ]
            ],
            63819: [
                [
                    23650
                ]
            ],
            63820: [
                [
                    27155
                ]
            ],
            63821: [
                [
                    28122
                ]
            ],
            63822: [
                [
                    28431
                ]
            ],
            63823: [
                [
                    32047
                ]
            ],
            63824: [
                [
                    32311
                ]
            ],
            63825: [
                [
                    38475
                ]
            ],
            63826: [
                [
                    21202
                ]
            ],
            63827: [
                [
                    32907
                ]
            ],
            63828: [
                [
                    20956
                ]
            ],
            63829: [
                [
                    20940
                ]
            ],
            63830: [
                [
                    31260
                ]
            ],
            63831: [
                [
                    32190
                ]
            ],
            63832: [
                [
                    33777
                ]
            ],
            63833: [
                [
                    38517
                ]
            ],
            63834: [
                [
                    35712
                ]
            ],
            63835: [
                [
                    25295
                ]
            ],
            63836: [
                [
                    27138
                ]
            ],
            63837: [
                [
                    35582
                ]
            ],
            63838: [
                [
                    20025
                ]
            ],
            63839: [
                [
                    23527
                ]
            ],
            63840: [
                [
                    24594
                ]
            ],
            63841: [
                [
                    29575
                ]
            ],
            63842: [
                [
                    30064
                ]
            ],
            63843: [
                [
                    21271
                ]
            ],
            63844: [
                [
                    30971
                ]
            ],
            63845: [
                [
                    20415
                ]
            ],
            63846: [
                [
                    24489
                ]
            ],
            63847: [
                [
                    19981
                ]
            ],
            63848: [
                [
                    27852
                ]
            ],
            63849: [
                [
                    25976
                ]
            ],
            63850: [
                [
                    32034
                ]
            ],
            63851: [
                [
                    21443
                ]
            ],
            63852: [
                [
                    22622
                ]
            ],
            63853: [
                [
                    30465
                ]
            ],
            63854: [
                [
                    33865
                ]
            ],
            63855: [
                [
                    35498
                ]
            ],
            63856: [
                [
                    27578
                ]
            ],
            63857: [
                [
                    36784
                ]
            ],
            63858: [
                [
                    27784
                ]
            ],
            63859: [
                [
                    25342
                ]
            ],
            63860: [
                [
                    33509
                ]
            ],
            63861: [
                [
                    25504
                ]
            ],
            63862: [
                [
                    30053
                ]
            ],
            63863: [
                [
                    20142
                ]
            ],
            63864: [
                [
                    20841
                ]
            ],
            63865: [
                [
                    20937
                ]
            ],
            63866: [
                [
                    26753
                ]
            ],
            63867: [
                [
                    31975
                ]
            ],
            63868: [
                [
                    33391
                ]
            ],
            63869: [
                [
                    35538
                ]
            ],
            63870: [
                [
                    37327
                ]
            ],
            63871: [
                [
                    21237
                ]
            ],
            63872: [
                [
                    21570
                ]
            ],
            63873: [
                [
                    22899
                ]
            ],
            63874: [
                [
                    24300
                ]
            ],
            63875: [
                [
                    26053
                ]
            ],
            63876: [
                [
                    28670
                ]
            ],
            63877: [
                [
                    31018
                ]
            ],
            63878: [
                [
                    38317
                ]
            ],
            63879: [
                [
                    39530
                ]
            ],
            63880: [
                [
                    40599
                ]
            ],
            63881: [
                [
                    40654
                ]
            ],
            63882: [
                [
                    21147
                ]
            ],
            63883: [
                [
                    26310
                ]
            ],
            63884: [
                [
                    27511
                ]
            ],
            63885: [
                [
                    36706
                ]
            ],
            63886: [
                [
                    24180
                ]
            ],
            63887: [
                [
                    24976
                ]
            ],
            63888: [
                [
                    25088
                ]
            ],
            63889: [
                [
                    25754
                ]
            ],
            63890: [
                [
                    28451
                ]
            ],
            63891: [
                [
                    29001
                ]
            ],
            63892: [
                [
                    29833
                ]
            ],
            63893: [
                [
                    31178
                ]
            ],
            63894: [
                [
                    32244
                ]
            ],
            63895: [
                [
                    32879
                ]
            ],
            63896: [
                [
                    36646
                ]
            ],
            63897: [
                [
                    34030
                ]
            ],
            63898: [
                [
                    36899
                ]
            ],
            63899: [
                [
                    37706
                ]
            ],
            63900: [
                [
                    21015
                ]
            ],
            63901: [
                [
                    21155
                ]
            ],
            63902: [
                [
                    21693
                ]
            ],
            63903: [
                [
                    28872
                ]
            ],
            63904: [
                [
                    35010
                ]
            ],
            63905: [
                [
                    35498
                ]
            ],
            63906: [
                [
                    24265
                ]
            ],
            63907: [
                [
                    24565
                ]
            ],
            63908: [
                [
                    25467
                ]
            ],
            63909: [
                [
                    27566
                ]
            ],
            63910: [
                [
                    31806
                ]
            ],
            63911: [
                [
                    29557
                ]
            ],
            63912: [
                [
                    20196
                ]
            ],
            63913: [
                [
                    22265
                ]
            ],
            63914: [
                [
                    23527
                ]
            ],
            63915: [
                [
                    23994
                ]
            ],
            63916: [
                [
                    24604
                ]
            ],
            63917: [
                [
                    29618
                ]
            ],
            63918: [
                [
                    29801
                ]
            ],
            63919: [
                [
                    32666
                ]
            ],
            63920: [
                [
                    32838
                ]
            ],
            63921: [
                [
                    37428
                ]
            ],
            63922: [
                [
                    38646
                ]
            ],
            63923: [
                [
                    38728
                ]
            ],
            63924: [
                [
                    38936
                ]
            ],
            63925: [
                [
                    20363
                ]
            ],
            63926: [
                [
                    31150
                ]
            ],
            63927: [
                [
                    37300
                ]
            ],
            63928: [
                [
                    38584
                ]
            ],
            63929: [
                [
                    24801
                ]
            ],
            63930: [
                [
                    20102
                ]
            ],
            63931: [
                [
                    20698
                ]
            ],
            63932: [
                [
                    23534
                ]
            ],
            63933: [
                [
                    23615
                ]
            ],
            63934: [
                [
                    26009
                ]
            ],
            63935: [
                [
                    27138
                ]
            ],
            63936: [
                [
                    29134
                ]
            ],
            63937: [
                [
                    30274
                ]
            ],
            63938: [
                [
                    34044
                ]
            ],
            63939: [
                [
                    36988
                ]
            ],
            63940: [
                [
                    40845
                ]
            ],
            63941: [
                [
                    26248
                ]
            ],
            63942: [
                [
                    38446
                ]
            ],
            63943: [
                [
                    21129
                ]
            ],
            63944: [
                [
                    26491
                ]
            ],
            63945: [
                [
                    26611
                ]
            ],
            63946: [
                [
                    27969
                ]
            ],
            63947: [
                [
                    28316
                ]
            ],
            63948: [
                [
                    29705
                ]
            ],
            63949: [
                [
                    30041
                ]
            ],
            63950: [
                [
                    30827
                ]
            ],
            63951: [
                [
                    32016
                ]
            ],
            63952: [
                [
                    39006
                ]
            ],
            63953: [
                [
                    20845
                ]
            ],
            63954: [
                [
                    25134
                ]
            ],
            63955: [
                [
                    38520
                ]
            ],
            63956: [
                [
                    20523
                ]
            ],
            63957: [
                [
                    23833
                ]
            ],
            63958: [
                [
                    28138
                ]
            ],
            63959: [
                [
                    36650
                ]
            ],
            63960: [
                [
                    24459
                ]
            ],
            63961: [
                [
                    24900
                ]
            ],
            63962: [
                [
                    26647
                ]
            ],
            63963: [
                [
                    29575
                ]
            ],
            63964: [
                [
                    38534
                ]
            ],
            63965: [
                [
                    21033
                ]
            ],
            63966: [
                [
                    21519
                ]
            ],
            63967: [
                [
                    23653
                ]
            ],
            63968: [
                [
                    26131
                ]
            ],
            63969: [
                [
                    26446
                ]
            ],
            63970: [
                [
                    26792
                ]
            ],
            63971: [
                [
                    27877
                ]
            ],
            63972: [
                [
                    29702
                ]
            ],
            63973: [
                [
                    30178
                ]
            ],
            63974: [
                [
                    32633
                ]
            ],
            63975: [
                [
                    35023
                ]
            ],
            63976: [
                [
                    35041
                ]
            ],
            63977: [
                [
                    37324
                ]
            ],
            63978: [
                [
                    38626
                ]
            ],
            63979: [
                [
                    21311
                ]
            ],
            63980: [
                [
                    28346
                ]
            ],
            63981: [
                [
                    21533
                ]
            ],
            63982: [
                [
                    29136
                ]
            ],
            63983: [
                [
                    29848
                ]
            ],
            63984: [
                [
                    34298
                ]
            ],
            63985: [
                [
                    38563
                ]
            ],
            63986: [
                [
                    40023
                ]
            ],
            63987: [
                [
                    40607
                ]
            ],
            63988: [
                [
                    26519
                ]
            ],
            63989: [
                [
                    28107
                ]
            ],
            63990: [
                [
                    33256
                ]
            ],
            63991: [
                [
                    31435
                ]
            ],
            63992: [
                [
                    31520
                ]
            ],
            63993: [
                [
                    31890
                ]
            ],
            63994: [
                [
                    29376
                ]
            ],
            63995: [
                [
                    28825
                ]
            ],
            63996: [
                [
                    35672
                ]
            ],
            63997: [
                [
                    20160
                ]
            ],
            63998: [
                [
                    33590
                ]
            ],
            63999: [
                [
                    21050
                ]
            ],
            194816: [
                [
                    27966
                ]
            ],
            194817: [
                [
                    28023
                ]
            ],
            194818: [
                [
                    27969
                ]
            ],
            194819: [
                [
                    28009
                ]
            ],
            194820: [
                [
                    28024
                ]
            ],
            194821: [
                [
                    28037
                ]
            ],
            194822: [
                [
                    146718
                ]
            ],
            194823: [
                [
                    27956
                ]
            ],
            194824: [
                [
                    28207
                ]
            ],
            194825: [
                [
                    28270
                ]
            ],
            194826: [
                [
                    15667
                ]
            ],
            194827: [
                [
                    28363
                ]
            ],
            194828: [
                [
                    28359
                ]
            ],
            194829: [
                [
                    147153
                ]
            ],
            194830: [
                [
                    28153
                ]
            ],
            194831: [
                [
                    28526
                ]
            ],
            194832: [
                [
                    147294
                ]
            ],
            194833: [
                [
                    147342
                ]
            ],
            194834: [
                [
                    28614
                ]
            ],
            194835: [
                [
                    28729
                ]
            ],
            194836: [
                [
                    28702
                ]
            ],
            194837: [
                [
                    28699
                ]
            ],
            194838: [
                [
                    15766
                ]
            ],
            194839: [
                [
                    28746
                ]
            ],
            194840: [
                [
                    28797
                ]
            ],
            194841: [
                [
                    28791
                ]
            ],
            194842: [
                [
                    28845
                ]
            ],
            194843: [
                [
                    132389
                ]
            ],
            194844: [
                [
                    28997
                ]
            ],
            194845: [
                [
                    148067
                ]
            ],
            194846: [
                [
                    29084
                ]
            ],
            194847: [
                [
                    148395
                ]
            ],
            194848: [
                [
                    29224
                ]
            ],
            194849: [
                [
                    29237
                ]
            ],
            194850: [
                [
                    29264
                ]
            ],
            194851: [
                [
                    149000
                ]
            ],
            194852: [
                [
                    29312
                ]
            ],
            194853: [
                [
                    29333
                ]
            ],
            194854: [
                [
                    149301
                ]
            ],
            194855: [
                [
                    149524
                ]
            ],
            194856: [
                [
                    29562
                ]
            ],
            194857: [
                [
                    29579
                ]
            ],
            194858: [
                [
                    16044
                ]
            ],
            194859: [
                [
                    29605
                ]
            ],
            194860: [
                [
                    16056
                ]
            ],
            194861: [
                [
                    16056
                ]
            ],
            194862: [
                [
                    29767
                ]
            ],
            194863: [
                [
                    29788
                ]
            ],
            194864: [
                [
                    29809
                ]
            ],
            194865: [
                [
                    29829
                ]
            ],
            194866: [
                [
                    29898
                ]
            ],
            194867: [
                [
                    16155
                ]
            ],
            194868: [
                [
                    29988
                ]
            ],
            194869: [
                [
                    150582
                ]
            ],
            194870: [
                [
                    30014
                ]
            ],
            194871: [
                [
                    150674
                ]
            ],
            194872: [
                [
                    30064
                ]
            ],
            194873: [
                [
                    139679
                ]
            ],
            194874: [
                [
                    30224
                ]
            ],
            194875: [
                [
                    151457
                ]
            ],
            194876: [
                [
                    151480
                ]
            ],
            194877: [
                [
                    151620
                ]
            ],
            194878: [
                [
                    16380
                ]
            ],
            194879: [
                [
                    16392
                ]
            ],
            194880: [
                [
                    30452
                ]
            ],
            194881: [
                [
                    151795
                ]
            ],
            194882: [
                [
                    151794
                ]
            ],
            194883: [
                [
                    151833
                ]
            ],
            194884: [
                [
                    151859
                ]
            ],
            194885: [
                [
                    30494
                ]
            ],
            194886: [
                [
                    30495
                ]
            ],
            194887: [
                [
                    30495
                ]
            ],
            194888: [
                [
                    30538
                ]
            ],
            194889: [
                [
                    16441
                ]
            ],
            194890: [
                [
                    30603
                ]
            ],
            194891: [
                [
                    16454
                ]
            ],
            194892: [
                [
                    16534
                ]
            ],
            194893: [
                [
                    152605
                ]
            ],
            194894: [
                [
                    30798
                ]
            ],
            194895: [
                [
                    30860
                ]
            ],
            194896: [
                [
                    30924
                ]
            ],
            194897: [
                [
                    16611
                ]
            ],
            194898: [
                [
                    153126
                ]
            ],
            194899: [
                [
                    31062
                ]
            ],
            194900: [
                [
                    153242
                ]
            ],
            194901: [
                [
                    153285
                ]
            ],
            194902: [
                [
                    31119
                ]
            ],
            194903: [
                [
                    31211
                ]
            ],
            194904: [
                [
                    16687
                ]
            ],
            194905: [
                [
                    31296
                ]
            ],
            194906: [
                [
                    31306
                ]
            ],
            194907: [
                [
                    31311
                ]
            ],
            194908: [
                [
                    153980
                ]
            ],
            194909: [
                [
                    154279
                ]
            ],
            194910: [
                [
                    154279
                ]
            ],
            194911: [
                [
                    31470
                ]
            ],
            194912: [
                [
                    16898
                ]
            ],
            194913: [
                [
                    154539
                ]
            ],
            194914: [
                [
                    31686
                ]
            ],
            194915: [
                [
                    31689
                ]
            ],
            194916: [
                [
                    16935
                ]
            ],
            194917: [
                [
                    154752
                ]
            ],
            194918: [
                [
                    31954
                ]
            ],
            194919: [
                [
                    17056
                ]
            ],
            194920: [
                [
                    31976
                ]
            ],
            194921: [
                [
                    31971
                ]
            ],
            194922: [
                [
                    32000
                ]
            ],
            194923: [
                [
                    155526
                ]
            ],
            194924: [
                [
                    32099
                ]
            ],
            194925: [
                [
                    17153
                ]
            ],
            194926: [
                [
                    32199
                ]
            ],
            194927: [
                [
                    32258
                ]
            ],
            194928: [
                [
                    32325
                ]
            ],
            194929: [
                [
                    17204
                ]
            ],
            194930: [
                [
                    156200
                ]
            ],
            194931: [
                [
                    156231
                ]
            ],
            194932: [
                [
                    17241
                ]
            ],
            194933: [
                [
                    156377
                ]
            ],
            194934: [
                [
                    32634
                ]
            ],
            194935: [
                [
                    156478
                ]
            ],
            194936: [
                [
                    32661
                ]
            ],
            194937: [
                [
                    32762
                ]
            ],
            194938: [
                [
                    32773
                ]
            ],
            194939: [
                [
                    156890
                ]
            ],
            194940: [
                [
                    156963
                ]
            ],
            194941: [
                [
                    32864
                ]
            ],
            194942: [
                [
                    157096
                ]
            ],
            194943: [
                [
                    32880
                ]
            ],
            194944: [
                [
                    144223
                ]
            ],
            194945: [
                [
                    17365
                ]
            ],
            194946: [
                [
                    32946
                ]
            ],
            194947: [
                [
                    33027
                ]
            ],
            194948: [
                [
                    17419
                ]
            ],
            194949: [
                [
                    33086
                ]
            ],
            194950: [
                [
                    23221
                ]
            ],
            194951: [
                [
                    157607
                ]
            ],
            194952: [
                [
                    157621
                ]
            ],
            194953: [
                [
                    144275
                ]
            ],
            194954: [
                [
                    144284
                ]
            ],
            194955: [
                [
                    33281
                ]
            ],
            194956: [
                [
                    33284
                ]
            ],
            194957: [
                [
                    36766
                ]
            ],
            194958: [
                [
                    17515
                ]
            ],
            194959: [
                [
                    33425
                ]
            ],
            194960: [
                [
                    33419
                ]
            ],
            194961: [
                [
                    33437
                ]
            ],
            194962: [
                [
                    21171
                ]
            ],
            194963: [
                [
                    33457
                ]
            ],
            194964: [
                [
                    33459
                ]
            ],
            194965: [
                [
                    33469
                ]
            ],
            194966: [
                [
                    33510
                ]
            ],
            194967: [
                [
                    158524
                ]
            ],
            194968: [
                [
                    33509
                ]
            ],
            194969: [
                [
                    33565
                ]
            ],
            194970: [
                [
                    33635
                ]
            ],
            194971: [
                [
                    33709
                ]
            ],
            194972: [
                [
                    33571
                ]
            ],
            194973: [
                [
                    33725
                ]
            ],
            194974: [
                [
                    33767
                ]
            ],
            194975: [
                [
                    33879
                ]
            ],
            194976: [
                [
                    33619
                ]
            ],
            194977: [
                [
                    33738
                ]
            ],
            194978: [
                [
                    33740
                ]
            ],
            194979: [
                [
                    33756
                ]
            ],
            194980: [
                [
                    158774
                ]
            ],
            194981: [
                [
                    159083
                ]
            ],
            194982: [
                [
                    158933
                ]
            ],
            194983: [
                [
                    17707
                ]
            ],
            194984: [
                [
                    34033
                ]
            ],
            194985: [
                [
                    34035
                ]
            ],
            194986: [
                [
                    34070
                ]
            ],
            194987: [
                [
                    160714
                ]
            ],
            194988: [
                [
                    34148
                ]
            ],
            194989: [
                [
                    159532
                ]
            ],
            194990: [
                [
                    17757
                ]
            ],
            194991: [
                [
                    17761
                ]
            ],
            194992: [
                [
                    159665
                ]
            ],
            194993: [
                [
                    159954
                ]
            ],
            194994: [
                [
                    17771
                ]
            ],
            194995: [
                [
                    34384
                ]
            ],
            194996: [
                [
                    34396
                ]
            ],
            194997: [
                [
                    34407
                ]
            ],
            194998: [
                [
                    34409
                ]
            ],
            194999: [
                [
                    34473
                ]
            ],
            195000: [
                [
                    34440
                ]
            ],
            195001: [
                [
                    34574
                ]
            ],
            195002: [
                [
                    34530
                ]
            ],
            195003: [
                [
                    34681
                ]
            ],
            195004: [
                [
                    34600
                ]
            ],
            195005: [
                [
                    34667
                ]
            ],
            195006: [
                [
                    34694
                ]
            ],
            195007: [
                [
                    17879
                ]
            ],
            195008: [
                [
                    34785
                ]
            ],
            195009: [
                [
                    34817
                ]
            ],
            195010: [
                [
                    17913
                ]
            ],
            195011: [
                [
                    34912
                ]
            ],
            195012: [
                [
                    34915
                ]
            ],
            195013: [
                [
                    161383
                ]
            ],
            195014: [
                [
                    35031
                ]
            ],
            195015: [
                [
                    35038
                ]
            ],
            195016: [
                [
                    17973
                ]
            ],
            195017: [
                [
                    35066
                ]
            ],
            195018: [
                [
                    13499
                ]
            ],
            195019: [
                [
                    161966
                ]
            ],
            195020: [
                [
                    162150
                ]
            ],
            195021: [
                [
                    18110
                ]
            ],
            195022: [
                [
                    18119
                ]
            ],
            195023: [
                [
                    35488
                ]
            ],
            195024: [
                [
                    35565
                ]
            ],
            195025: [
                [
                    35722
                ]
            ],
            195026: [
                [
                    35925
                ]
            ],
            195027: [
                [
                    162984
                ]
            ],
            195028: [
                [
                    36011
                ]
            ],
            195029: [
                [
                    36033
                ]
            ],
            195030: [
                [
                    36123
                ]
            ],
            195031: [
                [
                    36215
                ]
            ],
            195032: [
                [
                    163631
                ]
            ],
            195033: [
                [
                    133124
                ]
            ],
            195034: [
                [
                    36299
                ]
            ],
            195035: [
                [
                    36284
                ]
            ],
            195036: [
                [
                    36336
                ]
            ],
            195037: [
                [
                    133342
                ]
            ],
            195038: [
                [
                    36564
                ]
            ],
            195039: [
                [
                    36664
                ]
            ],
            195040: [
                [
                    165330
                ]
            ],
            195041: [
                [
                    165357
                ]
            ],
            195042: [
                [
                    37012
                ]
            ],
            195043: [
                [
                    37105
                ]
            ],
            195044: [
                [
                    37137
                ]
            ],
            195045: [
                [
                    165678
                ]
            ],
            195046: [
                [
                    37147
                ]
            ],
            195047: [
                [
                    37432
                ]
            ],
            195048: [
                [
                    37591
                ]
            ],
            195049: [
                [
                    37592
                ]
            ],
            195050: [
                [
                    37500
                ]
            ],
            195051: [
                [
                    37881
                ]
            ],
            195052: [
                [
                    37909
                ]
            ],
            195053: [
                [
                    166906
                ]
            ],
            195054: [
                [
                    38283
                ]
            ],
            195055: [
                [
                    18837
                ]
            ],
            195056: [
                [
                    38327
                ]
            ],
            195057: [
                [
                    167287
                ]
            ],
            195058: [
                [
                    18918
                ]
            ],
            195059: [
                [
                    38595
                ]
            ],
            195060: [
                [
                    23986
                ]
            ],
            195061: [
                [
                    38691
                ]
            ],
            195062: [
                [
                    168261
                ]
            ],
            195063: [
                [
                    168474
                ]
            ],
            195064: [
                [
                    19054
                ]
            ],
            195065: [
                [
                    19062
                ]
            ],
            195066: [
                [
                    38880
                ]
            ],
            195067: [
                [
                    168970
                ]
            ],
            195068: [
                [
                    19122
                ]
            ],
            195069: [
                [
                    169110
                ]
            ],
            195070: [
                [
                    38923
                ]
            ],
            195071: [
                [
                    38923
                ]
            ]
        },
        64000: {
            64000: [
                [
                    20999
                ]
            ],
            64001: [
                [
                    24230
                ]
            ],
            64002: [
                [
                    25299
                ]
            ],
            64003: [
                [
                    31958
                ]
            ],
            64004: [
                [
                    23429
                ]
            ],
            64005: [
                [
                    27934
                ]
            ],
            64006: [
                [
                    26292
                ]
            ],
            64007: [
                [
                    36667
                ]
            ],
            64008: [
                [
                    34892
                ]
            ],
            64009: [
                [
                    38477
                ]
            ],
            64010: [
                [
                    35211
                ]
            ],
            64011: [
                [
                    24275
                ]
            ],
            64012: [
                [
                    20800
                ]
            ],
            64013: [
                [
                    21952
                ]
            ],
            64016: [
                [
                    22618
                ]
            ],
            64018: [
                [
                    26228
                ]
            ],
            64021: [
                [
                    20958
                ]
            ],
            64022: [
                [
                    29482
                ]
            ],
            64023: [
                [
                    30410
                ]
            ],
            64024: [
                [
                    31036
                ]
            ],
            64025: [
                [
                    31070
                ]
            ],
            64026: [
                [
                    31077
                ]
            ],
            64027: [
                [
                    31119
                ]
            ],
            64028: [
                [
                    38742
                ]
            ],
            64029: [
                [
                    31934
                ]
            ],
            64030: [
                [
                    32701
                ]
            ],
            64032: [
                [
                    34322
                ]
            ],
            64034: [
                [
                    35576
                ]
            ],
            64037: [
                [
                    36920
                ]
            ],
            64038: [
                [
                    37117
                ]
            ],
            64042: [
                [
                    39151
                ]
            ],
            64043: [
                [
                    39164
                ]
            ],
            64044: [
                [
                    39208
                ]
            ],
            64045: [
                [
                    40372
                ]
            ],
            64046: [
                [
                    37086
                ]
            ],
            64047: [
                [
                    38583
                ]
            ],
            64048: [
                [
                    20398
                ]
            ],
            64049: [
                [
                    20711
                ]
            ],
            64050: [
                [
                    20813
                ]
            ],
            64051: [
                [
                    21193
                ]
            ],
            64052: [
                [
                    21220
                ]
            ],
            64053: [
                [
                    21329
                ]
            ],
            64054: [
                [
                    21917
                ]
            ],
            64055: [
                [
                    22022
                ]
            ],
            64056: [
                [
                    22120
                ]
            ],
            64057: [
                [
                    22592
                ]
            ],
            64058: [
                [
                    22696
                ]
            ],
            64059: [
                [
                    23652
                ]
            ],
            64060: [
                [
                    23662
                ]
            ],
            64061: [
                [
                    24724
                ]
            ],
            64062: [
                [
                    24936
                ]
            ],
            64063: [
                [
                    24974
                ]
            ],
            64064: [
                [
                    25074
                ]
            ],
            64065: [
                [
                    25935
                ]
            ],
            64066: [
                [
                    26082
                ]
            ],
            64067: [
                [
                    26257
                ]
            ],
            64068: [
                [
                    26757
                ]
            ],
            64069: [
                [
                    28023
                ]
            ],
            64070: [
                [
                    28186
                ]
            ],
            64071: [
                [
                    28450
                ]
            ],
            64072: [
                [
                    29038
                ]
            ],
            64073: [
                [
                    29227
                ]
            ],
            64074: [
                [
                    29730
                ]
            ],
            64075: [
                [
                    30865
                ]
            ],
            64076: [
                [
                    31038
                ]
            ],
            64077: [
                [
                    31049
                ]
            ],
            64078: [
                [
                    31048
                ]
            ],
            64079: [
                [
                    31056
                ]
            ],
            64080: [
                [
                    31062
                ]
            ],
            64081: [
                [
                    31069
                ]
            ],
            64082: [
                [
                    31117
                ]
            ],
            64083: [
                [
                    31118
                ]
            ],
            64084: [
                [
                    31296
                ]
            ],
            64085: [
                [
                    31361
                ]
            ],
            64086: [
                [
                    31680
                ]
            ],
            64087: [
                [
                    32244
                ]
            ],
            64088: [
                [
                    32265
                ]
            ],
            64089: [
                [
                    32321
                ]
            ],
            64090: [
                [
                    32626
                ]
            ],
            64091: [
                [
                    32773
                ]
            ],
            64092: [
                [
                    33261
                ]
            ],
            64093: [
                [
                    33401
                ]
            ],
            64094: [
                [
                    33401
                ]
            ],
            64095: [
                [
                    33879
                ]
            ],
            64096: [
                [
                    35088
                ]
            ],
            64097: [
                [
                    35222
                ]
            ],
            64098: [
                [
                    35585
                ]
            ],
            64099: [
                [
                    35641
                ]
            ],
            64100: [
                [
                    36051
                ]
            ],
            64101: [
                [
                    36104
                ]
            ],
            64102: [
                [
                    36790
                ]
            ],
            64103: [
                [
                    36920
                ]
            ],
            64104: [
                [
                    38627
                ]
            ],
            64105: [
                [
                    38911
                ]
            ],
            64106: [
                [
                    38971
                ]
            ],
            64107: [
                [
                    24693
                ]
            ],
            64108: [
                [
                    148206
                ]
            ],
            64109: [
                [
                    33304
                ]
            ],
            64112: [
                [
                    20006
                ]
            ],
            64113: [
                [
                    20917
                ]
            ],
            64114: [
                [
                    20840
                ]
            ],
            64115: [
                [
                    20352
                ]
            ],
            64116: [
                [
                    20805
                ]
            ],
            64117: [
                [
                    20864
                ]
            ],
            64118: [
                [
                    21191
                ]
            ],
            64119: [
                [
                    21242
                ]
            ],
            64120: [
                [
                    21917
                ]
            ],
            64121: [
                [
                    21845
                ]
            ],
            64122: [
                [
                    21913
                ]
            ],
            64123: [
                [
                    21986
                ]
            ],
            64124: [
                [
                    22618
                ]
            ],
            64125: [
                [
                    22707
                ]
            ],
            64126: [
                [
                    22852
                ]
            ],
            64127: [
                [
                    22868
                ]
            ],
            64128: [
                [
                    23138
                ]
            ],
            64129: [
                [
                    23336
                ]
            ],
            64130: [
                [
                    24274
                ]
            ],
            64131: [
                [
                    24281
                ]
            ],
            64132: [
                [
                    24425
                ]
            ],
            64133: [
                [
                    24493
                ]
            ],
            64134: [
                [
                    24792
                ]
            ],
            64135: [
                [
                    24910
                ]
            ],
            64136: [
                [
                    24840
                ]
            ],
            64137: [
                [
                    24974
                ]
            ],
            64138: [
                [
                    24928
                ]
            ],
            64139: [
                [
                    25074
                ]
            ],
            64140: [
                [
                    25140
                ]
            ],
            64141: [
                [
                    25540
                ]
            ],
            64142: [
                [
                    25628
                ]
            ],
            64143: [
                [
                    25682
                ]
            ],
            64144: [
                [
                    25942
                ]
            ],
            64145: [
                [
                    26228
                ]
            ],
            64146: [
                [
                    26391
                ]
            ],
            64147: [
                [
                    26395
                ]
            ],
            64148: [
                [
                    26454
                ]
            ],
            64149: [
                [
                    27513
                ]
            ],
            64150: [
                [
                    27578
                ]
            ],
            64151: [
                [
                    27969
                ]
            ],
            64152: [
                [
                    28379
                ]
            ],
            64153: [
                [
                    28363
                ]
            ],
            64154: [
                [
                    28450
                ]
            ],
            64155: [
                [
                    28702
                ]
            ],
            64156: [
                [
                    29038
                ]
            ],
            64157: [
                [
                    30631
                ]
            ],
            64158: [
                [
                    29237
                ]
            ],
            64159: [
                [
                    29359
                ]
            ],
            64160: [
                [
                    29482
                ]
            ],
            64161: [
                [
                    29809
                ]
            ],
            64162: [
                [
                    29958
                ]
            ],
            64163: [
                [
                    30011
                ]
            ],
            64164: [
                [
                    30237
                ]
            ],
            64165: [
                [
                    30239
                ]
            ],
            64166: [
                [
                    30410
                ]
            ],
            64167: [
                [
                    30427
                ]
            ],
            64168: [
                [
                    30452
                ]
            ],
            64169: [
                [
                    30538
                ]
            ],
            64170: [
                [
                    30528
                ]
            ],
            64171: [
                [
                    30924
                ]
            ],
            64172: [
                [
                    31409
                ]
            ],
            64173: [
                [
                    31680
                ]
            ],
            64174: [
                [
                    31867
                ]
            ],
            64175: [
                [
                    32091
                ]
            ],
            64176: [
                [
                    32244
                ]
            ],
            64177: [
                [
                    32574
                ]
            ],
            64178: [
                [
                    32773
                ]
            ],
            64179: [
                [
                    33618
                ]
            ],
            64180: [
                [
                    33775
                ]
            ],
            64181: [
                [
                    34681
                ]
            ],
            64182: [
                [
                    35137
                ]
            ],
            64183: [
                [
                    35206
                ]
            ],
            64184: [
                [
                    35222
                ]
            ],
            64185: [
                [
                    35519
                ]
            ],
            64186: [
                [
                    35576
                ]
            ],
            64187: [
                [
                    35531
                ]
            ],
            64188: [
                [
                    35585
                ]
            ],
            64189: [
                [
                    35582
                ]
            ],
            64190: [
                [
                    35565
                ]
            ],
            64191: [
                [
                    35641
                ]
            ],
            64192: [
                [
                    35722
                ]
            ],
            64193: [
                [
                    36104
                ]
            ],
            64194: [
                [
                    36664
                ]
            ],
            64195: [
                [
                    36978
                ]
            ],
            64196: [
                [
                    37273
                ]
            ],
            64197: [
                [
                    37494
                ]
            ],
            64198: [
                [
                    38524
                ]
            ],
            64199: [
                [
                    38627
                ]
            ],
            64200: [
                [
                    38742
                ]
            ],
            64201: [
                [
                    38875
                ]
            ],
            64202: [
                [
                    38911
                ]
            ],
            64203: [
                [
                    38923
                ]
            ],
            64204: [
                [
                    38971
                ]
            ],
            64205: [
                [
                    39698
                ]
            ],
            64206: [
                [
                    40860
                ]
            ],
            64207: [
                [
                    141386
                ]
            ],
            64208: [
                [
                    141380
                ]
            ],
            64209: [
                [
                    144341
                ]
            ],
            64210: [
                [
                    15261
                ]
            ],
            64211: [
                [
                    16408
                ]
            ],
            64212: [
                [
                    16441
                ]
            ],
            64213: [
                [
                    152137
                ]
            ],
            64214: [
                [
                    154832
                ]
            ],
            64215: [
                [
                    163539
                ]
            ],
            64216: [
                [
                    40771
                ]
            ],
            64217: [
                [
                    40846
                ]
            ],
            195072: [
                [
                    38953
                ]
            ],
            195073: [
                [
                    169398
                ]
            ],
            195074: [
                [
                    39138
                ]
            ],
            195075: [
                [
                    19251
                ]
            ],
            195076: [
                [
                    39209
                ]
            ],
            195077: [
                [
                    39335
                ]
            ],
            195078: [
                [
                    39362
                ]
            ],
            195079: [
                [
                    39422
                ]
            ],
            195080: [
                [
                    19406
                ]
            ],
            195081: [
                [
                    170800
                ]
            ],
            195082: [
                [
                    39698
                ]
            ],
            195083: [
                [
                    40000
                ]
            ],
            195084: [
                [
                    40189
                ]
            ],
            195085: [
                [
                    19662
                ]
            ],
            195086: [
                [
                    19693
                ]
            ],
            195087: [
                [
                    40295
                ]
            ],
            195088: [
                [
                    172238
                ]
            ],
            195089: [
                [
                    19704
                ]
            ],
            195090: [
                [
                    172293
                ]
            ],
            195091: [
                [
                    172558
                ]
            ],
            195092: [
                [
                    172689
                ]
            ],
            195093: [
                [
                    40635
                ]
            ],
            195094: [
                [
                    19798
                ]
            ],
            195095: [
                [
                    40697
                ]
            ],
            195096: [
                [
                    40702
                ]
            ],
            195097: [
                [
                    40709
                ]
            ],
            195098: [
                [
                    40719
                ]
            ],
            195099: [
                [
                    40726
                ]
            ],
            195100: [
                [
                    40763
                ]
            ],
            195101: [
                [
                    173568
                ]
            ]
        },
        64256: {
            64256: [
                [
                    102,
                    102
                ],
                256
            ],
            64257: [
                [
                    102,
                    105
                ],
                256
            ],
            64258: [
                [
                    102,
                    108
                ],
                256
            ],
            64259: [
                [
                    102,
                    102,
                    105
                ],
                256
            ],
            64260: [
                [
                    102,
                    102,
                    108
                ],
                256
            ],
            64261: [
                [
                    383,
                    116
                ],
                256
            ],
            64262: [
                [
                    115,
                    116
                ],
                256
            ],
            64275: [
                [
                    1396,
                    1398
                ],
                256
            ],
            64276: [
                [
                    1396,
                    1381
                ],
                256
            ],
            64277: [
                [
                    1396,
                    1387
                ],
                256
            ],
            64278: [
                [
                    1406,
                    1398
                ],
                256
            ],
            64279: [
                [
                    1396,
                    1389
                ],
                256
            ],
            64285: [
                [
                    1497,
                    1460
                ],
                512
            ],
            64286: [
                ,
                26
            ],
            64287: [
                [
                    1522,
                    1463
                ],
                512
            ],
            64288: [
                [
                    1506
                ],
                256
            ],
            64289: [
                [
                    1488
                ],
                256
            ],
            64290: [
                [
                    1491
                ],
                256
            ],
            64291: [
                [
                    1492
                ],
                256
            ],
            64292: [
                [
                    1499
                ],
                256
            ],
            64293: [
                [
                    1500
                ],
                256
            ],
            64294: [
                [
                    1501
                ],
                256
            ],
            64295: [
                [
                    1512
                ],
                256
            ],
            64296: [
                [
                    1514
                ],
                256
            ],
            64297: [
                [
                    43
                ],
                256
            ],
            64298: [
                [
                    1513,
                    1473
                ],
                512
            ],
            64299: [
                [
                    1513,
                    1474
                ],
                512
            ],
            64300: [
                [
                    64329,
                    1473
                ],
                512
            ],
            64301: [
                [
                    64329,
                    1474
                ],
                512
            ],
            64302: [
                [
                    1488,
                    1463
                ],
                512
            ],
            64303: [
                [
                    1488,
                    1464
                ],
                512
            ],
            64304: [
                [
                    1488,
                    1468
                ],
                512
            ],
            64305: [
                [
                    1489,
                    1468
                ],
                512
            ],
            64306: [
                [
                    1490,
                    1468
                ],
                512
            ],
            64307: [
                [
                    1491,
                    1468
                ],
                512
            ],
            64308: [
                [
                    1492,
                    1468
                ],
                512
            ],
            64309: [
                [
                    1493,
                    1468
                ],
                512
            ],
            64310: [
                [
                    1494,
                    1468
                ],
                512
            ],
            64312: [
                [
                    1496,
                    1468
                ],
                512
            ],
            64313: [
                [
                    1497,
                    1468
                ],
                512
            ],
            64314: [
                [
                    1498,
                    1468
                ],
                512
            ],
            64315: [
                [
                    1499,
                    1468
                ],
                512
            ],
            64316: [
                [
                    1500,
                    1468
                ],
                512
            ],
            64318: [
                [
                    1502,
                    1468
                ],
                512
            ],
            64320: [
                [
                    1504,
                    1468
                ],
                512
            ],
            64321: [
                [
                    1505,
                    1468
                ],
                512
            ],
            64323: [
                [
                    1507,
                    1468
                ],
                512
            ],
            64324: [
                [
                    1508,
                    1468
                ],
                512
            ],
            64326: [
                [
                    1510,
                    1468
                ],
                512
            ],
            64327: [
                [
                    1511,
                    1468
                ],
                512
            ],
            64328: [
                [
                    1512,
                    1468
                ],
                512
            ],
            64329: [
                [
                    1513,
                    1468
                ],
                512
            ],
            64330: [
                [
                    1514,
                    1468
                ],
                512
            ],
            64331: [
                [
                    1493,
                    1465
                ],
                512
            ],
            64332: [
                [
                    1489,
                    1471
                ],
                512
            ],
            64333: [
                [
                    1499,
                    1471
                ],
                512
            ],
            64334: [
                [
                    1508,
                    1471
                ],
                512
            ],
            64335: [
                [
                    1488,
                    1500
                ],
                256
            ],
            64336: [
                [
                    1649
                ],
                256
            ],
            64337: [
                [
                    1649
                ],
                256
            ],
            64338: [
                [
                    1659
                ],
                256
            ],
            64339: [
                [
                    1659
                ],
                256
            ],
            64340: [
                [
                    1659
                ],
                256
            ],
            64341: [
                [
                    1659
                ],
                256
            ],
            64342: [
                [
                    1662
                ],
                256
            ],
            64343: [
                [
                    1662
                ],
                256
            ],
            64344: [
                [
                    1662
                ],
                256
            ],
            64345: [
                [
                    1662
                ],
                256
            ],
            64346: [
                [
                    1664
                ],
                256
            ],
            64347: [
                [
                    1664
                ],
                256
            ],
            64348: [
                [
                    1664
                ],
                256
            ],
            64349: [
                [
                    1664
                ],
                256
            ],
            64350: [
                [
                    1658
                ],
                256
            ],
            64351: [
                [
                    1658
                ],
                256
            ],
            64352: [
                [
                    1658
                ],
                256
            ],
            64353: [
                [
                    1658
                ],
                256
            ],
            64354: [
                [
                    1663
                ],
                256
            ],
            64355: [
                [
                    1663
                ],
                256
            ],
            64356: [
                [
                    1663
                ],
                256
            ],
            64357: [
                [
                    1663
                ],
                256
            ],
            64358: [
                [
                    1657
                ],
                256
            ],
            64359: [
                [
                    1657
                ],
                256
            ],
            64360: [
                [
                    1657
                ],
                256
            ],
            64361: [
                [
                    1657
                ],
                256
            ],
            64362: [
                [
                    1700
                ],
                256
            ],
            64363: [
                [
                    1700
                ],
                256
            ],
            64364: [
                [
                    1700
                ],
                256
            ],
            64365: [
                [
                    1700
                ],
                256
            ],
            64366: [
                [
                    1702
                ],
                256
            ],
            64367: [
                [
                    1702
                ],
                256
            ],
            64368: [
                [
                    1702
                ],
                256
            ],
            64369: [
                [
                    1702
                ],
                256
            ],
            64370: [
                [
                    1668
                ],
                256
            ],
            64371: [
                [
                    1668
                ],
                256
            ],
            64372: [
                [
                    1668
                ],
                256
            ],
            64373: [
                [
                    1668
                ],
                256
            ],
            64374: [
                [
                    1667
                ],
                256
            ],
            64375: [
                [
                    1667
                ],
                256
            ],
            64376: [
                [
                    1667
                ],
                256
            ],
            64377: [
                [
                    1667
                ],
                256
            ],
            64378: [
                [
                    1670
                ],
                256
            ],
            64379: [
                [
                    1670
                ],
                256
            ],
            64380: [
                [
                    1670
                ],
                256
            ],
            64381: [
                [
                    1670
                ],
                256
            ],
            64382: [
                [
                    1671
                ],
                256
            ],
            64383: [
                [
                    1671
                ],
                256
            ],
            64384: [
                [
                    1671
                ],
                256
            ],
            64385: [
                [
                    1671
                ],
                256
            ],
            64386: [
                [
                    1677
                ],
                256
            ],
            64387: [
                [
                    1677
                ],
                256
            ],
            64388: [
                [
                    1676
                ],
                256
            ],
            64389: [
                [
                    1676
                ],
                256
            ],
            64390: [
                [
                    1678
                ],
                256
            ],
            64391: [
                [
                    1678
                ],
                256
            ],
            64392: [
                [
                    1672
                ],
                256
            ],
            64393: [
                [
                    1672
                ],
                256
            ],
            64394: [
                [
                    1688
                ],
                256
            ],
            64395: [
                [
                    1688
                ],
                256
            ],
            64396: [
                [
                    1681
                ],
                256
            ],
            64397: [
                [
                    1681
                ],
                256
            ],
            64398: [
                [
                    1705
                ],
                256
            ],
            64399: [
                [
                    1705
                ],
                256
            ],
            64400: [
                [
                    1705
                ],
                256
            ],
            64401: [
                [
                    1705
                ],
                256
            ],
            64402: [
                [
                    1711
                ],
                256
            ],
            64403: [
                [
                    1711
                ],
                256
            ],
            64404: [
                [
                    1711
                ],
                256
            ],
            64405: [
                [
                    1711
                ],
                256
            ],
            64406: [
                [
                    1715
                ],
                256
            ],
            64407: [
                [
                    1715
                ],
                256
            ],
            64408: [
                [
                    1715
                ],
                256
            ],
            64409: [
                [
                    1715
                ],
                256
            ],
            64410: [
                [
                    1713
                ],
                256
            ],
            64411: [
                [
                    1713
                ],
                256
            ],
            64412: [
                [
                    1713
                ],
                256
            ],
            64413: [
                [
                    1713
                ],
                256
            ],
            64414: [
                [
                    1722
                ],
                256
            ],
            64415: [
                [
                    1722
                ],
                256
            ],
            64416: [
                [
                    1723
                ],
                256
            ],
            64417: [
                [
                    1723
                ],
                256
            ],
            64418: [
                [
                    1723
                ],
                256
            ],
            64419: [
                [
                    1723
                ],
                256
            ],
            64420: [
                [
                    1728
                ],
                256
            ],
            64421: [
                [
                    1728
                ],
                256
            ],
            64422: [
                [
                    1729
                ],
                256
            ],
            64423: [
                [
                    1729
                ],
                256
            ],
            64424: [
                [
                    1729
                ],
                256
            ],
            64425: [
                [
                    1729
                ],
                256
            ],
            64426: [
                [
                    1726
                ],
                256
            ],
            64427: [
                [
                    1726
                ],
                256
            ],
            64428: [
                [
                    1726
                ],
                256
            ],
            64429: [
                [
                    1726
                ],
                256
            ],
            64430: [
                [
                    1746
                ],
                256
            ],
            64431: [
                [
                    1746
                ],
                256
            ],
            64432: [
                [
                    1747
                ],
                256
            ],
            64433: [
                [
                    1747
                ],
                256
            ],
            64467: [
                [
                    1709
                ],
                256
            ],
            64468: [
                [
                    1709
                ],
                256
            ],
            64469: [
                [
                    1709
                ],
                256
            ],
            64470: [
                [
                    1709
                ],
                256
            ],
            64471: [
                [
                    1735
                ],
                256
            ],
            64472: [
                [
                    1735
                ],
                256
            ],
            64473: [
                [
                    1734
                ],
                256
            ],
            64474: [
                [
                    1734
                ],
                256
            ],
            64475: [
                [
                    1736
                ],
                256
            ],
            64476: [
                [
                    1736
                ],
                256
            ],
            64477: [
                [
                    1655
                ],
                256
            ],
            64478: [
                [
                    1739
                ],
                256
            ],
            64479: [
                [
                    1739
                ],
                256
            ],
            64480: [
                [
                    1733
                ],
                256
            ],
            64481: [
                [
                    1733
                ],
                256
            ],
            64482: [
                [
                    1737
                ],
                256
            ],
            64483: [
                [
                    1737
                ],
                256
            ],
            64484: [
                [
                    1744
                ],
                256
            ],
            64485: [
                [
                    1744
                ],
                256
            ],
            64486: [
                [
                    1744
                ],
                256
            ],
            64487: [
                [
                    1744
                ],
                256
            ],
            64488: [
                [
                    1609
                ],
                256
            ],
            64489: [
                [
                    1609
                ],
                256
            ],
            64490: [
                [
                    1574,
                    1575
                ],
                256
            ],
            64491: [
                [
                    1574,
                    1575
                ],
                256
            ],
            64492: [
                [
                    1574,
                    1749
                ],
                256
            ],
            64493: [
                [
                    1574,
                    1749
                ],
                256
            ],
            64494: [
                [
                    1574,
                    1608
                ],
                256
            ],
            64495: [
                [
                    1574,
                    1608
                ],
                256
            ],
            64496: [
                [
                    1574,
                    1735
                ],
                256
            ],
            64497: [
                [
                    1574,
                    1735
                ],
                256
            ],
            64498: [
                [
                    1574,
                    1734
                ],
                256
            ],
            64499: [
                [
                    1574,
                    1734
                ],
                256
            ],
            64500: [
                [
                    1574,
                    1736
                ],
                256
            ],
            64501: [
                [
                    1574,
                    1736
                ],
                256
            ],
            64502: [
                [
                    1574,
                    1744
                ],
                256
            ],
            64503: [
                [
                    1574,
                    1744
                ],
                256
            ],
            64504: [
                [
                    1574,
                    1744
                ],
                256
            ],
            64505: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64506: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64507: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64508: [
                [
                    1740
                ],
                256
            ],
            64509: [
                [
                    1740
                ],
                256
            ],
            64510: [
                [
                    1740
                ],
                256
            ],
            64511: [
                [
                    1740
                ],
                256
            ]
        },
        64512: {
            64512: [
                [
                    1574,
                    1580
                ],
                256
            ],
            64513: [
                [
                    1574,
                    1581
                ],
                256
            ],
            64514: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64515: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64516: [
                [
                    1574,
                    1610
                ],
                256
            ],
            64517: [
                [
                    1576,
                    1580
                ],
                256
            ],
            64518: [
                [
                    1576,
                    1581
                ],
                256
            ],
            64519: [
                [
                    1576,
                    1582
                ],
                256
            ],
            64520: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64521: [
                [
                    1576,
                    1609
                ],
                256
            ],
            64522: [
                [
                    1576,
                    1610
                ],
                256
            ],
            64523: [
                [
                    1578,
                    1580
                ],
                256
            ],
            64524: [
                [
                    1578,
                    1581
                ],
                256
            ],
            64525: [
                [
                    1578,
                    1582
                ],
                256
            ],
            64526: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64527: [
                [
                    1578,
                    1609
                ],
                256
            ],
            64528: [
                [
                    1578,
                    1610
                ],
                256
            ],
            64529: [
                [
                    1579,
                    1580
                ],
                256
            ],
            64530: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64531: [
                [
                    1579,
                    1609
                ],
                256
            ],
            64532: [
                [
                    1579,
                    1610
                ],
                256
            ],
            64533: [
                [
                    1580,
                    1581
                ],
                256
            ],
            64534: [
                [
                    1580,
                    1605
                ],
                256
            ],
            64535: [
                [
                    1581,
                    1580
                ],
                256
            ],
            64536: [
                [
                    1581,
                    1605
                ],
                256
            ],
            64537: [
                [
                    1582,
                    1580
                ],
                256
            ],
            64538: [
                [
                    1582,
                    1581
                ],
                256
            ],
            64539: [
                [
                    1582,
                    1605
                ],
                256
            ],
            64540: [
                [
                    1587,
                    1580
                ],
                256
            ],
            64541: [
                [
                    1587,
                    1581
                ],
                256
            ],
            64542: [
                [
                    1587,
                    1582
                ],
                256
            ],
            64543: [
                [
                    1587,
                    1605
                ],
                256
            ],
            64544: [
                [
                    1589,
                    1581
                ],
                256
            ],
            64545: [
                [
                    1589,
                    1605
                ],
                256
            ],
            64546: [
                [
                    1590,
                    1580
                ],
                256
            ],
            64547: [
                [
                    1590,
                    1581
                ],
                256
            ],
            64548: [
                [
                    1590,
                    1582
                ],
                256
            ],
            64549: [
                [
                    1590,
                    1605
                ],
                256
            ],
            64550: [
                [
                    1591,
                    1581
                ],
                256
            ],
            64551: [
                [
                    1591,
                    1605
                ],
                256
            ],
            64552: [
                [
                    1592,
                    1605
                ],
                256
            ],
            64553: [
                [
                    1593,
                    1580
                ],
                256
            ],
            64554: [
                [
                    1593,
                    1605
                ],
                256
            ],
            64555: [
                [
                    1594,
                    1580
                ],
                256
            ],
            64556: [
                [
                    1594,
                    1605
                ],
                256
            ],
            64557: [
                [
                    1601,
                    1580
                ],
                256
            ],
            64558: [
                [
                    1601,
                    1581
                ],
                256
            ],
            64559: [
                [
                    1601,
                    1582
                ],
                256
            ],
            64560: [
                [
                    1601,
                    1605
                ],
                256
            ],
            64561: [
                [
                    1601,
                    1609
                ],
                256
            ],
            64562: [
                [
                    1601,
                    1610
                ],
                256
            ],
            64563: [
                [
                    1602,
                    1581
                ],
                256
            ],
            64564: [
                [
                    1602,
                    1605
                ],
                256
            ],
            64565: [
                [
                    1602,
                    1609
                ],
                256
            ],
            64566: [
                [
                    1602,
                    1610
                ],
                256
            ],
            64567: [
                [
                    1603,
                    1575
                ],
                256
            ],
            64568: [
                [
                    1603,
                    1580
                ],
                256
            ],
            64569: [
                [
                    1603,
                    1581
                ],
                256
            ],
            64570: [
                [
                    1603,
                    1582
                ],
                256
            ],
            64571: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64572: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64573: [
                [
                    1603,
                    1609
                ],
                256
            ],
            64574: [
                [
                    1603,
                    1610
                ],
                256
            ],
            64575: [
                [
                    1604,
                    1580
                ],
                256
            ],
            64576: [
                [
                    1604,
                    1581
                ],
                256
            ],
            64577: [
                [
                    1604,
                    1582
                ],
                256
            ],
            64578: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64579: [
                [
                    1604,
                    1609
                ],
                256
            ],
            64580: [
                [
                    1604,
                    1610
                ],
                256
            ],
            64581: [
                [
                    1605,
                    1580
                ],
                256
            ],
            64582: [
                [
                    1605,
                    1581
                ],
                256
            ],
            64583: [
                [
                    1605,
                    1582
                ],
                256
            ],
            64584: [
                [
                    1605,
                    1605
                ],
                256
            ],
            64585: [
                [
                    1605,
                    1609
                ],
                256
            ],
            64586: [
                [
                    1605,
                    1610
                ],
                256
            ],
            64587: [
                [
                    1606,
                    1580
                ],
                256
            ],
            64588: [
                [
                    1606,
                    1581
                ],
                256
            ],
            64589: [
                [
                    1606,
                    1582
                ],
                256
            ],
            64590: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64591: [
                [
                    1606,
                    1609
                ],
                256
            ],
            64592: [
                [
                    1606,
                    1610
                ],
                256
            ],
            64593: [
                [
                    1607,
                    1580
                ],
                256
            ],
            64594: [
                [
                    1607,
                    1605
                ],
                256
            ],
            64595: [
                [
                    1607,
                    1609
                ],
                256
            ],
            64596: [
                [
                    1607,
                    1610
                ],
                256
            ],
            64597: [
                [
                    1610,
                    1580
                ],
                256
            ],
            64598: [
                [
                    1610,
                    1581
                ],
                256
            ],
            64599: [
                [
                    1610,
                    1582
                ],
                256
            ],
            64600: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64601: [
                [
                    1610,
                    1609
                ],
                256
            ],
            64602: [
                [
                    1610,
                    1610
                ],
                256
            ],
            64603: [
                [
                    1584,
                    1648
                ],
                256
            ],
            64604: [
                [
                    1585,
                    1648
                ],
                256
            ],
            64605: [
                [
                    1609,
                    1648
                ],
                256
            ],
            64606: [
                [
                    32,
                    1612,
                    1617
                ],
                256
            ],
            64607: [
                [
                    32,
                    1613,
                    1617
                ],
                256
            ],
            64608: [
                [
                    32,
                    1614,
                    1617
                ],
                256
            ],
            64609: [
                [
                    32,
                    1615,
                    1617
                ],
                256
            ],
            64610: [
                [
                    32,
                    1616,
                    1617
                ],
                256
            ],
            64611: [
                [
                    32,
                    1617,
                    1648
                ],
                256
            ],
            64612: [
                [
                    1574,
                    1585
                ],
                256
            ],
            64613: [
                [
                    1574,
                    1586
                ],
                256
            ],
            64614: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64615: [
                [
                    1574,
                    1606
                ],
                256
            ],
            64616: [
                [
                    1574,
                    1609
                ],
                256
            ],
            64617: [
                [
                    1574,
                    1610
                ],
                256
            ],
            64618: [
                [
                    1576,
                    1585
                ],
                256
            ],
            64619: [
                [
                    1576,
                    1586
                ],
                256
            ],
            64620: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64621: [
                [
                    1576,
                    1606
                ],
                256
            ],
            64622: [
                [
                    1576,
                    1609
                ],
                256
            ],
            64623: [
                [
                    1576,
                    1610
                ],
                256
            ],
            64624: [
                [
                    1578,
                    1585
                ],
                256
            ],
            64625: [
                [
                    1578,
                    1586
                ],
                256
            ],
            64626: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64627: [
                [
                    1578,
                    1606
                ],
                256
            ],
            64628: [
                [
                    1578,
                    1609
                ],
                256
            ],
            64629: [
                [
                    1578,
                    1610
                ],
                256
            ],
            64630: [
                [
                    1579,
                    1585
                ],
                256
            ],
            64631: [
                [
                    1579,
                    1586
                ],
                256
            ],
            64632: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64633: [
                [
                    1579,
                    1606
                ],
                256
            ],
            64634: [
                [
                    1579,
                    1609
                ],
                256
            ],
            64635: [
                [
                    1579,
                    1610
                ],
                256
            ],
            64636: [
                [
                    1601,
                    1609
                ],
                256
            ],
            64637: [
                [
                    1601,
                    1610
                ],
                256
            ],
            64638: [
                [
                    1602,
                    1609
                ],
                256
            ],
            64639: [
                [
                    1602,
                    1610
                ],
                256
            ],
            64640: [
                [
                    1603,
                    1575
                ],
                256
            ],
            64641: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64642: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64643: [
                [
                    1603,
                    1609
                ],
                256
            ],
            64644: [
                [
                    1603,
                    1610
                ],
                256
            ],
            64645: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64646: [
                [
                    1604,
                    1609
                ],
                256
            ],
            64647: [
                [
                    1604,
                    1610
                ],
                256
            ],
            64648: [
                [
                    1605,
                    1575
                ],
                256
            ],
            64649: [
                [
                    1605,
                    1605
                ],
                256
            ],
            64650: [
                [
                    1606,
                    1585
                ],
                256
            ],
            64651: [
                [
                    1606,
                    1586
                ],
                256
            ],
            64652: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64653: [
                [
                    1606,
                    1606
                ],
                256
            ],
            64654: [
                [
                    1606,
                    1609
                ],
                256
            ],
            64655: [
                [
                    1606,
                    1610
                ],
                256
            ],
            64656: [
                [
                    1609,
                    1648
                ],
                256
            ],
            64657: [
                [
                    1610,
                    1585
                ],
                256
            ],
            64658: [
                [
                    1610,
                    1586
                ],
                256
            ],
            64659: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64660: [
                [
                    1610,
                    1606
                ],
                256
            ],
            64661: [
                [
                    1610,
                    1609
                ],
                256
            ],
            64662: [
                [
                    1610,
                    1610
                ],
                256
            ],
            64663: [
                [
                    1574,
                    1580
                ],
                256
            ],
            64664: [
                [
                    1574,
                    1581
                ],
                256
            ],
            64665: [
                [
                    1574,
                    1582
                ],
                256
            ],
            64666: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64667: [
                [
                    1574,
                    1607
                ],
                256
            ],
            64668: [
                [
                    1576,
                    1580
                ],
                256
            ],
            64669: [
                [
                    1576,
                    1581
                ],
                256
            ],
            64670: [
                [
                    1576,
                    1582
                ],
                256
            ],
            64671: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64672: [
                [
                    1576,
                    1607
                ],
                256
            ],
            64673: [
                [
                    1578,
                    1580
                ],
                256
            ],
            64674: [
                [
                    1578,
                    1581
                ],
                256
            ],
            64675: [
                [
                    1578,
                    1582
                ],
                256
            ],
            64676: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64677: [
                [
                    1578,
                    1607
                ],
                256
            ],
            64678: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64679: [
                [
                    1580,
                    1581
                ],
                256
            ],
            64680: [
                [
                    1580,
                    1605
                ],
                256
            ],
            64681: [
                [
                    1581,
                    1580
                ],
                256
            ],
            64682: [
                [
                    1581,
                    1605
                ],
                256
            ],
            64683: [
                [
                    1582,
                    1580
                ],
                256
            ],
            64684: [
                [
                    1582,
                    1605
                ],
                256
            ],
            64685: [
                [
                    1587,
                    1580
                ],
                256
            ],
            64686: [
                [
                    1587,
                    1581
                ],
                256
            ],
            64687: [
                [
                    1587,
                    1582
                ],
                256
            ],
            64688: [
                [
                    1587,
                    1605
                ],
                256
            ],
            64689: [
                [
                    1589,
                    1581
                ],
                256
            ],
            64690: [
                [
                    1589,
                    1582
                ],
                256
            ],
            64691: [
                [
                    1589,
                    1605
                ],
                256
            ],
            64692: [
                [
                    1590,
                    1580
                ],
                256
            ],
            64693: [
                [
                    1590,
                    1581
                ],
                256
            ],
            64694: [
                [
                    1590,
                    1582
                ],
                256
            ],
            64695: [
                [
                    1590,
                    1605
                ],
                256
            ],
            64696: [
                [
                    1591,
                    1581
                ],
                256
            ],
            64697: [
                [
                    1592,
                    1605
                ],
                256
            ],
            64698: [
                [
                    1593,
                    1580
                ],
                256
            ],
            64699: [
                [
                    1593,
                    1605
                ],
                256
            ],
            64700: [
                [
                    1594,
                    1580
                ],
                256
            ],
            64701: [
                [
                    1594,
                    1605
                ],
                256
            ],
            64702: [
                [
                    1601,
                    1580
                ],
                256
            ],
            64703: [
                [
                    1601,
                    1581
                ],
                256
            ],
            64704: [
                [
                    1601,
                    1582
                ],
                256
            ],
            64705: [
                [
                    1601,
                    1605
                ],
                256
            ],
            64706: [
                [
                    1602,
                    1581
                ],
                256
            ],
            64707: [
                [
                    1602,
                    1605
                ],
                256
            ],
            64708: [
                [
                    1603,
                    1580
                ],
                256
            ],
            64709: [
                [
                    1603,
                    1581
                ],
                256
            ],
            64710: [
                [
                    1603,
                    1582
                ],
                256
            ],
            64711: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64712: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64713: [
                [
                    1604,
                    1580
                ],
                256
            ],
            64714: [
                [
                    1604,
                    1581
                ],
                256
            ],
            64715: [
                [
                    1604,
                    1582
                ],
                256
            ],
            64716: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64717: [
                [
                    1604,
                    1607
                ],
                256
            ],
            64718: [
                [
                    1605,
                    1580
                ],
                256
            ],
            64719: [
                [
                    1605,
                    1581
                ],
                256
            ],
            64720: [
                [
                    1605,
                    1582
                ],
                256
            ],
            64721: [
                [
                    1605,
                    1605
                ],
                256
            ],
            64722: [
                [
                    1606,
                    1580
                ],
                256
            ],
            64723: [
                [
                    1606,
                    1581
                ],
                256
            ],
            64724: [
                [
                    1606,
                    1582
                ],
                256
            ],
            64725: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64726: [
                [
                    1606,
                    1607
                ],
                256
            ],
            64727: [
                [
                    1607,
                    1580
                ],
                256
            ],
            64728: [
                [
                    1607,
                    1605
                ],
                256
            ],
            64729: [
                [
                    1607,
                    1648
                ],
                256
            ],
            64730: [
                [
                    1610,
                    1580
                ],
                256
            ],
            64731: [
                [
                    1610,
                    1581
                ],
                256
            ],
            64732: [
                [
                    1610,
                    1582
                ],
                256
            ],
            64733: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64734: [
                [
                    1610,
                    1607
                ],
                256
            ],
            64735: [
                [
                    1574,
                    1605
                ],
                256
            ],
            64736: [
                [
                    1574,
                    1607
                ],
                256
            ],
            64737: [
                [
                    1576,
                    1605
                ],
                256
            ],
            64738: [
                [
                    1576,
                    1607
                ],
                256
            ],
            64739: [
                [
                    1578,
                    1605
                ],
                256
            ],
            64740: [
                [
                    1578,
                    1607
                ],
                256
            ],
            64741: [
                [
                    1579,
                    1605
                ],
                256
            ],
            64742: [
                [
                    1579,
                    1607
                ],
                256
            ],
            64743: [
                [
                    1587,
                    1605
                ],
                256
            ],
            64744: [
                [
                    1587,
                    1607
                ],
                256
            ],
            64745: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64746: [
                [
                    1588,
                    1607
                ],
                256
            ],
            64747: [
                [
                    1603,
                    1604
                ],
                256
            ],
            64748: [
                [
                    1603,
                    1605
                ],
                256
            ],
            64749: [
                [
                    1604,
                    1605
                ],
                256
            ],
            64750: [
                [
                    1606,
                    1605
                ],
                256
            ],
            64751: [
                [
                    1606,
                    1607
                ],
                256
            ],
            64752: [
                [
                    1610,
                    1605
                ],
                256
            ],
            64753: [
                [
                    1610,
                    1607
                ],
                256
            ],
            64754: [
                [
                    1600,
                    1614,
                    1617
                ],
                256
            ],
            64755: [
                [
                    1600,
                    1615,
                    1617
                ],
                256
            ],
            64756: [
                [
                    1600,
                    1616,
                    1617
                ],
                256
            ],
            64757: [
                [
                    1591,
                    1609
                ],
                256
            ],
            64758: [
                [
                    1591,
                    1610
                ],
                256
            ],
            64759: [
                [
                    1593,
                    1609
                ],
                256
            ],
            64760: [
                [
                    1593,
                    1610
                ],
                256
            ],
            64761: [
                [
                    1594,
                    1609
                ],
                256
            ],
            64762: [
                [
                    1594,
                    1610
                ],
                256
            ],
            64763: [
                [
                    1587,
                    1609
                ],
                256
            ],
            64764: [
                [
                    1587,
                    1610
                ],
                256
            ],
            64765: [
                [
                    1588,
                    1609
                ],
                256
            ],
            64766: [
                [
                    1588,
                    1610
                ],
                256
            ],
            64767: [
                [
                    1581,
                    1609
                ],
                256
            ]
        },
        64768: {
            64768: [
                [
                    1581,
                    1610
                ],
                256
            ],
            64769: [
                [
                    1580,
                    1609
                ],
                256
            ],
            64770: [
                [
                    1580,
                    1610
                ],
                256
            ],
            64771: [
                [
                    1582,
                    1609
                ],
                256
            ],
            64772: [
                [
                    1582,
                    1610
                ],
                256
            ],
            64773: [
                [
                    1589,
                    1609
                ],
                256
            ],
            64774: [
                [
                    1589,
                    1610
                ],
                256
            ],
            64775: [
                [
                    1590,
                    1609
                ],
                256
            ],
            64776: [
                [
                    1590,
                    1610
                ],
                256
            ],
            64777: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64778: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64779: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64780: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64781: [
                [
                    1588,
                    1585
                ],
                256
            ],
            64782: [
                [
                    1587,
                    1585
                ],
                256
            ],
            64783: [
                [
                    1589,
                    1585
                ],
                256
            ],
            64784: [
                [
                    1590,
                    1585
                ],
                256
            ],
            64785: [
                [
                    1591,
                    1609
                ],
                256
            ],
            64786: [
                [
                    1591,
                    1610
                ],
                256
            ],
            64787: [
                [
                    1593,
                    1609
                ],
                256
            ],
            64788: [
                [
                    1593,
                    1610
                ],
                256
            ],
            64789: [
                [
                    1594,
                    1609
                ],
                256
            ],
            64790: [
                [
                    1594,
                    1610
                ],
                256
            ],
            64791: [
                [
                    1587,
                    1609
                ],
                256
            ],
            64792: [
                [
                    1587,
                    1610
                ],
                256
            ],
            64793: [
                [
                    1588,
                    1609
                ],
                256
            ],
            64794: [
                [
                    1588,
                    1610
                ],
                256
            ],
            64795: [
                [
                    1581,
                    1609
                ],
                256
            ],
            64796: [
                [
                    1581,
                    1610
                ],
                256
            ],
            64797: [
                [
                    1580,
                    1609
                ],
                256
            ],
            64798: [
                [
                    1580,
                    1610
                ],
                256
            ],
            64799: [
                [
                    1582,
                    1609
                ],
                256
            ],
            64800: [
                [
                    1582,
                    1610
                ],
                256
            ],
            64801: [
                [
                    1589,
                    1609
                ],
                256
            ],
            64802: [
                [
                    1589,
                    1610
                ],
                256
            ],
            64803: [
                [
                    1590,
                    1609
                ],
                256
            ],
            64804: [
                [
                    1590,
                    1610
                ],
                256
            ],
            64805: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64806: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64807: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64808: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64809: [
                [
                    1588,
                    1585
                ],
                256
            ],
            64810: [
                [
                    1587,
                    1585
                ],
                256
            ],
            64811: [
                [
                    1589,
                    1585
                ],
                256
            ],
            64812: [
                [
                    1590,
                    1585
                ],
                256
            ],
            64813: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64814: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64815: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64816: [
                [
                    1588,
                    1605
                ],
                256
            ],
            64817: [
                [
                    1587,
                    1607
                ],
                256
            ],
            64818: [
                [
                    1588,
                    1607
                ],
                256
            ],
            64819: [
                [
                    1591,
                    1605
                ],
                256
            ],
            64820: [
                [
                    1587,
                    1580
                ],
                256
            ],
            64821: [
                [
                    1587,
                    1581
                ],
                256
            ],
            64822: [
                [
                    1587,
                    1582
                ],
                256
            ],
            64823: [
                [
                    1588,
                    1580
                ],
                256
            ],
            64824: [
                [
                    1588,
                    1581
                ],
                256
            ],
            64825: [
                [
                    1588,
                    1582
                ],
                256
            ],
            64826: [
                [
                    1591,
                    1605
                ],
                256
            ],
            64827: [
                [
                    1592,
                    1605
                ],
                256
            ],
            64828: [
                [
                    1575,
                    1611
                ],
                256
            ],
            64829: [
                [
                    1575,
                    1611
                ],
                256
            ],
            64848: [
                [
                    1578,
                    1580,
                    1605
                ],
                256
            ],
            64849: [
                [
                    1578,
                    1581,
                    1580
                ],
                256
            ],
            64850: [
                [
                    1578,
                    1581,
                    1580
                ],
                256
            ],
            64851: [
                [
                    1578,
                    1581,
                    1605
                ],
                256
            ],
            64852: [
                [
                    1578,
                    1582,
                    1605
                ],
                256
            ],
            64853: [
                [
                    1578,
                    1605,
                    1580
                ],
                256
            ],
            64854: [
                [
                    1578,
                    1605,
                    1581
                ],
                256
            ],
            64855: [
                [
                    1578,
                    1605,
                    1582
                ],
                256
            ],
            64856: [
                [
                    1580,
                    1605,
                    1581
                ],
                256
            ],
            64857: [
                [
                    1580,
                    1605,
                    1581
                ],
                256
            ],
            64858: [
                [
                    1581,
                    1605,
                    1610
                ],
                256
            ],
            64859: [
                [
                    1581,
                    1605,
                    1609
                ],
                256
            ],
            64860: [
                [
                    1587,
                    1581,
                    1580
                ],
                256
            ],
            64861: [
                [
                    1587,
                    1580,
                    1581
                ],
                256
            ],
            64862: [
                [
                    1587,
                    1580,
                    1609
                ],
                256
            ],
            64863: [
                [
                    1587,
                    1605,
                    1581
                ],
                256
            ],
            64864: [
                [
                    1587,
                    1605,
                    1581
                ],
                256
            ],
            64865: [
                [
                    1587,
                    1605,
                    1580
                ],
                256
            ],
            64866: [
                [
                    1587,
                    1605,
                    1605
                ],
                256
            ],
            64867: [
                [
                    1587,
                    1605,
                    1605
                ],
                256
            ],
            64868: [
                [
                    1589,
                    1581,
                    1581
                ],
                256
            ],
            64869: [
                [
                    1589,
                    1581,
                    1581
                ],
                256
            ],
            64870: [
                [
                    1589,
                    1605,
                    1605
                ],
                256
            ],
            64871: [
                [
                    1588,
                    1581,
                    1605
                ],
                256
            ],
            64872: [
                [
                    1588,
                    1581,
                    1605
                ],
                256
            ],
            64873: [
                [
                    1588,
                    1580,
                    1610
                ],
                256
            ],
            64874: [
                [
                    1588,
                    1605,
                    1582
                ],
                256
            ],
            64875: [
                [
                    1588,
                    1605,
                    1582
                ],
                256
            ],
            64876: [
                [
                    1588,
                    1605,
                    1605
                ],
                256
            ],
            64877: [
                [
                    1588,
                    1605,
                    1605
                ],
                256
            ],
            64878: [
                [
                    1590,
                    1581,
                    1609
                ],
                256
            ],
            64879: [
                [
                    1590,
                    1582,
                    1605
                ],
                256
            ],
            64880: [
                [
                    1590,
                    1582,
                    1605
                ],
                256
            ],
            64881: [
                [
                    1591,
                    1605,
                    1581
                ],
                256
            ],
            64882: [
                [
                    1591,
                    1605,
                    1581
                ],
                256
            ],
            64883: [
                [
                    1591,
                    1605,
                    1605
                ],
                256
            ],
            64884: [
                [
                    1591,
                    1605,
                    1610
                ],
                256
            ],
            64885: [
                [
                    1593,
                    1580,
                    1605
                ],
                256
            ],
            64886: [
                [
                    1593,
                    1605,
                    1605
                ],
                256
            ],
            64887: [
                [
                    1593,
                    1605,
                    1605
                ],
                256
            ],
            64888: [
                [
                    1593,
                    1605,
                    1609
                ],
                256
            ],
            64889: [
                [
                    1594,
                    1605,
                    1605
                ],
                256
            ],
            64890: [
                [
                    1594,
                    1605,
                    1610
                ],
                256
            ],
            64891: [
                [
                    1594,
                    1605,
                    1609
                ],
                256
            ],
            64892: [
                [
                    1601,
                    1582,
                    1605
                ],
                256
            ],
            64893: [
                [
                    1601,
                    1582,
                    1605
                ],
                256
            ],
            64894: [
                [
                    1602,
                    1605,
                    1581
                ],
                256
            ],
            64895: [
                [
                    1602,
                    1605,
                    1605
                ],
                256
            ],
            64896: [
                [
                    1604,
                    1581,
                    1605
                ],
                256
            ],
            64897: [
                [
                    1604,
                    1581,
                    1610
                ],
                256
            ],
            64898: [
                [
                    1604,
                    1581,
                    1609
                ],
                256
            ],
            64899: [
                [
                    1604,
                    1580,
                    1580
                ],
                256
            ],
            64900: [
                [
                    1604,
                    1580,
                    1580
                ],
                256
            ],
            64901: [
                [
                    1604,
                    1582,
                    1605
                ],
                256
            ],
            64902: [
                [
                    1604,
                    1582,
                    1605
                ],
                256
            ],
            64903: [
                [
                    1604,
                    1605,
                    1581
                ],
                256
            ],
            64904: [
                [
                    1604,
                    1605,
                    1581
                ],
                256
            ],
            64905: [
                [
                    1605,
                    1581,
                    1580
                ],
                256
            ],
            64906: [
                [
                    1605,
                    1581,
                    1605
                ],
                256
            ],
            64907: [
                [
                    1605,
                    1581,
                    1610
                ],
                256
            ],
            64908: [
                [
                    1605,
                    1580,
                    1581
                ],
                256
            ],
            64909: [
                [
                    1605,
                    1580,
                    1605
                ],
                256
            ],
            64910: [
                [
                    1605,
                    1582,
                    1580
                ],
                256
            ],
            64911: [
                [
                    1605,
                    1582,
                    1605
                ],
                256
            ],
            64914: [
                [
                    1605,
                    1580,
                    1582
                ],
                256
            ],
            64915: [
                [
                    1607,
                    1605,
                    1580
                ],
                256
            ],
            64916: [
                [
                    1607,
                    1605,
                    1605
                ],
                256
            ],
            64917: [
                [
                    1606,
                    1581,
                    1605
                ],
                256
            ],
            64918: [
                [
                    1606,
                    1581,
                    1609
                ],
                256
            ],
            64919: [
                [
                    1606,
                    1580,
                    1605
                ],
                256
            ],
            64920: [
                [
                    1606,
                    1580,
                    1605
                ],
                256
            ],
            64921: [
                [
                    1606,
                    1580,
                    1609
                ],
                256
            ],
            64922: [
                [
                    1606,
                    1605,
                    1610
                ],
                256
            ],
            64923: [
                [
                    1606,
                    1605,
                    1609
                ],
                256
            ],
            64924: [
                [
                    1610,
                    1605,
                    1605
                ],
                256
            ],
            64925: [
                [
                    1610,
                    1605,
                    1605
                ],
                256
            ],
            64926: [
                [
                    1576,
                    1582,
                    1610
                ],
                256
            ],
            64927: [
                [
                    1578,
                    1580,
                    1610
                ],
                256
            ],
            64928: [
                [
                    1578,
                    1580,
                    1609
                ],
                256
            ],
            64929: [
                [
                    1578,
                    1582,
                    1610
                ],
                256
            ],
            64930: [
                [
                    1578,
                    1582,
                    1609
                ],
                256
            ],
            64931: [
                [
                    1578,
                    1605,
                    1610
                ],
                256
            ],
            64932: [
                [
                    1578,
                    1605,
                    1609
                ],
                256
            ],
            64933: [
                [
                    1580,
                    1605,
                    1610
                ],
                256
            ],
            64934: [
                [
                    1580,
                    1581,
                    1609
                ],
                256
            ],
            64935: [
                [
                    1580,
                    1605,
                    1609
                ],
                256
            ],
            64936: [
                [
                    1587,
                    1582,
                    1609
                ],
                256
            ],
            64937: [
                [
                    1589,
                    1581,
                    1610
                ],
                256
            ],
            64938: [
                [
                    1588,
                    1581,
                    1610
                ],
                256
            ],
            64939: [
                [
                    1590,
                    1581,
                    1610
                ],
                256
            ],
            64940: [
                [
                    1604,
                    1580,
                    1610
                ],
                256
            ],
            64941: [
                [
                    1604,
                    1605,
                    1610
                ],
                256
            ],
            64942: [
                [
                    1610,
                    1581,
                    1610
                ],
                256
            ],
            64943: [
                [
                    1610,
                    1580,
                    1610
                ],
                256
            ],
            64944: [
                [
                    1610,
                    1605,
                    1610
                ],
                256
            ],
            64945: [
                [
                    1605,
                    1605,
                    1610
                ],
                256
            ],
            64946: [
                [
                    1602,
                    1605,
                    1610
                ],
                256
            ],
            64947: [
                [
                    1606,
                    1581,
                    1610
                ],
                256
            ],
            64948: [
                [
                    1602,
                    1605,
                    1581
                ],
                256
            ],
            64949: [
                [
                    1604,
                    1581,
                    1605
                ],
                256
            ],
            64950: [
                [
                    1593,
                    1605,
                    1610
                ],
                256
            ],
            64951: [
                [
                    1603,
                    1605,
                    1610
                ],
                256
            ],
            64952: [
                [
                    1606,
                    1580,
                    1581
                ],
                256
            ],
            64953: [
                [
                    1605,
                    1582,
                    1610
                ],
                256
            ],
            64954: [
                [
                    1604,
                    1580,
                    1605
                ],
                256
            ],
            64955: [
                [
                    1603,
                    1605,
                    1605
                ],
                256
            ],
            64956: [
                [
                    1604,
                    1580,
                    1605
                ],
                256
            ],
            64957: [
                [
                    1606,
                    1580,
                    1581
                ],
                256
            ],
            64958: [
                [
                    1580,
                    1581,
                    1610
                ],
                256
            ],
            64959: [
                [
                    1581,
                    1580,
                    1610
                ],
                256
            ],
            64960: [
                [
                    1605,
                    1580,
                    1610
                ],
                256
            ],
            64961: [
                [
                    1601,
                    1605,
                    1610
                ],
                256
            ],
            64962: [
                [
                    1576,
                    1581,
                    1610
                ],
                256
            ],
            64963: [
                [
                    1603,
                    1605,
                    1605
                ],
                256
            ],
            64964: [
                [
                    1593,
                    1580,
                    1605
                ],
                256
            ],
            64965: [
                [
                    1589,
                    1605,
                    1605
                ],
                256
            ],
            64966: [
                [
                    1587,
                    1582,
                    1610
                ],
                256
            ],
            64967: [
                [
                    1606,
                    1580,
                    1610
                ],
                256
            ],
            65008: [
                [
                    1589,
                    1604,
                    1746
                ],
                256
            ],
            65009: [
                [
                    1602,
                    1604,
                    1746
                ],
                256
            ],
            65010: [
                [
                    1575,
                    1604,
                    1604,
                    1607
                ],
                256
            ],
            65011: [
                [
                    1575,
                    1603,
                    1576,
                    1585
                ],
                256
            ],
            65012: [
                [
                    1605,
                    1581,
                    1605,
                    1583
                ],
                256
            ],
            65013: [
                [
                    1589,
                    1604,
                    1593,
                    1605
                ],
                256
            ],
            65014: [
                [
                    1585,
                    1587,
                    1608,
                    1604
                ],
                256
            ],
            65015: [
                [
                    1593,
                    1604,
                    1610,
                    1607
                ],
                256
            ],
            65016: [
                [
                    1608,
                    1587,
                    1604,
                    1605
                ],
                256
            ],
            65017: [
                [
                    1589,
                    1604,
                    1609
                ],
                256
            ],
            65018: [
                [
                    1589,
                    1604,
                    1609,
                    32,
                    1575,
                    1604,
                    1604,
                    1607,
                    32,
                    1593,
                    1604,
                    1610,
                    1607,
                    32,
                    1608,
                    1587,
                    1604,
                    1605
                ],
                256
            ],
            65019: [
                [
                    1580,
                    1604,
                    32,
                    1580,
                    1604,
                    1575,
                    1604,
                    1607
                ],
                256
            ],
            65020: [
                [
                    1585,
                    1740,
                    1575,
                    1604
                ],
                256
            ]
        },
        65024: {
            65040: [
                [
                    44
                ],
                256
            ],
            65041: [
                [
                    12289
                ],
                256
            ],
            65042: [
                [
                    12290
                ],
                256
            ],
            65043: [
                [
                    58
                ],
                256
            ],
            65044: [
                [
                    59
                ],
                256
            ],
            65045: [
                [
                    33
                ],
                256
            ],
            65046: [
                [
                    63
                ],
                256
            ],
            65047: [
                [
                    12310
                ],
                256
            ],
            65048: [
                [
                    12311
                ],
                256
            ],
            65049: [
                [
                    8230
                ],
                256
            ],
            65056: [
                ,
                230
            ],
            65057: [
                ,
                230
            ],
            65058: [
                ,
                230
            ],
            65059: [
                ,
                230
            ],
            65060: [
                ,
                230
            ],
            65061: [
                ,
                230
            ],
            65062: [
                ,
                230
            ],
            65063: [
                ,
                220
            ],
            65064: [
                ,
                220
            ],
            65065: [
                ,
                220
            ],
            65066: [
                ,
                220
            ],
            65067: [
                ,
                220
            ],
            65068: [
                ,
                220
            ],
            65069: [
                ,
                220
            ],
            65072: [
                [
                    8229
                ],
                256
            ],
            65073: [
                [
                    8212
                ],
                256
            ],
            65074: [
                [
                    8211
                ],
                256
            ],
            65075: [
                [
                    95
                ],
                256
            ],
            65076: [
                [
                    95
                ],
                256
            ],
            65077: [
                [
                    40
                ],
                256
            ],
            65078: [
                [
                    41
                ],
                256
            ],
            65079: [
                [
                    123
                ],
                256
            ],
            65080: [
                [
                    125
                ],
                256
            ],
            65081: [
                [
                    12308
                ],
                256
            ],
            65082: [
                [
                    12309
                ],
                256
            ],
            65083: [
                [
                    12304
                ],
                256
            ],
            65084: [
                [
                    12305
                ],
                256
            ],
            65085: [
                [
                    12298
                ],
                256
            ],
            65086: [
                [
                    12299
                ],
                256
            ],
            65087: [
                [
                    12296
                ],
                256
            ],
            65088: [
                [
                    12297
                ],
                256
            ],
            65089: [
                [
                    12300
                ],
                256
            ],
            65090: [
                [
                    12301
                ],
                256
            ],
            65091: [
                [
                    12302
                ],
                256
            ],
            65092: [
                [
                    12303
                ],
                256
            ],
            65095: [
                [
                    91
                ],
                256
            ],
            65096: [
                [
                    93
                ],
                256
            ],
            65097: [
                [
                    8254
                ],
                256
            ],
            65098: [
                [
                    8254
                ],
                256
            ],
            65099: [
                [
                    8254
                ],
                256
            ],
            65100: [
                [
                    8254
                ],
                256
            ],
            65101: [
                [
                    95
                ],
                256
            ],
            65102: [
                [
                    95
                ],
                256
            ],
            65103: [
                [
                    95
                ],
                256
            ],
            65104: [
                [
                    44
                ],
                256
            ],
            65105: [
                [
                    12289
                ],
                256
            ],
            65106: [
                [
                    46
                ],
                256
            ],
            65108: [
                [
                    59
                ],
                256
            ],
            65109: [
                [
                    58
                ],
                256
            ],
            65110: [
                [
                    63
                ],
                256
            ],
            65111: [
                [
                    33
                ],
                256
            ],
            65112: [
                [
                    8212
                ],
                256
            ],
            65113: [
                [
                    40
                ],
                256
            ],
            65114: [
                [
                    41
                ],
                256
            ],
            65115: [
                [
                    123
                ],
                256
            ],
            65116: [
                [
                    125
                ],
                256
            ],
            65117: [
                [
                    12308
                ],
                256
            ],
            65118: [
                [
                    12309
                ],
                256
            ],
            65119: [
                [
                    35
                ],
                256
            ],
            65120: [
                [
                    38
                ],
                256
            ],
            65121: [
                [
                    42
                ],
                256
            ],
            65122: [
                [
                    43
                ],
                256
            ],
            65123: [
                [
                    45
                ],
                256
            ],
            65124: [
                [
                    60
                ],
                256
            ],
            65125: [
                [
                    62
                ],
                256
            ],
            65126: [
                [
                    61
                ],
                256
            ],
            65128: [
                [
                    92
                ],
                256
            ],
            65129: [
                [
                    36
                ],
                256
            ],
            65130: [
                [
                    37
                ],
                256
            ],
            65131: [
                [
                    64
                ],
                256
            ],
            65136: [
                [
                    32,
                    1611
                ],
                256
            ],
            65137: [
                [
                    1600,
                    1611
                ],
                256
            ],
            65138: [
                [
                    32,
                    1612
                ],
                256
            ],
            65140: [
                [
                    32,
                    1613
                ],
                256
            ],
            65142: [
                [
                    32,
                    1614
                ],
                256
            ],
            65143: [
                [
                    1600,
                    1614
                ],
                256
            ],
            65144: [
                [
                    32,
                    1615
                ],
                256
            ],
            65145: [
                [
                    1600,
                    1615
                ],
                256
            ],
            65146: [
                [
                    32,
                    1616
                ],
                256
            ],
            65147: [
                [
                    1600,
                    1616
                ],
                256
            ],
            65148: [
                [
                    32,
                    1617
                ],
                256
            ],
            65149: [
                [
                    1600,
                    1617
                ],
                256
            ],
            65150: [
                [
                    32,
                    1618
                ],
                256
            ],
            65151: [
                [
                    1600,
                    1618
                ],
                256
            ],
            65152: [
                [
                    1569
                ],
                256
            ],
            65153: [
                [
                    1570
                ],
                256
            ],
            65154: [
                [
                    1570
                ],
                256
            ],
            65155: [
                [
                    1571
                ],
                256
            ],
            65156: [
                [
                    1571
                ],
                256
            ],
            65157: [
                [
                    1572
                ],
                256
            ],
            65158: [
                [
                    1572
                ],
                256
            ],
            65159: [
                [
                    1573
                ],
                256
            ],
            65160: [
                [
                    1573
                ],
                256
            ],
            65161: [
                [
                    1574
                ],
                256
            ],
            65162: [
                [
                    1574
                ],
                256
            ],
            65163: [
                [
                    1574
                ],
                256
            ],
            65164: [
                [
                    1574
                ],
                256
            ],
            65165: [
                [
                    1575
                ],
                256
            ],
            65166: [
                [
                    1575
                ],
                256
            ],
            65167: [
                [
                    1576
                ],
                256
            ],
            65168: [
                [
                    1576
                ],
                256
            ],
            65169: [
                [
                    1576
                ],
                256
            ],
            65170: [
                [
                    1576
                ],
                256
            ],
            65171: [
                [
                    1577
                ],
                256
            ],
            65172: [
                [
                    1577
                ],
                256
            ],
            65173: [
                [
                    1578
                ],
                256
            ],
            65174: [
                [
                    1578
                ],
                256
            ],
            65175: [
                [
                    1578
                ],
                256
            ],
            65176: [
                [
                    1578
                ],
                256
            ],
            65177: [
                [
                    1579
                ],
                256
            ],
            65178: [
                [
                    1579
                ],
                256
            ],
            65179: [
                [
                    1579
                ],
                256
            ],
            65180: [
                [
                    1579
                ],
                256
            ],
            65181: [
                [
                    1580
                ],
                256
            ],
            65182: [
                [
                    1580
                ],
                256
            ],
            65183: [
                [
                    1580
                ],
                256
            ],
            65184: [
                [
                    1580
                ],
                256
            ],
            65185: [
                [
                    1581
                ],
                256
            ],
            65186: [
                [
                    1581
                ],
                256
            ],
            65187: [
                [
                    1581
                ],
                256
            ],
            65188: [
                [
                    1581
                ],
                256
            ],
            65189: [
                [
                    1582
                ],
                256
            ],
            65190: [
                [
                    1582
                ],
                256
            ],
            65191: [
                [
                    1582
                ],
                256
            ],
            65192: [
                [
                    1582
                ],
                256
            ],
            65193: [
                [
                    1583
                ],
                256
            ],
            65194: [
                [
                    1583
                ],
                256
            ],
            65195: [
                [
                    1584
                ],
                256
            ],
            65196: [
                [
                    1584
                ],
                256
            ],
            65197: [
                [
                    1585
                ],
                256
            ],
            65198: [
                [
                    1585
                ],
                256
            ],
            65199: [
                [
                    1586
                ],
                256
            ],
            65200: [
                [
                    1586
                ],
                256
            ],
            65201: [
                [
                    1587
                ],
                256
            ],
            65202: [
                [
                    1587
                ],
                256
            ],
            65203: [
                [
                    1587
                ],
                256
            ],
            65204: [
                [
                    1587
                ],
                256
            ],
            65205: [
                [
                    1588
                ],
                256
            ],
            65206: [
                [
                    1588
                ],
                256
            ],
            65207: [
                [
                    1588
                ],
                256
            ],
            65208: [
                [
                    1588
                ],
                256
            ],
            65209: [
                [
                    1589
                ],
                256
            ],
            65210: [
                [
                    1589
                ],
                256
            ],
            65211: [
                [
                    1589
                ],
                256
            ],
            65212: [
                [
                    1589
                ],
                256
            ],
            65213: [
                [
                    1590
                ],
                256
            ],
            65214: [
                [
                    1590
                ],
                256
            ],
            65215: [
                [
                    1590
                ],
                256
            ],
            65216: [
                [
                    1590
                ],
                256
            ],
            65217: [
                [
                    1591
                ],
                256
            ],
            65218: [
                [
                    1591
                ],
                256
            ],
            65219: [
                [
                    1591
                ],
                256
            ],
            65220: [
                [
                    1591
                ],
                256
            ],
            65221: [
                [
                    1592
                ],
                256
            ],
            65222: [
                [
                    1592
                ],
                256
            ],
            65223: [
                [
                    1592
                ],
                256
            ],
            65224: [
                [
                    1592
                ],
                256
            ],
            65225: [
                [
                    1593
                ],
                256
            ],
            65226: [
                [
                    1593
                ],
                256
            ],
            65227: [
                [
                    1593
                ],
                256
            ],
            65228: [
                [
                    1593
                ],
                256
            ],
            65229: [
                [
                    1594
                ],
                256
            ],
            65230: [
                [
                    1594
                ],
                256
            ],
            65231: [
                [
                    1594
                ],
                256
            ],
            65232: [
                [
                    1594
                ],
                256
            ],
            65233: [
                [
                    1601
                ],
                256
            ],
            65234: [
                [
                    1601
                ],
                256
            ],
            65235: [
                [
                    1601
                ],
                256
            ],
            65236: [
                [
                    1601
                ],
                256
            ],
            65237: [
                [
                    1602
                ],
                256
            ],
            65238: [
                [
                    1602
                ],
                256
            ],
            65239: [
                [
                    1602
                ],
                256
            ],
            65240: [
                [
                    1602
                ],
                256
            ],
            65241: [
                [
                    1603
                ],
                256
            ],
            65242: [
                [
                    1603
                ],
                256
            ],
            65243: [
                [
                    1603
                ],
                256
            ],
            65244: [
                [
                    1603
                ],
                256
            ],
            65245: [
                [
                    1604
                ],
                256
            ],
            65246: [
                [
                    1604
                ],
                256
            ],
            65247: [
                [
                    1604
                ],
                256
            ],
            65248: [
                [
                    1604
                ],
                256
            ],
            65249: [
                [
                    1605
                ],
                256
            ],
            65250: [
                [
                    1605
                ],
                256
            ],
            65251: [
                [
                    1605
                ],
                256
            ],
            65252: [
                [
                    1605
                ],
                256
            ],
            65253: [
                [
                    1606
                ],
                256
            ],
            65254: [
                [
                    1606
                ],
                256
            ],
            65255: [
                [
                    1606
                ],
                256
            ],
            65256: [
                [
                    1606
                ],
                256
            ],
            65257: [
                [
                    1607
                ],
                256
            ],
            65258: [
                [
                    1607
                ],
                256
            ],
            65259: [
                [
                    1607
                ],
                256
            ],
            65260: [
                [
                    1607
                ],
                256
            ],
            65261: [
                [
                    1608
                ],
                256
            ],
            65262: [
                [
                    1608
                ],
                256
            ],
            65263: [
                [
                    1609
                ],
                256
            ],
            65264: [
                [
                    1609
                ],
                256
            ],
            65265: [
                [
                    1610
                ],
                256
            ],
            65266: [
                [
                    1610
                ],
                256
            ],
            65267: [
                [
                    1610
                ],
                256
            ],
            65268: [
                [
                    1610
                ],
                256
            ],
            65269: [
                [
                    1604,
                    1570
                ],
                256
            ],
            65270: [
                [
                    1604,
                    1570
                ],
                256
            ],
            65271: [
                [
                    1604,
                    1571
                ],
                256
            ],
            65272: [
                [
                    1604,
                    1571
                ],
                256
            ],
            65273: [
                [
                    1604,
                    1573
                ],
                256
            ],
            65274: [
                [
                    1604,
                    1573
                ],
                256
            ],
            65275: [
                [
                    1604,
                    1575
                ],
                256
            ],
            65276: [
                [
                    1604,
                    1575
                ],
                256
            ]
        },
        65280: {
            65281: [
                [
                    33
                ],
                256
            ],
            65282: [
                [
                    34
                ],
                256
            ],
            65283: [
                [
                    35
                ],
                256
            ],
            65284: [
                [
                    36
                ],
                256
            ],
            65285: [
                [
                    37
                ],
                256
            ],
            65286: [
                [
                    38
                ],
                256
            ],
            65287: [
                [
                    39
                ],
                256
            ],
            65288: [
                [
                    40
                ],
                256
            ],
            65289: [
                [
                    41
                ],
                256
            ],
            65290: [
                [
                    42
                ],
                256
            ],
            65291: [
                [
                    43
                ],
                256
            ],
            65292: [
                [
                    44
                ],
                256
            ],
            65293: [
                [
                    45
                ],
                256
            ],
            65294: [
                [
                    46
                ],
                256
            ],
            65295: [
                [
                    47
                ],
                256
            ],
            65296: [
                [
                    48
                ],
                256
            ],
            65297: [
                [
                    49
                ],
                256
            ],
            65298: [
                [
                    50
                ],
                256
            ],
            65299: [
                [
                    51
                ],
                256
            ],
            65300: [
                [
                    52
                ],
                256
            ],
            65301: [
                [
                    53
                ],
                256
            ],
            65302: [
                [
                    54
                ],
                256
            ],
            65303: [
                [
                    55
                ],
                256
            ],
            65304: [
                [
                    56
                ],
                256
            ],
            65305: [
                [
                    57
                ],
                256
            ],
            65306: [
                [
                    58
                ],
                256
            ],
            65307: [
                [
                    59
                ],
                256
            ],
            65308: [
                [
                    60
                ],
                256
            ],
            65309: [
                [
                    61
                ],
                256
            ],
            65310: [
                [
                    62
                ],
                256
            ],
            65311: [
                [
                    63
                ],
                256
            ],
            65312: [
                [
                    64
                ],
                256
            ],
            65313: [
                [
                    65
                ],
                256
            ],
            65314: [
                [
                    66
                ],
                256
            ],
            65315: [
                [
                    67
                ],
                256
            ],
            65316: [
                [
                    68
                ],
                256
            ],
            65317: [
                [
                    69
                ],
                256
            ],
            65318: [
                [
                    70
                ],
                256
            ],
            65319: [
                [
                    71
                ],
                256
            ],
            65320: [
                [
                    72
                ],
                256
            ],
            65321: [
                [
                    73
                ],
                256
            ],
            65322: [
                [
                    74
                ],
                256
            ],
            65323: [
                [
                    75
                ],
                256
            ],
            65324: [
                [
                    76
                ],
                256
            ],
            65325: [
                [
                    77
                ],
                256
            ],
            65326: [
                [
                    78
                ],
                256
            ],
            65327: [
                [
                    79
                ],
                256
            ],
            65328: [
                [
                    80
                ],
                256
            ],
            65329: [
                [
                    81
                ],
                256
            ],
            65330: [
                [
                    82
                ],
                256
            ],
            65331: [
                [
                    83
                ],
                256
            ],
            65332: [
                [
                    84
                ],
                256
            ],
            65333: [
                [
                    85
                ],
                256
            ],
            65334: [
                [
                    86
                ],
                256
            ],
            65335: [
                [
                    87
                ],
                256
            ],
            65336: [
                [
                    88
                ],
                256
            ],
            65337: [
                [
                    89
                ],
                256
            ],
            65338: [
                [
                    90
                ],
                256
            ],
            65339: [
                [
                    91
                ],
                256
            ],
            65340: [
                [
                    92
                ],
                256
            ],
            65341: [
                [
                    93
                ],
                256
            ],
            65342: [
                [
                    94
                ],
                256
            ],
            65343: [
                [
                    95
                ],
                256
            ],
            65344: [
                [
                    96
                ],
                256
            ],
            65345: [
                [
                    97
                ],
                256
            ],
            65346: [
                [
                    98
                ],
                256
            ],
            65347: [
                [
                    99
                ],
                256
            ],
            65348: [
                [
                    100
                ],
                256
            ],
            65349: [
                [
                    101
                ],
                256
            ],
            65350: [
                [
                    102
                ],
                256
            ],
            65351: [
                [
                    103
                ],
                256
            ],
            65352: [
                [
                    104
                ],
                256
            ],
            65353: [
                [
                    105
                ],
                256
            ],
            65354: [
                [
                    106
                ],
                256
            ],
            65355: [
                [
                    107
                ],
                256
            ],
            65356: [
                [
                    108
                ],
                256
            ],
            65357: [
                [
                    109
                ],
                256
            ],
            65358: [
                [
                    110
                ],
                256
            ],
            65359: [
                [
                    111
                ],
                256
            ],
            65360: [
                [
                    112
                ],
                256
            ],
            65361: [
                [
                    113
                ],
                256
            ],
            65362: [
                [
                    114
                ],
                256
            ],
            65363: [
                [
                    115
                ],
                256
            ],
            65364: [
                [
                    116
                ],
                256
            ],
            65365: [
                [
                    117
                ],
                256
            ],
            65366: [
                [
                    118
                ],
                256
            ],
            65367: [
                [
                    119
                ],
                256
            ],
            65368: [
                [
                    120
                ],
                256
            ],
            65369: [
                [
                    121
                ],
                256
            ],
            65370: [
                [
                    122
                ],
                256
            ],
            65371: [
                [
                    123
                ],
                256
            ],
            65372: [
                [
                    124
                ],
                256
            ],
            65373: [
                [
                    125
                ],
                256
            ],
            65374: [
                [
                    126
                ],
                256
            ],
            65375: [
                [
                    10629
                ],
                256
            ],
            65376: [
                [
                    10630
                ],
                256
            ],
            65377: [
                [
                    12290
                ],
                256
            ],
            65378: [
                [
                    12300
                ],
                256
            ],
            65379: [
                [
                    12301
                ],
                256
            ],
            65380: [
                [
                    12289
                ],
                256
            ],
            65381: [
                [
                    12539
                ],
                256
            ],
            65382: [
                [
                    12530
                ],
                256
            ],
            65383: [
                [
                    12449
                ],
                256
            ],
            65384: [
                [
                    12451
                ],
                256
            ],
            65385: [
                [
                    12453
                ],
                256
            ],
            65386: [
                [
                    12455
                ],
                256
            ],
            65387: [
                [
                    12457
                ],
                256
            ],
            65388: [
                [
                    12515
                ],
                256
            ],
            65389: [
                [
                    12517
                ],
                256
            ],
            65390: [
                [
                    12519
                ],
                256
            ],
            65391: [
                [
                    12483
                ],
                256
            ],
            65392: [
                [
                    12540
                ],
                256
            ],
            65393: [
                [
                    12450
                ],
                256
            ],
            65394: [
                [
                    12452
                ],
                256
            ],
            65395: [
                [
                    12454
                ],
                256
            ],
            65396: [
                [
                    12456
                ],
                256
            ],
            65397: [
                [
                    12458
                ],
                256
            ],
            65398: [
                [
                    12459
                ],
                256
            ],
            65399: [
                [
                    12461
                ],
                256
            ],
            65400: [
                [
                    12463
                ],
                256
            ],
            65401: [
                [
                    12465
                ],
                256
            ],
            65402: [
                [
                    12467
                ],
                256
            ],
            65403: [
                [
                    12469
                ],
                256
            ],
            65404: [
                [
                    12471
                ],
                256
            ],
            65405: [
                [
                    12473
                ],
                256
            ],
            65406: [
                [
                    12475
                ],
                256
            ],
            65407: [
                [
                    12477
                ],
                256
            ],
            65408: [
                [
                    12479
                ],
                256
            ],
            65409: [
                [
                    12481
                ],
                256
            ],
            65410: [
                [
                    12484
                ],
                256
            ],
            65411: [
                [
                    12486
                ],
                256
            ],
            65412: [
                [
                    12488
                ],
                256
            ],
            65413: [
                [
                    12490
                ],
                256
            ],
            65414: [
                [
                    12491
                ],
                256
            ],
            65415: [
                [
                    12492
                ],
                256
            ],
            65416: [
                [
                    12493
                ],
                256
            ],
            65417: [
                [
                    12494
                ],
                256
            ],
            65418: [
                [
                    12495
                ],
                256
            ],
            65419: [
                [
                    12498
                ],
                256
            ],
            65420: [
                [
                    12501
                ],
                256
            ],
            65421: [
                [
                    12504
                ],
                256
            ],
            65422: [
                [
                    12507
                ],
                256
            ],
            65423: [
                [
                    12510
                ],
                256
            ],
            65424: [
                [
                    12511
                ],
                256
            ],
            65425: [
                [
                    12512
                ],
                256
            ],
            65426: [
                [
                    12513
                ],
                256
            ],
            65427: [
                [
                    12514
                ],
                256
            ],
            65428: [
                [
                    12516
                ],
                256
            ],
            65429: [
                [
                    12518
                ],
                256
            ],
            65430: [
                [
                    12520
                ],
                256
            ],
            65431: [
                [
                    12521
                ],
                256
            ],
            65432: [
                [
                    12522
                ],
                256
            ],
            65433: [
                [
                    12523
                ],
                256
            ],
            65434: [
                [
                    12524
                ],
                256
            ],
            65435: [
                [
                    12525
                ],
                256
            ],
            65436: [
                [
                    12527
                ],
                256
            ],
            65437: [
                [
                    12531
                ],
                256
            ],
            65438: [
                [
                    12441
                ],
                256
            ],
            65439: [
                [
                    12442
                ],
                256
            ],
            65440: [
                [
                    12644
                ],
                256
            ],
            65441: [
                [
                    12593
                ],
                256
            ],
            65442: [
                [
                    12594
                ],
                256
            ],
            65443: [
                [
                    12595
                ],
                256
            ],
            65444: [
                [
                    12596
                ],
                256
            ],
            65445: [
                [
                    12597
                ],
                256
            ],
            65446: [
                [
                    12598
                ],
                256
            ],
            65447: [
                [
                    12599
                ],
                256
            ],
            65448: [
                [
                    12600
                ],
                256
            ],
            65449: [
                [
                    12601
                ],
                256
            ],
            65450: [
                [
                    12602
                ],
                256
            ],
            65451: [
                [
                    12603
                ],
                256
            ],
            65452: [
                [
                    12604
                ],
                256
            ],
            65453: [
                [
                    12605
                ],
                256
            ],
            65454: [
                [
                    12606
                ],
                256
            ],
            65455: [
                [
                    12607
                ],
                256
            ],
            65456: [
                [
                    12608
                ],
                256
            ],
            65457: [
                [
                    12609
                ],
                256
            ],
            65458: [
                [
                    12610
                ],
                256
            ],
            65459: [
                [
                    12611
                ],
                256
            ],
            65460: [
                [
                    12612
                ],
                256
            ],
            65461: [
                [
                    12613
                ],
                256
            ],
            65462: [
                [
                    12614
                ],
                256
            ],
            65463: [
                [
                    12615
                ],
                256
            ],
            65464: [
                [
                    12616
                ],
                256
            ],
            65465: [
                [
                    12617
                ],
                256
            ],
            65466: [
                [
                    12618
                ],
                256
            ],
            65467: [
                [
                    12619
                ],
                256
            ],
            65468: [
                [
                    12620
                ],
                256
            ],
            65469: [
                [
                    12621
                ],
                256
            ],
            65470: [
                [
                    12622
                ],
                256
            ],
            65474: [
                [
                    12623
                ],
                256
            ],
            65475: [
                [
                    12624
                ],
                256
            ],
            65476: [
                [
                    12625
                ],
                256
            ],
            65477: [
                [
                    12626
                ],
                256
            ],
            65478: [
                [
                    12627
                ],
                256
            ],
            65479: [
                [
                    12628
                ],
                256
            ],
            65482: [
                [
                    12629
                ],
                256
            ],
            65483: [
                [
                    12630
                ],
                256
            ],
            65484: [
                [
                    12631
                ],
                256
            ],
            65485: [
                [
                    12632
                ],
                256
            ],
            65486: [
                [
                    12633
                ],
                256
            ],
            65487: [
                [
                    12634
                ],
                256
            ],
            65490: [
                [
                    12635
                ],
                256
            ],
            65491: [
                [
                    12636
                ],
                256
            ],
            65492: [
                [
                    12637
                ],
                256
            ],
            65493: [
                [
                    12638
                ],
                256
            ],
            65494: [
                [
                    12639
                ],
                256
            ],
            65495: [
                [
                    12640
                ],
                256
            ],
            65498: [
                [
                    12641
                ],
                256
            ],
            65499: [
                [
                    12642
                ],
                256
            ],
            65500: [
                [
                    12643
                ],
                256
            ],
            65504: [
                [
                    162
                ],
                256
            ],
            65505: [
                [
                    163
                ],
                256
            ],
            65506: [
                [
                    172
                ],
                256
            ],
            65507: [
                [
                    175
                ],
                256
            ],
            65508: [
                [
                    166
                ],
                256
            ],
            65509: [
                [
                    165
                ],
                256
            ],
            65510: [
                [
                    8361
                ],
                256
            ],
            65512: [
                [
                    9474
                ],
                256
            ],
            65513: [
                [
                    8592
                ],
                256
            ],
            65514: [
                [
                    8593
                ],
                256
            ],
            65515: [
                [
                    8594
                ],
                256
            ],
            65516: [
                [
                    8595
                ],
                256
            ],
            65517: [
                [
                    9632
                ],
                256
            ],
            65518: [
                [
                    9675
                ],
                256
            ]
        }
    };
    /***** Module to export */ var unorm = {
        nfc: nfc,
        nfd: nfd,
        nfkc: nfkc,
        nfkd: nfkd
    };
    module.exports = unorm;
    /***** Export as shim for String::normalize method *****/ /*
      http://wiki.ecmascript.org/doku.php?id=harmony:specification_drafts#november_8_2013_draft_rev_21

      21.1.3.12 String.prototype.normalize(form="NFC")
      When the normalize method is called with one argument form, the following steps are taken:

      1. Let O be CheckObjectCoercible(this value).
      2. Let S be ToString(O).
      3. ReturnIfAbrupt(S).
      4. If form is not provided or undefined let form be "NFC".
      5. Let f be ToString(form).
      6. ReturnIfAbrupt(f).
      7. If f is not one of "NFC", "NFD", "NFKC", or "NFKD", then throw a RangeError Exception.
      8. Let ns be the String value is the result of normalizing S into the normalization form named by f as specified in Unicode Standard Annex #15, UnicodeNormalizatoin Forms.
      9. Return ns.

      The length property of the normalize method is 0.

      *NOTE* The normalize function is intentionally generic; it does not require that its this value be a String object. Therefore it can be transferred to other kinds of objects for use as a method.
   */ unorm.shimApplied = false;
    if (!String.prototype.normalize) {
        Object.defineProperty(String.prototype, "normalize", {
            enumerable: false,
            configurable: true,
            writable: true,
            value: function normalize() {
                var str = "" + this;
                var form = arguments[0] === undefined ? "NFC" : arguments[0];
                if (this === null || this === undefined) throw new TypeError("Cannot call method on " + Object.prototype.toString.call(this));
                if (form === "NFC") return unorm.nfc(str);
                else if (form === "NFD") return unorm.nfd(str);
                else if (form === "NFKC") return unorm.nfkc(str);
                else if (form === "NFKD") return unorm.nfkd(str);
                else throw new RangeError("Invalid normalization form: " + form);
            }
        });
        unorm.shimApplied = true;
    }
})(this);

},{}],"02JGB":[function(require,module,exports) {
module.exports = JSON.parse("[\"的\",\"一\",\"是\",\"在\",\"不\",\"了\",\"有\",\"和\",\"人\",\"这\",\"中\",\"大\",\"为\",\"上\",\"个\",\"国\",\"我\",\"以\",\"要\",\"他\",\"时\",\"来\",\"用\",\"们\",\"生\",\"到\",\"作\",\"地\",\"于\",\"出\",\"就\",\"分\",\"对\",\"成\",\"会\",\"可\",\"主\",\"发\",\"年\",\"动\",\"同\",\"工\",\"也\",\"能\",\"下\",\"过\",\"子\",\"说\",\"产\",\"种\",\"面\",\"而\",\"方\",\"后\",\"多\",\"定\",\"行\",\"学\",\"法\",\"所\",\"民\",\"得\",\"经\",\"十\",\"三\",\"之\",\"进\",\"着\",\"等\",\"部\",\"度\",\"家\",\"电\",\"力\",\"里\",\"如\",\"水\",\"化\",\"高\",\"自\",\"二\",\"理\",\"起\",\"小\",\"物\",\"现\",\"实\",\"加\",\"量\",\"都\",\"两\",\"体\",\"制\",\"机\",\"当\",\"使\",\"点\",\"从\",\"业\",\"本\",\"去\",\"把\",\"性\",\"好\",\"应\",\"开\",\"它\",\"合\",\"还\",\"因\",\"由\",\"其\",\"些\",\"然\",\"前\",\"外\",\"天\",\"政\",\"四\",\"日\",\"那\",\"社\",\"义\",\"事\",\"平\",\"形\",\"相\",\"全\",\"表\",\"间\",\"样\",\"与\",\"关\",\"各\",\"重\",\"新\",\"线\",\"内\",\"数\",\"正\",\"心\",\"反\",\"你\",\"明\",\"看\",\"原\",\"又\",\"么\",\"利\",\"比\",\"或\",\"但\",\"质\",\"气\",\"第\",\"向\",\"道\",\"命\",\"此\",\"变\",\"条\",\"只\",\"没\",\"结\",\"解\",\"问\",\"意\",\"建\",\"月\",\"公\",\"无\",\"系\",\"军\",\"很\",\"情\",\"者\",\"最\",\"立\",\"代\",\"想\",\"已\",\"通\",\"并\",\"提\",\"直\",\"题\",\"党\",\"程\",\"展\",\"五\",\"果\",\"料\",\"象\",\"员\",\"革\",\"位\",\"入\",\"常\",\"文\",\"总\",\"次\",\"品\",\"式\",\"活\",\"设\",\"及\",\"管\",\"特\",\"件\",\"长\",\"求\",\"老\",\"头\",\"基\",\"资\",\"边\",\"流\",\"路\",\"级\",\"少\",\"图\",\"山\",\"统\",\"接\",\"知\",\"较\",\"将\",\"组\",\"见\",\"计\",\"别\",\"她\",\"手\",\"角\",\"期\",\"根\",\"论\",\"运\",\"农\",\"指\",\"几\",\"九\",\"区\",\"强\",\"放\",\"决\",\"西\",\"被\",\"干\",\"做\",\"必\",\"战\",\"先\",\"回\",\"则\",\"任\",\"取\",\"据\",\"处\",\"队\",\"南\",\"给\",\"色\",\"光\",\"门\",\"即\",\"保\",\"治\",\"北\",\"造\",\"百\",\"规\",\"热\",\"领\",\"七\",\"海\",\"口\",\"东\",\"导\",\"器\",\"压\",\"志\",\"世\",\"金\",\"增\",\"争\",\"济\",\"阶\",\"油\",\"思\",\"术\",\"极\",\"交\",\"受\",\"联\",\"什\",\"认\",\"六\",\"共\",\"权\",\"收\",\"证\",\"改\",\"清\",\"美\",\"再\",\"采\",\"转\",\"更\",\"单\",\"风\",\"切\",\"打\",\"白\",\"教\",\"速\",\"花\",\"带\",\"安\",\"场\",\"身\",\"车\",\"例\",\"真\",\"务\",\"具\",\"万\",\"每\",\"目\",\"至\",\"达\",\"走\",\"积\",\"示\",\"议\",\"声\",\"报\",\"斗\",\"完\",\"类\",\"八\",\"离\",\"华\",\"名\",\"确\",\"才\",\"科\",\"张\",\"信\",\"马\",\"节\",\"话\",\"米\",\"整\",\"空\",\"元\",\"况\",\"今\",\"集\",\"温\",\"传\",\"土\",\"许\",\"步\",\"群\",\"广\",\"石\",\"记\",\"需\",\"段\",\"研\",\"界\",\"拉\",\"林\",\"律\",\"叫\",\"且\",\"究\",\"观\",\"越\",\"织\",\"装\",\"影\",\"算\",\"低\",\"持\",\"音\",\"众\",\"书\",\"布\",\"复\",\"容\",\"儿\",\"须\",\"际\",\"商\",\"非\",\"验\",\"连\",\"断\",\"深\",\"难\",\"近\",\"矿\",\"千\",\"周\",\"委\",\"素\",\"技\",\"备\",\"半\",\"办\",\"青\",\"省\",\"列\",\"习\",\"响\",\"约\",\"支\",\"般\",\"史\",\"感\",\"劳\",\"便\",\"团\",\"往\",\"酸\",\"历\",\"市\",\"克\",\"何\",\"除\",\"消\",\"构\",\"府\",\"称\",\"太\",\"准\",\"精\",\"值\",\"号\",\"率\",\"族\",\"维\",\"划\",\"选\",\"标\",\"写\",\"存\",\"候\",\"毛\",\"亲\",\"快\",\"效\",\"斯\",\"院\",\"查\",\"江\",\"型\",\"眼\",\"王\",\"按\",\"格\",\"养\",\"易\",\"置\",\"派\",\"层\",\"片\",\"始\",\"却\",\"专\",\"状\",\"育\",\"厂\",\"京\",\"识\",\"适\",\"属\",\"圆\",\"包\",\"火\",\"住\",\"调\",\"满\",\"县\",\"局\",\"照\",\"参\",\"红\",\"细\",\"引\",\"听\",\"该\",\"铁\",\"价\",\"严\",\"首\",\"底\",\"液\",\"官\",\"德\",\"随\",\"病\",\"苏\",\"失\",\"尔\",\"死\",\"讲\",\"配\",\"女\",\"黄\",\"推\",\"显\",\"谈\",\"罪\",\"神\",\"艺\",\"呢\",\"席\",\"含\",\"企\",\"望\",\"密\",\"批\",\"营\",\"项\",\"防\",\"举\",\"球\",\"英\",\"氧\",\"势\",\"告\",\"李\",\"台\",\"落\",\"木\",\"帮\",\"轮\",\"破\",\"亚\",\"师\",\"围\",\"注\",\"远\",\"字\",\"材\",\"排\",\"供\",\"河\",\"态\",\"封\",\"另\",\"施\",\"减\",\"树\",\"溶\",\"怎\",\"止\",\"案\",\"言\",\"士\",\"均\",\"武\",\"固\",\"叶\",\"鱼\",\"波\",\"视\",\"仅\",\"费\",\"紧\",\"爱\",\"左\",\"章\",\"早\",\"朝\",\"害\",\"续\",\"轻\",\"服\",\"试\",\"食\",\"充\",\"兵\",\"源\",\"判\",\"护\",\"司\",\"足\",\"某\",\"练\",\"差\",\"致\",\"板\",\"田\",\"降\",\"黑\",\"犯\",\"负\",\"击\",\"范\",\"继\",\"兴\",\"似\",\"余\",\"坚\",\"曲\",\"输\",\"修\",\"故\",\"城\",\"夫\",\"够\",\"送\",\"笔\",\"船\",\"占\",\"右\",\"财\",\"吃\",\"富\",\"春\",\"职\",\"觉\",\"汉\",\"画\",\"功\",\"巴\",\"跟\",\"虽\",\"杂\",\"飞\",\"检\",\"吸\",\"助\",\"升\",\"阳\",\"互\",\"初\",\"创\",\"抗\",\"考\",\"投\",\"坏\",\"策\",\"古\",\"径\",\"换\",\"未\",\"跑\",\"留\",\"钢\",\"曾\",\"端\",\"责\",\"站\",\"简\",\"述\",\"钱\",\"副\",\"尽\",\"帝\",\"射\",\"草\",\"冲\",\"承\",\"独\",\"令\",\"限\",\"阿\",\"宣\",\"环\",\"双\",\"请\",\"超\",\"微\",\"让\",\"控\",\"州\",\"良\",\"轴\",\"找\",\"否\",\"纪\",\"益\",\"依\",\"优\",\"顶\",\"础\",\"载\",\"倒\",\"房\",\"突\",\"坐\",\"粉\",\"敌\",\"略\",\"客\",\"袁\",\"冷\",\"胜\",\"绝\",\"析\",\"块\",\"剂\",\"测\",\"丝\",\"协\",\"诉\",\"念\",\"陈\",\"仍\",\"罗\",\"盐\",\"友\",\"洋\",\"错\",\"苦\",\"夜\",\"刑\",\"移\",\"频\",\"逐\",\"靠\",\"混\",\"母\",\"短\",\"皮\",\"终\",\"聚\",\"汽\",\"村\",\"云\",\"哪\",\"既\",\"距\",\"卫\",\"停\",\"烈\",\"央\",\"察\",\"烧\",\"迅\",\"境\",\"若\",\"印\",\"洲\",\"刻\",\"括\",\"激\",\"孔\",\"搞\",\"甚\",\"室\",\"待\",\"核\",\"校\",\"散\",\"侵\",\"吧\",\"甲\",\"游\",\"久\",\"菜\",\"味\",\"旧\",\"模\",\"湖\",\"货\",\"损\",\"预\",\"阻\",\"毫\",\"普\",\"稳\",\"乙\",\"妈\",\"植\",\"息\",\"扩\",\"银\",\"语\",\"挥\",\"酒\",\"守\",\"拿\",\"序\",\"纸\",\"医\",\"缺\",\"雨\",\"吗\",\"针\",\"刘\",\"啊\",\"急\",\"唱\",\"误\",\"训\",\"愿\",\"审\",\"附\",\"获\",\"茶\",\"鲜\",\"粮\",\"斤\",\"孩\",\"脱\",\"硫\",\"肥\",\"善\",\"龙\",\"演\",\"父\",\"渐\",\"血\",\"欢\",\"械\",\"掌\",\"歌\",\"沙\",\"刚\",\"攻\",\"谓\",\"盾\",\"讨\",\"晚\",\"粒\",\"乱\",\"燃\",\"矛\",\"乎\",\"杀\",\"药\",\"宁\",\"鲁\",\"贵\",\"钟\",\"煤\",\"读\",\"班\",\"伯\",\"香\",\"介\",\"迫\",\"句\",\"丰\",\"培\",\"握\",\"兰\",\"担\",\"弦\",\"蛋\",\"沉\",\"假\",\"穿\",\"执\",\"答\",\"乐\",\"谁\",\"顺\",\"烟\",\"缩\",\"征\",\"脸\",\"喜\",\"松\",\"脚\",\"困\",\"异\",\"免\",\"背\",\"星\",\"福\",\"买\",\"染\",\"井\",\"概\",\"慢\",\"怕\",\"磁\",\"倍\",\"祖\",\"皇\",\"促\",\"静\",\"补\",\"评\",\"翻\",\"肉\",\"践\",\"尼\",\"衣\",\"宽\",\"扬\",\"棉\",\"希\",\"伤\",\"操\",\"垂\",\"秋\",\"宜\",\"氢\",\"套\",\"督\",\"振\",\"架\",\"亮\",\"末\",\"宪\",\"庆\",\"编\",\"牛\",\"触\",\"映\",\"雷\",\"销\",\"诗\",\"座\",\"居\",\"抓\",\"裂\",\"胞\",\"呼\",\"娘\",\"景\",\"威\",\"绿\",\"晶\",\"厚\",\"盟\",\"衡\",\"鸡\",\"孙\",\"延\",\"危\",\"胶\",\"屋\",\"乡\",\"临\",\"陆\",\"顾\",\"掉\",\"呀\",\"灯\",\"岁\",\"措\",\"束\",\"耐\",\"剧\",\"玉\",\"赵\",\"跳\",\"哥\",\"季\",\"课\",\"凯\",\"胡\",\"额\",\"款\",\"绍\",\"卷\",\"齐\",\"伟\",\"蒸\",\"殖\",\"永\",\"宗\",\"苗\",\"川\",\"炉\",\"岩\",\"弱\",\"零\",\"杨\",\"奏\",\"沿\",\"露\",\"杆\",\"探\",\"滑\",\"镇\",\"饭\",\"浓\",\"航\",\"怀\",\"赶\",\"库\",\"夺\",\"伊\",\"灵\",\"税\",\"途\",\"灭\",\"赛\",\"归\",\"召\",\"鼓\",\"播\",\"盘\",\"裁\",\"险\",\"康\",\"唯\",\"录\",\"菌\",\"纯\",\"借\",\"糖\",\"盖\",\"横\",\"符\",\"私\",\"努\",\"堂\",\"域\",\"枪\",\"润\",\"幅\",\"哈\",\"竟\",\"熟\",\"虫\",\"泽\",\"脑\",\"壤\",\"碳\",\"欧\",\"遍\",\"侧\",\"寨\",\"敢\",\"彻\",\"虑\",\"斜\",\"薄\",\"庭\",\"纳\",\"弹\",\"饲\",\"伸\",\"折\",\"麦\",\"湿\",\"暗\",\"荷\",\"瓦\",\"塞\",\"床\",\"筑\",\"恶\",\"户\",\"访\",\"塔\",\"奇\",\"透\",\"梁\",\"刀\",\"旋\",\"迹\",\"卡\",\"氯\",\"遇\",\"份\",\"毒\",\"泥\",\"退\",\"洗\",\"摆\",\"灰\",\"彩\",\"卖\",\"耗\",\"夏\",\"择\",\"忙\",\"铜\",\"献\",\"硬\",\"予\",\"繁\",\"圈\",\"雪\",\"函\",\"亦\",\"抽\",\"篇\",\"阵\",\"阴\",\"丁\",\"尺\",\"追\",\"堆\",\"雄\",\"迎\",\"泛\",\"爸\",\"楼\",\"避\",\"谋\",\"吨\",\"野\",\"猪\",\"旗\",\"累\",\"偏\",\"典\",\"馆\",\"索\",\"秦\",\"脂\",\"潮\",\"爷\",\"豆\",\"忽\",\"托\",\"惊\",\"塑\",\"遗\",\"愈\",\"朱\",\"替\",\"纤\",\"粗\",\"倾\",\"尚\",\"痛\",\"楚\",\"谢\",\"奋\",\"购\",\"磨\",\"君\",\"池\",\"旁\",\"碎\",\"骨\",\"监\",\"捕\",\"弟\",\"暴\",\"割\",\"贯\",\"殊\",\"释\",\"词\",\"亡\",\"壁\",\"顿\",\"宝\",\"午\",\"尘\",\"闻\",\"揭\",\"炮\",\"残\",\"冬\",\"桥\",\"妇\",\"警\",\"综\",\"招\",\"吴\",\"付\",\"浮\",\"遭\",\"徐\",\"您\",\"摇\",\"谷\",\"赞\",\"箱\",\"隔\",\"订\",\"男\",\"吹\",\"园\",\"纷\",\"唐\",\"败\",\"宋\",\"玻\",\"巨\",\"耕\",\"坦\",\"荣\",\"闭\",\"湾\",\"键\",\"凡\",\"驻\",\"锅\",\"救\",\"恩\",\"剥\",\"凝\",\"碱\",\"齿\",\"截\",\"炼\",\"麻\",\"纺\",\"禁\",\"废\",\"盛\",\"版\",\"缓\",\"净\",\"睛\",\"昌\",\"婚\",\"涉\",\"筒\",\"嘴\",\"插\",\"岸\",\"朗\",\"庄\",\"街\",\"藏\",\"姑\",\"贸\",\"腐\",\"奴\",\"啦\",\"惯\",\"乘\",\"伙\",\"恢\",\"匀\",\"纱\",\"扎\",\"辩\",\"耳\",\"彪\",\"臣\",\"亿\",\"璃\",\"抵\",\"脉\",\"秀\",\"萨\",\"俄\",\"网\",\"舞\",\"店\",\"喷\",\"纵\",\"寸\",\"汗\",\"挂\",\"洪\",\"贺\",\"闪\",\"柬\",\"爆\",\"烯\",\"津\",\"稻\",\"墙\",\"软\",\"勇\",\"像\",\"滚\",\"厘\",\"蒙\",\"芳\",\"肯\",\"坡\",\"柱\",\"荡\",\"腿\",\"仪\",\"旅\",\"尾\",\"轧\",\"冰\",\"贡\",\"登\",\"黎\",\"削\",\"钻\",\"勒\",\"逃\",\"障\",\"氨\",\"郭\",\"峰\",\"币\",\"港\",\"伏\",\"轨\",\"亩\",\"毕\",\"擦\",\"莫\",\"刺\",\"浪\",\"秘\",\"援\",\"株\",\"健\",\"售\",\"股\",\"岛\",\"甘\",\"泡\",\"睡\",\"童\",\"铸\",\"汤\",\"阀\",\"休\",\"汇\",\"舍\",\"牧\",\"绕\",\"炸\",\"哲\",\"磷\",\"绩\",\"朋\",\"淡\",\"尖\",\"启\",\"陷\",\"柴\",\"呈\",\"徒\",\"颜\",\"泪\",\"稍\",\"忘\",\"泵\",\"蓝\",\"拖\",\"洞\",\"授\",\"镜\",\"辛\",\"壮\",\"锋\",\"贫\",\"虚\",\"弯\",\"摩\",\"泰\",\"幼\",\"廷\",\"尊\",\"窗\",\"纲\",\"弄\",\"隶\",\"疑\",\"氏\",\"宫\",\"姐\",\"震\",\"瑞\",\"怪\",\"尤\",\"琴\",\"循\",\"描\",\"膜\",\"违\",\"夹\",\"腰\",\"缘\",\"珠\",\"穷\",\"森\",\"枝\",\"竹\",\"沟\",\"催\",\"绳\",\"忆\",\"邦\",\"剩\",\"幸\",\"浆\",\"栏\",\"拥\",\"牙\",\"贮\",\"礼\",\"滤\",\"钠\",\"纹\",\"罢\",\"拍\",\"咱\",\"喊\",\"袖\",\"埃\",\"勤\",\"罚\",\"焦\",\"潜\",\"伍\",\"墨\",\"欲\",\"缝\",\"姓\",\"刊\",\"饱\",\"仿\",\"奖\",\"铝\",\"鬼\",\"丽\",\"跨\",\"默\",\"挖\",\"链\",\"扫\",\"喝\",\"袋\",\"炭\",\"污\",\"幕\",\"诸\",\"弧\",\"励\",\"梅\",\"奶\",\"洁\",\"灾\",\"舟\",\"鉴\",\"苯\",\"讼\",\"抱\",\"毁\",\"懂\",\"寒\",\"智\",\"埔\",\"寄\",\"届\",\"跃\",\"渡\",\"挑\",\"丹\",\"艰\",\"贝\",\"碰\",\"拔\",\"爹\",\"戴\",\"码\",\"梦\",\"芽\",\"熔\",\"赤\",\"渔\",\"哭\",\"敬\",\"颗\",\"奔\",\"铅\",\"仲\",\"虎\",\"稀\",\"妹\",\"乏\",\"珍\",\"申\",\"桌\",\"遵\",\"允\",\"隆\",\"螺\",\"仓\",\"魏\",\"锐\",\"晓\",\"氮\",\"兼\",\"隐\",\"碍\",\"赫\",\"拨\",\"忠\",\"肃\",\"缸\",\"牵\",\"抢\",\"博\",\"巧\",\"壳\",\"兄\",\"杜\",\"讯\",\"诚\",\"碧\",\"祥\",\"柯\",\"页\",\"巡\",\"矩\",\"悲\",\"灌\",\"龄\",\"伦\",\"票\",\"寻\",\"桂\",\"铺\",\"圣\",\"恐\",\"恰\",\"郑\",\"趣\",\"抬\",\"荒\",\"腾\",\"贴\",\"柔\",\"滴\",\"猛\",\"阔\",\"辆\",\"妻\",\"填\",\"撤\",\"储\",\"签\",\"闹\",\"扰\",\"紫\",\"砂\",\"递\",\"戏\",\"吊\",\"陶\",\"伐\",\"喂\",\"疗\",\"瓶\",\"婆\",\"抚\",\"臂\",\"摸\",\"忍\",\"虾\",\"蜡\",\"邻\",\"胸\",\"巩\",\"挤\",\"偶\",\"弃\",\"槽\",\"劲\",\"乳\",\"邓\",\"吉\",\"仁\",\"烂\",\"砖\",\"租\",\"乌\",\"舰\",\"伴\",\"瓜\",\"浅\",\"丙\",\"暂\",\"燥\",\"橡\",\"柳\",\"迷\",\"暖\",\"牌\",\"秧\",\"胆\",\"详\",\"簧\",\"踏\",\"瓷\",\"谱\",\"呆\",\"宾\",\"糊\",\"洛\",\"辉\",\"愤\",\"竞\",\"隙\",\"怒\",\"粘\",\"乃\",\"绪\",\"肩\",\"籍\",\"敏\",\"涂\",\"熙\",\"皆\",\"侦\",\"悬\",\"掘\",\"享\",\"纠\",\"醒\",\"狂\",\"锁\",\"淀\",\"恨\",\"牲\",\"霸\",\"爬\",\"赏\",\"逆\",\"玩\",\"陵\",\"祝\",\"秒\",\"浙\",\"貌\",\"役\",\"彼\",\"悉\",\"鸭\",\"趋\",\"凤\",\"晨\",\"畜\",\"辈\",\"秩\",\"卵\",\"署\",\"梯\",\"炎\",\"滩\",\"棋\",\"驱\",\"筛\",\"峡\",\"冒\",\"啥\",\"寿\",\"译\",\"浸\",\"泉\",\"帽\",\"迟\",\"硅\",\"疆\",\"贷\",\"漏\",\"稿\",\"冠\",\"嫩\",\"胁\",\"芯\",\"牢\",\"叛\",\"蚀\",\"奥\",\"鸣\",\"岭\",\"羊\",\"凭\",\"串\",\"塘\",\"绘\",\"酵\",\"融\",\"盆\",\"锡\",\"庙\",\"筹\",\"冻\",\"辅\",\"摄\",\"袭\",\"筋\",\"拒\",\"僚\",\"旱\",\"钾\",\"鸟\",\"漆\",\"沈\",\"眉\",\"疏\",\"添\",\"棒\",\"穗\",\"硝\",\"韩\",\"逼\",\"扭\",\"侨\",\"凉\",\"挺\",\"碗\",\"栽\",\"炒\",\"杯\",\"患\",\"馏\",\"劝\",\"豪\",\"辽\",\"勃\",\"鸿\",\"旦\",\"吏\",\"拜\",\"狗\",\"埋\",\"辊\",\"掩\",\"饮\",\"搬\",\"骂\",\"辞\",\"勾\",\"扣\",\"估\",\"蒋\",\"绒\",\"雾\",\"丈\",\"朵\",\"姆\",\"拟\",\"宇\",\"辑\",\"陕\",\"雕\",\"偿\",\"蓄\",\"崇\",\"剪\",\"倡\",\"厅\",\"咬\",\"驶\",\"薯\",\"刷\",\"斥\",\"番\",\"赋\",\"奉\",\"佛\",\"浇\",\"漫\",\"曼\",\"扇\",\"钙\",\"桃\",\"扶\",\"仔\",\"返\",\"俗\",\"亏\",\"腔\",\"鞋\",\"棱\",\"覆\",\"框\",\"悄\",\"叔\",\"撞\",\"骗\",\"勘\",\"旺\",\"沸\",\"孤\",\"吐\",\"孟\",\"渠\",\"屈\",\"疾\",\"妙\",\"惜\",\"仰\",\"狠\",\"胀\",\"谐\",\"抛\",\"霉\",\"桑\",\"岗\",\"嘛\",\"衰\",\"盗\",\"渗\",\"脏\",\"赖\",\"涌\",\"甜\",\"曹\",\"阅\",\"肌\",\"哩\",\"厉\",\"烃\",\"纬\",\"毅\",\"昨\",\"伪\",\"症\",\"煮\",\"叹\",\"钉\",\"搭\",\"茎\",\"笼\",\"酷\",\"偷\",\"弓\",\"锥\",\"恒\",\"杰\",\"坑\",\"鼻\",\"翼\",\"纶\",\"叙\",\"狱\",\"逮\",\"罐\",\"络\",\"棚\",\"抑\",\"膨\",\"蔬\",\"寺\",\"骤\",\"穆\",\"冶\",\"枯\",\"册\",\"尸\",\"凸\",\"绅\",\"坯\",\"牺\",\"焰\",\"轰\",\"欣\",\"晋\",\"瘦\",\"御\",\"锭\",\"锦\",\"丧\",\"旬\",\"锻\",\"垄\",\"搜\",\"扑\",\"邀\",\"亭\",\"酯\",\"迈\",\"舒\",\"脆\",\"酶\",\"闲\",\"忧\",\"酚\",\"顽\",\"羽\",\"涨\",\"卸\",\"仗\",\"陪\",\"辟\",\"惩\",\"杭\",\"姚\",\"肚\",\"捉\",\"飘\",\"漂\",\"昆\",\"欺\",\"吾\",\"郎\",\"烷\",\"汁\",\"呵\",\"饰\",\"萧\",\"雅\",\"邮\",\"迁\",\"燕\",\"撒\",\"姻\",\"赴\",\"宴\",\"烦\",\"债\",\"帐\",\"斑\",\"铃\",\"旨\",\"醇\",\"董\",\"饼\",\"雏\",\"姿\",\"拌\",\"傅\",\"腹\",\"妥\",\"揉\",\"贤\",\"拆\",\"歪\",\"葡\",\"胺\",\"丢\",\"浩\",\"徽\",\"昂\",\"垫\",\"挡\",\"览\",\"贪\",\"慰\",\"缴\",\"汪\",\"慌\",\"冯\",\"诺\",\"姜\",\"谊\",\"凶\",\"劣\",\"诬\",\"耀\",\"昏\",\"躺\",\"盈\",\"骑\",\"乔\",\"溪\",\"丛\",\"卢\",\"抹\",\"闷\",\"咨\",\"刮\",\"驾\",\"缆\",\"悟\",\"摘\",\"铒\",\"掷\",\"颇\",\"幻\",\"柄\",\"惠\",\"惨\",\"佳\",\"仇\",\"腊\",\"窝\",\"涤\",\"剑\",\"瞧\",\"堡\",\"泼\",\"葱\",\"罩\",\"霍\",\"捞\",\"胎\",\"苍\",\"滨\",\"俩\",\"捅\",\"湘\",\"砍\",\"霞\",\"邵\",\"萄\",\"疯\",\"淮\",\"遂\",\"熊\",\"粪\",\"烘\",\"宿\",\"档\",\"戈\",\"驳\",\"嫂\",\"裕\",\"徙\",\"箭\",\"捐\",\"肠\",\"撑\",\"晒\",\"辨\",\"殿\",\"莲\",\"摊\",\"搅\",\"酱\",\"屏\",\"疫\",\"哀\",\"蔡\",\"堵\",\"沫\",\"皱\",\"畅\",\"叠\",\"阁\",\"莱\",\"敲\",\"辖\",\"钩\",\"痕\",\"坝\",\"巷\",\"饿\",\"祸\",\"丘\",\"玄\",\"溜\",\"曰\",\"逻\",\"彭\",\"尝\",\"卿\",\"妨\",\"艇\",\"吞\",\"韦\",\"怨\",\"矮\",\"歇\"]");

},{}],"3Cywo":[function(require,module,exports) {
module.exports = JSON.parse("[\"的\",\"一\",\"是\",\"在\",\"不\",\"了\",\"有\",\"和\",\"人\",\"這\",\"中\",\"大\",\"為\",\"上\",\"個\",\"國\",\"我\",\"以\",\"要\",\"他\",\"時\",\"來\",\"用\",\"們\",\"生\",\"到\",\"作\",\"地\",\"於\",\"出\",\"就\",\"分\",\"對\",\"成\",\"會\",\"可\",\"主\",\"發\",\"年\",\"動\",\"同\",\"工\",\"也\",\"能\",\"下\",\"過\",\"子\",\"說\",\"產\",\"種\",\"面\",\"而\",\"方\",\"後\",\"多\",\"定\",\"行\",\"學\",\"法\",\"所\",\"民\",\"得\",\"經\",\"十\",\"三\",\"之\",\"進\",\"著\",\"等\",\"部\",\"度\",\"家\",\"電\",\"力\",\"裡\",\"如\",\"水\",\"化\",\"高\",\"自\",\"二\",\"理\",\"起\",\"小\",\"物\",\"現\",\"實\",\"加\",\"量\",\"都\",\"兩\",\"體\",\"制\",\"機\",\"當\",\"使\",\"點\",\"從\",\"業\",\"本\",\"去\",\"把\",\"性\",\"好\",\"應\",\"開\",\"它\",\"合\",\"還\",\"因\",\"由\",\"其\",\"些\",\"然\",\"前\",\"外\",\"天\",\"政\",\"四\",\"日\",\"那\",\"社\",\"義\",\"事\",\"平\",\"形\",\"相\",\"全\",\"表\",\"間\",\"樣\",\"與\",\"關\",\"各\",\"重\",\"新\",\"線\",\"內\",\"數\",\"正\",\"心\",\"反\",\"你\",\"明\",\"看\",\"原\",\"又\",\"麼\",\"利\",\"比\",\"或\",\"但\",\"質\",\"氣\",\"第\",\"向\",\"道\",\"命\",\"此\",\"變\",\"條\",\"只\",\"沒\",\"結\",\"解\",\"問\",\"意\",\"建\",\"月\",\"公\",\"無\",\"系\",\"軍\",\"很\",\"情\",\"者\",\"最\",\"立\",\"代\",\"想\",\"已\",\"通\",\"並\",\"提\",\"直\",\"題\",\"黨\",\"程\",\"展\",\"五\",\"果\",\"料\",\"象\",\"員\",\"革\",\"位\",\"入\",\"常\",\"文\",\"總\",\"次\",\"品\",\"式\",\"活\",\"設\",\"及\",\"管\",\"特\",\"件\",\"長\",\"求\",\"老\",\"頭\",\"基\",\"資\",\"邊\",\"流\",\"路\",\"級\",\"少\",\"圖\",\"山\",\"統\",\"接\",\"知\",\"較\",\"將\",\"組\",\"見\",\"計\",\"別\",\"她\",\"手\",\"角\",\"期\",\"根\",\"論\",\"運\",\"農\",\"指\",\"幾\",\"九\",\"區\",\"強\",\"放\",\"決\",\"西\",\"被\",\"幹\",\"做\",\"必\",\"戰\",\"先\",\"回\",\"則\",\"任\",\"取\",\"據\",\"處\",\"隊\",\"南\",\"給\",\"色\",\"光\",\"門\",\"即\",\"保\",\"治\",\"北\",\"造\",\"百\",\"規\",\"熱\",\"領\",\"七\",\"海\",\"口\",\"東\",\"導\",\"器\",\"壓\",\"志\",\"世\",\"金\",\"增\",\"爭\",\"濟\",\"階\",\"油\",\"思\",\"術\",\"極\",\"交\",\"受\",\"聯\",\"什\",\"認\",\"六\",\"共\",\"權\",\"收\",\"證\",\"改\",\"清\",\"美\",\"再\",\"採\",\"轉\",\"更\",\"單\",\"風\",\"切\",\"打\",\"白\",\"教\",\"速\",\"花\",\"帶\",\"安\",\"場\",\"身\",\"車\",\"例\",\"真\",\"務\",\"具\",\"萬\",\"每\",\"目\",\"至\",\"達\",\"走\",\"積\",\"示\",\"議\",\"聲\",\"報\",\"鬥\",\"完\",\"類\",\"八\",\"離\",\"華\",\"名\",\"確\",\"才\",\"科\",\"張\",\"信\",\"馬\",\"節\",\"話\",\"米\",\"整\",\"空\",\"元\",\"況\",\"今\",\"集\",\"溫\",\"傳\",\"土\",\"許\",\"步\",\"群\",\"廣\",\"石\",\"記\",\"需\",\"段\",\"研\",\"界\",\"拉\",\"林\",\"律\",\"叫\",\"且\",\"究\",\"觀\",\"越\",\"織\",\"裝\",\"影\",\"算\",\"低\",\"持\",\"音\",\"眾\",\"書\",\"布\",\"复\",\"容\",\"兒\",\"須\",\"際\",\"商\",\"非\",\"驗\",\"連\",\"斷\",\"深\",\"難\",\"近\",\"礦\",\"千\",\"週\",\"委\",\"素\",\"技\",\"備\",\"半\",\"辦\",\"青\",\"省\",\"列\",\"習\",\"響\",\"約\",\"支\",\"般\",\"史\",\"感\",\"勞\",\"便\",\"團\",\"往\",\"酸\",\"歷\",\"市\",\"克\",\"何\",\"除\",\"消\",\"構\",\"府\",\"稱\",\"太\",\"準\",\"精\",\"值\",\"號\",\"率\",\"族\",\"維\",\"劃\",\"選\",\"標\",\"寫\",\"存\",\"候\",\"毛\",\"親\",\"快\",\"效\",\"斯\",\"院\",\"查\",\"江\",\"型\",\"眼\",\"王\",\"按\",\"格\",\"養\",\"易\",\"置\",\"派\",\"層\",\"片\",\"始\",\"卻\",\"專\",\"狀\",\"育\",\"廠\",\"京\",\"識\",\"適\",\"屬\",\"圓\",\"包\",\"火\",\"住\",\"調\",\"滿\",\"縣\",\"局\",\"照\",\"參\",\"紅\",\"細\",\"引\",\"聽\",\"該\",\"鐵\",\"價\",\"嚴\",\"首\",\"底\",\"液\",\"官\",\"德\",\"隨\",\"病\",\"蘇\",\"失\",\"爾\",\"死\",\"講\",\"配\",\"女\",\"黃\",\"推\",\"顯\",\"談\",\"罪\",\"神\",\"藝\",\"呢\",\"席\",\"含\",\"企\",\"望\",\"密\",\"批\",\"營\",\"項\",\"防\",\"舉\",\"球\",\"英\",\"氧\",\"勢\",\"告\",\"李\",\"台\",\"落\",\"木\",\"幫\",\"輪\",\"破\",\"亞\",\"師\",\"圍\",\"注\",\"遠\",\"字\",\"材\",\"排\",\"供\",\"河\",\"態\",\"封\",\"另\",\"施\",\"減\",\"樹\",\"溶\",\"怎\",\"止\",\"案\",\"言\",\"士\",\"均\",\"武\",\"固\",\"葉\",\"魚\",\"波\",\"視\",\"僅\",\"費\",\"緊\",\"愛\",\"左\",\"章\",\"早\",\"朝\",\"害\",\"續\",\"輕\",\"服\",\"試\",\"食\",\"充\",\"兵\",\"源\",\"判\",\"護\",\"司\",\"足\",\"某\",\"練\",\"差\",\"致\",\"板\",\"田\",\"降\",\"黑\",\"犯\",\"負\",\"擊\",\"范\",\"繼\",\"興\",\"似\",\"餘\",\"堅\",\"曲\",\"輸\",\"修\",\"故\",\"城\",\"夫\",\"夠\",\"送\",\"筆\",\"船\",\"佔\",\"右\",\"財\",\"吃\",\"富\",\"春\",\"職\",\"覺\",\"漢\",\"畫\",\"功\",\"巴\",\"跟\",\"雖\",\"雜\",\"飛\",\"檢\",\"吸\",\"助\",\"昇\",\"陽\",\"互\",\"初\",\"創\",\"抗\",\"考\",\"投\",\"壞\",\"策\",\"古\",\"徑\",\"換\",\"未\",\"跑\",\"留\",\"鋼\",\"曾\",\"端\",\"責\",\"站\",\"簡\",\"述\",\"錢\",\"副\",\"盡\",\"帝\",\"射\",\"草\",\"衝\",\"承\",\"獨\",\"令\",\"限\",\"阿\",\"宣\",\"環\",\"雙\",\"請\",\"超\",\"微\",\"讓\",\"控\",\"州\",\"良\",\"軸\",\"找\",\"否\",\"紀\",\"益\",\"依\",\"優\",\"頂\",\"礎\",\"載\",\"倒\",\"房\",\"突\",\"坐\",\"粉\",\"敵\",\"略\",\"客\",\"袁\",\"冷\",\"勝\",\"絕\",\"析\",\"塊\",\"劑\",\"測\",\"絲\",\"協\",\"訴\",\"念\",\"陳\",\"仍\",\"羅\",\"鹽\",\"友\",\"洋\",\"錯\",\"苦\",\"夜\",\"刑\",\"移\",\"頻\",\"逐\",\"靠\",\"混\",\"母\",\"短\",\"皮\",\"終\",\"聚\",\"汽\",\"村\",\"雲\",\"哪\",\"既\",\"距\",\"衛\",\"停\",\"烈\",\"央\",\"察\",\"燒\",\"迅\",\"境\",\"若\",\"印\",\"洲\",\"刻\",\"括\",\"激\",\"孔\",\"搞\",\"甚\",\"室\",\"待\",\"核\",\"校\",\"散\",\"侵\",\"吧\",\"甲\",\"遊\",\"久\",\"菜\",\"味\",\"舊\",\"模\",\"湖\",\"貨\",\"損\",\"預\",\"阻\",\"毫\",\"普\",\"穩\",\"乙\",\"媽\",\"植\",\"息\",\"擴\",\"銀\",\"語\",\"揮\",\"酒\",\"守\",\"拿\",\"序\",\"紙\",\"醫\",\"缺\",\"雨\",\"嗎\",\"針\",\"劉\",\"啊\",\"急\",\"唱\",\"誤\",\"訓\",\"願\",\"審\",\"附\",\"獲\",\"茶\",\"鮮\",\"糧\",\"斤\",\"孩\",\"脫\",\"硫\",\"肥\",\"善\",\"龍\",\"演\",\"父\",\"漸\",\"血\",\"歡\",\"械\",\"掌\",\"歌\",\"沙\",\"剛\",\"攻\",\"謂\",\"盾\",\"討\",\"晚\",\"粒\",\"亂\",\"燃\",\"矛\",\"乎\",\"殺\",\"藥\",\"寧\",\"魯\",\"貴\",\"鐘\",\"煤\",\"讀\",\"班\",\"伯\",\"香\",\"介\",\"迫\",\"句\",\"豐\",\"培\",\"握\",\"蘭\",\"擔\",\"弦\",\"蛋\",\"沉\",\"假\",\"穿\",\"執\",\"答\",\"樂\",\"誰\",\"順\",\"煙\",\"縮\",\"徵\",\"臉\",\"喜\",\"松\",\"腳\",\"困\",\"異\",\"免\",\"背\",\"星\",\"福\",\"買\",\"染\",\"井\",\"概\",\"慢\",\"怕\",\"磁\",\"倍\",\"祖\",\"皇\",\"促\",\"靜\",\"補\",\"評\",\"翻\",\"肉\",\"踐\",\"尼\",\"衣\",\"寬\",\"揚\",\"棉\",\"希\",\"傷\",\"操\",\"垂\",\"秋\",\"宜\",\"氫\",\"套\",\"督\",\"振\",\"架\",\"亮\",\"末\",\"憲\",\"慶\",\"編\",\"牛\",\"觸\",\"映\",\"雷\",\"銷\",\"詩\",\"座\",\"居\",\"抓\",\"裂\",\"胞\",\"呼\",\"娘\",\"景\",\"威\",\"綠\",\"晶\",\"厚\",\"盟\",\"衡\",\"雞\",\"孫\",\"延\",\"危\",\"膠\",\"屋\",\"鄉\",\"臨\",\"陸\",\"顧\",\"掉\",\"呀\",\"燈\",\"歲\",\"措\",\"束\",\"耐\",\"劇\",\"玉\",\"趙\",\"跳\",\"哥\",\"季\",\"課\",\"凱\",\"胡\",\"額\",\"款\",\"紹\",\"卷\",\"齊\",\"偉\",\"蒸\",\"殖\",\"永\",\"宗\",\"苗\",\"川\",\"爐\",\"岩\",\"弱\",\"零\",\"楊\",\"奏\",\"沿\",\"露\",\"桿\",\"探\",\"滑\",\"鎮\",\"飯\",\"濃\",\"航\",\"懷\",\"趕\",\"庫\",\"奪\",\"伊\",\"靈\",\"稅\",\"途\",\"滅\",\"賽\",\"歸\",\"召\",\"鼓\",\"播\",\"盤\",\"裁\",\"險\",\"康\",\"唯\",\"錄\",\"菌\",\"純\",\"借\",\"糖\",\"蓋\",\"橫\",\"符\",\"私\",\"努\",\"堂\",\"域\",\"槍\",\"潤\",\"幅\",\"哈\",\"竟\",\"熟\",\"蟲\",\"澤\",\"腦\",\"壤\",\"碳\",\"歐\",\"遍\",\"側\",\"寨\",\"敢\",\"徹\",\"慮\",\"斜\",\"薄\",\"庭\",\"納\",\"彈\",\"飼\",\"伸\",\"折\",\"麥\",\"濕\",\"暗\",\"荷\",\"瓦\",\"塞\",\"床\",\"築\",\"惡\",\"戶\",\"訪\",\"塔\",\"奇\",\"透\",\"梁\",\"刀\",\"旋\",\"跡\",\"卡\",\"氯\",\"遇\",\"份\",\"毒\",\"泥\",\"退\",\"洗\",\"擺\",\"灰\",\"彩\",\"賣\",\"耗\",\"夏\",\"擇\",\"忙\",\"銅\",\"獻\",\"硬\",\"予\",\"繁\",\"圈\",\"雪\",\"函\",\"亦\",\"抽\",\"篇\",\"陣\",\"陰\",\"丁\",\"尺\",\"追\",\"堆\",\"雄\",\"迎\",\"泛\",\"爸\",\"樓\",\"避\",\"謀\",\"噸\",\"野\",\"豬\",\"旗\",\"累\",\"偏\",\"典\",\"館\",\"索\",\"秦\",\"脂\",\"潮\",\"爺\",\"豆\",\"忽\",\"托\",\"驚\",\"塑\",\"遺\",\"愈\",\"朱\",\"替\",\"纖\",\"粗\",\"傾\",\"尚\",\"痛\",\"楚\",\"謝\",\"奮\",\"購\",\"磨\",\"君\",\"池\",\"旁\",\"碎\",\"骨\",\"監\",\"捕\",\"弟\",\"暴\",\"割\",\"貫\",\"殊\",\"釋\",\"詞\",\"亡\",\"壁\",\"頓\",\"寶\",\"午\",\"塵\",\"聞\",\"揭\",\"炮\",\"殘\",\"冬\",\"橋\",\"婦\",\"警\",\"綜\",\"招\",\"吳\",\"付\",\"浮\",\"遭\",\"徐\",\"您\",\"搖\",\"谷\",\"贊\",\"箱\",\"隔\",\"訂\",\"男\",\"吹\",\"園\",\"紛\",\"唐\",\"敗\",\"宋\",\"玻\",\"巨\",\"耕\",\"坦\",\"榮\",\"閉\",\"灣\",\"鍵\",\"凡\",\"駐\",\"鍋\",\"救\",\"恩\",\"剝\",\"凝\",\"鹼\",\"齒\",\"截\",\"煉\",\"麻\",\"紡\",\"禁\",\"廢\",\"盛\",\"版\",\"緩\",\"淨\",\"睛\",\"昌\",\"婚\",\"涉\",\"筒\",\"嘴\",\"插\",\"岸\",\"朗\",\"莊\",\"街\",\"藏\",\"姑\",\"貿\",\"腐\",\"奴\",\"啦\",\"慣\",\"乘\",\"夥\",\"恢\",\"勻\",\"紗\",\"扎\",\"辯\",\"耳\",\"彪\",\"臣\",\"億\",\"璃\",\"抵\",\"脈\",\"秀\",\"薩\",\"俄\",\"網\",\"舞\",\"店\",\"噴\",\"縱\",\"寸\",\"汗\",\"掛\",\"洪\",\"賀\",\"閃\",\"柬\",\"爆\",\"烯\",\"津\",\"稻\",\"牆\",\"軟\",\"勇\",\"像\",\"滾\",\"厘\",\"蒙\",\"芳\",\"肯\",\"坡\",\"柱\",\"盪\",\"腿\",\"儀\",\"旅\",\"尾\",\"軋\",\"冰\",\"貢\",\"登\",\"黎\",\"削\",\"鑽\",\"勒\",\"逃\",\"障\",\"氨\",\"郭\",\"峰\",\"幣\",\"港\",\"伏\",\"軌\",\"畝\",\"畢\",\"擦\",\"莫\",\"刺\",\"浪\",\"秘\",\"援\",\"株\",\"健\",\"售\",\"股\",\"島\",\"甘\",\"泡\",\"睡\",\"童\",\"鑄\",\"湯\",\"閥\",\"休\",\"匯\",\"舍\",\"牧\",\"繞\",\"炸\",\"哲\",\"磷\",\"績\",\"朋\",\"淡\",\"尖\",\"啟\",\"陷\",\"柴\",\"呈\",\"徒\",\"顏\",\"淚\",\"稍\",\"忘\",\"泵\",\"藍\",\"拖\",\"洞\",\"授\",\"鏡\",\"辛\",\"壯\",\"鋒\",\"貧\",\"虛\",\"彎\",\"摩\",\"泰\",\"幼\",\"廷\",\"尊\",\"窗\",\"綱\",\"弄\",\"隸\",\"疑\",\"氏\",\"宮\",\"姐\",\"震\",\"瑞\",\"怪\",\"尤\",\"琴\",\"循\",\"描\",\"膜\",\"違\",\"夾\",\"腰\",\"緣\",\"珠\",\"窮\",\"森\",\"枝\",\"竹\",\"溝\",\"催\",\"繩\",\"憶\",\"邦\",\"剩\",\"幸\",\"漿\",\"欄\",\"擁\",\"牙\",\"貯\",\"禮\",\"濾\",\"鈉\",\"紋\",\"罷\",\"拍\",\"咱\",\"喊\",\"袖\",\"埃\",\"勤\",\"罰\",\"焦\",\"潛\",\"伍\",\"墨\",\"欲\",\"縫\",\"姓\",\"刊\",\"飽\",\"仿\",\"獎\",\"鋁\",\"鬼\",\"麗\",\"跨\",\"默\",\"挖\",\"鏈\",\"掃\",\"喝\",\"袋\",\"炭\",\"污\",\"幕\",\"諸\",\"弧\",\"勵\",\"梅\",\"奶\",\"潔\",\"災\",\"舟\",\"鑑\",\"苯\",\"訟\",\"抱\",\"毀\",\"懂\",\"寒\",\"智\",\"埔\",\"寄\",\"屆\",\"躍\",\"渡\",\"挑\",\"丹\",\"艱\",\"貝\",\"碰\",\"拔\",\"爹\",\"戴\",\"碼\",\"夢\",\"芽\",\"熔\",\"赤\",\"漁\",\"哭\",\"敬\",\"顆\",\"奔\",\"鉛\",\"仲\",\"虎\",\"稀\",\"妹\",\"乏\",\"珍\",\"申\",\"桌\",\"遵\",\"允\",\"隆\",\"螺\",\"倉\",\"魏\",\"銳\",\"曉\",\"氮\",\"兼\",\"隱\",\"礙\",\"赫\",\"撥\",\"忠\",\"肅\",\"缸\",\"牽\",\"搶\",\"博\",\"巧\",\"殼\",\"兄\",\"杜\",\"訊\",\"誠\",\"碧\",\"祥\",\"柯\",\"頁\",\"巡\",\"矩\",\"悲\",\"灌\",\"齡\",\"倫\",\"票\",\"尋\",\"桂\",\"鋪\",\"聖\",\"恐\",\"恰\",\"鄭\",\"趣\",\"抬\",\"荒\",\"騰\",\"貼\",\"柔\",\"滴\",\"猛\",\"闊\",\"輛\",\"妻\",\"填\",\"撤\",\"儲\",\"簽\",\"鬧\",\"擾\",\"紫\",\"砂\",\"遞\",\"戲\",\"吊\",\"陶\",\"伐\",\"餵\",\"療\",\"瓶\",\"婆\",\"撫\",\"臂\",\"摸\",\"忍\",\"蝦\",\"蠟\",\"鄰\",\"胸\",\"鞏\",\"擠\",\"偶\",\"棄\",\"槽\",\"勁\",\"乳\",\"鄧\",\"吉\",\"仁\",\"爛\",\"磚\",\"租\",\"烏\",\"艦\",\"伴\",\"瓜\",\"淺\",\"丙\",\"暫\",\"燥\",\"橡\",\"柳\",\"迷\",\"暖\",\"牌\",\"秧\",\"膽\",\"詳\",\"簧\",\"踏\",\"瓷\",\"譜\",\"呆\",\"賓\",\"糊\",\"洛\",\"輝\",\"憤\",\"競\",\"隙\",\"怒\",\"粘\",\"乃\",\"緒\",\"肩\",\"籍\",\"敏\",\"塗\",\"熙\",\"皆\",\"偵\",\"懸\",\"掘\",\"享\",\"糾\",\"醒\",\"狂\",\"鎖\",\"淀\",\"恨\",\"牲\",\"霸\",\"爬\",\"賞\",\"逆\",\"玩\",\"陵\",\"祝\",\"秒\",\"浙\",\"貌\",\"役\",\"彼\",\"悉\",\"鴨\",\"趨\",\"鳳\",\"晨\",\"畜\",\"輩\",\"秩\",\"卵\",\"署\",\"梯\",\"炎\",\"灘\",\"棋\",\"驅\",\"篩\",\"峽\",\"冒\",\"啥\",\"壽\",\"譯\",\"浸\",\"泉\",\"帽\",\"遲\",\"矽\",\"疆\",\"貸\",\"漏\",\"稿\",\"冠\",\"嫩\",\"脅\",\"芯\",\"牢\",\"叛\",\"蝕\",\"奧\",\"鳴\",\"嶺\",\"羊\",\"憑\",\"串\",\"塘\",\"繪\",\"酵\",\"融\",\"盆\",\"錫\",\"廟\",\"籌\",\"凍\",\"輔\",\"攝\",\"襲\",\"筋\",\"拒\",\"僚\",\"旱\",\"鉀\",\"鳥\",\"漆\",\"沈\",\"眉\",\"疏\",\"添\",\"棒\",\"穗\",\"硝\",\"韓\",\"逼\",\"扭\",\"僑\",\"涼\",\"挺\",\"碗\",\"栽\",\"炒\",\"杯\",\"患\",\"餾\",\"勸\",\"豪\",\"遼\",\"勃\",\"鴻\",\"旦\",\"吏\",\"拜\",\"狗\",\"埋\",\"輥\",\"掩\",\"飲\",\"搬\",\"罵\",\"辭\",\"勾\",\"扣\",\"估\",\"蔣\",\"絨\",\"霧\",\"丈\",\"朵\",\"姆\",\"擬\",\"宇\",\"輯\",\"陝\",\"雕\",\"償\",\"蓄\",\"崇\",\"剪\",\"倡\",\"廳\",\"咬\",\"駛\",\"薯\",\"刷\",\"斥\",\"番\",\"賦\",\"奉\",\"佛\",\"澆\",\"漫\",\"曼\",\"扇\",\"鈣\",\"桃\",\"扶\",\"仔\",\"返\",\"俗\",\"虧\",\"腔\",\"鞋\",\"棱\",\"覆\",\"框\",\"悄\",\"叔\",\"撞\",\"騙\",\"勘\",\"旺\",\"沸\",\"孤\",\"吐\",\"孟\",\"渠\",\"屈\",\"疾\",\"妙\",\"惜\",\"仰\",\"狠\",\"脹\",\"諧\",\"拋\",\"黴\",\"桑\",\"崗\",\"嘛\",\"衰\",\"盜\",\"滲\",\"臟\",\"賴\",\"湧\",\"甜\",\"曹\",\"閱\",\"肌\",\"哩\",\"厲\",\"烴\",\"緯\",\"毅\",\"昨\",\"偽\",\"症\",\"煮\",\"嘆\",\"釘\",\"搭\",\"莖\",\"籠\",\"酷\",\"偷\",\"弓\",\"錐\",\"恆\",\"傑\",\"坑\",\"鼻\",\"翼\",\"綸\",\"敘\",\"獄\",\"逮\",\"罐\",\"絡\",\"棚\",\"抑\",\"膨\",\"蔬\",\"寺\",\"驟\",\"穆\",\"冶\",\"枯\",\"冊\",\"屍\",\"凸\",\"紳\",\"坯\",\"犧\",\"焰\",\"轟\",\"欣\",\"晉\",\"瘦\",\"禦\",\"錠\",\"錦\",\"喪\",\"旬\",\"鍛\",\"壟\",\"搜\",\"撲\",\"邀\",\"亭\",\"酯\",\"邁\",\"舒\",\"脆\",\"酶\",\"閒\",\"憂\",\"酚\",\"頑\",\"羽\",\"漲\",\"卸\",\"仗\",\"陪\",\"闢\",\"懲\",\"杭\",\"姚\",\"肚\",\"捉\",\"飄\",\"漂\",\"昆\",\"欺\",\"吾\",\"郎\",\"烷\",\"汁\",\"呵\",\"飾\",\"蕭\",\"雅\",\"郵\",\"遷\",\"燕\",\"撒\",\"姻\",\"赴\",\"宴\",\"煩\",\"債\",\"帳\",\"斑\",\"鈴\",\"旨\",\"醇\",\"董\",\"餅\",\"雛\",\"姿\",\"拌\",\"傅\",\"腹\",\"妥\",\"揉\",\"賢\",\"拆\",\"歪\",\"葡\",\"胺\",\"丟\",\"浩\",\"徽\",\"昂\",\"墊\",\"擋\",\"覽\",\"貪\",\"慰\",\"繳\",\"汪\",\"慌\",\"馮\",\"諾\",\"姜\",\"誼\",\"兇\",\"劣\",\"誣\",\"耀\",\"昏\",\"躺\",\"盈\",\"騎\",\"喬\",\"溪\",\"叢\",\"盧\",\"抹\",\"悶\",\"諮\",\"刮\",\"駕\",\"纜\",\"悟\",\"摘\",\"鉺\",\"擲\",\"頗\",\"幻\",\"柄\",\"惠\",\"慘\",\"佳\",\"仇\",\"臘\",\"窩\",\"滌\",\"劍\",\"瞧\",\"堡\",\"潑\",\"蔥\",\"罩\",\"霍\",\"撈\",\"胎\",\"蒼\",\"濱\",\"倆\",\"捅\",\"湘\",\"砍\",\"霞\",\"邵\",\"萄\",\"瘋\",\"淮\",\"遂\",\"熊\",\"糞\",\"烘\",\"宿\",\"檔\",\"戈\",\"駁\",\"嫂\",\"裕\",\"徙\",\"箭\",\"捐\",\"腸\",\"撐\",\"曬\",\"辨\",\"殿\",\"蓮\",\"攤\",\"攪\",\"醬\",\"屏\",\"疫\",\"哀\",\"蔡\",\"堵\",\"沫\",\"皺\",\"暢\",\"疊\",\"閣\",\"萊\",\"敲\",\"轄\",\"鉤\",\"痕\",\"壩\",\"巷\",\"餓\",\"禍\",\"丘\",\"玄\",\"溜\",\"曰\",\"邏\",\"彭\",\"嘗\",\"卿\",\"妨\",\"艇\",\"吞\",\"韋\",\"怨\",\"矮\",\"歇\"]");

},{}],"aDyy1":[function(require,module,exports) {
module.exports = JSON.parse("[\"abandon\",\"ability\",\"able\",\"about\",\"above\",\"absent\",\"absorb\",\"abstract\",\"absurd\",\"abuse\",\"access\",\"accident\",\"account\",\"accuse\",\"achieve\",\"acid\",\"acoustic\",\"acquire\",\"across\",\"act\",\"action\",\"actor\",\"actress\",\"actual\",\"adapt\",\"add\",\"addict\",\"address\",\"adjust\",\"admit\",\"adult\",\"advance\",\"advice\",\"aerobic\",\"affair\",\"afford\",\"afraid\",\"again\",\"age\",\"agent\",\"agree\",\"ahead\",\"aim\",\"air\",\"airport\",\"aisle\",\"alarm\",\"album\",\"alcohol\",\"alert\",\"alien\",\"all\",\"alley\",\"allow\",\"almost\",\"alone\",\"alpha\",\"already\",\"also\",\"alter\",\"always\",\"amateur\",\"amazing\",\"among\",\"amount\",\"amused\",\"analyst\",\"anchor\",\"ancient\",\"anger\",\"angle\",\"angry\",\"animal\",\"ankle\",\"announce\",\"annual\",\"another\",\"answer\",\"antenna\",\"antique\",\"anxiety\",\"any\",\"apart\",\"apology\",\"appear\",\"apple\",\"approve\",\"april\",\"arch\",\"arctic\",\"area\",\"arena\",\"argue\",\"arm\",\"armed\",\"armor\",\"army\",\"around\",\"arrange\",\"arrest\",\"arrive\",\"arrow\",\"art\",\"artefact\",\"artist\",\"artwork\",\"ask\",\"aspect\",\"assault\",\"asset\",\"assist\",\"assume\",\"asthma\",\"athlete\",\"atom\",\"attack\",\"attend\",\"attitude\",\"attract\",\"auction\",\"audit\",\"august\",\"aunt\",\"author\",\"auto\",\"autumn\",\"average\",\"avocado\",\"avoid\",\"awake\",\"aware\",\"away\",\"awesome\",\"awful\",\"awkward\",\"axis\",\"baby\",\"bachelor\",\"bacon\",\"badge\",\"bag\",\"balance\",\"balcony\",\"ball\",\"bamboo\",\"banana\",\"banner\",\"bar\",\"barely\",\"bargain\",\"barrel\",\"base\",\"basic\",\"basket\",\"battle\",\"beach\",\"bean\",\"beauty\",\"because\",\"become\",\"beef\",\"before\",\"begin\",\"behave\",\"behind\",\"believe\",\"below\",\"belt\",\"bench\",\"benefit\",\"best\",\"betray\",\"better\",\"between\",\"beyond\",\"bicycle\",\"bid\",\"bike\",\"bind\",\"biology\",\"bird\",\"birth\",\"bitter\",\"black\",\"blade\",\"blame\",\"blanket\",\"blast\",\"bleak\",\"bless\",\"blind\",\"blood\",\"blossom\",\"blouse\",\"blue\",\"blur\",\"blush\",\"board\",\"boat\",\"body\",\"boil\",\"bomb\",\"bone\",\"bonus\",\"book\",\"boost\",\"border\",\"boring\",\"borrow\",\"boss\",\"bottom\",\"bounce\",\"box\",\"boy\",\"bracket\",\"brain\",\"brand\",\"brass\",\"brave\",\"bread\",\"breeze\",\"brick\",\"bridge\",\"brief\",\"bright\",\"bring\",\"brisk\",\"broccoli\",\"broken\",\"bronze\",\"broom\",\"brother\",\"brown\",\"brush\",\"bubble\",\"buddy\",\"budget\",\"buffalo\",\"build\",\"bulb\",\"bulk\",\"bullet\",\"bundle\",\"bunker\",\"burden\",\"burger\",\"burst\",\"bus\",\"business\",\"busy\",\"butter\",\"buyer\",\"buzz\",\"cabbage\",\"cabin\",\"cable\",\"cactus\",\"cage\",\"cake\",\"call\",\"calm\",\"camera\",\"camp\",\"can\",\"canal\",\"cancel\",\"candy\",\"cannon\",\"canoe\",\"canvas\",\"canyon\",\"capable\",\"capital\",\"captain\",\"car\",\"carbon\",\"card\",\"cargo\",\"carpet\",\"carry\",\"cart\",\"case\",\"cash\",\"casino\",\"castle\",\"casual\",\"cat\",\"catalog\",\"catch\",\"category\",\"cattle\",\"caught\",\"cause\",\"caution\",\"cave\",\"ceiling\",\"celery\",\"cement\",\"census\",\"century\",\"cereal\",\"certain\",\"chair\",\"chalk\",\"champion\",\"change\",\"chaos\",\"chapter\",\"charge\",\"chase\",\"chat\",\"cheap\",\"check\",\"cheese\",\"chef\",\"cherry\",\"chest\",\"chicken\",\"chief\",\"child\",\"chimney\",\"choice\",\"choose\",\"chronic\",\"chuckle\",\"chunk\",\"churn\",\"cigar\",\"cinnamon\",\"circle\",\"citizen\",\"city\",\"civil\",\"claim\",\"clap\",\"clarify\",\"claw\",\"clay\",\"clean\",\"clerk\",\"clever\",\"click\",\"client\",\"cliff\",\"climb\",\"clinic\",\"clip\",\"clock\",\"clog\",\"close\",\"cloth\",\"cloud\",\"clown\",\"club\",\"clump\",\"cluster\",\"clutch\",\"coach\",\"coast\",\"coconut\",\"code\",\"coffee\",\"coil\",\"coin\",\"collect\",\"color\",\"column\",\"combine\",\"come\",\"comfort\",\"comic\",\"common\",\"company\",\"concert\",\"conduct\",\"confirm\",\"congress\",\"connect\",\"consider\",\"control\",\"convince\",\"cook\",\"cool\",\"copper\",\"copy\",\"coral\",\"core\",\"corn\",\"correct\",\"cost\",\"cotton\",\"couch\",\"country\",\"couple\",\"course\",\"cousin\",\"cover\",\"coyote\",\"crack\",\"cradle\",\"craft\",\"cram\",\"crane\",\"crash\",\"crater\",\"crawl\",\"crazy\",\"cream\",\"credit\",\"creek\",\"crew\",\"cricket\",\"crime\",\"crisp\",\"critic\",\"crop\",\"cross\",\"crouch\",\"crowd\",\"crucial\",\"cruel\",\"cruise\",\"crumble\",\"crunch\",\"crush\",\"cry\",\"crystal\",\"cube\",\"culture\",\"cup\",\"cupboard\",\"curious\",\"current\",\"curtain\",\"curve\",\"cushion\",\"custom\",\"cute\",\"cycle\",\"dad\",\"damage\",\"damp\",\"dance\",\"danger\",\"daring\",\"dash\",\"daughter\",\"dawn\",\"day\",\"deal\",\"debate\",\"debris\",\"decade\",\"december\",\"decide\",\"decline\",\"decorate\",\"decrease\",\"deer\",\"defense\",\"define\",\"defy\",\"degree\",\"delay\",\"deliver\",\"demand\",\"demise\",\"denial\",\"dentist\",\"deny\",\"depart\",\"depend\",\"deposit\",\"depth\",\"deputy\",\"derive\",\"describe\",\"desert\",\"design\",\"desk\",\"despair\",\"destroy\",\"detail\",\"detect\",\"develop\",\"device\",\"devote\",\"diagram\",\"dial\",\"diamond\",\"diary\",\"dice\",\"diesel\",\"diet\",\"differ\",\"digital\",\"dignity\",\"dilemma\",\"dinner\",\"dinosaur\",\"direct\",\"dirt\",\"disagree\",\"discover\",\"disease\",\"dish\",\"dismiss\",\"disorder\",\"display\",\"distance\",\"divert\",\"divide\",\"divorce\",\"dizzy\",\"doctor\",\"document\",\"dog\",\"doll\",\"dolphin\",\"domain\",\"donate\",\"donkey\",\"donor\",\"door\",\"dose\",\"double\",\"dove\",\"draft\",\"dragon\",\"drama\",\"drastic\",\"draw\",\"dream\",\"dress\",\"drift\",\"drill\",\"drink\",\"drip\",\"drive\",\"drop\",\"drum\",\"dry\",\"duck\",\"dumb\",\"dune\",\"during\",\"dust\",\"dutch\",\"duty\",\"dwarf\",\"dynamic\",\"eager\",\"eagle\",\"early\",\"earn\",\"earth\",\"easily\",\"east\",\"easy\",\"echo\",\"ecology\",\"economy\",\"edge\",\"edit\",\"educate\",\"effort\",\"egg\",\"eight\",\"either\",\"elbow\",\"elder\",\"electric\",\"elegant\",\"element\",\"elephant\",\"elevator\",\"elite\",\"else\",\"embark\",\"embody\",\"embrace\",\"emerge\",\"emotion\",\"employ\",\"empower\",\"empty\",\"enable\",\"enact\",\"end\",\"endless\",\"endorse\",\"enemy\",\"energy\",\"enforce\",\"engage\",\"engine\",\"enhance\",\"enjoy\",\"enlist\",\"enough\",\"enrich\",\"enroll\",\"ensure\",\"enter\",\"entire\",\"entry\",\"envelope\",\"episode\",\"equal\",\"equip\",\"era\",\"erase\",\"erode\",\"erosion\",\"error\",\"erupt\",\"escape\",\"essay\",\"essence\",\"estate\",\"eternal\",\"ethics\",\"evidence\",\"evil\",\"evoke\",\"evolve\",\"exact\",\"example\",\"excess\",\"exchange\",\"excite\",\"exclude\",\"excuse\",\"execute\",\"exercise\",\"exhaust\",\"exhibit\",\"exile\",\"exist\",\"exit\",\"exotic\",\"expand\",\"expect\",\"expire\",\"explain\",\"expose\",\"express\",\"extend\",\"extra\",\"eye\",\"eyebrow\",\"fabric\",\"face\",\"faculty\",\"fade\",\"faint\",\"faith\",\"fall\",\"false\",\"fame\",\"family\",\"famous\",\"fan\",\"fancy\",\"fantasy\",\"farm\",\"fashion\",\"fat\",\"fatal\",\"father\",\"fatigue\",\"fault\",\"favorite\",\"feature\",\"february\",\"federal\",\"fee\",\"feed\",\"feel\",\"female\",\"fence\",\"festival\",\"fetch\",\"fever\",\"few\",\"fiber\",\"fiction\",\"field\",\"figure\",\"file\",\"film\",\"filter\",\"final\",\"find\",\"fine\",\"finger\",\"finish\",\"fire\",\"firm\",\"first\",\"fiscal\",\"fish\",\"fit\",\"fitness\",\"fix\",\"flag\",\"flame\",\"flash\",\"flat\",\"flavor\",\"flee\",\"flight\",\"flip\",\"float\",\"flock\",\"floor\",\"flower\",\"fluid\",\"flush\",\"fly\",\"foam\",\"focus\",\"fog\",\"foil\",\"fold\",\"follow\",\"food\",\"foot\",\"force\",\"forest\",\"forget\",\"fork\",\"fortune\",\"forum\",\"forward\",\"fossil\",\"foster\",\"found\",\"fox\",\"fragile\",\"frame\",\"frequent\",\"fresh\",\"friend\",\"fringe\",\"frog\",\"front\",\"frost\",\"frown\",\"frozen\",\"fruit\",\"fuel\",\"fun\",\"funny\",\"furnace\",\"fury\",\"future\",\"gadget\",\"gain\",\"galaxy\",\"gallery\",\"game\",\"gap\",\"garage\",\"garbage\",\"garden\",\"garlic\",\"garment\",\"gas\",\"gasp\",\"gate\",\"gather\",\"gauge\",\"gaze\",\"general\",\"genius\",\"genre\",\"gentle\",\"genuine\",\"gesture\",\"ghost\",\"giant\",\"gift\",\"giggle\",\"ginger\",\"giraffe\",\"girl\",\"give\",\"glad\",\"glance\",\"glare\",\"glass\",\"glide\",\"glimpse\",\"globe\",\"gloom\",\"glory\",\"glove\",\"glow\",\"glue\",\"goat\",\"goddess\",\"gold\",\"good\",\"goose\",\"gorilla\",\"gospel\",\"gossip\",\"govern\",\"gown\",\"grab\",\"grace\",\"grain\",\"grant\",\"grape\",\"grass\",\"gravity\",\"great\",\"green\",\"grid\",\"grief\",\"grit\",\"grocery\",\"group\",\"grow\",\"grunt\",\"guard\",\"guess\",\"guide\",\"guilt\",\"guitar\",\"gun\",\"gym\",\"habit\",\"hair\",\"half\",\"hammer\",\"hamster\",\"hand\",\"happy\",\"harbor\",\"hard\",\"harsh\",\"harvest\",\"hat\",\"have\",\"hawk\",\"hazard\",\"head\",\"health\",\"heart\",\"heavy\",\"hedgehog\",\"height\",\"hello\",\"helmet\",\"help\",\"hen\",\"hero\",\"hidden\",\"high\",\"hill\",\"hint\",\"hip\",\"hire\",\"history\",\"hobby\",\"hockey\",\"hold\",\"hole\",\"holiday\",\"hollow\",\"home\",\"honey\",\"hood\",\"hope\",\"horn\",\"horror\",\"horse\",\"hospital\",\"host\",\"hotel\",\"hour\",\"hover\",\"hub\",\"huge\",\"human\",\"humble\",\"humor\",\"hundred\",\"hungry\",\"hunt\",\"hurdle\",\"hurry\",\"hurt\",\"husband\",\"hybrid\",\"ice\",\"icon\",\"idea\",\"identify\",\"idle\",\"ignore\",\"ill\",\"illegal\",\"illness\",\"image\",\"imitate\",\"immense\",\"immune\",\"impact\",\"impose\",\"improve\",\"impulse\",\"inch\",\"include\",\"income\",\"increase\",\"index\",\"indicate\",\"indoor\",\"industry\",\"infant\",\"inflict\",\"inform\",\"inhale\",\"inherit\",\"initial\",\"inject\",\"injury\",\"inmate\",\"inner\",\"innocent\",\"input\",\"inquiry\",\"insane\",\"insect\",\"inside\",\"inspire\",\"install\",\"intact\",\"interest\",\"into\",\"invest\",\"invite\",\"involve\",\"iron\",\"island\",\"isolate\",\"issue\",\"item\",\"ivory\",\"jacket\",\"jaguar\",\"jar\",\"jazz\",\"jealous\",\"jeans\",\"jelly\",\"jewel\",\"job\",\"join\",\"joke\",\"journey\",\"joy\",\"judge\",\"juice\",\"jump\",\"jungle\",\"junior\",\"junk\",\"just\",\"kangaroo\",\"keen\",\"keep\",\"ketchup\",\"key\",\"kick\",\"kid\",\"kidney\",\"kind\",\"kingdom\",\"kiss\",\"kit\",\"kitchen\",\"kite\",\"kitten\",\"kiwi\",\"knee\",\"knife\",\"knock\",\"know\",\"lab\",\"label\",\"labor\",\"ladder\",\"lady\",\"lake\",\"lamp\",\"language\",\"laptop\",\"large\",\"later\",\"latin\",\"laugh\",\"laundry\",\"lava\",\"law\",\"lawn\",\"lawsuit\",\"layer\",\"lazy\",\"leader\",\"leaf\",\"learn\",\"leave\",\"lecture\",\"left\",\"leg\",\"legal\",\"legend\",\"leisure\",\"lemon\",\"lend\",\"length\",\"lens\",\"leopard\",\"lesson\",\"letter\",\"level\",\"liar\",\"liberty\",\"library\",\"license\",\"life\",\"lift\",\"light\",\"like\",\"limb\",\"limit\",\"link\",\"lion\",\"liquid\",\"list\",\"little\",\"live\",\"lizard\",\"load\",\"loan\",\"lobster\",\"local\",\"lock\",\"logic\",\"lonely\",\"long\",\"loop\",\"lottery\",\"loud\",\"lounge\",\"love\",\"loyal\",\"lucky\",\"luggage\",\"lumber\",\"lunar\",\"lunch\",\"luxury\",\"lyrics\",\"machine\",\"mad\",\"magic\",\"magnet\",\"maid\",\"mail\",\"main\",\"major\",\"make\",\"mammal\",\"man\",\"manage\",\"mandate\",\"mango\",\"mansion\",\"manual\",\"maple\",\"marble\",\"march\",\"margin\",\"marine\",\"market\",\"marriage\",\"mask\",\"mass\",\"master\",\"match\",\"material\",\"math\",\"matrix\",\"matter\",\"maximum\",\"maze\",\"meadow\",\"mean\",\"measure\",\"meat\",\"mechanic\",\"medal\",\"media\",\"melody\",\"melt\",\"member\",\"memory\",\"mention\",\"menu\",\"mercy\",\"merge\",\"merit\",\"merry\",\"mesh\",\"message\",\"metal\",\"method\",\"middle\",\"midnight\",\"milk\",\"million\",\"mimic\",\"mind\",\"minimum\",\"minor\",\"minute\",\"miracle\",\"mirror\",\"misery\",\"miss\",\"mistake\",\"mix\",\"mixed\",\"mixture\",\"mobile\",\"model\",\"modify\",\"mom\",\"moment\",\"monitor\",\"monkey\",\"monster\",\"month\",\"moon\",\"moral\",\"more\",\"morning\",\"mosquito\",\"mother\",\"motion\",\"motor\",\"mountain\",\"mouse\",\"move\",\"movie\",\"much\",\"muffin\",\"mule\",\"multiply\",\"muscle\",\"museum\",\"mushroom\",\"music\",\"must\",\"mutual\",\"myself\",\"mystery\",\"myth\",\"naive\",\"name\",\"napkin\",\"narrow\",\"nasty\",\"nation\",\"nature\",\"near\",\"neck\",\"need\",\"negative\",\"neglect\",\"neither\",\"nephew\",\"nerve\",\"nest\",\"net\",\"network\",\"neutral\",\"never\",\"news\",\"next\",\"nice\",\"night\",\"noble\",\"noise\",\"nominee\",\"noodle\",\"normal\",\"north\",\"nose\",\"notable\",\"note\",\"nothing\",\"notice\",\"novel\",\"now\",\"nuclear\",\"number\",\"nurse\",\"nut\",\"oak\",\"obey\",\"object\",\"oblige\",\"obscure\",\"observe\",\"obtain\",\"obvious\",\"occur\",\"ocean\",\"october\",\"odor\",\"off\",\"offer\",\"office\",\"often\",\"oil\",\"okay\",\"old\",\"olive\",\"olympic\",\"omit\",\"once\",\"one\",\"onion\",\"online\",\"only\",\"open\",\"opera\",\"opinion\",\"oppose\",\"option\",\"orange\",\"orbit\",\"orchard\",\"order\",\"ordinary\",\"organ\",\"orient\",\"original\",\"orphan\",\"ostrich\",\"other\",\"outdoor\",\"outer\",\"output\",\"outside\",\"oval\",\"oven\",\"over\",\"own\",\"owner\",\"oxygen\",\"oyster\",\"ozone\",\"pact\",\"paddle\",\"page\",\"pair\",\"palace\",\"palm\",\"panda\",\"panel\",\"panic\",\"panther\",\"paper\",\"parade\",\"parent\",\"park\",\"parrot\",\"party\",\"pass\",\"patch\",\"path\",\"patient\",\"patrol\",\"pattern\",\"pause\",\"pave\",\"payment\",\"peace\",\"peanut\",\"pear\",\"peasant\",\"pelican\",\"pen\",\"penalty\",\"pencil\",\"people\",\"pepper\",\"perfect\",\"permit\",\"person\",\"pet\",\"phone\",\"photo\",\"phrase\",\"physical\",\"piano\",\"picnic\",\"picture\",\"piece\",\"pig\",\"pigeon\",\"pill\",\"pilot\",\"pink\",\"pioneer\",\"pipe\",\"pistol\",\"pitch\",\"pizza\",\"place\",\"planet\",\"plastic\",\"plate\",\"play\",\"please\",\"pledge\",\"pluck\",\"plug\",\"plunge\",\"poem\",\"poet\",\"point\",\"polar\",\"pole\",\"police\",\"pond\",\"pony\",\"pool\",\"popular\",\"portion\",\"position\",\"possible\",\"post\",\"potato\",\"pottery\",\"poverty\",\"powder\",\"power\",\"practice\",\"praise\",\"predict\",\"prefer\",\"prepare\",\"present\",\"pretty\",\"prevent\",\"price\",\"pride\",\"primary\",\"print\",\"priority\",\"prison\",\"private\",\"prize\",\"problem\",\"process\",\"produce\",\"profit\",\"program\",\"project\",\"promote\",\"proof\",\"property\",\"prosper\",\"protect\",\"proud\",\"provide\",\"public\",\"pudding\",\"pull\",\"pulp\",\"pulse\",\"pumpkin\",\"punch\",\"pupil\",\"puppy\",\"purchase\",\"purity\",\"purpose\",\"purse\",\"push\",\"put\",\"puzzle\",\"pyramid\",\"quality\",\"quantum\",\"quarter\",\"question\",\"quick\",\"quit\",\"quiz\",\"quote\",\"rabbit\",\"raccoon\",\"race\",\"rack\",\"radar\",\"radio\",\"rail\",\"rain\",\"raise\",\"rally\",\"ramp\",\"ranch\",\"random\",\"range\",\"rapid\",\"rare\",\"rate\",\"rather\",\"raven\",\"raw\",\"razor\",\"ready\",\"real\",\"reason\",\"rebel\",\"rebuild\",\"recall\",\"receive\",\"recipe\",\"record\",\"recycle\",\"reduce\",\"reflect\",\"reform\",\"refuse\",\"region\",\"regret\",\"regular\",\"reject\",\"relax\",\"release\",\"relief\",\"rely\",\"remain\",\"remember\",\"remind\",\"remove\",\"render\",\"renew\",\"rent\",\"reopen\",\"repair\",\"repeat\",\"replace\",\"report\",\"require\",\"rescue\",\"resemble\",\"resist\",\"resource\",\"response\",\"result\",\"retire\",\"retreat\",\"return\",\"reunion\",\"reveal\",\"review\",\"reward\",\"rhythm\",\"rib\",\"ribbon\",\"rice\",\"rich\",\"ride\",\"ridge\",\"rifle\",\"right\",\"rigid\",\"ring\",\"riot\",\"ripple\",\"risk\",\"ritual\",\"rival\",\"river\",\"road\",\"roast\",\"robot\",\"robust\",\"rocket\",\"romance\",\"roof\",\"rookie\",\"room\",\"rose\",\"rotate\",\"rough\",\"round\",\"route\",\"royal\",\"rubber\",\"rude\",\"rug\",\"rule\",\"run\",\"runway\",\"rural\",\"sad\",\"saddle\",\"sadness\",\"safe\",\"sail\",\"salad\",\"salmon\",\"salon\",\"salt\",\"salute\",\"same\",\"sample\",\"sand\",\"satisfy\",\"satoshi\",\"sauce\",\"sausage\",\"save\",\"say\",\"scale\",\"scan\",\"scare\",\"scatter\",\"scene\",\"scheme\",\"school\",\"science\",\"scissors\",\"scorpion\",\"scout\",\"scrap\",\"screen\",\"script\",\"scrub\",\"sea\",\"search\",\"season\",\"seat\",\"second\",\"secret\",\"section\",\"security\",\"seed\",\"seek\",\"segment\",\"select\",\"sell\",\"seminar\",\"senior\",\"sense\",\"sentence\",\"series\",\"service\",\"session\",\"settle\",\"setup\",\"seven\",\"shadow\",\"shaft\",\"shallow\",\"share\",\"shed\",\"shell\",\"sheriff\",\"shield\",\"shift\",\"shine\",\"ship\",\"shiver\",\"shock\",\"shoe\",\"shoot\",\"shop\",\"short\",\"shoulder\",\"shove\",\"shrimp\",\"shrug\",\"shuffle\",\"shy\",\"sibling\",\"sick\",\"side\",\"siege\",\"sight\",\"sign\",\"silent\",\"silk\",\"silly\",\"silver\",\"similar\",\"simple\",\"since\",\"sing\",\"siren\",\"sister\",\"situate\",\"six\",\"size\",\"skate\",\"sketch\",\"ski\",\"skill\",\"skin\",\"skirt\",\"skull\",\"slab\",\"slam\",\"sleep\",\"slender\",\"slice\",\"slide\",\"slight\",\"slim\",\"slogan\",\"slot\",\"slow\",\"slush\",\"small\",\"smart\",\"smile\",\"smoke\",\"smooth\",\"snack\",\"snake\",\"snap\",\"sniff\",\"snow\",\"soap\",\"soccer\",\"social\",\"sock\",\"soda\",\"soft\",\"solar\",\"soldier\",\"solid\",\"solution\",\"solve\",\"someone\",\"song\",\"soon\",\"sorry\",\"sort\",\"soul\",\"sound\",\"soup\",\"source\",\"south\",\"space\",\"spare\",\"spatial\",\"spawn\",\"speak\",\"special\",\"speed\",\"spell\",\"spend\",\"sphere\",\"spice\",\"spider\",\"spike\",\"spin\",\"spirit\",\"split\",\"spoil\",\"sponsor\",\"spoon\",\"sport\",\"spot\",\"spray\",\"spread\",\"spring\",\"spy\",\"square\",\"squeeze\",\"squirrel\",\"stable\",\"stadium\",\"staff\",\"stage\",\"stairs\",\"stamp\",\"stand\",\"start\",\"state\",\"stay\",\"steak\",\"steel\",\"stem\",\"step\",\"stereo\",\"stick\",\"still\",\"sting\",\"stock\",\"stomach\",\"stone\",\"stool\",\"story\",\"stove\",\"strategy\",\"street\",\"strike\",\"strong\",\"struggle\",\"student\",\"stuff\",\"stumble\",\"style\",\"subject\",\"submit\",\"subway\",\"success\",\"such\",\"sudden\",\"suffer\",\"sugar\",\"suggest\",\"suit\",\"summer\",\"sun\",\"sunny\",\"sunset\",\"super\",\"supply\",\"supreme\",\"sure\",\"surface\",\"surge\",\"surprise\",\"surround\",\"survey\",\"suspect\",\"sustain\",\"swallow\",\"swamp\",\"swap\",\"swarm\",\"swear\",\"sweet\",\"swift\",\"swim\",\"swing\",\"switch\",\"sword\",\"symbol\",\"symptom\",\"syrup\",\"system\",\"table\",\"tackle\",\"tag\",\"tail\",\"talent\",\"talk\",\"tank\",\"tape\",\"target\",\"task\",\"taste\",\"tattoo\",\"taxi\",\"teach\",\"team\",\"tell\",\"ten\",\"tenant\",\"tennis\",\"tent\",\"term\",\"test\",\"text\",\"thank\",\"that\",\"theme\",\"then\",\"theory\",\"there\",\"they\",\"thing\",\"this\",\"thought\",\"three\",\"thrive\",\"throw\",\"thumb\",\"thunder\",\"ticket\",\"tide\",\"tiger\",\"tilt\",\"timber\",\"time\",\"tiny\",\"tip\",\"tired\",\"tissue\",\"title\",\"toast\",\"tobacco\",\"today\",\"toddler\",\"toe\",\"together\",\"toilet\",\"token\",\"tomato\",\"tomorrow\",\"tone\",\"tongue\",\"tonight\",\"tool\",\"tooth\",\"top\",\"topic\",\"topple\",\"torch\",\"tornado\",\"tortoise\",\"toss\",\"total\",\"tourist\",\"toward\",\"tower\",\"town\",\"toy\",\"track\",\"trade\",\"traffic\",\"tragic\",\"train\",\"transfer\",\"trap\",\"trash\",\"travel\",\"tray\",\"treat\",\"tree\",\"trend\",\"trial\",\"tribe\",\"trick\",\"trigger\",\"trim\",\"trip\",\"trophy\",\"trouble\",\"truck\",\"true\",\"truly\",\"trumpet\",\"trust\",\"truth\",\"try\",\"tube\",\"tuition\",\"tumble\",\"tuna\",\"tunnel\",\"turkey\",\"turn\",\"turtle\",\"twelve\",\"twenty\",\"twice\",\"twin\",\"twist\",\"two\",\"type\",\"typical\",\"ugly\",\"umbrella\",\"unable\",\"unaware\",\"uncle\",\"uncover\",\"under\",\"undo\",\"unfair\",\"unfold\",\"unhappy\",\"uniform\",\"unique\",\"unit\",\"universe\",\"unknown\",\"unlock\",\"until\",\"unusual\",\"unveil\",\"update\",\"upgrade\",\"uphold\",\"upon\",\"upper\",\"upset\",\"urban\",\"urge\",\"usage\",\"use\",\"used\",\"useful\",\"useless\",\"usual\",\"utility\",\"vacant\",\"vacuum\",\"vague\",\"valid\",\"valley\",\"valve\",\"van\",\"vanish\",\"vapor\",\"various\",\"vast\",\"vault\",\"vehicle\",\"velvet\",\"vendor\",\"venture\",\"venue\",\"verb\",\"verify\",\"version\",\"very\",\"vessel\",\"veteran\",\"viable\",\"vibrant\",\"vicious\",\"victory\",\"video\",\"view\",\"village\",\"vintage\",\"violin\",\"virtual\",\"virus\",\"visa\",\"visit\",\"visual\",\"vital\",\"vivid\",\"vocal\",\"voice\",\"void\",\"volcano\",\"volume\",\"vote\",\"voyage\",\"wage\",\"wagon\",\"wait\",\"walk\",\"wall\",\"walnut\",\"want\",\"warfare\",\"warm\",\"warrior\",\"wash\",\"wasp\",\"waste\",\"water\",\"wave\",\"way\",\"wealth\",\"weapon\",\"wear\",\"weasel\",\"weather\",\"web\",\"wedding\",\"weekend\",\"weird\",\"welcome\",\"west\",\"wet\",\"whale\",\"what\",\"wheat\",\"wheel\",\"when\",\"where\",\"whip\",\"whisper\",\"wide\",\"width\",\"wife\",\"wild\",\"will\",\"win\",\"window\",\"wine\",\"wing\",\"wink\",\"winner\",\"winter\",\"wire\",\"wisdom\",\"wise\",\"wish\",\"witness\",\"wolf\",\"woman\",\"wonder\",\"wood\",\"wool\",\"word\",\"work\",\"world\",\"worry\",\"worth\",\"wrap\",\"wreck\",\"wrestle\",\"wrist\",\"write\",\"wrong\",\"yard\",\"year\",\"yellow\",\"you\",\"young\",\"youth\",\"zebra\",\"zero\",\"zone\",\"zoo\"]");

},{}],"9oUud":[function(require,module,exports) {
module.exports = JSON.parse("[\"abaisser\",\"abandon\",\"abdiquer\",\"abeille\",\"abolir\",\"aborder\",\"aboutir\",\"aboyer\",\"abrasif\",\"abreuver\",\"abriter\",\"abroger\",\"abrupt\",\"absence\",\"absolu\",\"absurde\",\"abusif\",\"abyssal\",\"académie\",\"acajou\",\"acarien\",\"accabler\",\"accepter\",\"acclamer\",\"accolade\",\"accroche\",\"accuser\",\"acerbe\",\"achat\",\"acheter\",\"aciduler\",\"acier\",\"acompte\",\"acquérir\",\"acronyme\",\"acteur\",\"actif\",\"actuel\",\"adepte\",\"adéquat\",\"adhésif\",\"adjectif\",\"adjuger\",\"admettre\",\"admirer\",\"adopter\",\"adorer\",\"adoucir\",\"adresse\",\"adroit\",\"adulte\",\"adverbe\",\"aérer\",\"aéronef\",\"affaire\",\"affecter\",\"affiche\",\"affreux\",\"affubler\",\"agacer\",\"agencer\",\"agile\",\"agiter\",\"agrafer\",\"agréable\",\"agrume\",\"aider\",\"aiguille\",\"ailier\",\"aimable\",\"aisance\",\"ajouter\",\"ajuster\",\"alarmer\",\"alchimie\",\"alerte\",\"algèbre\",\"algue\",\"aliéner\",\"aliment\",\"alléger\",\"alliage\",\"allouer\",\"allumer\",\"alourdir\",\"alpaga\",\"altesse\",\"alvéole\",\"amateur\",\"ambigu\",\"ambre\",\"aménager\",\"amertume\",\"amidon\",\"amiral\",\"amorcer\",\"amour\",\"amovible\",\"amphibie\",\"ampleur\",\"amusant\",\"analyse\",\"anaphore\",\"anarchie\",\"anatomie\",\"ancien\",\"anéantir\",\"angle\",\"angoisse\",\"anguleux\",\"animal\",\"annexer\",\"annonce\",\"annuel\",\"anodin\",\"anomalie\",\"anonyme\",\"anormal\",\"antenne\",\"antidote\",\"anxieux\",\"apaiser\",\"apéritif\",\"aplanir\",\"apologie\",\"appareil\",\"appeler\",\"apporter\",\"appuyer\",\"aquarium\",\"aqueduc\",\"arbitre\",\"arbuste\",\"ardeur\",\"ardoise\",\"argent\",\"arlequin\",\"armature\",\"armement\",\"armoire\",\"armure\",\"arpenter\",\"arracher\",\"arriver\",\"arroser\",\"arsenic\",\"artériel\",\"article\",\"aspect\",\"asphalte\",\"aspirer\",\"assaut\",\"asservir\",\"assiette\",\"associer\",\"assurer\",\"asticot\",\"astre\",\"astuce\",\"atelier\",\"atome\",\"atrium\",\"atroce\",\"attaque\",\"attentif\",\"attirer\",\"attraper\",\"aubaine\",\"auberge\",\"audace\",\"audible\",\"augurer\",\"aurore\",\"automne\",\"autruche\",\"avaler\",\"avancer\",\"avarice\",\"avenir\",\"averse\",\"aveugle\",\"aviateur\",\"avide\",\"avion\",\"aviser\",\"avoine\",\"avouer\",\"avril\",\"axial\",\"axiome\",\"badge\",\"bafouer\",\"bagage\",\"baguette\",\"baignade\",\"balancer\",\"balcon\",\"baleine\",\"balisage\",\"bambin\",\"bancaire\",\"bandage\",\"banlieue\",\"bannière\",\"banquier\",\"barbier\",\"baril\",\"baron\",\"barque\",\"barrage\",\"bassin\",\"bastion\",\"bataille\",\"bateau\",\"batterie\",\"baudrier\",\"bavarder\",\"belette\",\"bélier\",\"belote\",\"bénéfice\",\"berceau\",\"berger\",\"berline\",\"bermuda\",\"besace\",\"besogne\",\"bétail\",\"beurre\",\"biberon\",\"bicycle\",\"bidule\",\"bijou\",\"bilan\",\"bilingue\",\"billard\",\"binaire\",\"biologie\",\"biopsie\",\"biotype\",\"biscuit\",\"bison\",\"bistouri\",\"bitume\",\"bizarre\",\"blafard\",\"blague\",\"blanchir\",\"blessant\",\"blinder\",\"blond\",\"bloquer\",\"blouson\",\"bobard\",\"bobine\",\"boire\",\"boiser\",\"bolide\",\"bonbon\",\"bondir\",\"bonheur\",\"bonifier\",\"bonus\",\"bordure\",\"borne\",\"botte\",\"boucle\",\"boueux\",\"bougie\",\"boulon\",\"bouquin\",\"bourse\",\"boussole\",\"boutique\",\"boxeur\",\"branche\",\"brasier\",\"brave\",\"brebis\",\"brèche\",\"breuvage\",\"bricoler\",\"brigade\",\"brillant\",\"brioche\",\"brique\",\"brochure\",\"broder\",\"bronzer\",\"brousse\",\"broyeur\",\"brume\",\"brusque\",\"brutal\",\"bruyant\",\"buffle\",\"buisson\",\"bulletin\",\"bureau\",\"burin\",\"bustier\",\"butiner\",\"butoir\",\"buvable\",\"buvette\",\"cabanon\",\"cabine\",\"cachette\",\"cadeau\",\"cadre\",\"caféine\",\"caillou\",\"caisson\",\"calculer\",\"calepin\",\"calibre\",\"calmer\",\"calomnie\",\"calvaire\",\"camarade\",\"caméra\",\"camion\",\"campagne\",\"canal\",\"caneton\",\"canon\",\"cantine\",\"canular\",\"capable\",\"caporal\",\"caprice\",\"capsule\",\"capter\",\"capuche\",\"carabine\",\"carbone\",\"caresser\",\"caribou\",\"carnage\",\"carotte\",\"carreau\",\"carton\",\"cascade\",\"casier\",\"casque\",\"cassure\",\"causer\",\"caution\",\"cavalier\",\"caverne\",\"caviar\",\"cédille\",\"ceinture\",\"céleste\",\"cellule\",\"cendrier\",\"censurer\",\"central\",\"cercle\",\"cérébral\",\"cerise\",\"cerner\",\"cerveau\",\"cesser\",\"chagrin\",\"chaise\",\"chaleur\",\"chambre\",\"chance\",\"chapitre\",\"charbon\",\"chasseur\",\"chaton\",\"chausson\",\"chavirer\",\"chemise\",\"chenille\",\"chéquier\",\"chercher\",\"cheval\",\"chien\",\"chiffre\",\"chignon\",\"chimère\",\"chiot\",\"chlorure\",\"chocolat\",\"choisir\",\"chose\",\"chouette\",\"chrome\",\"chute\",\"cigare\",\"cigogne\",\"cimenter\",\"cinéma\",\"cintrer\",\"circuler\",\"cirer\",\"cirque\",\"citerne\",\"citoyen\",\"citron\",\"civil\",\"clairon\",\"clameur\",\"claquer\",\"classe\",\"clavier\",\"client\",\"cligner\",\"climat\",\"clivage\",\"cloche\",\"clonage\",\"cloporte\",\"cobalt\",\"cobra\",\"cocasse\",\"cocotier\",\"coder\",\"codifier\",\"coffre\",\"cogner\",\"cohésion\",\"coiffer\",\"coincer\",\"colère\",\"colibri\",\"colline\",\"colmater\",\"colonel\",\"combat\",\"comédie\",\"commande\",\"compact\",\"concert\",\"conduire\",\"confier\",\"congeler\",\"connoter\",\"consonne\",\"contact\",\"convexe\",\"copain\",\"copie\",\"corail\",\"corbeau\",\"cordage\",\"corniche\",\"corpus\",\"correct\",\"cortège\",\"cosmique\",\"costume\",\"coton\",\"coude\",\"coupure\",\"courage\",\"couteau\",\"couvrir\",\"coyote\",\"crabe\",\"crainte\",\"cravate\",\"crayon\",\"créature\",\"créditer\",\"crémeux\",\"creuser\",\"crevette\",\"cribler\",\"crier\",\"cristal\",\"critère\",\"croire\",\"croquer\",\"crotale\",\"crucial\",\"cruel\",\"crypter\",\"cubique\",\"cueillir\",\"cuillère\",\"cuisine\",\"cuivre\",\"culminer\",\"cultiver\",\"cumuler\",\"cupide\",\"curatif\",\"curseur\",\"cyanure\",\"cycle\",\"cylindre\",\"cynique\",\"daigner\",\"damier\",\"danger\",\"danseur\",\"dauphin\",\"débattre\",\"débiter\",\"déborder\",\"débrider\",\"débutant\",\"décaler\",\"décembre\",\"déchirer\",\"décider\",\"déclarer\",\"décorer\",\"décrire\",\"décupler\",\"dédale\",\"déductif\",\"déesse\",\"défensif\",\"défiler\",\"défrayer\",\"dégager\",\"dégivrer\",\"déglutir\",\"dégrafer\",\"déjeuner\",\"délice\",\"déloger\",\"demander\",\"demeurer\",\"démolir\",\"dénicher\",\"dénouer\",\"dentelle\",\"dénuder\",\"départ\",\"dépenser\",\"déphaser\",\"déplacer\",\"déposer\",\"déranger\",\"dérober\",\"désastre\",\"descente\",\"désert\",\"désigner\",\"désobéir\",\"dessiner\",\"destrier\",\"détacher\",\"détester\",\"détourer\",\"détresse\",\"devancer\",\"devenir\",\"deviner\",\"devoir\",\"diable\",\"dialogue\",\"diamant\",\"dicter\",\"différer\",\"digérer\",\"digital\",\"digne\",\"diluer\",\"dimanche\",\"diminuer\",\"dioxyde\",\"directif\",\"diriger\",\"discuter\",\"disposer\",\"dissiper\",\"distance\",\"divertir\",\"diviser\",\"docile\",\"docteur\",\"dogme\",\"doigt\",\"domaine\",\"domicile\",\"dompter\",\"donateur\",\"donjon\",\"donner\",\"dopamine\",\"dortoir\",\"dorure\",\"dosage\",\"doseur\",\"dossier\",\"dotation\",\"douanier\",\"double\",\"douceur\",\"douter\",\"doyen\",\"dragon\",\"draper\",\"dresser\",\"dribbler\",\"droiture\",\"duperie\",\"duplexe\",\"durable\",\"durcir\",\"dynastie\",\"éblouir\",\"écarter\",\"écharpe\",\"échelle\",\"éclairer\",\"éclipse\",\"éclore\",\"écluse\",\"école\",\"économie\",\"écorce\",\"écouter\",\"écraser\",\"écrémer\",\"écrivain\",\"écrou\",\"écume\",\"écureuil\",\"édifier\",\"éduquer\",\"effacer\",\"effectif\",\"effigie\",\"effort\",\"effrayer\",\"effusion\",\"égaliser\",\"égarer\",\"éjecter\",\"élaborer\",\"élargir\",\"électron\",\"élégant\",\"éléphant\",\"élève\",\"éligible\",\"élitisme\",\"éloge\",\"élucider\",\"éluder\",\"emballer\",\"embellir\",\"embryon\",\"émeraude\",\"émission\",\"emmener\",\"émotion\",\"émouvoir\",\"empereur\",\"employer\",\"emporter\",\"emprise\",\"émulsion\",\"encadrer\",\"enchère\",\"enclave\",\"encoche\",\"endiguer\",\"endosser\",\"endroit\",\"enduire\",\"énergie\",\"enfance\",\"enfermer\",\"enfouir\",\"engager\",\"engin\",\"englober\",\"énigme\",\"enjamber\",\"enjeu\",\"enlever\",\"ennemi\",\"ennuyeux\",\"enrichir\",\"enrobage\",\"enseigne\",\"entasser\",\"entendre\",\"entier\",\"entourer\",\"entraver\",\"énumérer\",\"envahir\",\"enviable\",\"envoyer\",\"enzyme\",\"éolien\",\"épaissir\",\"épargne\",\"épatant\",\"épaule\",\"épicerie\",\"épidémie\",\"épier\",\"épilogue\",\"épine\",\"épisode\",\"épitaphe\",\"époque\",\"épreuve\",\"éprouver\",\"épuisant\",\"équerre\",\"équipe\",\"ériger\",\"érosion\",\"erreur\",\"éruption\",\"escalier\",\"espadon\",\"espèce\",\"espiègle\",\"espoir\",\"esprit\",\"esquiver\",\"essayer\",\"essence\",\"essieu\",\"essorer\",\"estime\",\"estomac\",\"estrade\",\"étagère\",\"étaler\",\"étanche\",\"étatique\",\"éteindre\",\"étendoir\",\"éternel\",\"éthanol\",\"éthique\",\"ethnie\",\"étirer\",\"étoffer\",\"étoile\",\"étonnant\",\"étourdir\",\"étrange\",\"étroit\",\"étude\",\"euphorie\",\"évaluer\",\"évasion\",\"éventail\",\"évidence\",\"éviter\",\"évolutif\",\"évoquer\",\"exact\",\"exagérer\",\"exaucer\",\"exceller\",\"excitant\",\"exclusif\",\"excuse\",\"exécuter\",\"exemple\",\"exercer\",\"exhaler\",\"exhorter\",\"exigence\",\"exiler\",\"exister\",\"exotique\",\"expédier\",\"explorer\",\"exposer\",\"exprimer\",\"exquis\",\"extensif\",\"extraire\",\"exulter\",\"fable\",\"fabuleux\",\"facette\",\"facile\",\"facture\",\"faiblir\",\"falaise\",\"fameux\",\"famille\",\"farceur\",\"farfelu\",\"farine\",\"farouche\",\"fasciner\",\"fatal\",\"fatigue\",\"faucon\",\"fautif\",\"faveur\",\"favori\",\"fébrile\",\"féconder\",\"fédérer\",\"félin\",\"femme\",\"fémur\",\"fendoir\",\"féodal\",\"fermer\",\"féroce\",\"ferveur\",\"festival\",\"feuille\",\"feutre\",\"février\",\"fiasco\",\"ficeler\",\"fictif\",\"fidèle\",\"figure\",\"filature\",\"filetage\",\"filière\",\"filleul\",\"filmer\",\"filou\",\"filtrer\",\"financer\",\"finir\",\"fiole\",\"firme\",\"fissure\",\"fixer\",\"flairer\",\"flamme\",\"flasque\",\"flatteur\",\"fléau\",\"flèche\",\"fleur\",\"flexion\",\"flocon\",\"flore\",\"fluctuer\",\"fluide\",\"fluvial\",\"folie\",\"fonderie\",\"fongible\",\"fontaine\",\"forcer\",\"forgeron\",\"formuler\",\"fortune\",\"fossile\",\"foudre\",\"fougère\",\"fouiller\",\"foulure\",\"fourmi\",\"fragile\",\"fraise\",\"franchir\",\"frapper\",\"frayeur\",\"frégate\",\"freiner\",\"frelon\",\"frémir\",\"frénésie\",\"frère\",\"friable\",\"friction\",\"frisson\",\"frivole\",\"froid\",\"fromage\",\"frontal\",\"frotter\",\"fruit\",\"fugitif\",\"fuite\",\"fureur\",\"furieux\",\"furtif\",\"fusion\",\"futur\",\"gagner\",\"galaxie\",\"galerie\",\"gambader\",\"garantir\",\"gardien\",\"garnir\",\"garrigue\",\"gazelle\",\"gazon\",\"géant\",\"gélatine\",\"gélule\",\"gendarme\",\"général\",\"génie\",\"genou\",\"gentil\",\"géologie\",\"géomètre\",\"géranium\",\"germe\",\"gestuel\",\"geyser\",\"gibier\",\"gicler\",\"girafe\",\"givre\",\"glace\",\"glaive\",\"glisser\",\"globe\",\"gloire\",\"glorieux\",\"golfeur\",\"gomme\",\"gonfler\",\"gorge\",\"gorille\",\"goudron\",\"gouffre\",\"goulot\",\"goupille\",\"gourmand\",\"goutte\",\"graduel\",\"graffiti\",\"graine\",\"grand\",\"grappin\",\"gratuit\",\"gravir\",\"grenat\",\"griffure\",\"griller\",\"grimper\",\"grogner\",\"gronder\",\"grotte\",\"groupe\",\"gruger\",\"grutier\",\"gruyère\",\"guépard\",\"guerrier\",\"guide\",\"guimauve\",\"guitare\",\"gustatif\",\"gymnaste\",\"gyrostat\",\"habitude\",\"hachoir\",\"halte\",\"hameau\",\"hangar\",\"hanneton\",\"haricot\",\"harmonie\",\"harpon\",\"hasard\",\"hélium\",\"hématome\",\"herbe\",\"hérisson\",\"hermine\",\"héron\",\"hésiter\",\"heureux\",\"hiberner\",\"hibou\",\"hilarant\",\"histoire\",\"hiver\",\"homard\",\"hommage\",\"homogène\",\"honneur\",\"honorer\",\"honteux\",\"horde\",\"horizon\",\"horloge\",\"hormone\",\"horrible\",\"houleux\",\"housse\",\"hublot\",\"huileux\",\"humain\",\"humble\",\"humide\",\"humour\",\"hurler\",\"hydromel\",\"hygiène\",\"hymne\",\"hypnose\",\"idylle\",\"ignorer\",\"iguane\",\"illicite\",\"illusion\",\"image\",\"imbiber\",\"imiter\",\"immense\",\"immobile\",\"immuable\",\"impact\",\"impérial\",\"implorer\",\"imposer\",\"imprimer\",\"imputer\",\"incarner\",\"incendie\",\"incident\",\"incliner\",\"incolore\",\"indexer\",\"indice\",\"inductif\",\"inédit\",\"ineptie\",\"inexact\",\"infini\",\"infliger\",\"informer\",\"infusion\",\"ingérer\",\"inhaler\",\"inhiber\",\"injecter\",\"injure\",\"innocent\",\"inoculer\",\"inonder\",\"inscrire\",\"insecte\",\"insigne\",\"insolite\",\"inspirer\",\"instinct\",\"insulter\",\"intact\",\"intense\",\"intime\",\"intrigue\",\"intuitif\",\"inutile\",\"invasion\",\"inventer\",\"inviter\",\"invoquer\",\"ironique\",\"irradier\",\"irréel\",\"irriter\",\"isoler\",\"ivoire\",\"ivresse\",\"jaguar\",\"jaillir\",\"jambe\",\"janvier\",\"jardin\",\"jauger\",\"jaune\",\"javelot\",\"jetable\",\"jeton\",\"jeudi\",\"jeunesse\",\"joindre\",\"joncher\",\"jongler\",\"joueur\",\"jouissif\",\"journal\",\"jovial\",\"joyau\",\"joyeux\",\"jubiler\",\"jugement\",\"junior\",\"jupon\",\"juriste\",\"justice\",\"juteux\",\"juvénile\",\"kayak\",\"kimono\",\"kiosque\",\"label\",\"labial\",\"labourer\",\"lacérer\",\"lactose\",\"lagune\",\"laine\",\"laisser\",\"laitier\",\"lambeau\",\"lamelle\",\"lampe\",\"lanceur\",\"langage\",\"lanterne\",\"lapin\",\"largeur\",\"larme\",\"laurier\",\"lavabo\",\"lavoir\",\"lecture\",\"légal\",\"léger\",\"légume\",\"lessive\",\"lettre\",\"levier\",\"lexique\",\"lézard\",\"liasse\",\"libérer\",\"libre\",\"licence\",\"licorne\",\"liège\",\"lièvre\",\"ligature\",\"ligoter\",\"ligue\",\"limer\",\"limite\",\"limonade\",\"limpide\",\"linéaire\",\"lingot\",\"lionceau\",\"liquide\",\"lisière\",\"lister\",\"lithium\",\"litige\",\"littoral\",\"livreur\",\"logique\",\"lointain\",\"loisir\",\"lombric\",\"loterie\",\"louer\",\"lourd\",\"loutre\",\"louve\",\"loyal\",\"lubie\",\"lucide\",\"lucratif\",\"lueur\",\"lugubre\",\"luisant\",\"lumière\",\"lunaire\",\"lundi\",\"luron\",\"lutter\",\"luxueux\",\"machine\",\"magasin\",\"magenta\",\"magique\",\"maigre\",\"maillon\",\"maintien\",\"mairie\",\"maison\",\"majorer\",\"malaxer\",\"maléfice\",\"malheur\",\"malice\",\"mallette\",\"mammouth\",\"mandater\",\"maniable\",\"manquant\",\"manteau\",\"manuel\",\"marathon\",\"marbre\",\"marchand\",\"mardi\",\"maritime\",\"marqueur\",\"marron\",\"marteler\",\"mascotte\",\"massif\",\"matériel\",\"matière\",\"matraque\",\"maudire\",\"maussade\",\"mauve\",\"maximal\",\"méchant\",\"méconnu\",\"médaille\",\"médecin\",\"méditer\",\"méduse\",\"meilleur\",\"mélange\",\"mélodie\",\"membre\",\"mémoire\",\"menacer\",\"mener\",\"menhir\",\"mensonge\",\"mentor\",\"mercredi\",\"mérite\",\"merle\",\"messager\",\"mesure\",\"métal\",\"météore\",\"méthode\",\"métier\",\"meuble\",\"miauler\",\"microbe\",\"miette\",\"mignon\",\"migrer\",\"milieu\",\"million\",\"mimique\",\"mince\",\"minéral\",\"minimal\",\"minorer\",\"minute\",\"miracle\",\"miroiter\",\"missile\",\"mixte\",\"mobile\",\"moderne\",\"moelleux\",\"mondial\",\"moniteur\",\"monnaie\",\"monotone\",\"monstre\",\"montagne\",\"monument\",\"moqueur\",\"morceau\",\"morsure\",\"mortier\",\"moteur\",\"motif\",\"mouche\",\"moufle\",\"moulin\",\"mousson\",\"mouton\",\"mouvant\",\"multiple\",\"munition\",\"muraille\",\"murène\",\"murmure\",\"muscle\",\"muséum\",\"musicien\",\"mutation\",\"muter\",\"mutuel\",\"myriade\",\"myrtille\",\"mystère\",\"mythique\",\"nageur\",\"nappe\",\"narquois\",\"narrer\",\"natation\",\"nation\",\"nature\",\"naufrage\",\"nautique\",\"navire\",\"nébuleux\",\"nectar\",\"néfaste\",\"négation\",\"négliger\",\"négocier\",\"neige\",\"nerveux\",\"nettoyer\",\"neurone\",\"neutron\",\"neveu\",\"niche\",\"nickel\",\"nitrate\",\"niveau\",\"noble\",\"nocif\",\"nocturne\",\"noirceur\",\"noisette\",\"nomade\",\"nombreux\",\"nommer\",\"normatif\",\"notable\",\"notifier\",\"notoire\",\"nourrir\",\"nouveau\",\"novateur\",\"novembre\",\"novice\",\"nuage\",\"nuancer\",\"nuire\",\"nuisible\",\"numéro\",\"nuptial\",\"nuque\",\"nutritif\",\"obéir\",\"objectif\",\"obliger\",\"obscur\",\"observer\",\"obstacle\",\"obtenir\",\"obturer\",\"occasion\",\"occuper\",\"océan\",\"octobre\",\"octroyer\",\"octupler\",\"oculaire\",\"odeur\",\"odorant\",\"offenser\",\"officier\",\"offrir\",\"ogive\",\"oiseau\",\"oisillon\",\"olfactif\",\"olivier\",\"ombrage\",\"omettre\",\"onctueux\",\"onduler\",\"onéreux\",\"onirique\",\"opale\",\"opaque\",\"opérer\",\"opinion\",\"opportun\",\"opprimer\",\"opter\",\"optique\",\"orageux\",\"orange\",\"orbite\",\"ordonner\",\"oreille\",\"organe\",\"orgueil\",\"orifice\",\"ornement\",\"orque\",\"ortie\",\"osciller\",\"osmose\",\"ossature\",\"otarie\",\"ouragan\",\"ourson\",\"outil\",\"outrager\",\"ouvrage\",\"ovation\",\"oxyde\",\"oxygène\",\"ozone\",\"paisible\",\"palace\",\"palmarès\",\"palourde\",\"palper\",\"panache\",\"panda\",\"pangolin\",\"paniquer\",\"panneau\",\"panorama\",\"pantalon\",\"papaye\",\"papier\",\"papoter\",\"papyrus\",\"paradoxe\",\"parcelle\",\"paresse\",\"parfumer\",\"parler\",\"parole\",\"parrain\",\"parsemer\",\"partager\",\"parure\",\"parvenir\",\"passion\",\"pastèque\",\"paternel\",\"patience\",\"patron\",\"pavillon\",\"pavoiser\",\"payer\",\"paysage\",\"peigne\",\"peintre\",\"pelage\",\"pélican\",\"pelle\",\"pelouse\",\"peluche\",\"pendule\",\"pénétrer\",\"pénible\",\"pensif\",\"pénurie\",\"pépite\",\"péplum\",\"perdrix\",\"perforer\",\"période\",\"permuter\",\"perplexe\",\"persil\",\"perte\",\"peser\",\"pétale\",\"petit\",\"pétrir\",\"peuple\",\"pharaon\",\"phobie\",\"phoque\",\"photon\",\"phrase\",\"physique\",\"piano\",\"pictural\",\"pièce\",\"pierre\",\"pieuvre\",\"pilote\",\"pinceau\",\"pipette\",\"piquer\",\"pirogue\",\"piscine\",\"piston\",\"pivoter\",\"pixel\",\"pizza\",\"placard\",\"plafond\",\"plaisir\",\"planer\",\"plaque\",\"plastron\",\"plateau\",\"pleurer\",\"plexus\",\"pliage\",\"plomb\",\"plonger\",\"pluie\",\"plumage\",\"pochette\",\"poésie\",\"poète\",\"pointe\",\"poirier\",\"poisson\",\"poivre\",\"polaire\",\"policier\",\"pollen\",\"polygone\",\"pommade\",\"pompier\",\"ponctuel\",\"pondérer\",\"poney\",\"portique\",\"position\",\"posséder\",\"posture\",\"potager\",\"poteau\",\"potion\",\"pouce\",\"poulain\",\"poumon\",\"pourpre\",\"poussin\",\"pouvoir\",\"prairie\",\"pratique\",\"précieux\",\"prédire\",\"préfixe\",\"prélude\",\"prénom\",\"présence\",\"prétexte\",\"prévoir\",\"primitif\",\"prince\",\"prison\",\"priver\",\"problème\",\"procéder\",\"prodige\",\"profond\",\"progrès\",\"proie\",\"projeter\",\"prologue\",\"promener\",\"propre\",\"prospère\",\"protéger\",\"prouesse\",\"proverbe\",\"prudence\",\"pruneau\",\"psychose\",\"public\",\"puceron\",\"puiser\",\"pulpe\",\"pulsar\",\"punaise\",\"punitif\",\"pupitre\",\"purifier\",\"puzzle\",\"pyramide\",\"quasar\",\"querelle\",\"question\",\"quiétude\",\"quitter\",\"quotient\",\"racine\",\"raconter\",\"radieux\",\"ragondin\",\"raideur\",\"raisin\",\"ralentir\",\"rallonge\",\"ramasser\",\"rapide\",\"rasage\",\"ratisser\",\"ravager\",\"ravin\",\"rayonner\",\"réactif\",\"réagir\",\"réaliser\",\"réanimer\",\"recevoir\",\"réciter\",\"réclamer\",\"récolter\",\"recruter\",\"reculer\",\"recycler\",\"rédiger\",\"redouter\",\"refaire\",\"réflexe\",\"réformer\",\"refrain\",\"refuge\",\"régalien\",\"région\",\"réglage\",\"régulier\",\"réitérer\",\"rejeter\",\"rejouer\",\"relatif\",\"relever\",\"relief\",\"remarque\",\"remède\",\"remise\",\"remonter\",\"remplir\",\"remuer\",\"renard\",\"renfort\",\"renifler\",\"renoncer\",\"rentrer\",\"renvoi\",\"replier\",\"reporter\",\"reprise\",\"reptile\",\"requin\",\"réserve\",\"résineux\",\"résoudre\",\"respect\",\"rester\",\"résultat\",\"rétablir\",\"retenir\",\"réticule\",\"retomber\",\"retracer\",\"réunion\",\"réussir\",\"revanche\",\"revivre\",\"révolte\",\"révulsif\",\"richesse\",\"rideau\",\"rieur\",\"rigide\",\"rigoler\",\"rincer\",\"riposter\",\"risible\",\"risque\",\"rituel\",\"rival\",\"rivière\",\"rocheux\",\"romance\",\"rompre\",\"ronce\",\"rondin\",\"roseau\",\"rosier\",\"rotatif\",\"rotor\",\"rotule\",\"rouge\",\"rouille\",\"rouleau\",\"routine\",\"royaume\",\"ruban\",\"rubis\",\"ruche\",\"ruelle\",\"rugueux\",\"ruiner\",\"ruisseau\",\"ruser\",\"rustique\",\"rythme\",\"sabler\",\"saboter\",\"sabre\",\"sacoche\",\"safari\",\"sagesse\",\"saisir\",\"salade\",\"salive\",\"salon\",\"saluer\",\"samedi\",\"sanction\",\"sanglier\",\"sarcasme\",\"sardine\",\"saturer\",\"saugrenu\",\"saumon\",\"sauter\",\"sauvage\",\"savant\",\"savonner\",\"scalpel\",\"scandale\",\"scélérat\",\"scénario\",\"sceptre\",\"schéma\",\"science\",\"scinder\",\"score\",\"scrutin\",\"sculpter\",\"séance\",\"sécable\",\"sécher\",\"secouer\",\"sécréter\",\"sédatif\",\"séduire\",\"seigneur\",\"séjour\",\"sélectif\",\"semaine\",\"sembler\",\"semence\",\"séminal\",\"sénateur\",\"sensible\",\"sentence\",\"séparer\",\"séquence\",\"serein\",\"sergent\",\"sérieux\",\"serrure\",\"sérum\",\"service\",\"sésame\",\"sévir\",\"sevrage\",\"sextuple\",\"sidéral\",\"siècle\",\"siéger\",\"siffler\",\"sigle\",\"signal\",\"silence\",\"silicium\",\"simple\",\"sincère\",\"sinistre\",\"siphon\",\"sirop\",\"sismique\",\"situer\",\"skier\",\"social\",\"socle\",\"sodium\",\"soigneux\",\"soldat\",\"soleil\",\"solitude\",\"soluble\",\"sombre\",\"sommeil\",\"somnoler\",\"sonde\",\"songeur\",\"sonnette\",\"sonore\",\"sorcier\",\"sortir\",\"sosie\",\"sottise\",\"soucieux\",\"soudure\",\"souffle\",\"soulever\",\"soupape\",\"source\",\"soutirer\",\"souvenir\",\"spacieux\",\"spatial\",\"spécial\",\"sphère\",\"spiral\",\"stable\",\"station\",\"sternum\",\"stimulus\",\"stipuler\",\"strict\",\"studieux\",\"stupeur\",\"styliste\",\"sublime\",\"substrat\",\"subtil\",\"subvenir\",\"succès\",\"sucre\",\"suffixe\",\"suggérer\",\"suiveur\",\"sulfate\",\"superbe\",\"supplier\",\"surface\",\"suricate\",\"surmener\",\"surprise\",\"sursaut\",\"survie\",\"suspect\",\"syllabe\",\"symbole\",\"symétrie\",\"synapse\",\"syntaxe\",\"système\",\"tabac\",\"tablier\",\"tactile\",\"tailler\",\"talent\",\"talisman\",\"talonner\",\"tambour\",\"tamiser\",\"tangible\",\"tapis\",\"taquiner\",\"tarder\",\"tarif\",\"tartine\",\"tasse\",\"tatami\",\"tatouage\",\"taupe\",\"taureau\",\"taxer\",\"témoin\",\"temporel\",\"tenaille\",\"tendre\",\"teneur\",\"tenir\",\"tension\",\"terminer\",\"terne\",\"terrible\",\"tétine\",\"texte\",\"thème\",\"théorie\",\"thérapie\",\"thorax\",\"tibia\",\"tiède\",\"timide\",\"tirelire\",\"tiroir\",\"tissu\",\"titane\",\"titre\",\"tituber\",\"toboggan\",\"tolérant\",\"tomate\",\"tonique\",\"tonneau\",\"toponyme\",\"torche\",\"tordre\",\"tornade\",\"torpille\",\"torrent\",\"torse\",\"tortue\",\"totem\",\"toucher\",\"tournage\",\"tousser\",\"toxine\",\"traction\",\"trafic\",\"tragique\",\"trahir\",\"train\",\"trancher\",\"travail\",\"trèfle\",\"tremper\",\"trésor\",\"treuil\",\"triage\",\"tribunal\",\"tricoter\",\"trilogie\",\"triomphe\",\"tripler\",\"triturer\",\"trivial\",\"trombone\",\"tronc\",\"tropical\",\"troupeau\",\"tuile\",\"tulipe\",\"tumulte\",\"tunnel\",\"turbine\",\"tuteur\",\"tutoyer\",\"tuyau\",\"tympan\",\"typhon\",\"typique\",\"tyran\",\"ubuesque\",\"ultime\",\"ultrason\",\"unanime\",\"unifier\",\"union\",\"unique\",\"unitaire\",\"univers\",\"uranium\",\"urbain\",\"urticant\",\"usage\",\"usine\",\"usuel\",\"usure\",\"utile\",\"utopie\",\"vacarme\",\"vaccin\",\"vagabond\",\"vague\",\"vaillant\",\"vaincre\",\"vaisseau\",\"valable\",\"valise\",\"vallon\",\"valve\",\"vampire\",\"vanille\",\"vapeur\",\"varier\",\"vaseux\",\"vassal\",\"vaste\",\"vecteur\",\"vedette\",\"végétal\",\"véhicule\",\"veinard\",\"véloce\",\"vendredi\",\"vénérer\",\"venger\",\"venimeux\",\"ventouse\",\"verdure\",\"vérin\",\"vernir\",\"verrou\",\"verser\",\"vertu\",\"veston\",\"vétéran\",\"vétuste\",\"vexant\",\"vexer\",\"viaduc\",\"viande\",\"victoire\",\"vidange\",\"vidéo\",\"vignette\",\"vigueur\",\"vilain\",\"village\",\"vinaigre\",\"violon\",\"vipère\",\"virement\",\"virtuose\",\"virus\",\"visage\",\"viseur\",\"vision\",\"visqueux\",\"visuel\",\"vital\",\"vitesse\",\"viticole\",\"vitrine\",\"vivace\",\"vivipare\",\"vocation\",\"voguer\",\"voile\",\"voisin\",\"voiture\",\"volaille\",\"volcan\",\"voltiger\",\"volume\",\"vorace\",\"vortex\",\"voter\",\"vouloir\",\"voyage\",\"voyelle\",\"wagon\",\"xénon\",\"yacht\",\"zèbre\",\"zénith\",\"zeste\",\"zoologie\"]");

},{}],"foiNv":[function(require,module,exports) {
module.exports = JSON.parse("[\"abaco\",\"abbaglio\",\"abbinato\",\"abete\",\"abisso\",\"abolire\",\"abrasivo\",\"abrogato\",\"accadere\",\"accenno\",\"accusato\",\"acetone\",\"achille\",\"acido\",\"acqua\",\"acre\",\"acrilico\",\"acrobata\",\"acuto\",\"adagio\",\"addebito\",\"addome\",\"adeguato\",\"aderire\",\"adipe\",\"adottare\",\"adulare\",\"affabile\",\"affetto\",\"affisso\",\"affranto\",\"aforisma\",\"afoso\",\"africano\",\"agave\",\"agente\",\"agevole\",\"aggancio\",\"agire\",\"agitare\",\"agonismo\",\"agricolo\",\"agrumeto\",\"aguzzo\",\"alabarda\",\"alato\",\"albatro\",\"alberato\",\"albo\",\"albume\",\"alce\",\"alcolico\",\"alettone\",\"alfa\",\"algebra\",\"aliante\",\"alibi\",\"alimento\",\"allagato\",\"allegro\",\"allievo\",\"allodola\",\"allusivo\",\"almeno\",\"alogeno\",\"alpaca\",\"alpestre\",\"altalena\",\"alterno\",\"alticcio\",\"altrove\",\"alunno\",\"alveolo\",\"alzare\",\"amalgama\",\"amanita\",\"amarena\",\"ambito\",\"ambrato\",\"ameba\",\"america\",\"ametista\",\"amico\",\"ammasso\",\"ammenda\",\"ammirare\",\"ammonito\",\"amore\",\"ampio\",\"ampliare\",\"amuleto\",\"anacardo\",\"anagrafe\",\"analista\",\"anarchia\",\"anatra\",\"anca\",\"ancella\",\"ancora\",\"andare\",\"andrea\",\"anello\",\"angelo\",\"angolare\",\"angusto\",\"anima\",\"annegare\",\"annidato\",\"anno\",\"annuncio\",\"anonimo\",\"anticipo\",\"anzi\",\"apatico\",\"apertura\",\"apode\",\"apparire\",\"appetito\",\"appoggio\",\"approdo\",\"appunto\",\"aprile\",\"arabica\",\"arachide\",\"aragosta\",\"araldica\",\"arancio\",\"aratura\",\"arazzo\",\"arbitro\",\"archivio\",\"ardito\",\"arenile\",\"argento\",\"argine\",\"arguto\",\"aria\",\"armonia\",\"arnese\",\"arredato\",\"arringa\",\"arrosto\",\"arsenico\",\"arso\",\"artefice\",\"arzillo\",\"asciutto\",\"ascolto\",\"asepsi\",\"asettico\",\"asfalto\",\"asino\",\"asola\",\"aspirato\",\"aspro\",\"assaggio\",\"asse\",\"assoluto\",\"assurdo\",\"asta\",\"astenuto\",\"astice\",\"astratto\",\"atavico\",\"ateismo\",\"atomico\",\"atono\",\"attesa\",\"attivare\",\"attorno\",\"attrito\",\"attuale\",\"ausilio\",\"austria\",\"autista\",\"autonomo\",\"autunno\",\"avanzato\",\"avere\",\"avvenire\",\"avviso\",\"avvolgere\",\"azione\",\"azoto\",\"azzimo\",\"azzurro\",\"babele\",\"baccano\",\"bacino\",\"baco\",\"badessa\",\"badilata\",\"bagnato\",\"baita\",\"balcone\",\"baldo\",\"balena\",\"ballata\",\"balzano\",\"bambino\",\"bandire\",\"baraonda\",\"barbaro\",\"barca\",\"baritono\",\"barlume\",\"barocco\",\"basilico\",\"basso\",\"batosta\",\"battuto\",\"baule\",\"bava\",\"bavosa\",\"becco\",\"beffa\",\"belgio\",\"belva\",\"benda\",\"benevole\",\"benigno\",\"benzina\",\"bere\",\"berlina\",\"beta\",\"bibita\",\"bici\",\"bidone\",\"bifido\",\"biga\",\"bilancia\",\"bimbo\",\"binocolo\",\"biologo\",\"bipede\",\"bipolare\",\"birbante\",\"birra\",\"biscotto\",\"bisesto\",\"bisnonno\",\"bisonte\",\"bisturi\",\"bizzarro\",\"blando\",\"blatta\",\"bollito\",\"bonifico\",\"bordo\",\"bosco\",\"botanico\",\"bottino\",\"bozzolo\",\"braccio\",\"bradipo\",\"brama\",\"branca\",\"bravura\",\"bretella\",\"brevetto\",\"brezza\",\"briglia\",\"brillante\",\"brindare\",\"broccolo\",\"brodo\",\"bronzina\",\"brullo\",\"bruno\",\"bubbone\",\"buca\",\"budino\",\"buffone\",\"buio\",\"bulbo\",\"buono\",\"burlone\",\"burrasca\",\"bussola\",\"busta\",\"cadetto\",\"caduco\",\"calamaro\",\"calcolo\",\"calesse\",\"calibro\",\"calmo\",\"caloria\",\"cambusa\",\"camerata\",\"camicia\",\"cammino\",\"camola\",\"campale\",\"canapa\",\"candela\",\"cane\",\"canino\",\"canotto\",\"cantina\",\"capace\",\"capello\",\"capitolo\",\"capogiro\",\"cappero\",\"capra\",\"capsula\",\"carapace\",\"carcassa\",\"cardo\",\"carisma\",\"carovana\",\"carretto\",\"cartolina\",\"casaccio\",\"cascata\",\"caserma\",\"caso\",\"cassone\",\"castello\",\"casuale\",\"catasta\",\"catena\",\"catrame\",\"cauto\",\"cavillo\",\"cedibile\",\"cedrata\",\"cefalo\",\"celebre\",\"cellulare\",\"cena\",\"cenone\",\"centesimo\",\"ceramica\",\"cercare\",\"certo\",\"cerume\",\"cervello\",\"cesoia\",\"cespo\",\"ceto\",\"chela\",\"chiaro\",\"chicca\",\"chiedere\",\"chimera\",\"china\",\"chirurgo\",\"chitarra\",\"ciao\",\"ciclismo\",\"cifrare\",\"cigno\",\"cilindro\",\"ciottolo\",\"circa\",\"cirrosi\",\"citrico\",\"cittadino\",\"ciuffo\",\"civetta\",\"civile\",\"classico\",\"clinica\",\"cloro\",\"cocco\",\"codardo\",\"codice\",\"coerente\",\"cognome\",\"collare\",\"colmato\",\"colore\",\"colposo\",\"coltivato\",\"colza\",\"coma\",\"cometa\",\"commando\",\"comodo\",\"computer\",\"comune\",\"conciso\",\"condurre\",\"conferma\",\"congelare\",\"coniuge\",\"connesso\",\"conoscere\",\"consumo\",\"continuo\",\"convegno\",\"coperto\",\"copione\",\"coppia\",\"copricapo\",\"corazza\",\"cordata\",\"coricato\",\"cornice\",\"corolla\",\"corpo\",\"corredo\",\"corsia\",\"cortese\",\"cosmico\",\"costante\",\"cottura\",\"covato\",\"cratere\",\"cravatta\",\"creato\",\"credere\",\"cremoso\",\"crescita\",\"creta\",\"criceto\",\"crinale\",\"crisi\",\"critico\",\"croce\",\"cronaca\",\"crostata\",\"cruciale\",\"crusca\",\"cucire\",\"cuculo\",\"cugino\",\"cullato\",\"cupola\",\"curatore\",\"cursore\",\"curvo\",\"cuscino\",\"custode\",\"dado\",\"daino\",\"dalmata\",\"damerino\",\"daniela\",\"dannoso\",\"danzare\",\"datato\",\"davanti\",\"davvero\",\"debutto\",\"decennio\",\"deciso\",\"declino\",\"decollo\",\"decreto\",\"dedicato\",\"definito\",\"deforme\",\"degno\",\"delegare\",\"delfino\",\"delirio\",\"delta\",\"demenza\",\"denotato\",\"dentro\",\"deposito\",\"derapata\",\"derivare\",\"deroga\",\"descritto\",\"deserto\",\"desiderio\",\"desumere\",\"detersivo\",\"devoto\",\"diametro\",\"dicembre\",\"diedro\",\"difeso\",\"diffuso\",\"digerire\",\"digitale\",\"diluvio\",\"dinamico\",\"dinnanzi\",\"dipinto\",\"diploma\",\"dipolo\",\"diradare\",\"dire\",\"dirotto\",\"dirupo\",\"disagio\",\"discreto\",\"disfare\",\"disgelo\",\"disposto\",\"distanza\",\"disumano\",\"dito\",\"divano\",\"divelto\",\"dividere\",\"divorato\",\"doblone\",\"docente\",\"doganale\",\"dogma\",\"dolce\",\"domato\",\"domenica\",\"dominare\",\"dondolo\",\"dono\",\"dormire\",\"dote\",\"dottore\",\"dovuto\",\"dozzina\",\"drago\",\"druido\",\"dubbio\",\"dubitare\",\"ducale\",\"duna\",\"duomo\",\"duplice\",\"duraturo\",\"ebano\",\"eccesso\",\"ecco\",\"eclissi\",\"economia\",\"edera\",\"edicola\",\"edile\",\"editoria\",\"educare\",\"egemonia\",\"egli\",\"egoismo\",\"egregio\",\"elaborato\",\"elargire\",\"elegante\",\"elencato\",\"eletto\",\"elevare\",\"elfico\",\"elica\",\"elmo\",\"elsa\",\"eluso\",\"emanato\",\"emblema\",\"emesso\",\"emiro\",\"emotivo\",\"emozione\",\"empirico\",\"emulo\",\"endemico\",\"enduro\",\"energia\",\"enfasi\",\"enoteca\",\"entrare\",\"enzima\",\"epatite\",\"epilogo\",\"episodio\",\"epocale\",\"eppure\",\"equatore\",\"erario\",\"erba\",\"erboso\",\"erede\",\"eremita\",\"erigere\",\"ermetico\",\"eroe\",\"erosivo\",\"errante\",\"esagono\",\"esame\",\"esanime\",\"esaudire\",\"esca\",\"esempio\",\"esercito\",\"esibito\",\"esigente\",\"esistere\",\"esito\",\"esofago\",\"esortato\",\"esoso\",\"espanso\",\"espresso\",\"essenza\",\"esso\",\"esteso\",\"estimare\",\"estonia\",\"estroso\",\"esultare\",\"etilico\",\"etnico\",\"etrusco\",\"etto\",\"euclideo\",\"europa\",\"evaso\",\"evidenza\",\"evitato\",\"evoluto\",\"evviva\",\"fabbrica\",\"faccenda\",\"fachiro\",\"falco\",\"famiglia\",\"fanale\",\"fanfara\",\"fango\",\"fantasma\",\"fare\",\"farfalla\",\"farinoso\",\"farmaco\",\"fascia\",\"fastoso\",\"fasullo\",\"faticare\",\"fato\",\"favoloso\",\"febbre\",\"fecola\",\"fede\",\"fegato\",\"felpa\",\"feltro\",\"femmina\",\"fendere\",\"fenomeno\",\"fermento\",\"ferro\",\"fertile\",\"fessura\",\"festivo\",\"fetta\",\"feudo\",\"fiaba\",\"fiducia\",\"fifa\",\"figurato\",\"filo\",\"finanza\",\"finestra\",\"finire\",\"fiore\",\"fiscale\",\"fisico\",\"fiume\",\"flacone\",\"flamenco\",\"flebo\",\"flemma\",\"florido\",\"fluente\",\"fluoro\",\"fobico\",\"focaccia\",\"focoso\",\"foderato\",\"foglio\",\"folata\",\"folclore\",\"folgore\",\"fondente\",\"fonetico\",\"fonia\",\"fontana\",\"forbito\",\"forchetta\",\"foresta\",\"formica\",\"fornaio\",\"foro\",\"fortezza\",\"forzare\",\"fosfato\",\"fosso\",\"fracasso\",\"frana\",\"frassino\",\"fratello\",\"freccetta\",\"frenata\",\"fresco\",\"frigo\",\"frollino\",\"fronde\",\"frugale\",\"frutta\",\"fucilata\",\"fucsia\",\"fuggente\",\"fulmine\",\"fulvo\",\"fumante\",\"fumetto\",\"fumoso\",\"fune\",\"funzione\",\"fuoco\",\"furbo\",\"furgone\",\"furore\",\"fuso\",\"futile\",\"gabbiano\",\"gaffe\",\"galateo\",\"gallina\",\"galoppo\",\"gambero\",\"gamma\",\"garanzia\",\"garbo\",\"garofano\",\"garzone\",\"gasdotto\",\"gasolio\",\"gastrico\",\"gatto\",\"gaudio\",\"gazebo\",\"gazzella\",\"geco\",\"gelatina\",\"gelso\",\"gemello\",\"gemmato\",\"gene\",\"genitore\",\"gennaio\",\"genotipo\",\"gergo\",\"ghepardo\",\"ghiaccio\",\"ghisa\",\"giallo\",\"gilda\",\"ginepro\",\"giocare\",\"gioiello\",\"giorno\",\"giove\",\"girato\",\"girone\",\"gittata\",\"giudizio\",\"giurato\",\"giusto\",\"globulo\",\"glutine\",\"gnomo\",\"gobba\",\"golf\",\"gomito\",\"gommone\",\"gonfio\",\"gonna\",\"governo\",\"gracile\",\"grado\",\"grafico\",\"grammo\",\"grande\",\"grattare\",\"gravoso\",\"grazia\",\"greca\",\"gregge\",\"grifone\",\"grigio\",\"grinza\",\"grotta\",\"gruppo\",\"guadagno\",\"guaio\",\"guanto\",\"guardare\",\"gufo\",\"guidare\",\"ibernato\",\"icona\",\"identico\",\"idillio\",\"idolo\",\"idra\",\"idrico\",\"idrogeno\",\"igiene\",\"ignaro\",\"ignorato\",\"ilare\",\"illeso\",\"illogico\",\"illudere\",\"imballo\",\"imbevuto\",\"imbocco\",\"imbuto\",\"immane\",\"immerso\",\"immolato\",\"impacco\",\"impeto\",\"impiego\",\"importo\",\"impronta\",\"inalare\",\"inarcare\",\"inattivo\",\"incanto\",\"incendio\",\"inchino\",\"incisivo\",\"incluso\",\"incontro\",\"incrocio\",\"incubo\",\"indagine\",\"india\",\"indole\",\"inedito\",\"infatti\",\"infilare\",\"inflitto\",\"ingaggio\",\"ingegno\",\"inglese\",\"ingordo\",\"ingrosso\",\"innesco\",\"inodore\",\"inoltrare\",\"inondato\",\"insano\",\"insetto\",\"insieme\",\"insonnia\",\"insulina\",\"intasato\",\"intero\",\"intonaco\",\"intuito\",\"inumidire\",\"invalido\",\"invece\",\"invito\",\"iperbole\",\"ipnotico\",\"ipotesi\",\"ippica\",\"iride\",\"irlanda\",\"ironico\",\"irrigato\",\"irrorare\",\"isolato\",\"isotopo\",\"isterico\",\"istituto\",\"istrice\",\"italia\",\"iterare\",\"labbro\",\"labirinto\",\"lacca\",\"lacerato\",\"lacrima\",\"lacuna\",\"laddove\",\"lago\",\"lampo\",\"lancetta\",\"lanterna\",\"lardoso\",\"larga\",\"laringe\",\"lastra\",\"latenza\",\"latino\",\"lattuga\",\"lavagna\",\"lavoro\",\"legale\",\"leggero\",\"lembo\",\"lentezza\",\"lenza\",\"leone\",\"lepre\",\"lesivo\",\"lessato\",\"lesto\",\"letterale\",\"leva\",\"levigato\",\"libero\",\"lido\",\"lievito\",\"lilla\",\"limatura\",\"limitare\",\"limpido\",\"lineare\",\"lingua\",\"liquido\",\"lira\",\"lirica\",\"lisca\",\"lite\",\"litigio\",\"livrea\",\"locanda\",\"lode\",\"logica\",\"lombare\",\"londra\",\"longevo\",\"loquace\",\"lorenzo\",\"loto\",\"lotteria\",\"luce\",\"lucidato\",\"lumaca\",\"luminoso\",\"lungo\",\"lupo\",\"luppolo\",\"lusinga\",\"lusso\",\"lutto\",\"macabro\",\"macchina\",\"macero\",\"macinato\",\"madama\",\"magico\",\"maglia\",\"magnete\",\"magro\",\"maiolica\",\"malafede\",\"malgrado\",\"malinteso\",\"malsano\",\"malto\",\"malumore\",\"mana\",\"mancia\",\"mandorla\",\"mangiare\",\"manifesto\",\"mannaro\",\"manovra\",\"mansarda\",\"mantide\",\"manubrio\",\"mappa\",\"maratona\",\"marcire\",\"maretta\",\"marmo\",\"marsupio\",\"maschera\",\"massaia\",\"mastino\",\"materasso\",\"matricola\",\"mattone\",\"maturo\",\"mazurca\",\"meandro\",\"meccanico\",\"mecenate\",\"medesimo\",\"meditare\",\"mega\",\"melassa\",\"melis\",\"melodia\",\"meninge\",\"meno\",\"mensola\",\"mercurio\",\"merenda\",\"merlo\",\"meschino\",\"mese\",\"messere\",\"mestolo\",\"metallo\",\"metodo\",\"mettere\",\"miagolare\",\"mica\",\"micelio\",\"michele\",\"microbo\",\"midollo\",\"miele\",\"migliore\",\"milano\",\"milite\",\"mimosa\",\"minerale\",\"mini\",\"minore\",\"mirino\",\"mirtillo\",\"miscela\",\"missiva\",\"misto\",\"misurare\",\"mitezza\",\"mitigare\",\"mitra\",\"mittente\",\"mnemonico\",\"modello\",\"modifica\",\"modulo\",\"mogano\",\"mogio\",\"mole\",\"molosso\",\"monastero\",\"monco\",\"mondina\",\"monetario\",\"monile\",\"monotono\",\"monsone\",\"montato\",\"monviso\",\"mora\",\"mordere\",\"morsicato\",\"mostro\",\"motivato\",\"motosega\",\"motto\",\"movenza\",\"movimento\",\"mozzo\",\"mucca\",\"mucosa\",\"muffa\",\"mughetto\",\"mugnaio\",\"mulatto\",\"mulinello\",\"multiplo\",\"mummia\",\"munto\",\"muovere\",\"murale\",\"musa\",\"muscolo\",\"musica\",\"mutevole\",\"muto\",\"nababbo\",\"nafta\",\"nanometro\",\"narciso\",\"narice\",\"narrato\",\"nascere\",\"nastrare\",\"naturale\",\"nautica\",\"naviglio\",\"nebulosa\",\"necrosi\",\"negativo\",\"negozio\",\"nemmeno\",\"neofita\",\"neretto\",\"nervo\",\"nessuno\",\"nettuno\",\"neutrale\",\"neve\",\"nevrotico\",\"nicchia\",\"ninfa\",\"nitido\",\"nobile\",\"nocivo\",\"nodo\",\"nome\",\"nomina\",\"nordico\",\"normale\",\"norvegese\",\"nostrano\",\"notare\",\"notizia\",\"notturno\",\"novella\",\"nucleo\",\"nulla\",\"numero\",\"nuovo\",\"nutrire\",\"nuvola\",\"nuziale\",\"oasi\",\"obbedire\",\"obbligo\",\"obelisco\",\"oblio\",\"obolo\",\"obsoleto\",\"occasione\",\"occhio\",\"occidente\",\"occorrere\",\"occultare\",\"ocra\",\"oculato\",\"odierno\",\"odorare\",\"offerta\",\"offrire\",\"offuscato\",\"oggetto\",\"oggi\",\"ognuno\",\"olandese\",\"olfatto\",\"oliato\",\"oliva\",\"ologramma\",\"oltre\",\"omaggio\",\"ombelico\",\"ombra\",\"omega\",\"omissione\",\"ondoso\",\"onere\",\"onice\",\"onnivoro\",\"onorevole\",\"onta\",\"operato\",\"opinione\",\"opposto\",\"oracolo\",\"orafo\",\"ordine\",\"orecchino\",\"orefice\",\"orfano\",\"organico\",\"origine\",\"orizzonte\",\"orma\",\"ormeggio\",\"ornativo\",\"orologio\",\"orrendo\",\"orribile\",\"ortensia\",\"ortica\",\"orzata\",\"orzo\",\"osare\",\"oscurare\",\"osmosi\",\"ospedale\",\"ospite\",\"ossa\",\"ossidare\",\"ostacolo\",\"oste\",\"otite\",\"otre\",\"ottagono\",\"ottimo\",\"ottobre\",\"ovale\",\"ovest\",\"ovino\",\"oviparo\",\"ovocito\",\"ovunque\",\"ovviare\",\"ozio\",\"pacchetto\",\"pace\",\"pacifico\",\"padella\",\"padrone\",\"paese\",\"paga\",\"pagina\",\"palazzina\",\"palesare\",\"pallido\",\"palo\",\"palude\",\"pandoro\",\"pannello\",\"paolo\",\"paonazzo\",\"paprica\",\"parabola\",\"parcella\",\"parere\",\"pargolo\",\"pari\",\"parlato\",\"parola\",\"partire\",\"parvenza\",\"parziale\",\"passivo\",\"pasticca\",\"patacca\",\"patologia\",\"pattume\",\"pavone\",\"peccato\",\"pedalare\",\"pedonale\",\"peggio\",\"peloso\",\"penare\",\"pendice\",\"penisola\",\"pennuto\",\"penombra\",\"pensare\",\"pentola\",\"pepe\",\"pepita\",\"perbene\",\"percorso\",\"perdonato\",\"perforare\",\"pergamena\",\"periodo\",\"permesso\",\"perno\",\"perplesso\",\"persuaso\",\"pertugio\",\"pervaso\",\"pesatore\",\"pesista\",\"peso\",\"pestifero\",\"petalo\",\"pettine\",\"petulante\",\"pezzo\",\"piacere\",\"pianta\",\"piattino\",\"piccino\",\"picozza\",\"piega\",\"pietra\",\"piffero\",\"pigiama\",\"pigolio\",\"pigro\",\"pila\",\"pilifero\",\"pillola\",\"pilota\",\"pimpante\",\"pineta\",\"pinna\",\"pinolo\",\"pioggia\",\"piombo\",\"piramide\",\"piretico\",\"pirite\",\"pirolisi\",\"pitone\",\"pizzico\",\"placebo\",\"planare\",\"plasma\",\"platano\",\"plenario\",\"pochezza\",\"poderoso\",\"podismo\",\"poesia\",\"poggiare\",\"polenta\",\"poligono\",\"pollice\",\"polmonite\",\"polpetta\",\"polso\",\"poltrona\",\"polvere\",\"pomice\",\"pomodoro\",\"ponte\",\"popoloso\",\"porfido\",\"poroso\",\"porpora\",\"porre\",\"portata\",\"posa\",\"positivo\",\"possesso\",\"postulato\",\"potassio\",\"potere\",\"pranzo\",\"prassi\",\"pratica\",\"precluso\",\"predica\",\"prefisso\",\"pregiato\",\"prelievo\",\"premere\",\"prenotare\",\"preparato\",\"presenza\",\"pretesto\",\"prevalso\",\"prima\",\"principe\",\"privato\",\"problema\",\"procura\",\"produrre\",\"profumo\",\"progetto\",\"prolunga\",\"promessa\",\"pronome\",\"proposta\",\"proroga\",\"proteso\",\"prova\",\"prudente\",\"prugna\",\"prurito\",\"psiche\",\"pubblico\",\"pudica\",\"pugilato\",\"pugno\",\"pulce\",\"pulito\",\"pulsante\",\"puntare\",\"pupazzo\",\"pupilla\",\"puro\",\"quadro\",\"qualcosa\",\"quasi\",\"querela\",\"quota\",\"raccolto\",\"raddoppio\",\"radicale\",\"radunato\",\"raffica\",\"ragazzo\",\"ragione\",\"ragno\",\"ramarro\",\"ramingo\",\"ramo\",\"randagio\",\"rantolare\",\"rapato\",\"rapina\",\"rappreso\",\"rasatura\",\"raschiato\",\"rasente\",\"rassegna\",\"rastrello\",\"rata\",\"ravveduto\",\"reale\",\"recepire\",\"recinto\",\"recluta\",\"recondito\",\"recupero\",\"reddito\",\"redimere\",\"regalato\",\"registro\",\"regola\",\"regresso\",\"relazione\",\"remare\",\"remoto\",\"renna\",\"replica\",\"reprimere\",\"reputare\",\"resa\",\"residente\",\"responso\",\"restauro\",\"rete\",\"retina\",\"retorica\",\"rettifica\",\"revocato\",\"riassunto\",\"ribadire\",\"ribelle\",\"ribrezzo\",\"ricarica\",\"ricco\",\"ricevere\",\"riciclato\",\"ricordo\",\"ricreduto\",\"ridicolo\",\"ridurre\",\"rifasare\",\"riflesso\",\"riforma\",\"rifugio\",\"rigare\",\"rigettato\",\"righello\",\"rilassato\",\"rilevato\",\"rimanere\",\"rimbalzo\",\"rimedio\",\"rimorchio\",\"rinascita\",\"rincaro\",\"rinforzo\",\"rinnovo\",\"rinomato\",\"rinsavito\",\"rintocco\",\"rinuncia\",\"rinvenire\",\"riparato\",\"ripetuto\",\"ripieno\",\"riportare\",\"ripresa\",\"ripulire\",\"risata\",\"rischio\",\"riserva\",\"risibile\",\"riso\",\"rispetto\",\"ristoro\",\"risultato\",\"risvolto\",\"ritardo\",\"ritegno\",\"ritmico\",\"ritrovo\",\"riunione\",\"riva\",\"riverso\",\"rivincita\",\"rivolto\",\"rizoma\",\"roba\",\"robotico\",\"robusto\",\"roccia\",\"roco\",\"rodaggio\",\"rodere\",\"roditore\",\"rogito\",\"rollio\",\"romantico\",\"rompere\",\"ronzio\",\"rosolare\",\"rospo\",\"rotante\",\"rotondo\",\"rotula\",\"rovescio\",\"rubizzo\",\"rubrica\",\"ruga\",\"rullino\",\"rumine\",\"rumoroso\",\"ruolo\",\"rupe\",\"russare\",\"rustico\",\"sabato\",\"sabbiare\",\"sabotato\",\"sagoma\",\"salasso\",\"saldatura\",\"salgemma\",\"salivare\",\"salmone\",\"salone\",\"saltare\",\"saluto\",\"salvo\",\"sapere\",\"sapido\",\"saporito\",\"saraceno\",\"sarcasmo\",\"sarto\",\"sassoso\",\"satellite\",\"satira\",\"satollo\",\"saturno\",\"savana\",\"savio\",\"saziato\",\"sbadiglio\",\"sbalzo\",\"sbancato\",\"sbarra\",\"sbattere\",\"sbavare\",\"sbendare\",\"sbirciare\",\"sbloccato\",\"sbocciato\",\"sbrinare\",\"sbruffone\",\"sbuffare\",\"scabroso\",\"scadenza\",\"scala\",\"scambiare\",\"scandalo\",\"scapola\",\"scarso\",\"scatenare\",\"scavato\",\"scelto\",\"scenico\",\"scettro\",\"scheda\",\"schiena\",\"sciarpa\",\"scienza\",\"scindere\",\"scippo\",\"sciroppo\",\"scivolo\",\"sclerare\",\"scodella\",\"scolpito\",\"scomparto\",\"sconforto\",\"scoprire\",\"scorta\",\"scossone\",\"scozzese\",\"scriba\",\"scrollare\",\"scrutinio\",\"scuderia\",\"scultore\",\"scuola\",\"scuro\",\"scusare\",\"sdebitare\",\"sdoganare\",\"seccatura\",\"secondo\",\"sedano\",\"seggiola\",\"segnalato\",\"segregato\",\"seguito\",\"selciato\",\"selettivo\",\"sella\",\"selvaggio\",\"semaforo\",\"sembrare\",\"seme\",\"seminato\",\"sempre\",\"senso\",\"sentire\",\"sepolto\",\"sequenza\",\"serata\",\"serbato\",\"sereno\",\"serio\",\"serpente\",\"serraglio\",\"servire\",\"sestina\",\"setola\",\"settimana\",\"sfacelo\",\"sfaldare\",\"sfamato\",\"sfarzoso\",\"sfaticato\",\"sfera\",\"sfida\",\"sfilato\",\"sfinge\",\"sfocato\",\"sfoderare\",\"sfogo\",\"sfoltire\",\"sforzato\",\"sfratto\",\"sfruttato\",\"sfuggito\",\"sfumare\",\"sfuso\",\"sgabello\",\"sgarbato\",\"sgonfiare\",\"sgorbio\",\"sgrassato\",\"sguardo\",\"sibilo\",\"siccome\",\"sierra\",\"sigla\",\"signore\",\"silenzio\",\"sillaba\",\"simbolo\",\"simpatico\",\"simulato\",\"sinfonia\",\"singolo\",\"sinistro\",\"sino\",\"sintesi\",\"sinusoide\",\"sipario\",\"sisma\",\"sistole\",\"situato\",\"slitta\",\"slogatura\",\"sloveno\",\"smarrito\",\"smemorato\",\"smentito\",\"smeraldo\",\"smilzo\",\"smontare\",\"smottato\",\"smussato\",\"snellire\",\"snervato\",\"snodo\",\"sobbalzo\",\"sobrio\",\"soccorso\",\"sociale\",\"sodale\",\"soffitto\",\"sogno\",\"soldato\",\"solenne\",\"solido\",\"sollazzo\",\"solo\",\"solubile\",\"solvente\",\"somatico\",\"somma\",\"sonda\",\"sonetto\",\"sonnifero\",\"sopire\",\"soppeso\",\"sopra\",\"sorgere\",\"sorpasso\",\"sorriso\",\"sorso\",\"sorteggio\",\"sorvolato\",\"sospiro\",\"sosta\",\"sottile\",\"spada\",\"spalla\",\"spargere\",\"spatola\",\"spavento\",\"spazzola\",\"specie\",\"spedire\",\"spegnere\",\"spelatura\",\"speranza\",\"spessore\",\"spettrale\",\"spezzato\",\"spia\",\"spigoloso\",\"spillato\",\"spinoso\",\"spirale\",\"splendido\",\"sportivo\",\"sposo\",\"spranga\",\"sprecare\",\"spronato\",\"spruzzo\",\"spuntino\",\"squillo\",\"sradicare\",\"srotolato\",\"stabile\",\"stacco\",\"staffa\",\"stagnare\",\"stampato\",\"stantio\",\"starnuto\",\"stasera\",\"statuto\",\"stelo\",\"steppa\",\"sterzo\",\"stiletto\",\"stima\",\"stirpe\",\"stivale\",\"stizzoso\",\"stonato\",\"storico\",\"strappo\",\"stregato\",\"stridulo\",\"strozzare\",\"strutto\",\"stuccare\",\"stufo\",\"stupendo\",\"subentro\",\"succoso\",\"sudore\",\"suggerito\",\"sugo\",\"sultano\",\"suonare\",\"superbo\",\"supporto\",\"surgelato\",\"surrogato\",\"sussurro\",\"sutura\",\"svagare\",\"svedese\",\"sveglio\",\"svelare\",\"svenuto\",\"svezia\",\"sviluppo\",\"svista\",\"svizzera\",\"svolta\",\"svuotare\",\"tabacco\",\"tabulato\",\"tacciare\",\"taciturno\",\"tale\",\"talismano\",\"tampone\",\"tannino\",\"tara\",\"tardivo\",\"targato\",\"tariffa\",\"tarpare\",\"tartaruga\",\"tasto\",\"tattico\",\"taverna\",\"tavolata\",\"tazza\",\"teca\",\"tecnico\",\"telefono\",\"temerario\",\"tempo\",\"temuto\",\"tendone\",\"tenero\",\"tensione\",\"tentacolo\",\"teorema\",\"terme\",\"terrazzo\",\"terzetto\",\"tesi\",\"tesserato\",\"testato\",\"tetro\",\"tettoia\",\"tifare\",\"tigella\",\"timbro\",\"tinto\",\"tipico\",\"tipografo\",\"tiraggio\",\"tiro\",\"titanio\",\"titolo\",\"titubante\",\"tizio\",\"tizzone\",\"toccare\",\"tollerare\",\"tolto\",\"tombola\",\"tomo\",\"tonfo\",\"tonsilla\",\"topazio\",\"topologia\",\"toppa\",\"torba\",\"tornare\",\"torrone\",\"tortora\",\"toscano\",\"tossire\",\"tostatura\",\"totano\",\"trabocco\",\"trachea\",\"trafila\",\"tragedia\",\"tralcio\",\"tramonto\",\"transito\",\"trapano\",\"trarre\",\"trasloco\",\"trattato\",\"trave\",\"treccia\",\"tremolio\",\"trespolo\",\"tributo\",\"tricheco\",\"trifoglio\",\"trillo\",\"trincea\",\"trio\",\"tristezza\",\"triturato\",\"trivella\",\"tromba\",\"trono\",\"troppo\",\"trottola\",\"trovare\",\"truccato\",\"tubatura\",\"tuffato\",\"tulipano\",\"tumulto\",\"tunisia\",\"turbare\",\"turchino\",\"tuta\",\"tutela\",\"ubicato\",\"uccello\",\"uccisore\",\"udire\",\"uditivo\",\"uffa\",\"ufficio\",\"uguale\",\"ulisse\",\"ultimato\",\"umano\",\"umile\",\"umorismo\",\"uncinetto\",\"ungere\",\"ungherese\",\"unicorno\",\"unificato\",\"unisono\",\"unitario\",\"unte\",\"uovo\",\"upupa\",\"uragano\",\"urgenza\",\"urlo\",\"usanza\",\"usato\",\"uscito\",\"usignolo\",\"usuraio\",\"utensile\",\"utilizzo\",\"utopia\",\"vacante\",\"vaccinato\",\"vagabondo\",\"vagliato\",\"valanga\",\"valgo\",\"valico\",\"valletta\",\"valoroso\",\"valutare\",\"valvola\",\"vampata\",\"vangare\",\"vanitoso\",\"vano\",\"vantaggio\",\"vanvera\",\"vapore\",\"varano\",\"varcato\",\"variante\",\"vasca\",\"vedetta\",\"vedova\",\"veduto\",\"vegetale\",\"veicolo\",\"velcro\",\"velina\",\"velluto\",\"veloce\",\"venato\",\"vendemmia\",\"vento\",\"verace\",\"verbale\",\"vergogna\",\"verifica\",\"vero\",\"verruca\",\"verticale\",\"vescica\",\"vessillo\",\"vestale\",\"veterano\",\"vetrina\",\"vetusto\",\"viandante\",\"vibrante\",\"vicenda\",\"vichingo\",\"vicinanza\",\"vidimare\",\"vigilia\",\"vigneto\",\"vigore\",\"vile\",\"villano\",\"vimini\",\"vincitore\",\"viola\",\"vipera\",\"virgola\",\"virologo\",\"virulento\",\"viscoso\",\"visione\",\"vispo\",\"vissuto\",\"visura\",\"vita\",\"vitello\",\"vittima\",\"vivanda\",\"vivido\",\"viziare\",\"voce\",\"voga\",\"volatile\",\"volere\",\"volpe\",\"voragine\",\"vulcano\",\"zampogna\",\"zanna\",\"zappato\",\"zattera\",\"zavorra\",\"zefiro\",\"zelante\",\"zelo\",\"zenzero\",\"zerbino\",\"zibetto\",\"zinco\",\"zircone\",\"zitto\",\"zolla\",\"zotico\",\"zucchero\",\"zufolo\",\"zulu\",\"zuppa\"]");

},{}],"LOvP3":[function(require,module,exports) {
module.exports = JSON.parse("[\"あいこくしん\",\"あいさつ\",\"あいだ\",\"あおぞら\",\"あかちゃん\",\"あきる\",\"あけがた\",\"あける\",\"あこがれる\",\"あさい\",\"あさひ\",\"あしあと\",\"あじわう\",\"あずかる\",\"あずき\",\"あそぶ\",\"あたえる\",\"あたためる\",\"あたりまえ\",\"あたる\",\"あつい\",\"あつかう\",\"あっしゅく\",\"あつまり\",\"あつめる\",\"あてな\",\"あてはまる\",\"あひる\",\"あぶら\",\"あぶる\",\"あふれる\",\"あまい\",\"あまど\",\"あまやかす\",\"あまり\",\"あみもの\",\"あめりか\",\"あやまる\",\"あゆむ\",\"あらいぐま\",\"あらし\",\"あらすじ\",\"あらためる\",\"あらゆる\",\"あらわす\",\"ありがとう\",\"あわせる\",\"あわてる\",\"あんい\",\"あんがい\",\"あんこ\",\"あんぜん\",\"あんてい\",\"あんない\",\"あんまり\",\"いいだす\",\"いおん\",\"いがい\",\"いがく\",\"いきおい\",\"いきなり\",\"いきもの\",\"いきる\",\"いくじ\",\"いくぶん\",\"いけばな\",\"いけん\",\"いこう\",\"いこく\",\"いこつ\",\"いさましい\",\"いさん\",\"いしき\",\"いじゅう\",\"いじょう\",\"いじわる\",\"いずみ\",\"いずれ\",\"いせい\",\"いせえび\",\"いせかい\",\"いせき\",\"いぜん\",\"いそうろう\",\"いそがしい\",\"いだい\",\"いだく\",\"いたずら\",\"いたみ\",\"いたりあ\",\"いちおう\",\"いちじ\",\"いちど\",\"いちば\",\"いちぶ\",\"いちりゅう\",\"いつか\",\"いっしゅん\",\"いっせい\",\"いっそう\",\"いったん\",\"いっち\",\"いってい\",\"いっぽう\",\"いてざ\",\"いてん\",\"いどう\",\"いとこ\",\"いない\",\"いなか\",\"いねむり\",\"いのち\",\"いのる\",\"いはつ\",\"いばる\",\"いはん\",\"いびき\",\"いひん\",\"いふく\",\"いへん\",\"いほう\",\"いみん\",\"いもうと\",\"いもたれ\",\"いもり\",\"いやがる\",\"いやす\",\"いよかん\",\"いよく\",\"いらい\",\"いらすと\",\"いりぐち\",\"いりょう\",\"いれい\",\"いれもの\",\"いれる\",\"いろえんぴつ\",\"いわい\",\"いわう\",\"いわかん\",\"いわば\",\"いわゆる\",\"いんげんまめ\",\"いんさつ\",\"いんしょう\",\"いんよう\",\"うえき\",\"うえる\",\"うおざ\",\"うがい\",\"うかぶ\",\"うかべる\",\"うきわ\",\"うくらいな\",\"うくれれ\",\"うけたまわる\",\"うけつけ\",\"うけとる\",\"うけもつ\",\"うける\",\"うごかす\",\"うごく\",\"うこん\",\"うさぎ\",\"うしなう\",\"うしろがみ\",\"うすい\",\"うすぎ\",\"うすぐらい\",\"うすめる\",\"うせつ\",\"うちあわせ\",\"うちがわ\",\"うちき\",\"うちゅう\",\"うっかり\",\"うつくしい\",\"うったえる\",\"うつる\",\"うどん\",\"うなぎ\",\"うなじ\",\"うなずく\",\"うなる\",\"うねる\",\"うのう\",\"うぶげ\",\"うぶごえ\",\"うまれる\",\"うめる\",\"うもう\",\"うやまう\",\"うよく\",\"うらがえす\",\"うらぐち\",\"うらない\",\"うりあげ\",\"うりきれ\",\"うるさい\",\"うれしい\",\"うれゆき\",\"うれる\",\"うろこ\",\"うわき\",\"うわさ\",\"うんこう\",\"うんちん\",\"うんてん\",\"うんどう\",\"えいえん\",\"えいが\",\"えいきょう\",\"えいご\",\"えいせい\",\"えいぶん\",\"えいよう\",\"えいわ\",\"えおり\",\"えがお\",\"えがく\",\"えきたい\",\"えくせる\",\"えしゃく\",\"えすて\",\"えつらん\",\"えのぐ\",\"えほうまき\",\"えほん\",\"えまき\",\"えもじ\",\"えもの\",\"えらい\",\"えらぶ\",\"えりあ\",\"えんえん\",\"えんかい\",\"えんぎ\",\"えんげき\",\"えんしゅう\",\"えんぜつ\",\"えんそく\",\"えんちょう\",\"えんとつ\",\"おいかける\",\"おいこす\",\"おいしい\",\"おいつく\",\"おうえん\",\"おうさま\",\"おうじ\",\"おうせつ\",\"おうたい\",\"おうふく\",\"おうべい\",\"おうよう\",\"おえる\",\"おおい\",\"おおう\",\"おおどおり\",\"おおや\",\"おおよそ\",\"おかえり\",\"おかず\",\"おがむ\",\"おかわり\",\"おぎなう\",\"おきる\",\"おくさま\",\"おくじょう\",\"おくりがな\",\"おくる\",\"おくれる\",\"おこす\",\"おこなう\",\"おこる\",\"おさえる\",\"おさない\",\"おさめる\",\"おしいれ\",\"おしえる\",\"おじぎ\",\"おじさん\",\"おしゃれ\",\"おそらく\",\"おそわる\",\"おたがい\",\"おたく\",\"おだやか\",\"おちつく\",\"おっと\",\"おつり\",\"おでかけ\",\"おとしもの\",\"おとなしい\",\"おどり\",\"おどろかす\",\"おばさん\",\"おまいり\",\"おめでとう\",\"おもいで\",\"おもう\",\"おもたい\",\"おもちゃ\",\"おやつ\",\"おやゆび\",\"およぼす\",\"おらんだ\",\"おろす\",\"おんがく\",\"おんけい\",\"おんしゃ\",\"おんせん\",\"おんだん\",\"おんちゅう\",\"おんどけい\",\"かあつ\",\"かいが\",\"がいき\",\"がいけん\",\"がいこう\",\"かいさつ\",\"かいしゃ\",\"かいすいよく\",\"かいぜん\",\"かいぞうど\",\"かいつう\",\"かいてん\",\"かいとう\",\"かいふく\",\"がいへき\",\"かいほう\",\"かいよう\",\"がいらい\",\"かいわ\",\"かえる\",\"かおり\",\"かかえる\",\"かがく\",\"かがし\",\"かがみ\",\"かくご\",\"かくとく\",\"かざる\",\"がぞう\",\"かたい\",\"かたち\",\"がちょう\",\"がっきゅう\",\"がっこう\",\"がっさん\",\"がっしょう\",\"かなざわし\",\"かのう\",\"がはく\",\"かぶか\",\"かほう\",\"かほご\",\"かまう\",\"かまぼこ\",\"かめれおん\",\"かゆい\",\"かようび\",\"からい\",\"かるい\",\"かろう\",\"かわく\",\"かわら\",\"がんか\",\"かんけい\",\"かんこう\",\"かんしゃ\",\"かんそう\",\"かんたん\",\"かんち\",\"がんばる\",\"きあい\",\"きあつ\",\"きいろ\",\"ぎいん\",\"きうい\",\"きうん\",\"きえる\",\"きおう\",\"きおく\",\"きおち\",\"きおん\",\"きかい\",\"きかく\",\"きかんしゃ\",\"ききて\",\"きくばり\",\"きくらげ\",\"きけんせい\",\"きこう\",\"きこえる\",\"きこく\",\"きさい\",\"きさく\",\"きさま\",\"きさらぎ\",\"ぎじかがく\",\"ぎしき\",\"ぎじたいけん\",\"ぎじにってい\",\"ぎじゅつしゃ\",\"きすう\",\"きせい\",\"きせき\",\"きせつ\",\"きそう\",\"きぞく\",\"きぞん\",\"きたえる\",\"きちょう\",\"きつえん\",\"ぎっちり\",\"きつつき\",\"きつね\",\"きてい\",\"きどう\",\"きどく\",\"きない\",\"きなが\",\"きなこ\",\"きぬごし\",\"きねん\",\"きのう\",\"きのした\",\"きはく\",\"きびしい\",\"きひん\",\"きふく\",\"きぶん\",\"きぼう\",\"きほん\",\"きまる\",\"きみつ\",\"きむずかしい\",\"きめる\",\"きもだめし\",\"きもち\",\"きもの\",\"きゃく\",\"きやく\",\"ぎゅうにく\",\"きよう\",\"きょうりゅう\",\"きらい\",\"きらく\",\"きりん\",\"きれい\",\"きれつ\",\"きろく\",\"ぎろん\",\"きわめる\",\"ぎんいろ\",\"きんかくじ\",\"きんじょ\",\"きんようび\",\"ぐあい\",\"くいず\",\"くうかん\",\"くうき\",\"くうぐん\",\"くうこう\",\"ぐうせい\",\"くうそう\",\"ぐうたら\",\"くうふく\",\"くうぼ\",\"くかん\",\"くきょう\",\"くげん\",\"ぐこう\",\"くさい\",\"くさき\",\"くさばな\",\"くさる\",\"くしゃみ\",\"くしょう\",\"くすのき\",\"くすりゆび\",\"くせげ\",\"くせん\",\"ぐたいてき\",\"くださる\",\"くたびれる\",\"くちこみ\",\"くちさき\",\"くつした\",\"ぐっすり\",\"くつろぐ\",\"くとうてん\",\"くどく\",\"くなん\",\"くねくね\",\"くのう\",\"くふう\",\"くみあわせ\",\"くみたてる\",\"くめる\",\"くやくしょ\",\"くらす\",\"くらべる\",\"くるま\",\"くれる\",\"くろう\",\"くわしい\",\"ぐんかん\",\"ぐんしょく\",\"ぐんたい\",\"ぐんて\",\"けあな\",\"けいかく\",\"けいけん\",\"けいこ\",\"けいさつ\",\"げいじゅつ\",\"けいたい\",\"げいのうじん\",\"けいれき\",\"けいろ\",\"けおとす\",\"けおりもの\",\"げきか\",\"げきげん\",\"げきだん\",\"げきちん\",\"げきとつ\",\"げきは\",\"げきやく\",\"げこう\",\"げこくじょう\",\"げざい\",\"けさき\",\"げざん\",\"けしき\",\"けしごむ\",\"けしょう\",\"げすと\",\"けたば\",\"けちゃっぷ\",\"けちらす\",\"けつあつ\",\"けつい\",\"けつえき\",\"けっこん\",\"けつじょ\",\"けっせき\",\"けってい\",\"けつまつ\",\"げつようび\",\"げつれい\",\"けつろん\",\"げどく\",\"けとばす\",\"けとる\",\"けなげ\",\"けなす\",\"けなみ\",\"けぬき\",\"げねつ\",\"けねん\",\"けはい\",\"げひん\",\"けぶかい\",\"げぼく\",\"けまり\",\"けみかる\",\"けむし\",\"けむり\",\"けもの\",\"けらい\",\"けろけろ\",\"けわしい\",\"けんい\",\"けんえつ\",\"けんお\",\"けんか\",\"げんき\",\"けんげん\",\"けんこう\",\"けんさく\",\"けんしゅう\",\"けんすう\",\"げんそう\",\"けんちく\",\"けんてい\",\"けんとう\",\"けんない\",\"けんにん\",\"げんぶつ\",\"けんま\",\"けんみん\",\"けんめい\",\"けんらん\",\"けんり\",\"こあくま\",\"こいぬ\",\"こいびと\",\"ごうい\",\"こうえん\",\"こうおん\",\"こうかん\",\"ごうきゅう\",\"ごうけい\",\"こうこう\",\"こうさい\",\"こうじ\",\"こうすい\",\"ごうせい\",\"こうそく\",\"こうたい\",\"こうちゃ\",\"こうつう\",\"こうてい\",\"こうどう\",\"こうない\",\"こうはい\",\"ごうほう\",\"ごうまん\",\"こうもく\",\"こうりつ\",\"こえる\",\"こおり\",\"ごかい\",\"ごがつ\",\"ごかん\",\"こくご\",\"こくさい\",\"こくとう\",\"こくない\",\"こくはく\",\"こぐま\",\"こけい\",\"こける\",\"ここのか\",\"こころ\",\"こさめ\",\"こしつ\",\"こすう\",\"こせい\",\"こせき\",\"こぜん\",\"こそだて\",\"こたい\",\"こたえる\",\"こたつ\",\"こちょう\",\"こっか\",\"こつこつ\",\"こつばん\",\"こつぶ\",\"こてい\",\"こてん\",\"ことがら\",\"ことし\",\"ことば\",\"ことり\",\"こなごな\",\"こねこね\",\"このまま\",\"このみ\",\"このよ\",\"ごはん\",\"こひつじ\",\"こふう\",\"こふん\",\"こぼれる\",\"ごまあぶら\",\"こまかい\",\"ごますり\",\"こまつな\",\"こまる\",\"こむぎこ\",\"こもじ\",\"こもち\",\"こもの\",\"こもん\",\"こやく\",\"こやま\",\"こゆう\",\"こゆび\",\"こよい\",\"こよう\",\"こりる\",\"これくしょん\",\"ころっけ\",\"こわもて\",\"こわれる\",\"こんいん\",\"こんかい\",\"こんき\",\"こんしゅう\",\"こんすい\",\"こんだて\",\"こんとん\",\"こんなん\",\"こんびに\",\"こんぽん\",\"こんまけ\",\"こんや\",\"こんれい\",\"こんわく\",\"ざいえき\",\"さいかい\",\"さいきん\",\"ざいげん\",\"ざいこ\",\"さいしょ\",\"さいせい\",\"ざいたく\",\"ざいちゅう\",\"さいてき\",\"ざいりょう\",\"さうな\",\"さかいし\",\"さがす\",\"さかな\",\"さかみち\",\"さがる\",\"さぎょう\",\"さくし\",\"さくひん\",\"さくら\",\"さこく\",\"さこつ\",\"さずかる\",\"ざせき\",\"さたん\",\"さつえい\",\"ざつおん\",\"ざっか\",\"ざつがく\",\"さっきょく\",\"ざっし\",\"さつじん\",\"ざっそう\",\"さつたば\",\"さつまいも\",\"さてい\",\"さといも\",\"さとう\",\"さとおや\",\"さとし\",\"さとる\",\"さのう\",\"さばく\",\"さびしい\",\"さべつ\",\"さほう\",\"さほど\",\"さます\",\"さみしい\",\"さみだれ\",\"さむけ\",\"さめる\",\"さやえんどう\",\"さゆう\",\"さよう\",\"さよく\",\"さらだ\",\"ざるそば\",\"さわやか\",\"さわる\",\"さんいん\",\"さんか\",\"さんきゃく\",\"さんこう\",\"さんさい\",\"ざんしょ\",\"さんすう\",\"さんせい\",\"さんそ\",\"さんち\",\"さんま\",\"さんみ\",\"さんらん\",\"しあい\",\"しあげ\",\"しあさって\",\"しあわせ\",\"しいく\",\"しいん\",\"しうち\",\"しえい\",\"しおけ\",\"しかい\",\"しかく\",\"じかん\",\"しごと\",\"しすう\",\"じだい\",\"したうけ\",\"したぎ\",\"したて\",\"したみ\",\"しちょう\",\"しちりん\",\"しっかり\",\"しつじ\",\"しつもん\",\"してい\",\"してき\",\"してつ\",\"じてん\",\"じどう\",\"しなぎれ\",\"しなもの\",\"しなん\",\"しねま\",\"しねん\",\"しのぐ\",\"しのぶ\",\"しはい\",\"しばかり\",\"しはつ\",\"しはらい\",\"しはん\",\"しひょう\",\"しふく\",\"じぶん\",\"しへい\",\"しほう\",\"しほん\",\"しまう\",\"しまる\",\"しみん\",\"しむける\",\"じむしょ\",\"しめい\",\"しめる\",\"しもん\",\"しゃいん\",\"しゃうん\",\"しゃおん\",\"じゃがいも\",\"しやくしょ\",\"しゃくほう\",\"しゃけん\",\"しゃこ\",\"しゃざい\",\"しゃしん\",\"しゃせん\",\"しゃそう\",\"しゃたい\",\"しゃちょう\",\"しゃっきん\",\"じゃま\",\"しゃりん\",\"しゃれい\",\"じゆう\",\"じゅうしょ\",\"しゅくはく\",\"じゅしん\",\"しゅっせき\",\"しゅみ\",\"しゅらば\",\"じゅんばん\",\"しょうかい\",\"しょくたく\",\"しょっけん\",\"しょどう\",\"しょもつ\",\"しらせる\",\"しらべる\",\"しんか\",\"しんこう\",\"じんじゃ\",\"しんせいじ\",\"しんちく\",\"しんりん\",\"すあげ\",\"すあし\",\"すあな\",\"ずあん\",\"すいえい\",\"すいか\",\"すいとう\",\"ずいぶん\",\"すいようび\",\"すうがく\",\"すうじつ\",\"すうせん\",\"すおどり\",\"すきま\",\"すくう\",\"すくない\",\"すける\",\"すごい\",\"すこし\",\"ずさん\",\"すずしい\",\"すすむ\",\"すすめる\",\"すっかり\",\"ずっしり\",\"ずっと\",\"すてき\",\"すてる\",\"すねる\",\"すのこ\",\"すはだ\",\"すばらしい\",\"ずひょう\",\"ずぶぬれ\",\"すぶり\",\"すふれ\",\"すべて\",\"すべる\",\"ずほう\",\"すぼん\",\"すまい\",\"すめし\",\"すもう\",\"すやき\",\"すらすら\",\"するめ\",\"すれちがう\",\"すろっと\",\"すわる\",\"すんぜん\",\"すんぽう\",\"せあぶら\",\"せいかつ\",\"せいげん\",\"せいじ\",\"せいよう\",\"せおう\",\"せかいかん\",\"せきにん\",\"せきむ\",\"せきゆ\",\"せきらんうん\",\"せけん\",\"せこう\",\"せすじ\",\"せたい\",\"せたけ\",\"せっかく\",\"せっきゃく\",\"ぜっく\",\"せっけん\",\"せっこつ\",\"せっさたくま\",\"せつぞく\",\"せつだん\",\"せつでん\",\"せっぱん\",\"せつび\",\"せつぶん\",\"せつめい\",\"せつりつ\",\"せなか\",\"せのび\",\"せはば\",\"せびろ\",\"せぼね\",\"せまい\",\"せまる\",\"せめる\",\"せもたれ\",\"せりふ\",\"ぜんあく\",\"せんい\",\"せんえい\",\"せんか\",\"せんきょ\",\"せんく\",\"せんげん\",\"ぜんご\",\"せんさい\",\"せんしゅ\",\"せんすい\",\"せんせい\",\"せんぞ\",\"せんたく\",\"せんちょう\",\"せんてい\",\"せんとう\",\"せんぬき\",\"せんねん\",\"せんぱい\",\"ぜんぶ\",\"ぜんぽう\",\"せんむ\",\"せんめんじょ\",\"せんもん\",\"せんやく\",\"せんゆう\",\"せんよう\",\"ぜんら\",\"ぜんりゃく\",\"せんれい\",\"せんろ\",\"そあく\",\"そいとげる\",\"そいね\",\"そうがんきょう\",\"そうき\",\"そうご\",\"そうしん\",\"そうだん\",\"そうなん\",\"そうび\",\"そうめん\",\"そうり\",\"そえもの\",\"そえん\",\"そがい\",\"そげき\",\"そこう\",\"そこそこ\",\"そざい\",\"そしな\",\"そせい\",\"そせん\",\"そそぐ\",\"そだてる\",\"そつう\",\"そつえん\",\"そっかん\",\"そつぎょう\",\"そっけつ\",\"そっこう\",\"そっせん\",\"そっと\",\"そとがわ\",\"そとづら\",\"そなえる\",\"そなた\",\"そふぼ\",\"そぼく\",\"そぼろ\",\"そまつ\",\"そまる\",\"そむく\",\"そむりえ\",\"そめる\",\"そもそも\",\"そよかぜ\",\"そらまめ\",\"そろう\",\"そんかい\",\"そんけい\",\"そんざい\",\"そんしつ\",\"そんぞく\",\"そんちょう\",\"ぞんび\",\"ぞんぶん\",\"そんみん\",\"たあい\",\"たいいん\",\"たいうん\",\"たいえき\",\"たいおう\",\"だいがく\",\"たいき\",\"たいぐう\",\"たいけん\",\"たいこ\",\"たいざい\",\"だいじょうぶ\",\"だいすき\",\"たいせつ\",\"たいそう\",\"だいたい\",\"たいちょう\",\"たいてい\",\"だいどころ\",\"たいない\",\"たいねつ\",\"たいのう\",\"たいはん\",\"だいひょう\",\"たいふう\",\"たいへん\",\"たいほ\",\"たいまつばな\",\"たいみんぐ\",\"たいむ\",\"たいめん\",\"たいやき\",\"たいよう\",\"たいら\",\"たいりょく\",\"たいる\",\"たいわん\",\"たうえ\",\"たえる\",\"たおす\",\"たおる\",\"たおれる\",\"たかい\",\"たかね\",\"たきび\",\"たくさん\",\"たこく\",\"たこやき\",\"たさい\",\"たしざん\",\"だじゃれ\",\"たすける\",\"たずさわる\",\"たそがれ\",\"たたかう\",\"たたく\",\"ただしい\",\"たたみ\",\"たちばな\",\"だっかい\",\"だっきゃく\",\"だっこ\",\"だっしゅつ\",\"だったい\",\"たてる\",\"たとえる\",\"たなばた\",\"たにん\",\"たぬき\",\"たのしみ\",\"たはつ\",\"たぶん\",\"たべる\",\"たぼう\",\"たまご\",\"たまる\",\"だむる\",\"ためいき\",\"ためす\",\"ためる\",\"たもつ\",\"たやすい\",\"たよる\",\"たらす\",\"たりきほんがん\",\"たりょう\",\"たりる\",\"たると\",\"たれる\",\"たれんと\",\"たろっと\",\"たわむれる\",\"だんあつ\",\"たんい\",\"たんおん\",\"たんか\",\"たんき\",\"たんけん\",\"たんご\",\"たんさん\",\"たんじょうび\",\"だんせい\",\"たんそく\",\"たんたい\",\"だんち\",\"たんてい\",\"たんとう\",\"だんな\",\"たんにん\",\"だんねつ\",\"たんのう\",\"たんぴん\",\"だんぼう\",\"たんまつ\",\"たんめい\",\"だんれつ\",\"だんろ\",\"だんわ\",\"ちあい\",\"ちあん\",\"ちいき\",\"ちいさい\",\"ちえん\",\"ちかい\",\"ちから\",\"ちきゅう\",\"ちきん\",\"ちけいず\",\"ちけん\",\"ちこく\",\"ちさい\",\"ちしき\",\"ちしりょう\",\"ちせい\",\"ちそう\",\"ちたい\",\"ちたん\",\"ちちおや\",\"ちつじょ\",\"ちてき\",\"ちてん\",\"ちぬき\",\"ちぬり\",\"ちのう\",\"ちひょう\",\"ちへいせん\",\"ちほう\",\"ちまた\",\"ちみつ\",\"ちみどろ\",\"ちめいど\",\"ちゃんこなべ\",\"ちゅうい\",\"ちゆりょく\",\"ちょうし\",\"ちょさくけん\",\"ちらし\",\"ちらみ\",\"ちりがみ\",\"ちりょう\",\"ちるど\",\"ちわわ\",\"ちんたい\",\"ちんもく\",\"ついか\",\"ついたち\",\"つうか\",\"つうじょう\",\"つうはん\",\"つうわ\",\"つかう\",\"つかれる\",\"つくね\",\"つくる\",\"つけね\",\"つける\",\"つごう\",\"つたえる\",\"つづく\",\"つつじ\",\"つつむ\",\"つとめる\",\"つながる\",\"つなみ\",\"つねづね\",\"つのる\",\"つぶす\",\"つまらない\",\"つまる\",\"つみき\",\"つめたい\",\"つもり\",\"つもる\",\"つよい\",\"つるぼ\",\"つるみく\",\"つわもの\",\"つわり\",\"てあし\",\"てあて\",\"てあみ\",\"ていおん\",\"ていか\",\"ていき\",\"ていけい\",\"ていこく\",\"ていさつ\",\"ていし\",\"ていせい\",\"ていたい\",\"ていど\",\"ていねい\",\"ていひょう\",\"ていへん\",\"ていぼう\",\"てうち\",\"ておくれ\",\"てきとう\",\"てくび\",\"でこぼこ\",\"てさぎょう\",\"てさげ\",\"てすり\",\"てそう\",\"てちがい\",\"てちょう\",\"てつがく\",\"てつづき\",\"でっぱ\",\"てつぼう\",\"てつや\",\"でぬかえ\",\"てぬき\",\"てぬぐい\",\"てのひら\",\"てはい\",\"てぶくろ\",\"てふだ\",\"てほどき\",\"てほん\",\"てまえ\",\"てまきずし\",\"てみじか\",\"てみやげ\",\"てらす\",\"てれび\",\"てわけ\",\"てわたし\",\"でんあつ\",\"てんいん\",\"てんかい\",\"てんき\",\"てんぐ\",\"てんけん\",\"てんごく\",\"てんさい\",\"てんし\",\"てんすう\",\"でんち\",\"てんてき\",\"てんとう\",\"てんない\",\"てんぷら\",\"てんぼうだい\",\"てんめつ\",\"てんらんかい\",\"でんりょく\",\"でんわ\",\"どあい\",\"といれ\",\"どうかん\",\"とうきゅう\",\"どうぐ\",\"とうし\",\"とうむぎ\",\"とおい\",\"とおか\",\"とおく\",\"とおす\",\"とおる\",\"とかい\",\"とかす\",\"ときおり\",\"ときどき\",\"とくい\",\"とくしゅう\",\"とくてん\",\"とくに\",\"とくべつ\",\"とけい\",\"とける\",\"とこや\",\"とさか\",\"としょかん\",\"とそう\",\"とたん\",\"とちゅう\",\"とっきゅう\",\"とっくん\",\"とつぜん\",\"とつにゅう\",\"とどける\",\"ととのえる\",\"とない\",\"となえる\",\"となり\",\"とのさま\",\"とばす\",\"どぶがわ\",\"とほう\",\"とまる\",\"とめる\",\"ともだち\",\"ともる\",\"どようび\",\"とらえる\",\"とんかつ\",\"どんぶり\",\"ないかく\",\"ないこう\",\"ないしょ\",\"ないす\",\"ないせん\",\"ないそう\",\"なおす\",\"ながい\",\"なくす\",\"なげる\",\"なこうど\",\"なさけ\",\"なたでここ\",\"なっとう\",\"なつやすみ\",\"ななおし\",\"なにごと\",\"なにもの\",\"なにわ\",\"なのか\",\"なふだ\",\"なまいき\",\"なまえ\",\"なまみ\",\"なみだ\",\"なめらか\",\"なめる\",\"なやむ\",\"ならう\",\"ならび\",\"ならぶ\",\"なれる\",\"なわとび\",\"なわばり\",\"にあう\",\"にいがた\",\"にうけ\",\"におい\",\"にかい\",\"にがて\",\"にきび\",\"にくしみ\",\"にくまん\",\"にげる\",\"にさんかたんそ\",\"にしき\",\"にせもの\",\"にちじょう\",\"にちようび\",\"にっか\",\"にっき\",\"にっけい\",\"にっこう\",\"にっさん\",\"にっしょく\",\"にっすう\",\"にっせき\",\"にってい\",\"になう\",\"にほん\",\"にまめ\",\"にもつ\",\"にやり\",\"にゅういん\",\"にりんしゃ\",\"にわとり\",\"にんい\",\"にんか\",\"にんき\",\"にんげん\",\"にんしき\",\"にんずう\",\"にんそう\",\"にんたい\",\"にんち\",\"にんてい\",\"にんにく\",\"にんぷ\",\"にんまり\",\"にんむ\",\"にんめい\",\"にんよう\",\"ぬいくぎ\",\"ぬかす\",\"ぬぐいとる\",\"ぬぐう\",\"ぬくもり\",\"ぬすむ\",\"ぬまえび\",\"ぬめり\",\"ぬらす\",\"ぬんちゃく\",\"ねあげ\",\"ねいき\",\"ねいる\",\"ねいろ\",\"ねぐせ\",\"ねくたい\",\"ねくら\",\"ねこぜ\",\"ねこむ\",\"ねさげ\",\"ねすごす\",\"ねそべる\",\"ねだん\",\"ねつい\",\"ねっしん\",\"ねつぞう\",\"ねったいぎょ\",\"ねぶそく\",\"ねふだ\",\"ねぼう\",\"ねほりはほり\",\"ねまき\",\"ねまわし\",\"ねみみ\",\"ねむい\",\"ねむたい\",\"ねもと\",\"ねらう\",\"ねわざ\",\"ねんいり\",\"ねんおし\",\"ねんかん\",\"ねんきん\",\"ねんぐ\",\"ねんざ\",\"ねんし\",\"ねんちゃく\",\"ねんど\",\"ねんぴ\",\"ねんぶつ\",\"ねんまつ\",\"ねんりょう\",\"ねんれい\",\"のいず\",\"のおづま\",\"のがす\",\"のきなみ\",\"のこぎり\",\"のこす\",\"のこる\",\"のせる\",\"のぞく\",\"のぞむ\",\"のたまう\",\"のちほど\",\"のっく\",\"のばす\",\"のはら\",\"のべる\",\"のぼる\",\"のみもの\",\"のやま\",\"のらいぬ\",\"のらねこ\",\"のりもの\",\"のりゆき\",\"のれん\",\"のんき\",\"ばあい\",\"はあく\",\"ばあさん\",\"ばいか\",\"ばいく\",\"はいけん\",\"はいご\",\"はいしん\",\"はいすい\",\"はいせん\",\"はいそう\",\"はいち\",\"ばいばい\",\"はいれつ\",\"はえる\",\"はおる\",\"はかい\",\"ばかり\",\"はかる\",\"はくしゅ\",\"はけん\",\"はこぶ\",\"はさみ\",\"はさん\",\"はしご\",\"ばしょ\",\"はしる\",\"はせる\",\"ぱそこん\",\"はそん\",\"はたん\",\"はちみつ\",\"はつおん\",\"はっかく\",\"はづき\",\"はっきり\",\"はっくつ\",\"はっけん\",\"はっこう\",\"はっさん\",\"はっしん\",\"はったつ\",\"はっちゅう\",\"はってん\",\"はっぴょう\",\"はっぽう\",\"はなす\",\"はなび\",\"はにかむ\",\"はぶらし\",\"はみがき\",\"はむかう\",\"はめつ\",\"はやい\",\"はやし\",\"はらう\",\"はろうぃん\",\"はわい\",\"はんい\",\"はんえい\",\"はんおん\",\"はんかく\",\"はんきょう\",\"ばんぐみ\",\"はんこ\",\"はんしゃ\",\"はんすう\",\"はんだん\",\"ぱんち\",\"ぱんつ\",\"はんてい\",\"はんとし\",\"はんのう\",\"はんぱ\",\"はんぶん\",\"はんぺん\",\"はんぼうき\",\"はんめい\",\"はんらん\",\"はんろん\",\"ひいき\",\"ひうん\",\"ひえる\",\"ひかく\",\"ひかり\",\"ひかる\",\"ひかん\",\"ひくい\",\"ひけつ\",\"ひこうき\",\"ひこく\",\"ひさい\",\"ひさしぶり\",\"ひさん\",\"びじゅつかん\",\"ひしょ\",\"ひそか\",\"ひそむ\",\"ひたむき\",\"ひだり\",\"ひたる\",\"ひつぎ\",\"ひっこし\",\"ひっし\",\"ひつじゅひん\",\"ひっす\",\"ひつぜん\",\"ぴったり\",\"ぴっちり\",\"ひつよう\",\"ひてい\",\"ひとごみ\",\"ひなまつり\",\"ひなん\",\"ひねる\",\"ひはん\",\"ひびく\",\"ひひょう\",\"ひほう\",\"ひまわり\",\"ひまん\",\"ひみつ\",\"ひめい\",\"ひめじし\",\"ひやけ\",\"ひやす\",\"ひよう\",\"びょうき\",\"ひらがな\",\"ひらく\",\"ひりつ\",\"ひりょう\",\"ひるま\",\"ひるやすみ\",\"ひれい\",\"ひろい\",\"ひろう\",\"ひろき\",\"ひろゆき\",\"ひんかく\",\"ひんけつ\",\"ひんこん\",\"ひんしゅ\",\"ひんそう\",\"ぴんち\",\"ひんぱん\",\"びんぼう\",\"ふあん\",\"ふいうち\",\"ふうけい\",\"ふうせん\",\"ぷうたろう\",\"ふうとう\",\"ふうふ\",\"ふえる\",\"ふおん\",\"ふかい\",\"ふきん\",\"ふくざつ\",\"ふくぶくろ\",\"ふこう\",\"ふさい\",\"ふしぎ\",\"ふじみ\",\"ふすま\",\"ふせい\",\"ふせぐ\",\"ふそく\",\"ぶたにく\",\"ふたん\",\"ふちょう\",\"ふつう\",\"ふつか\",\"ふっかつ\",\"ふっき\",\"ふっこく\",\"ぶどう\",\"ふとる\",\"ふとん\",\"ふのう\",\"ふはい\",\"ふひょう\",\"ふへん\",\"ふまん\",\"ふみん\",\"ふめつ\",\"ふめん\",\"ふよう\",\"ふりこ\",\"ふりる\",\"ふるい\",\"ふんいき\",\"ぶんがく\",\"ぶんぐ\",\"ふんしつ\",\"ぶんせき\",\"ふんそう\",\"ぶんぽう\",\"へいあん\",\"へいおん\",\"へいがい\",\"へいき\",\"へいげん\",\"へいこう\",\"へいさ\",\"へいしゃ\",\"へいせつ\",\"へいそ\",\"へいたく\",\"へいてん\",\"へいねつ\",\"へいわ\",\"へきが\",\"へこむ\",\"べにいろ\",\"べにしょうが\",\"へらす\",\"へんかん\",\"べんきょう\",\"べんごし\",\"へんさい\",\"へんたい\",\"べんり\",\"ほあん\",\"ほいく\",\"ぼうぎょ\",\"ほうこく\",\"ほうそう\",\"ほうほう\",\"ほうもん\",\"ほうりつ\",\"ほえる\",\"ほおん\",\"ほかん\",\"ほきょう\",\"ぼきん\",\"ほくろ\",\"ほけつ\",\"ほけん\",\"ほこう\",\"ほこる\",\"ほしい\",\"ほしつ\",\"ほしゅ\",\"ほしょう\",\"ほせい\",\"ほそい\",\"ほそく\",\"ほたて\",\"ほたる\",\"ぽちぶくろ\",\"ほっきょく\",\"ほっさ\",\"ほったん\",\"ほとんど\",\"ほめる\",\"ほんい\",\"ほんき\",\"ほんけ\",\"ほんしつ\",\"ほんやく\",\"まいにち\",\"まかい\",\"まかせる\",\"まがる\",\"まける\",\"まこと\",\"まさつ\",\"まじめ\",\"ますく\",\"まぜる\",\"まつり\",\"まとめ\",\"まなぶ\",\"まぬけ\",\"まねく\",\"まほう\",\"まもる\",\"まゆげ\",\"まよう\",\"まろやか\",\"まわす\",\"まわり\",\"まわる\",\"まんが\",\"まんきつ\",\"まんぞく\",\"まんなか\",\"みいら\",\"みうち\",\"みえる\",\"みがく\",\"みかた\",\"みかん\",\"みけん\",\"みこん\",\"みじかい\",\"みすい\",\"みすえる\",\"みせる\",\"みっか\",\"みつかる\",\"みつける\",\"みてい\",\"みとめる\",\"みなと\",\"みなみかさい\",\"みねらる\",\"みのう\",\"みのがす\",\"みほん\",\"みもと\",\"みやげ\",\"みらい\",\"みりょく\",\"みわく\",\"みんか\",\"みんぞく\",\"むいか\",\"むえき\",\"むえん\",\"むかい\",\"むかう\",\"むかえ\",\"むかし\",\"むぎちゃ\",\"むける\",\"むげん\",\"むさぼる\",\"むしあつい\",\"むしば\",\"むじゅん\",\"むしろ\",\"むすう\",\"むすこ\",\"むすぶ\",\"むすめ\",\"むせる\",\"むせん\",\"むちゅう\",\"むなしい\",\"むのう\",\"むやみ\",\"むよう\",\"むらさき\",\"むりょう\",\"むろん\",\"めいあん\",\"めいうん\",\"めいえん\",\"めいかく\",\"めいきょく\",\"めいさい\",\"めいし\",\"めいそう\",\"めいぶつ\",\"めいれい\",\"めいわく\",\"めぐまれる\",\"めざす\",\"めした\",\"めずらしい\",\"めだつ\",\"めまい\",\"めやす\",\"めんきょ\",\"めんせき\",\"めんどう\",\"もうしあげる\",\"もうどうけん\",\"もえる\",\"もくし\",\"もくてき\",\"もくようび\",\"もちろん\",\"もどる\",\"もらう\",\"もんく\",\"もんだい\",\"やおや\",\"やける\",\"やさい\",\"やさしい\",\"やすい\",\"やすたろう\",\"やすみ\",\"やせる\",\"やそう\",\"やたい\",\"やちん\",\"やっと\",\"やっぱり\",\"やぶる\",\"やめる\",\"ややこしい\",\"やよい\",\"やわらかい\",\"ゆうき\",\"ゆうびんきょく\",\"ゆうべ\",\"ゆうめい\",\"ゆけつ\",\"ゆしゅつ\",\"ゆせん\",\"ゆそう\",\"ゆたか\",\"ゆちゃく\",\"ゆでる\",\"ゆにゅう\",\"ゆびわ\",\"ゆらい\",\"ゆれる\",\"ようい\",\"ようか\",\"ようきゅう\",\"ようじ\",\"ようす\",\"ようちえん\",\"よかぜ\",\"よかん\",\"よきん\",\"よくせい\",\"よくぼう\",\"よけい\",\"よごれる\",\"よさん\",\"よしゅう\",\"よそう\",\"よそく\",\"よっか\",\"よてい\",\"よどがわく\",\"よねつ\",\"よやく\",\"よゆう\",\"よろこぶ\",\"よろしい\",\"らいう\",\"らくがき\",\"らくご\",\"らくさつ\",\"らくだ\",\"らしんばん\",\"らせん\",\"らぞく\",\"らたい\",\"らっか\",\"られつ\",\"りえき\",\"りかい\",\"りきさく\",\"りきせつ\",\"りくぐん\",\"りくつ\",\"りけん\",\"りこう\",\"りせい\",\"りそう\",\"りそく\",\"りてん\",\"りねん\",\"りゆう\",\"りゅうがく\",\"りよう\",\"りょうり\",\"りょかん\",\"りょくちゃ\",\"りょこう\",\"りりく\",\"りれき\",\"りろん\",\"りんご\",\"るいけい\",\"るいさい\",\"るいじ\",\"るいせき\",\"るすばん\",\"るりがわら\",\"れいかん\",\"れいぎ\",\"れいせい\",\"れいぞうこ\",\"れいとう\",\"れいぼう\",\"れきし\",\"れきだい\",\"れんあい\",\"れんけい\",\"れんこん\",\"れんさい\",\"れんしゅう\",\"れんぞく\",\"れんらく\",\"ろうか\",\"ろうご\",\"ろうじん\",\"ろうそく\",\"ろくが\",\"ろこつ\",\"ろじうら\",\"ろしゅつ\",\"ろせん\",\"ろてん\",\"ろめん\",\"ろれつ\",\"ろんぎ\",\"ろんぱ\",\"ろんぶん\",\"ろんり\",\"わかす\",\"わかめ\",\"わかやま\",\"わかれる\",\"わしつ\",\"わじまし\",\"わすれもの\",\"わらう\",\"われる\"]");

},{}],"7rdQ9":[function(require,module,exports) {
module.exports = JSON.parse("[\"가격\",\"가끔\",\"가난\",\"가능\",\"가득\",\"가르침\",\"가뭄\",\"가방\",\"가상\",\"가슴\",\"가운데\",\"가을\",\"가이드\",\"가입\",\"가장\",\"가정\",\"가족\",\"가죽\",\"각오\",\"각자\",\"간격\",\"간부\",\"간섭\",\"간장\",\"간접\",\"간판\",\"갈등\",\"갈비\",\"갈색\",\"갈증\",\"감각\",\"감기\",\"감소\",\"감수성\",\"감자\",\"감정\",\"갑자기\",\"강남\",\"강당\",\"강도\",\"강력히\",\"강변\",\"강북\",\"강사\",\"강수량\",\"강아지\",\"강원도\",\"강의\",\"강제\",\"강조\",\"같이\",\"개구리\",\"개나리\",\"개방\",\"개별\",\"개선\",\"개성\",\"개인\",\"객관적\",\"거실\",\"거액\",\"거울\",\"거짓\",\"거품\",\"걱정\",\"건강\",\"건물\",\"건설\",\"건조\",\"건축\",\"걸음\",\"검사\",\"검토\",\"게시판\",\"게임\",\"겨울\",\"견해\",\"결과\",\"결국\",\"결론\",\"결석\",\"결승\",\"결심\",\"결정\",\"결혼\",\"경계\",\"경고\",\"경기\",\"경력\",\"경복궁\",\"경비\",\"경상도\",\"경영\",\"경우\",\"경쟁\",\"경제\",\"경주\",\"경찰\",\"경치\",\"경향\",\"경험\",\"계곡\",\"계단\",\"계란\",\"계산\",\"계속\",\"계약\",\"계절\",\"계층\",\"계획\",\"고객\",\"고구려\",\"고궁\",\"고급\",\"고등학생\",\"고무신\",\"고민\",\"고양이\",\"고장\",\"고전\",\"고집\",\"고춧가루\",\"고통\",\"고향\",\"곡식\",\"골목\",\"골짜기\",\"골프\",\"공간\",\"공개\",\"공격\",\"공군\",\"공급\",\"공기\",\"공동\",\"공무원\",\"공부\",\"공사\",\"공식\",\"공업\",\"공연\",\"공원\",\"공장\",\"공짜\",\"공책\",\"공통\",\"공포\",\"공항\",\"공휴일\",\"과목\",\"과일\",\"과장\",\"과정\",\"과학\",\"관객\",\"관계\",\"관광\",\"관념\",\"관람\",\"관련\",\"관리\",\"관습\",\"관심\",\"관점\",\"관찰\",\"광경\",\"광고\",\"광장\",\"광주\",\"괴로움\",\"굉장히\",\"교과서\",\"교문\",\"교복\",\"교실\",\"교양\",\"교육\",\"교장\",\"교직\",\"교통\",\"교환\",\"교훈\",\"구경\",\"구름\",\"구멍\",\"구별\",\"구분\",\"구석\",\"구성\",\"구속\",\"구역\",\"구입\",\"구청\",\"구체적\",\"국가\",\"국기\",\"국내\",\"국립\",\"국물\",\"국민\",\"국수\",\"국어\",\"국왕\",\"국적\",\"국제\",\"국회\",\"군대\",\"군사\",\"군인\",\"궁극적\",\"권리\",\"권위\",\"권투\",\"귀국\",\"귀신\",\"규정\",\"규칙\",\"균형\",\"그날\",\"그냥\",\"그늘\",\"그러나\",\"그룹\",\"그릇\",\"그림\",\"그제서야\",\"그토록\",\"극복\",\"극히\",\"근거\",\"근교\",\"근래\",\"근로\",\"근무\",\"근본\",\"근원\",\"근육\",\"근처\",\"글씨\",\"글자\",\"금강산\",\"금고\",\"금년\",\"금메달\",\"금액\",\"금연\",\"금요일\",\"금지\",\"긍정적\",\"기간\",\"기관\",\"기념\",\"기능\",\"기독교\",\"기둥\",\"기록\",\"기름\",\"기법\",\"기본\",\"기분\",\"기쁨\",\"기숙사\",\"기술\",\"기억\",\"기업\",\"기온\",\"기운\",\"기원\",\"기적\",\"기준\",\"기침\",\"기혼\",\"기획\",\"긴급\",\"긴장\",\"길이\",\"김밥\",\"김치\",\"김포공항\",\"깍두기\",\"깜빡\",\"깨달음\",\"깨소금\",\"껍질\",\"꼭대기\",\"꽃잎\",\"나들이\",\"나란히\",\"나머지\",\"나물\",\"나침반\",\"나흘\",\"낙엽\",\"난방\",\"날개\",\"날씨\",\"날짜\",\"남녀\",\"남대문\",\"남매\",\"남산\",\"남자\",\"남편\",\"남학생\",\"낭비\",\"낱말\",\"내년\",\"내용\",\"내일\",\"냄비\",\"냄새\",\"냇물\",\"냉동\",\"냉면\",\"냉방\",\"냉장고\",\"넥타이\",\"넷째\",\"노동\",\"노란색\",\"노력\",\"노인\",\"녹음\",\"녹차\",\"녹화\",\"논리\",\"논문\",\"논쟁\",\"놀이\",\"농구\",\"농담\",\"농민\",\"농부\",\"농업\",\"농장\",\"농촌\",\"높이\",\"눈동자\",\"눈물\",\"눈썹\",\"뉴욕\",\"느낌\",\"늑대\",\"능동적\",\"능력\",\"다방\",\"다양성\",\"다음\",\"다이어트\",\"다행\",\"단계\",\"단골\",\"단독\",\"단맛\",\"단순\",\"단어\",\"단위\",\"단점\",\"단체\",\"단추\",\"단편\",\"단풍\",\"달걀\",\"달러\",\"달력\",\"달리\",\"닭고기\",\"담당\",\"담배\",\"담요\",\"담임\",\"답변\",\"답장\",\"당근\",\"당분간\",\"당연히\",\"당장\",\"대규모\",\"대낮\",\"대단히\",\"대답\",\"대도시\",\"대략\",\"대량\",\"대륙\",\"대문\",\"대부분\",\"대신\",\"대응\",\"대장\",\"대전\",\"대접\",\"대중\",\"대책\",\"대출\",\"대충\",\"대통령\",\"대학\",\"대한민국\",\"대합실\",\"대형\",\"덩어리\",\"데이트\",\"도대체\",\"도덕\",\"도둑\",\"도망\",\"도서관\",\"도심\",\"도움\",\"도입\",\"도자기\",\"도저히\",\"도전\",\"도중\",\"도착\",\"독감\",\"독립\",\"독서\",\"독일\",\"독창적\",\"동화책\",\"뒷모습\",\"뒷산\",\"딸아이\",\"마누라\",\"마늘\",\"마당\",\"마라톤\",\"마련\",\"마무리\",\"마사지\",\"마약\",\"마요네즈\",\"마을\",\"마음\",\"마이크\",\"마중\",\"마지막\",\"마찬가지\",\"마찰\",\"마흔\",\"막걸리\",\"막내\",\"막상\",\"만남\",\"만두\",\"만세\",\"만약\",\"만일\",\"만점\",\"만족\",\"만화\",\"많이\",\"말기\",\"말씀\",\"말투\",\"맘대로\",\"망원경\",\"매년\",\"매달\",\"매력\",\"매번\",\"매스컴\",\"매일\",\"매장\",\"맥주\",\"먹이\",\"먼저\",\"먼지\",\"멀리\",\"메일\",\"며느리\",\"며칠\",\"면담\",\"멸치\",\"명단\",\"명령\",\"명예\",\"명의\",\"명절\",\"명칭\",\"명함\",\"모금\",\"모니터\",\"모델\",\"모든\",\"모범\",\"모습\",\"모양\",\"모임\",\"모조리\",\"모집\",\"모퉁이\",\"목걸이\",\"목록\",\"목사\",\"목소리\",\"목숨\",\"목적\",\"목표\",\"몰래\",\"몸매\",\"몸무게\",\"몸살\",\"몸속\",\"몸짓\",\"몸통\",\"몹시\",\"무관심\",\"무궁화\",\"무더위\",\"무덤\",\"무릎\",\"무슨\",\"무엇\",\"무역\",\"무용\",\"무조건\",\"무지개\",\"무척\",\"문구\",\"문득\",\"문법\",\"문서\",\"문제\",\"문학\",\"문화\",\"물가\",\"물건\",\"물결\",\"물고기\",\"물론\",\"물리학\",\"물음\",\"물질\",\"물체\",\"미국\",\"미디어\",\"미사일\",\"미술\",\"미역\",\"미용실\",\"미움\",\"미인\",\"미팅\",\"미혼\",\"민간\",\"민족\",\"민주\",\"믿음\",\"밀가루\",\"밀리미터\",\"밑바닥\",\"바가지\",\"바구니\",\"바나나\",\"바늘\",\"바닥\",\"바닷가\",\"바람\",\"바이러스\",\"바탕\",\"박물관\",\"박사\",\"박수\",\"반대\",\"반드시\",\"반말\",\"반발\",\"반성\",\"반응\",\"반장\",\"반죽\",\"반지\",\"반찬\",\"받침\",\"발가락\",\"발걸음\",\"발견\",\"발달\",\"발레\",\"발목\",\"발바닥\",\"발생\",\"발음\",\"발자국\",\"발전\",\"발톱\",\"발표\",\"밤하늘\",\"밥그릇\",\"밥맛\",\"밥상\",\"밥솥\",\"방금\",\"방면\",\"방문\",\"방바닥\",\"방법\",\"방송\",\"방식\",\"방안\",\"방울\",\"방지\",\"방학\",\"방해\",\"방향\",\"배경\",\"배꼽\",\"배달\",\"배드민턴\",\"백두산\",\"백색\",\"백성\",\"백인\",\"백제\",\"백화점\",\"버릇\",\"버섯\",\"버튼\",\"번개\",\"번역\",\"번지\",\"번호\",\"벌금\",\"벌레\",\"벌써\",\"범위\",\"범인\",\"범죄\",\"법률\",\"법원\",\"법적\",\"법칙\",\"베이징\",\"벨트\",\"변경\",\"변동\",\"변명\",\"변신\",\"변호사\",\"변화\",\"별도\",\"별명\",\"별일\",\"병실\",\"병아리\",\"병원\",\"보관\",\"보너스\",\"보라색\",\"보람\",\"보름\",\"보상\",\"보안\",\"보자기\",\"보장\",\"보전\",\"보존\",\"보통\",\"보편적\",\"보험\",\"복도\",\"복사\",\"복숭아\",\"복습\",\"볶음\",\"본격적\",\"본래\",\"본부\",\"본사\",\"본성\",\"본인\",\"본질\",\"볼펜\",\"봉사\",\"봉지\",\"봉투\",\"부근\",\"부끄러움\",\"부담\",\"부동산\",\"부문\",\"부분\",\"부산\",\"부상\",\"부엌\",\"부인\",\"부작용\",\"부장\",\"부정\",\"부족\",\"부지런히\",\"부친\",\"부탁\",\"부품\",\"부회장\",\"북부\",\"북한\",\"분노\",\"분량\",\"분리\",\"분명\",\"분석\",\"분야\",\"분위기\",\"분필\",\"분홍색\",\"불고기\",\"불과\",\"불교\",\"불꽃\",\"불만\",\"불법\",\"불빛\",\"불안\",\"불이익\",\"불행\",\"브랜드\",\"비극\",\"비난\",\"비닐\",\"비둘기\",\"비디오\",\"비로소\",\"비만\",\"비명\",\"비밀\",\"비바람\",\"비빔밥\",\"비상\",\"비용\",\"비율\",\"비중\",\"비타민\",\"비판\",\"빌딩\",\"빗물\",\"빗방울\",\"빗줄기\",\"빛깔\",\"빨간색\",\"빨래\",\"빨리\",\"사건\",\"사계절\",\"사나이\",\"사냥\",\"사람\",\"사랑\",\"사립\",\"사모님\",\"사물\",\"사방\",\"사상\",\"사생활\",\"사설\",\"사슴\",\"사실\",\"사업\",\"사용\",\"사월\",\"사장\",\"사전\",\"사진\",\"사촌\",\"사춘기\",\"사탕\",\"사투리\",\"사흘\",\"산길\",\"산부인과\",\"산업\",\"산책\",\"살림\",\"살인\",\"살짝\",\"삼계탕\",\"삼국\",\"삼십\",\"삼월\",\"삼촌\",\"상관\",\"상금\",\"상대\",\"상류\",\"상반기\",\"상상\",\"상식\",\"상업\",\"상인\",\"상자\",\"상점\",\"상처\",\"상추\",\"상태\",\"상표\",\"상품\",\"상황\",\"새벽\",\"색깔\",\"색연필\",\"생각\",\"생명\",\"생물\",\"생방송\",\"생산\",\"생선\",\"생신\",\"생일\",\"생활\",\"서랍\",\"서른\",\"서명\",\"서민\",\"서비스\",\"서양\",\"서울\",\"서적\",\"서점\",\"서쪽\",\"서클\",\"석사\",\"석유\",\"선거\",\"선물\",\"선배\",\"선생\",\"선수\",\"선원\",\"선장\",\"선전\",\"선택\",\"선풍기\",\"설거지\",\"설날\",\"설렁탕\",\"설명\",\"설문\",\"설사\",\"설악산\",\"설치\",\"설탕\",\"섭씨\",\"성공\",\"성당\",\"성명\",\"성별\",\"성인\",\"성장\",\"성적\",\"성질\",\"성함\",\"세금\",\"세미나\",\"세상\",\"세월\",\"세종대왕\",\"세탁\",\"센터\",\"센티미터\",\"셋째\",\"소규모\",\"소극적\",\"소금\",\"소나기\",\"소년\",\"소득\",\"소망\",\"소문\",\"소설\",\"소속\",\"소아과\",\"소용\",\"소원\",\"소음\",\"소중히\",\"소지품\",\"소질\",\"소풍\",\"소형\",\"속담\",\"속도\",\"속옷\",\"손가락\",\"손길\",\"손녀\",\"손님\",\"손등\",\"손목\",\"손뼉\",\"손실\",\"손질\",\"손톱\",\"손해\",\"솔직히\",\"솜씨\",\"송아지\",\"송이\",\"송편\",\"쇠고기\",\"쇼핑\",\"수건\",\"수년\",\"수단\",\"수돗물\",\"수동적\",\"수면\",\"수명\",\"수박\",\"수상\",\"수석\",\"수술\",\"수시로\",\"수업\",\"수염\",\"수영\",\"수입\",\"수준\",\"수집\",\"수출\",\"수컷\",\"수필\",\"수학\",\"수험생\",\"수화기\",\"숙녀\",\"숙소\",\"숙제\",\"순간\",\"순서\",\"순수\",\"순식간\",\"순위\",\"숟가락\",\"술병\",\"술집\",\"숫자\",\"스님\",\"스물\",\"스스로\",\"스승\",\"스웨터\",\"스위치\",\"스케이트\",\"스튜디오\",\"스트레스\",\"스포츠\",\"슬쩍\",\"슬픔\",\"습관\",\"습기\",\"승객\",\"승리\",\"승부\",\"승용차\",\"승진\",\"시각\",\"시간\",\"시골\",\"시금치\",\"시나리오\",\"시댁\",\"시리즈\",\"시멘트\",\"시민\",\"시부모\",\"시선\",\"시설\",\"시스템\",\"시아버지\",\"시어머니\",\"시월\",\"시인\",\"시일\",\"시작\",\"시장\",\"시절\",\"시점\",\"시중\",\"시즌\",\"시집\",\"시청\",\"시합\",\"시험\",\"식구\",\"식기\",\"식당\",\"식량\",\"식료품\",\"식물\",\"식빵\",\"식사\",\"식생활\",\"식초\",\"식탁\",\"식품\",\"신고\",\"신규\",\"신념\",\"신문\",\"신발\",\"신비\",\"신사\",\"신세\",\"신용\",\"신제품\",\"신청\",\"신체\",\"신화\",\"실감\",\"실내\",\"실력\",\"실례\",\"실망\",\"실수\",\"실습\",\"실시\",\"실장\",\"실정\",\"실질적\",\"실천\",\"실체\",\"실컷\",\"실태\",\"실패\",\"실험\",\"실현\",\"심리\",\"심부름\",\"심사\",\"심장\",\"심정\",\"심판\",\"쌍둥이\",\"씨름\",\"씨앗\",\"아가씨\",\"아나운서\",\"아드님\",\"아들\",\"아쉬움\",\"아스팔트\",\"아시아\",\"아울러\",\"아저씨\",\"아줌마\",\"아직\",\"아침\",\"아파트\",\"아프리카\",\"아픔\",\"아홉\",\"아흔\",\"악기\",\"악몽\",\"악수\",\"안개\",\"안경\",\"안과\",\"안내\",\"안녕\",\"안동\",\"안방\",\"안부\",\"안주\",\"알루미늄\",\"알코올\",\"암시\",\"암컷\",\"압력\",\"앞날\",\"앞문\",\"애인\",\"애정\",\"액수\",\"앨범\",\"야간\",\"야단\",\"야옹\",\"약간\",\"약국\",\"약속\",\"약수\",\"약점\",\"약품\",\"약혼녀\",\"양념\",\"양력\",\"양말\",\"양배추\",\"양주\",\"양파\",\"어둠\",\"어려움\",\"어른\",\"어젯밤\",\"어쨌든\",\"어쩌다가\",\"어쩐지\",\"언니\",\"언덕\",\"언론\",\"언어\",\"얼굴\",\"얼른\",\"얼음\",\"얼핏\",\"엄마\",\"업무\",\"업종\",\"업체\",\"엉덩이\",\"엉망\",\"엉터리\",\"엊그제\",\"에너지\",\"에어컨\",\"엔진\",\"여건\",\"여고생\",\"여관\",\"여군\",\"여권\",\"여대생\",\"여덟\",\"여동생\",\"여든\",\"여론\",\"여름\",\"여섯\",\"여성\",\"여왕\",\"여인\",\"여전히\",\"여직원\",\"여학생\",\"여행\",\"역사\",\"역시\",\"역할\",\"연결\",\"연구\",\"연극\",\"연기\",\"연락\",\"연설\",\"연세\",\"연속\",\"연습\",\"연애\",\"연예인\",\"연인\",\"연장\",\"연주\",\"연출\",\"연필\",\"연합\",\"연휴\",\"열기\",\"열매\",\"열쇠\",\"열심히\",\"열정\",\"열차\",\"열흘\",\"염려\",\"엽서\",\"영국\",\"영남\",\"영상\",\"영양\",\"영역\",\"영웅\",\"영원히\",\"영하\",\"영향\",\"영혼\",\"영화\",\"옆구리\",\"옆방\",\"옆집\",\"예감\",\"예금\",\"예방\",\"예산\",\"예상\",\"예선\",\"예술\",\"예습\",\"예식장\",\"예약\",\"예전\",\"예절\",\"예정\",\"예컨대\",\"옛날\",\"오늘\",\"오락\",\"오랫동안\",\"오렌지\",\"오로지\",\"오른발\",\"오븐\",\"오십\",\"오염\",\"오월\",\"오전\",\"오직\",\"오징어\",\"오페라\",\"오피스텔\",\"오히려\",\"옥상\",\"옥수수\",\"온갖\",\"온라인\",\"온몸\",\"온종일\",\"온통\",\"올가을\",\"올림픽\",\"올해\",\"옷차림\",\"와이셔츠\",\"와인\",\"완성\",\"완전\",\"왕비\",\"왕자\",\"왜냐하면\",\"왠지\",\"외갓집\",\"외국\",\"외로움\",\"외삼촌\",\"외출\",\"외침\",\"외할머니\",\"왼발\",\"왼손\",\"왼쪽\",\"요금\",\"요일\",\"요즘\",\"요청\",\"용기\",\"용서\",\"용어\",\"우산\",\"우선\",\"우승\",\"우연히\",\"우정\",\"우체국\",\"우편\",\"운동\",\"운명\",\"운반\",\"운전\",\"운행\",\"울산\",\"울음\",\"움직임\",\"웃어른\",\"웃음\",\"워낙\",\"원고\",\"원래\",\"원서\",\"원숭이\",\"원인\",\"원장\",\"원피스\",\"월급\",\"월드컵\",\"월세\",\"월요일\",\"웨이터\",\"위반\",\"위법\",\"위성\",\"위원\",\"위험\",\"위협\",\"윗사람\",\"유난히\",\"유럽\",\"유명\",\"유물\",\"유산\",\"유적\",\"유치원\",\"유학\",\"유행\",\"유형\",\"육군\",\"육상\",\"육십\",\"육체\",\"은행\",\"음력\",\"음료\",\"음반\",\"음성\",\"음식\",\"음악\",\"음주\",\"의견\",\"의논\",\"의문\",\"의복\",\"의식\",\"의심\",\"의외로\",\"의욕\",\"의원\",\"의학\",\"이것\",\"이곳\",\"이념\",\"이놈\",\"이달\",\"이대로\",\"이동\",\"이렇게\",\"이력서\",\"이론적\",\"이름\",\"이민\",\"이발소\",\"이별\",\"이불\",\"이빨\",\"이상\",\"이성\",\"이슬\",\"이야기\",\"이용\",\"이웃\",\"이월\",\"이윽고\",\"이익\",\"이전\",\"이중\",\"이튿날\",\"이틀\",\"이혼\",\"인간\",\"인격\",\"인공\",\"인구\",\"인근\",\"인기\",\"인도\",\"인류\",\"인물\",\"인생\",\"인쇄\",\"인연\",\"인원\",\"인재\",\"인종\",\"인천\",\"인체\",\"인터넷\",\"인하\",\"인형\",\"일곱\",\"일기\",\"일단\",\"일대\",\"일등\",\"일반\",\"일본\",\"일부\",\"일상\",\"일생\",\"일손\",\"일요일\",\"일월\",\"일정\",\"일종\",\"일주일\",\"일찍\",\"일체\",\"일치\",\"일행\",\"일회용\",\"임금\",\"임무\",\"입대\",\"입력\",\"입맛\",\"입사\",\"입술\",\"입시\",\"입원\",\"입장\",\"입학\",\"자가용\",\"자격\",\"자극\",\"자동\",\"자랑\",\"자부심\",\"자식\",\"자신\",\"자연\",\"자원\",\"자율\",\"자전거\",\"자정\",\"자존심\",\"자판\",\"작가\",\"작년\",\"작성\",\"작업\",\"작용\",\"작은딸\",\"작품\",\"잔디\",\"잔뜩\",\"잔치\",\"잘못\",\"잠깐\",\"잠수함\",\"잠시\",\"잠옷\",\"잠자리\",\"잡지\",\"장관\",\"장군\",\"장기간\",\"장래\",\"장례\",\"장르\",\"장마\",\"장면\",\"장모\",\"장미\",\"장비\",\"장사\",\"장소\",\"장식\",\"장애인\",\"장인\",\"장점\",\"장차\",\"장학금\",\"재능\",\"재빨리\",\"재산\",\"재생\",\"재작년\",\"재정\",\"재채기\",\"재판\",\"재학\",\"재활용\",\"저것\",\"저고리\",\"저곳\",\"저녁\",\"저런\",\"저렇게\",\"저번\",\"저울\",\"저절로\",\"저축\",\"적극\",\"적당히\",\"적성\",\"적용\",\"적응\",\"전개\",\"전공\",\"전기\",\"전달\",\"전라도\",\"전망\",\"전문\",\"전반\",\"전부\",\"전세\",\"전시\",\"전용\",\"전자\",\"전쟁\",\"전주\",\"전철\",\"전체\",\"전통\",\"전혀\",\"전후\",\"절대\",\"절망\",\"절반\",\"절약\",\"절차\",\"점검\",\"점수\",\"점심\",\"점원\",\"점점\",\"점차\",\"접근\",\"접시\",\"접촉\",\"젓가락\",\"정거장\",\"정도\",\"정류장\",\"정리\",\"정말\",\"정면\",\"정문\",\"정반대\",\"정보\",\"정부\",\"정비\",\"정상\",\"정성\",\"정오\",\"정원\",\"정장\",\"정지\",\"정치\",\"정확히\",\"제공\",\"제과점\",\"제대로\",\"제목\",\"제발\",\"제법\",\"제삿날\",\"제안\",\"제일\",\"제작\",\"제주도\",\"제출\",\"제품\",\"제한\",\"조각\",\"조건\",\"조금\",\"조깅\",\"조명\",\"조미료\",\"조상\",\"조선\",\"조용히\",\"조절\",\"조정\",\"조직\",\"존댓말\",\"존재\",\"졸업\",\"졸음\",\"종교\",\"종로\",\"종류\",\"종소리\",\"종업원\",\"종종\",\"종합\",\"좌석\",\"죄인\",\"주관적\",\"주름\",\"주말\",\"주머니\",\"주먹\",\"주문\",\"주민\",\"주방\",\"주변\",\"주식\",\"주인\",\"주일\",\"주장\",\"주전자\",\"주택\",\"준비\",\"줄거리\",\"줄기\",\"줄무늬\",\"중간\",\"중계방송\",\"중국\",\"중년\",\"중단\",\"중독\",\"중반\",\"중부\",\"중세\",\"중소기업\",\"중순\",\"중앙\",\"중요\",\"중학교\",\"즉석\",\"즉시\",\"즐거움\",\"증가\",\"증거\",\"증권\",\"증상\",\"증세\",\"지각\",\"지갑\",\"지경\",\"지극히\",\"지금\",\"지급\",\"지능\",\"지름길\",\"지리산\",\"지방\",\"지붕\",\"지식\",\"지역\",\"지우개\",\"지원\",\"지적\",\"지점\",\"지진\",\"지출\",\"직선\",\"직업\",\"직원\",\"직장\",\"진급\",\"진동\",\"진로\",\"진료\",\"진리\",\"진짜\",\"진찰\",\"진출\",\"진통\",\"진행\",\"질문\",\"질병\",\"질서\",\"짐작\",\"집단\",\"집안\",\"집중\",\"짜증\",\"찌꺼기\",\"차남\",\"차라리\",\"차량\",\"차림\",\"차별\",\"차선\",\"차츰\",\"착각\",\"찬물\",\"찬성\",\"참가\",\"참기름\",\"참새\",\"참석\",\"참여\",\"참외\",\"참조\",\"찻잔\",\"창가\",\"창고\",\"창구\",\"창문\",\"창밖\",\"창작\",\"창조\",\"채널\",\"채점\",\"책가방\",\"책방\",\"책상\",\"책임\",\"챔피언\",\"처벌\",\"처음\",\"천국\",\"천둥\",\"천장\",\"천재\",\"천천히\",\"철도\",\"철저히\",\"철학\",\"첫날\",\"첫째\",\"청년\",\"청바지\",\"청소\",\"청춘\",\"체계\",\"체력\",\"체온\",\"체육\",\"체중\",\"체험\",\"초등학생\",\"초반\",\"초밥\",\"초상화\",\"초순\",\"초여름\",\"초원\",\"초저녁\",\"초점\",\"초청\",\"초콜릿\",\"촛불\",\"총각\",\"총리\",\"총장\",\"촬영\",\"최근\",\"최상\",\"최선\",\"최신\",\"최악\",\"최종\",\"추석\",\"추억\",\"추진\",\"추천\",\"추측\",\"축구\",\"축소\",\"축제\",\"축하\",\"출근\",\"출발\",\"출산\",\"출신\",\"출연\",\"출입\",\"출장\",\"출판\",\"충격\",\"충고\",\"충돌\",\"충분히\",\"충청도\",\"취업\",\"취직\",\"취향\",\"치약\",\"친구\",\"친척\",\"칠십\",\"칠월\",\"칠판\",\"침대\",\"침묵\",\"침실\",\"칫솔\",\"칭찬\",\"카메라\",\"카운터\",\"칼국수\",\"캐릭터\",\"캠퍼스\",\"캠페인\",\"커튼\",\"컨디션\",\"컬러\",\"컴퓨터\",\"코끼리\",\"코미디\",\"콘서트\",\"콜라\",\"콤플렉스\",\"콩나물\",\"쾌감\",\"쿠데타\",\"크림\",\"큰길\",\"큰딸\",\"큰소리\",\"큰아들\",\"큰어머니\",\"큰일\",\"큰절\",\"클래식\",\"클럽\",\"킬로\",\"타입\",\"타자기\",\"탁구\",\"탁자\",\"탄생\",\"태권도\",\"태양\",\"태풍\",\"택시\",\"탤런트\",\"터널\",\"터미널\",\"테니스\",\"테스트\",\"테이블\",\"텔레비전\",\"토론\",\"토마토\",\"토요일\",\"통계\",\"통과\",\"통로\",\"통신\",\"통역\",\"통일\",\"통장\",\"통제\",\"통증\",\"통합\",\"통화\",\"퇴근\",\"퇴원\",\"퇴직금\",\"튀김\",\"트럭\",\"특급\",\"특별\",\"특성\",\"특수\",\"특징\",\"특히\",\"튼튼히\",\"티셔츠\",\"파란색\",\"파일\",\"파출소\",\"판결\",\"판단\",\"판매\",\"판사\",\"팔십\",\"팔월\",\"팝송\",\"패션\",\"팩스\",\"팩시밀리\",\"팬티\",\"퍼센트\",\"페인트\",\"편견\",\"편의\",\"편지\",\"편히\",\"평가\",\"평균\",\"평생\",\"평소\",\"평양\",\"평일\",\"평화\",\"포스터\",\"포인트\",\"포장\",\"포함\",\"표면\",\"표정\",\"표준\",\"표현\",\"품목\",\"품질\",\"풍경\",\"풍속\",\"풍습\",\"프랑스\",\"프린터\",\"플라스틱\",\"피곤\",\"피망\",\"피아노\",\"필름\",\"필수\",\"필요\",\"필자\",\"필통\",\"핑계\",\"하느님\",\"하늘\",\"하드웨어\",\"하룻밤\",\"하반기\",\"하숙집\",\"하순\",\"하여튼\",\"하지만\",\"하천\",\"하품\",\"하필\",\"학과\",\"학교\",\"학급\",\"학기\",\"학년\",\"학력\",\"학번\",\"학부모\",\"학비\",\"학생\",\"학술\",\"학습\",\"학용품\",\"학원\",\"학위\",\"학자\",\"학점\",\"한계\",\"한글\",\"한꺼번에\",\"한낮\",\"한눈\",\"한동안\",\"한때\",\"한라산\",\"한마디\",\"한문\",\"한번\",\"한복\",\"한식\",\"한여름\",\"한쪽\",\"할머니\",\"할아버지\",\"할인\",\"함께\",\"함부로\",\"합격\",\"합리적\",\"항공\",\"항구\",\"항상\",\"항의\",\"해결\",\"해군\",\"해답\",\"해당\",\"해물\",\"해석\",\"해설\",\"해수욕장\",\"해안\",\"핵심\",\"핸드백\",\"햄버거\",\"햇볕\",\"햇살\",\"행동\",\"행복\",\"행사\",\"행운\",\"행위\",\"향기\",\"향상\",\"향수\",\"허락\",\"허용\",\"헬기\",\"현관\",\"현금\",\"현대\",\"현상\",\"현실\",\"현장\",\"현재\",\"현지\",\"혈액\",\"협력\",\"형부\",\"형사\",\"형수\",\"형식\",\"형제\",\"형태\",\"형편\",\"혜택\",\"호기심\",\"호남\",\"호랑이\",\"호박\",\"호텔\",\"호흡\",\"혹시\",\"홀로\",\"홈페이지\",\"홍보\",\"홍수\",\"홍차\",\"화면\",\"화분\",\"화살\",\"화요일\",\"화장\",\"화학\",\"확보\",\"확인\",\"확장\",\"확정\",\"환갑\",\"환경\",\"환영\",\"환율\",\"환자\",\"활기\",\"활동\",\"활발히\",\"활용\",\"활짝\",\"회견\",\"회관\",\"회복\",\"회색\",\"회원\",\"회장\",\"회전\",\"횟수\",\"횡단보도\",\"효율적\",\"후반\",\"후춧가루\",\"훈련\",\"훨씬\",\"휴식\",\"휴일\",\"흉내\",\"흐름\",\"흑백\",\"흑인\",\"흔적\",\"흔히\",\"흥미\",\"흥분\",\"희곡\",\"희망\",\"희생\",\"흰색\",\"힘껏\"]");

},{}],"bKirf":[function(require,module,exports) {
module.exports = JSON.parse("[\"ábaco\",\"abdomen\",\"abeja\",\"abierto\",\"abogado\",\"abono\",\"aborto\",\"abrazo\",\"abrir\",\"abuelo\",\"abuso\",\"acabar\",\"academia\",\"acceso\",\"acción\",\"aceite\",\"acelga\",\"acento\",\"aceptar\",\"ácido\",\"aclarar\",\"acné\",\"acoger\",\"acoso\",\"activo\",\"acto\",\"actriz\",\"actuar\",\"acudir\",\"acuerdo\",\"acusar\",\"adicto\",\"admitir\",\"adoptar\",\"adorno\",\"aduana\",\"adulto\",\"aéreo\",\"afectar\",\"afición\",\"afinar\",\"afirmar\",\"ágil\",\"agitar\",\"agonía\",\"agosto\",\"agotar\",\"agregar\",\"agrio\",\"agua\",\"agudo\",\"águila\",\"aguja\",\"ahogo\",\"ahorro\",\"aire\",\"aislar\",\"ajedrez\",\"ajeno\",\"ajuste\",\"alacrán\",\"alambre\",\"alarma\",\"alba\",\"álbum\",\"alcalde\",\"aldea\",\"alegre\",\"alejar\",\"alerta\",\"aleta\",\"alfiler\",\"alga\",\"algodón\",\"aliado\",\"aliento\",\"alivio\",\"alma\",\"almeja\",\"almíbar\",\"altar\",\"alteza\",\"altivo\",\"alto\",\"altura\",\"alumno\",\"alzar\",\"amable\",\"amante\",\"amapola\",\"amargo\",\"amasar\",\"ámbar\",\"ámbito\",\"ameno\",\"amigo\",\"amistad\",\"amor\",\"amparo\",\"amplio\",\"ancho\",\"anciano\",\"ancla\",\"andar\",\"andén\",\"anemia\",\"ángulo\",\"anillo\",\"ánimo\",\"anís\",\"anotar\",\"antena\",\"antiguo\",\"antojo\",\"anual\",\"anular\",\"anuncio\",\"añadir\",\"añejo\",\"año\",\"apagar\",\"aparato\",\"apetito\",\"apio\",\"aplicar\",\"apodo\",\"aporte\",\"apoyo\",\"aprender\",\"aprobar\",\"apuesta\",\"apuro\",\"arado\",\"araña\",\"arar\",\"árbitro\",\"árbol\",\"arbusto\",\"archivo\",\"arco\",\"arder\",\"ardilla\",\"arduo\",\"área\",\"árido\",\"aries\",\"armonía\",\"arnés\",\"aroma\",\"arpa\",\"arpón\",\"arreglo\",\"arroz\",\"arruga\",\"arte\",\"artista\",\"asa\",\"asado\",\"asalto\",\"ascenso\",\"asegurar\",\"aseo\",\"asesor\",\"asiento\",\"asilo\",\"asistir\",\"asno\",\"asombro\",\"áspero\",\"astilla\",\"astro\",\"astuto\",\"asumir\",\"asunto\",\"atajo\",\"ataque\",\"atar\",\"atento\",\"ateo\",\"ático\",\"atleta\",\"átomo\",\"atraer\",\"atroz\",\"atún\",\"audaz\",\"audio\",\"auge\",\"aula\",\"aumento\",\"ausente\",\"autor\",\"aval\",\"avance\",\"avaro\",\"ave\",\"avellana\",\"avena\",\"avestruz\",\"avión\",\"aviso\",\"ayer\",\"ayuda\",\"ayuno\",\"azafrán\",\"azar\",\"azote\",\"azúcar\",\"azufre\",\"azul\",\"baba\",\"babor\",\"bache\",\"bahía\",\"baile\",\"bajar\",\"balanza\",\"balcón\",\"balde\",\"bambú\",\"banco\",\"banda\",\"baño\",\"barba\",\"barco\",\"barniz\",\"barro\",\"báscula\",\"bastón\",\"basura\",\"batalla\",\"batería\",\"batir\",\"batuta\",\"baúl\",\"bazar\",\"bebé\",\"bebida\",\"bello\",\"besar\",\"beso\",\"bestia\",\"bicho\",\"bien\",\"bingo\",\"blanco\",\"bloque\",\"blusa\",\"boa\",\"bobina\",\"bobo\",\"boca\",\"bocina\",\"boda\",\"bodega\",\"boina\",\"bola\",\"bolero\",\"bolsa\",\"bomba\",\"bondad\",\"bonito\",\"bono\",\"bonsái\",\"borde\",\"borrar\",\"bosque\",\"bote\",\"botín\",\"bóveda\",\"bozal\",\"bravo\",\"brazo\",\"brecha\",\"breve\",\"brillo\",\"brinco\",\"brisa\",\"broca\",\"broma\",\"bronce\",\"brote\",\"bruja\",\"brusco\",\"bruto\",\"buceo\",\"bucle\",\"bueno\",\"buey\",\"bufanda\",\"bufón\",\"búho\",\"buitre\",\"bulto\",\"burbuja\",\"burla\",\"burro\",\"buscar\",\"butaca\",\"buzón\",\"caballo\",\"cabeza\",\"cabina\",\"cabra\",\"cacao\",\"cadáver\",\"cadena\",\"caer\",\"café\",\"caída\",\"caimán\",\"caja\",\"cajón\",\"cal\",\"calamar\",\"calcio\",\"caldo\",\"calidad\",\"calle\",\"calma\",\"calor\",\"calvo\",\"cama\",\"cambio\",\"camello\",\"camino\",\"campo\",\"cáncer\",\"candil\",\"canela\",\"canguro\",\"canica\",\"canto\",\"caña\",\"cañón\",\"caoba\",\"caos\",\"capaz\",\"capitán\",\"capote\",\"captar\",\"capucha\",\"cara\",\"carbón\",\"cárcel\",\"careta\",\"carga\",\"cariño\",\"carne\",\"carpeta\",\"carro\",\"carta\",\"casa\",\"casco\",\"casero\",\"caspa\",\"castor\",\"catorce\",\"catre\",\"caudal\",\"causa\",\"cazo\",\"cebolla\",\"ceder\",\"cedro\",\"celda\",\"célebre\",\"celoso\",\"célula\",\"cemento\",\"ceniza\",\"centro\",\"cerca\",\"cerdo\",\"cereza\",\"cero\",\"cerrar\",\"certeza\",\"césped\",\"cetro\",\"chacal\",\"chaleco\",\"champú\",\"chancla\",\"chapa\",\"charla\",\"chico\",\"chiste\",\"chivo\",\"choque\",\"choza\",\"chuleta\",\"chupar\",\"ciclón\",\"ciego\",\"cielo\",\"cien\",\"cierto\",\"cifra\",\"cigarro\",\"cima\",\"cinco\",\"cine\",\"cinta\",\"ciprés\",\"circo\",\"ciruela\",\"cisne\",\"cita\",\"ciudad\",\"clamor\",\"clan\",\"claro\",\"clase\",\"clave\",\"cliente\",\"clima\",\"clínica\",\"cobre\",\"cocción\",\"cochino\",\"cocina\",\"coco\",\"código\",\"codo\",\"cofre\",\"coger\",\"cohete\",\"cojín\",\"cojo\",\"cola\",\"colcha\",\"colegio\",\"colgar\",\"colina\",\"collar\",\"colmo\",\"columna\",\"combate\",\"comer\",\"comida\",\"cómodo\",\"compra\",\"conde\",\"conejo\",\"conga\",\"conocer\",\"consejo\",\"contar\",\"copa\",\"copia\",\"corazón\",\"corbata\",\"corcho\",\"cordón\",\"corona\",\"correr\",\"coser\",\"cosmos\",\"costa\",\"cráneo\",\"cráter\",\"crear\",\"crecer\",\"creído\",\"crema\",\"cría\",\"crimen\",\"cripta\",\"crisis\",\"cromo\",\"crónica\",\"croqueta\",\"crudo\",\"cruz\",\"cuadro\",\"cuarto\",\"cuatro\",\"cubo\",\"cubrir\",\"cuchara\",\"cuello\",\"cuento\",\"cuerda\",\"cuesta\",\"cueva\",\"cuidar\",\"culebra\",\"culpa\",\"culto\",\"cumbre\",\"cumplir\",\"cuna\",\"cuneta\",\"cuota\",\"cupón\",\"cúpula\",\"curar\",\"curioso\",\"curso\",\"curva\",\"cutis\",\"dama\",\"danza\",\"dar\",\"dardo\",\"dátil\",\"deber\",\"débil\",\"década\",\"decir\",\"dedo\",\"defensa\",\"definir\",\"dejar\",\"delfín\",\"delgado\",\"delito\",\"demora\",\"denso\",\"dental\",\"deporte\",\"derecho\",\"derrota\",\"desayuno\",\"deseo\",\"desfile\",\"desnudo\",\"destino\",\"desvío\",\"detalle\",\"detener\",\"deuda\",\"día\",\"diablo\",\"diadema\",\"diamante\",\"diana\",\"diario\",\"dibujo\",\"dictar\",\"diente\",\"dieta\",\"diez\",\"difícil\",\"digno\",\"dilema\",\"diluir\",\"dinero\",\"directo\",\"dirigir\",\"disco\",\"diseño\",\"disfraz\",\"diva\",\"divino\",\"doble\",\"doce\",\"dolor\",\"domingo\",\"don\",\"donar\",\"dorado\",\"dormir\",\"dorso\",\"dos\",\"dosis\",\"dragón\",\"droga\",\"ducha\",\"duda\",\"duelo\",\"dueño\",\"dulce\",\"dúo\",\"duque\",\"durar\",\"dureza\",\"duro\",\"ébano\",\"ebrio\",\"echar\",\"eco\",\"ecuador\",\"edad\",\"edición\",\"edificio\",\"editor\",\"educar\",\"efecto\",\"eficaz\",\"eje\",\"ejemplo\",\"elefante\",\"elegir\",\"elemento\",\"elevar\",\"elipse\",\"élite\",\"elixir\",\"elogio\",\"eludir\",\"embudo\",\"emitir\",\"emoción\",\"empate\",\"empeño\",\"empleo\",\"empresa\",\"enano\",\"encargo\",\"enchufe\",\"encía\",\"enemigo\",\"enero\",\"enfado\",\"enfermo\",\"engaño\",\"enigma\",\"enlace\",\"enorme\",\"enredo\",\"ensayo\",\"enseñar\",\"entero\",\"entrar\",\"envase\",\"envío\",\"época\",\"equipo\",\"erizo\",\"escala\",\"escena\",\"escolar\",\"escribir\",\"escudo\",\"esencia\",\"esfera\",\"esfuerzo\",\"espada\",\"espejo\",\"espía\",\"esposa\",\"espuma\",\"esquí\",\"estar\",\"este\",\"estilo\",\"estufa\",\"etapa\",\"eterno\",\"ética\",\"etnia\",\"evadir\",\"evaluar\",\"evento\",\"evitar\",\"exacto\",\"examen\",\"exceso\",\"excusa\",\"exento\",\"exigir\",\"exilio\",\"existir\",\"éxito\",\"experto\",\"explicar\",\"exponer\",\"extremo\",\"fábrica\",\"fábula\",\"fachada\",\"fácil\",\"factor\",\"faena\",\"faja\",\"falda\",\"fallo\",\"falso\",\"faltar\",\"fama\",\"familia\",\"famoso\",\"faraón\",\"farmacia\",\"farol\",\"farsa\",\"fase\",\"fatiga\",\"fauna\",\"favor\",\"fax\",\"febrero\",\"fecha\",\"feliz\",\"feo\",\"feria\",\"feroz\",\"fértil\",\"fervor\",\"festín\",\"fiable\",\"fianza\",\"fiar\",\"fibra\",\"ficción\",\"ficha\",\"fideo\",\"fiebre\",\"fiel\",\"fiera\",\"fiesta\",\"figura\",\"fijar\",\"fijo\",\"fila\",\"filete\",\"filial\",\"filtro\",\"fin\",\"finca\",\"fingir\",\"finito\",\"firma\",\"flaco\",\"flauta\",\"flecha\",\"flor\",\"flota\",\"fluir\",\"flujo\",\"flúor\",\"fobia\",\"foca\",\"fogata\",\"fogón\",\"folio\",\"folleto\",\"fondo\",\"forma\",\"forro\",\"fortuna\",\"forzar\",\"fosa\",\"foto\",\"fracaso\",\"frágil\",\"franja\",\"frase\",\"fraude\",\"freír\",\"freno\",\"fresa\",\"frío\",\"frito\",\"fruta\",\"fuego\",\"fuente\",\"fuerza\",\"fuga\",\"fumar\",\"función\",\"funda\",\"furgón\",\"furia\",\"fusil\",\"fútbol\",\"futuro\",\"gacela\",\"gafas\",\"gaita\",\"gajo\",\"gala\",\"galería\",\"gallo\",\"gamba\",\"ganar\",\"gancho\",\"ganga\",\"ganso\",\"garaje\",\"garza\",\"gasolina\",\"gastar\",\"gato\",\"gavilán\",\"gemelo\",\"gemir\",\"gen\",\"género\",\"genio\",\"gente\",\"geranio\",\"gerente\",\"germen\",\"gesto\",\"gigante\",\"gimnasio\",\"girar\",\"giro\",\"glaciar\",\"globo\",\"gloria\",\"gol\",\"golfo\",\"goloso\",\"golpe\",\"goma\",\"gordo\",\"gorila\",\"gorra\",\"gota\",\"goteo\",\"gozar\",\"grada\",\"gráfico\",\"grano\",\"grasa\",\"gratis\",\"grave\",\"grieta\",\"grillo\",\"gripe\",\"gris\",\"grito\",\"grosor\",\"grúa\",\"grueso\",\"grumo\",\"grupo\",\"guante\",\"guapo\",\"guardia\",\"guerra\",\"guía\",\"guiño\",\"guion\",\"guiso\",\"guitarra\",\"gusano\",\"gustar\",\"haber\",\"hábil\",\"hablar\",\"hacer\",\"hacha\",\"hada\",\"hallar\",\"hamaca\",\"harina\",\"haz\",\"hazaña\",\"hebilla\",\"hebra\",\"hecho\",\"helado\",\"helio\",\"hembra\",\"herir\",\"hermano\",\"héroe\",\"hervir\",\"hielo\",\"hierro\",\"hígado\",\"higiene\",\"hijo\",\"himno\",\"historia\",\"hocico\",\"hogar\",\"hoguera\",\"hoja\",\"hombre\",\"hongo\",\"honor\",\"honra\",\"hora\",\"hormiga\",\"horno\",\"hostil\",\"hoyo\",\"hueco\",\"huelga\",\"huerta\",\"hueso\",\"huevo\",\"huida\",\"huir\",\"humano\",\"húmedo\",\"humilde\",\"humo\",\"hundir\",\"huracán\",\"hurto\",\"icono\",\"ideal\",\"idioma\",\"ídolo\",\"iglesia\",\"iglú\",\"igual\",\"ilegal\",\"ilusión\",\"imagen\",\"imán\",\"imitar\",\"impar\",\"imperio\",\"imponer\",\"impulso\",\"incapaz\",\"índice\",\"inerte\",\"infiel\",\"informe\",\"ingenio\",\"inicio\",\"inmenso\",\"inmune\",\"innato\",\"insecto\",\"instante\",\"interés\",\"íntimo\",\"intuir\",\"inútil\",\"invierno\",\"ira\",\"iris\",\"ironía\",\"isla\",\"islote\",\"jabalí\",\"jabón\",\"jamón\",\"jarabe\",\"jardín\",\"jarra\",\"jaula\",\"jazmín\",\"jefe\",\"jeringa\",\"jinete\",\"jornada\",\"joroba\",\"joven\",\"joya\",\"juerga\",\"jueves\",\"juez\",\"jugador\",\"jugo\",\"juguete\",\"juicio\",\"junco\",\"jungla\",\"junio\",\"juntar\",\"júpiter\",\"jurar\",\"justo\",\"juvenil\",\"juzgar\",\"kilo\",\"koala\",\"labio\",\"lacio\",\"lacra\",\"lado\",\"ladrón\",\"lagarto\",\"lágrima\",\"laguna\",\"laico\",\"lamer\",\"lámina\",\"lámpara\",\"lana\",\"lancha\",\"langosta\",\"lanza\",\"lápiz\",\"largo\",\"larva\",\"lástima\",\"lata\",\"látex\",\"latir\",\"laurel\",\"lavar\",\"lazo\",\"leal\",\"lección\",\"leche\",\"lector\",\"leer\",\"legión\",\"legumbre\",\"lejano\",\"lengua\",\"lento\",\"leña\",\"león\",\"leopardo\",\"lesión\",\"letal\",\"letra\",\"leve\",\"leyenda\",\"libertad\",\"libro\",\"licor\",\"líder\",\"lidiar\",\"lienzo\",\"liga\",\"ligero\",\"lima\",\"límite\",\"limón\",\"limpio\",\"lince\",\"lindo\",\"línea\",\"lingote\",\"lino\",\"linterna\",\"líquido\",\"liso\",\"lista\",\"litera\",\"litio\",\"litro\",\"llaga\",\"llama\",\"llanto\",\"llave\",\"llegar\",\"llenar\",\"llevar\",\"llorar\",\"llover\",\"lluvia\",\"lobo\",\"loción\",\"loco\",\"locura\",\"lógica\",\"logro\",\"lombriz\",\"lomo\",\"lonja\",\"lote\",\"lucha\",\"lucir\",\"lugar\",\"lujo\",\"luna\",\"lunes\",\"lupa\",\"lustro\",\"luto\",\"luz\",\"maceta\",\"macho\",\"madera\",\"madre\",\"maduro\",\"maestro\",\"mafia\",\"magia\",\"mago\",\"maíz\",\"maldad\",\"maleta\",\"malla\",\"malo\",\"mamá\",\"mambo\",\"mamut\",\"manco\",\"mando\",\"manejar\",\"manga\",\"maniquí\",\"manjar\",\"mano\",\"manso\",\"manta\",\"mañana\",\"mapa\",\"máquina\",\"mar\",\"marco\",\"marea\",\"marfil\",\"margen\",\"marido\",\"mármol\",\"marrón\",\"martes\",\"marzo\",\"masa\",\"máscara\",\"masivo\",\"matar\",\"materia\",\"matiz\",\"matriz\",\"máximo\",\"mayor\",\"mazorca\",\"mecha\",\"medalla\",\"medio\",\"médula\",\"mejilla\",\"mejor\",\"melena\",\"melón\",\"memoria\",\"menor\",\"mensaje\",\"mente\",\"menú\",\"mercado\",\"merengue\",\"mérito\",\"mes\",\"mesón\",\"meta\",\"meter\",\"método\",\"metro\",\"mezcla\",\"miedo\",\"miel\",\"miembro\",\"miga\",\"mil\",\"milagro\",\"militar\",\"millón\",\"mimo\",\"mina\",\"minero\",\"mínimo\",\"minuto\",\"miope\",\"mirar\",\"misa\",\"miseria\",\"misil\",\"mismo\",\"mitad\",\"mito\",\"mochila\",\"moción\",\"moda\",\"modelo\",\"moho\",\"mojar\",\"molde\",\"moler\",\"molino\",\"momento\",\"momia\",\"monarca\",\"moneda\",\"monja\",\"monto\",\"moño\",\"morada\",\"morder\",\"moreno\",\"morir\",\"morro\",\"morsa\",\"mortal\",\"mosca\",\"mostrar\",\"motivo\",\"mover\",\"móvil\",\"mozo\",\"mucho\",\"mudar\",\"mueble\",\"muela\",\"muerte\",\"muestra\",\"mugre\",\"mujer\",\"mula\",\"muleta\",\"multa\",\"mundo\",\"muñeca\",\"mural\",\"muro\",\"músculo\",\"museo\",\"musgo\",\"música\",\"muslo\",\"nácar\",\"nación\",\"nadar\",\"naipe\",\"naranja\",\"nariz\",\"narrar\",\"nasal\",\"natal\",\"nativo\",\"natural\",\"náusea\",\"naval\",\"nave\",\"navidad\",\"necio\",\"néctar\",\"negar\",\"negocio\",\"negro\",\"neón\",\"nervio\",\"neto\",\"neutro\",\"nevar\",\"nevera\",\"nicho\",\"nido\",\"niebla\",\"nieto\",\"niñez\",\"niño\",\"nítido\",\"nivel\",\"nobleza\",\"noche\",\"nómina\",\"noria\",\"norma\",\"norte\",\"nota\",\"noticia\",\"novato\",\"novela\",\"novio\",\"nube\",\"nuca\",\"núcleo\",\"nudillo\",\"nudo\",\"nuera\",\"nueve\",\"nuez\",\"nulo\",\"número\",\"nutria\",\"oasis\",\"obeso\",\"obispo\",\"objeto\",\"obra\",\"obrero\",\"observar\",\"obtener\",\"obvio\",\"oca\",\"ocaso\",\"océano\",\"ochenta\",\"ocho\",\"ocio\",\"ocre\",\"octavo\",\"octubre\",\"oculto\",\"ocupar\",\"ocurrir\",\"odiar\",\"odio\",\"odisea\",\"oeste\",\"ofensa\",\"oferta\",\"oficio\",\"ofrecer\",\"ogro\",\"oído\",\"oír\",\"ojo\",\"ola\",\"oleada\",\"olfato\",\"olivo\",\"olla\",\"olmo\",\"olor\",\"olvido\",\"ombligo\",\"onda\",\"onza\",\"opaco\",\"opción\",\"ópera\",\"opinar\",\"oponer\",\"optar\",\"óptica\",\"opuesto\",\"oración\",\"orador\",\"oral\",\"órbita\",\"orca\",\"orden\",\"oreja\",\"órgano\",\"orgía\",\"orgullo\",\"oriente\",\"origen\",\"orilla\",\"oro\",\"orquesta\",\"oruga\",\"osadía\",\"oscuro\",\"osezno\",\"oso\",\"ostra\",\"otoño\",\"otro\",\"oveja\",\"óvulo\",\"óxido\",\"oxígeno\",\"oyente\",\"ozono\",\"pacto\",\"padre\",\"paella\",\"página\",\"pago\",\"país\",\"pájaro\",\"palabra\",\"palco\",\"paleta\",\"pálido\",\"palma\",\"paloma\",\"palpar\",\"pan\",\"panal\",\"pánico\",\"pantera\",\"pañuelo\",\"papá\",\"papel\",\"papilla\",\"paquete\",\"parar\",\"parcela\",\"pared\",\"parir\",\"paro\",\"párpado\",\"parque\",\"párrafo\",\"parte\",\"pasar\",\"paseo\",\"pasión\",\"paso\",\"pasta\",\"pata\",\"patio\",\"patria\",\"pausa\",\"pauta\",\"pavo\",\"payaso\",\"peatón\",\"pecado\",\"pecera\",\"pecho\",\"pedal\",\"pedir\",\"pegar\",\"peine\",\"pelar\",\"peldaño\",\"pelea\",\"peligro\",\"pellejo\",\"pelo\",\"peluca\",\"pena\",\"pensar\",\"peñón\",\"peón\",\"peor\",\"pepino\",\"pequeño\",\"pera\",\"percha\",\"perder\",\"pereza\",\"perfil\",\"perico\",\"perla\",\"permiso\",\"perro\",\"persona\",\"pesa\",\"pesca\",\"pésimo\",\"pestaña\",\"pétalo\",\"petróleo\",\"pez\",\"pezuña\",\"picar\",\"pichón\",\"pie\",\"piedra\",\"pierna\",\"pieza\",\"pijama\",\"pilar\",\"piloto\",\"pimienta\",\"pino\",\"pintor\",\"pinza\",\"piña\",\"piojo\",\"pipa\",\"pirata\",\"pisar\",\"piscina\",\"piso\",\"pista\",\"pitón\",\"pizca\",\"placa\",\"plan\",\"plata\",\"playa\",\"plaza\",\"pleito\",\"pleno\",\"plomo\",\"pluma\",\"plural\",\"pobre\",\"poco\",\"poder\",\"podio\",\"poema\",\"poesía\",\"poeta\",\"polen\",\"policía\",\"pollo\",\"polvo\",\"pomada\",\"pomelo\",\"pomo\",\"pompa\",\"poner\",\"porción\",\"portal\",\"posada\",\"poseer\",\"posible\",\"poste\",\"potencia\",\"potro\",\"pozo\",\"prado\",\"precoz\",\"pregunta\",\"premio\",\"prensa\",\"preso\",\"previo\",\"primo\",\"príncipe\",\"prisión\",\"privar\",\"proa\",\"probar\",\"proceso\",\"producto\",\"proeza\",\"profesor\",\"programa\",\"prole\",\"promesa\",\"pronto\",\"propio\",\"próximo\",\"prueba\",\"público\",\"puchero\",\"pudor\",\"pueblo\",\"puerta\",\"puesto\",\"pulga\",\"pulir\",\"pulmón\",\"pulpo\",\"pulso\",\"puma\",\"punto\",\"puñal\",\"puño\",\"pupa\",\"pupila\",\"puré\",\"quedar\",\"queja\",\"quemar\",\"querer\",\"queso\",\"quieto\",\"química\",\"quince\",\"quitar\",\"rábano\",\"rabia\",\"rabo\",\"ración\",\"radical\",\"raíz\",\"rama\",\"rampa\",\"rancho\",\"rango\",\"rapaz\",\"rápido\",\"rapto\",\"rasgo\",\"raspa\",\"rato\",\"rayo\",\"raza\",\"razón\",\"reacción\",\"realidad\",\"rebaño\",\"rebote\",\"recaer\",\"receta\",\"rechazo\",\"recoger\",\"recreo\",\"recto\",\"recurso\",\"red\",\"redondo\",\"reducir\",\"reflejo\",\"reforma\",\"refrán\",\"refugio\",\"regalo\",\"regir\",\"regla\",\"regreso\",\"rehén\",\"reino\",\"reír\",\"reja\",\"relato\",\"relevo\",\"relieve\",\"relleno\",\"reloj\",\"remar\",\"remedio\",\"remo\",\"rencor\",\"rendir\",\"renta\",\"reparto\",\"repetir\",\"reposo\",\"reptil\",\"res\",\"rescate\",\"resina\",\"respeto\",\"resto\",\"resumen\",\"retiro\",\"retorno\",\"retrato\",\"reunir\",\"revés\",\"revista\",\"rey\",\"rezar\",\"rico\",\"riego\",\"rienda\",\"riesgo\",\"rifa\",\"rígido\",\"rigor\",\"rincón\",\"riñón\",\"río\",\"riqueza\",\"risa\",\"ritmo\",\"rito\",\"rizo\",\"roble\",\"roce\",\"rociar\",\"rodar\",\"rodeo\",\"rodilla\",\"roer\",\"rojizo\",\"rojo\",\"romero\",\"romper\",\"ron\",\"ronco\",\"ronda\",\"ropa\",\"ropero\",\"rosa\",\"rosca\",\"rostro\",\"rotar\",\"rubí\",\"rubor\",\"rudo\",\"rueda\",\"rugir\",\"ruido\",\"ruina\",\"ruleta\",\"rulo\",\"rumbo\",\"rumor\",\"ruptura\",\"ruta\",\"rutina\",\"sábado\",\"saber\",\"sabio\",\"sable\",\"sacar\",\"sagaz\",\"sagrado\",\"sala\",\"saldo\",\"salero\",\"salir\",\"salmón\",\"salón\",\"salsa\",\"salto\",\"salud\",\"salvar\",\"samba\",\"sanción\",\"sandía\",\"sanear\",\"sangre\",\"sanidad\",\"sano\",\"santo\",\"sapo\",\"saque\",\"sardina\",\"sartén\",\"sastre\",\"satán\",\"sauna\",\"saxofón\",\"sección\",\"seco\",\"secreto\",\"secta\",\"sed\",\"seguir\",\"seis\",\"sello\",\"selva\",\"semana\",\"semilla\",\"senda\",\"sensor\",\"señal\",\"señor\",\"separar\",\"sepia\",\"sequía\",\"ser\",\"serie\",\"sermón\",\"servir\",\"sesenta\",\"sesión\",\"seta\",\"setenta\",\"severo\",\"sexo\",\"sexto\",\"sidra\",\"siesta\",\"siete\",\"siglo\",\"signo\",\"sílaba\",\"silbar\",\"silencio\",\"silla\",\"símbolo\",\"simio\",\"sirena\",\"sistema\",\"sitio\",\"situar\",\"sobre\",\"socio\",\"sodio\",\"sol\",\"solapa\",\"soldado\",\"soledad\",\"sólido\",\"soltar\",\"solución\",\"sombra\",\"sondeo\",\"sonido\",\"sonoro\",\"sonrisa\",\"sopa\",\"soplar\",\"soporte\",\"sordo\",\"sorpresa\",\"sorteo\",\"sostén\",\"sótano\",\"suave\",\"subir\",\"suceso\",\"sudor\",\"suegra\",\"suelo\",\"sueño\",\"suerte\",\"sufrir\",\"sujeto\",\"sultán\",\"sumar\",\"superar\",\"suplir\",\"suponer\",\"supremo\",\"sur\",\"surco\",\"sureño\",\"surgir\",\"susto\",\"sutil\",\"tabaco\",\"tabique\",\"tabla\",\"tabú\",\"taco\",\"tacto\",\"tajo\",\"talar\",\"talco\",\"talento\",\"talla\",\"talón\",\"tamaño\",\"tambor\",\"tango\",\"tanque\",\"tapa\",\"tapete\",\"tapia\",\"tapón\",\"taquilla\",\"tarde\",\"tarea\",\"tarifa\",\"tarjeta\",\"tarot\",\"tarro\",\"tarta\",\"tatuaje\",\"tauro\",\"taza\",\"tazón\",\"teatro\",\"techo\",\"tecla\",\"técnica\",\"tejado\",\"tejer\",\"tejido\",\"tela\",\"teléfono\",\"tema\",\"temor\",\"templo\",\"tenaz\",\"tender\",\"tener\",\"tenis\",\"tenso\",\"teoría\",\"terapia\",\"terco\",\"término\",\"ternura\",\"terror\",\"tesis\",\"tesoro\",\"testigo\",\"tetera\",\"texto\",\"tez\",\"tibio\",\"tiburón\",\"tiempo\",\"tienda\",\"tierra\",\"tieso\",\"tigre\",\"tijera\",\"tilde\",\"timbre\",\"tímido\",\"timo\",\"tinta\",\"tío\",\"típico\",\"tipo\",\"tira\",\"tirón\",\"titán\",\"títere\",\"título\",\"tiza\",\"toalla\",\"tobillo\",\"tocar\",\"tocino\",\"todo\",\"toga\",\"toldo\",\"tomar\",\"tono\",\"tonto\",\"topar\",\"tope\",\"toque\",\"tórax\",\"torero\",\"tormenta\",\"torneo\",\"toro\",\"torpedo\",\"torre\",\"torso\",\"tortuga\",\"tos\",\"tosco\",\"toser\",\"tóxico\",\"trabajo\",\"tractor\",\"traer\",\"tráfico\",\"trago\",\"traje\",\"tramo\",\"trance\",\"trato\",\"trauma\",\"trazar\",\"trébol\",\"tregua\",\"treinta\",\"tren\",\"trepar\",\"tres\",\"tribu\",\"trigo\",\"tripa\",\"triste\",\"triunfo\",\"trofeo\",\"trompa\",\"tronco\",\"tropa\",\"trote\",\"trozo\",\"truco\",\"trueno\",\"trufa\",\"tubería\",\"tubo\",\"tuerto\",\"tumba\",\"tumor\",\"túnel\",\"túnica\",\"turbina\",\"turismo\",\"turno\",\"tutor\",\"ubicar\",\"úlcera\",\"umbral\",\"unidad\",\"unir\",\"universo\",\"uno\",\"untar\",\"uña\",\"urbano\",\"urbe\",\"urgente\",\"urna\",\"usar\",\"usuario\",\"útil\",\"utopía\",\"uva\",\"vaca\",\"vacío\",\"vacuna\",\"vagar\",\"vago\",\"vaina\",\"vajilla\",\"vale\",\"válido\",\"valle\",\"valor\",\"válvula\",\"vampiro\",\"vara\",\"variar\",\"varón\",\"vaso\",\"vecino\",\"vector\",\"vehículo\",\"veinte\",\"vejez\",\"vela\",\"velero\",\"veloz\",\"vena\",\"vencer\",\"venda\",\"veneno\",\"vengar\",\"venir\",\"venta\",\"venus\",\"ver\",\"verano\",\"verbo\",\"verde\",\"vereda\",\"verja\",\"verso\",\"verter\",\"vía\",\"viaje\",\"vibrar\",\"vicio\",\"víctima\",\"vida\",\"vídeo\",\"vidrio\",\"viejo\",\"viernes\",\"vigor\",\"vil\",\"villa\",\"vinagre\",\"vino\",\"viñedo\",\"violín\",\"viral\",\"virgo\",\"virtud\",\"visor\",\"víspera\",\"vista\",\"vitamina\",\"viudo\",\"vivaz\",\"vivero\",\"vivir\",\"vivo\",\"volcán\",\"volumen\",\"volver\",\"voraz\",\"votar\",\"voto\",\"voz\",\"vuelo\",\"vulgar\",\"yacer\",\"yate\",\"yegua\",\"yema\",\"yerno\",\"yeso\",\"yodo\",\"yoga\",\"yogur\",\"zafiro\",\"zanja\",\"zapato\",\"zarza\",\"zona\",\"zorro\",\"zumo\",\"zurdo\"]");

},{}],"gQ1ok":[function(require,module,exports) {
"use strict";
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __assign = this && this.__assign || function() {
    __assign = Object.assign || function(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
var __read = this && this.__read || function(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var utils_1 = require("@0x/utils");
var web3_wrapper_1 = require("@0x/web3-wrapper");
var subprovider_1 = require("./subprovider");
/**
 * This class implements the [web3-provider-engine](https://github.com/MetaMask/provider-engine)
 * subprovider interface and the provider sendAsync interface.
 * It handles inconsistencies with Metamask implementations of various JSON RPC methods.
 * It forwards JSON RPC requests involving the domain of a signer (getAccounts,
 * sendTransaction, signMessage etc...) to the provider instance supplied at instantiation. All other requests
 * are passed onwards for subsequent subproviders to handle.
 */ var MetamaskSubprovider = /** @class */ function(_super) {
    __extends(MetamaskSubprovider1, _super);
    /**
     * Instantiates a new MetamaskSubprovider
     * @param supportedProvider Web3 provider that should handle  all user account related requests
     */ function MetamaskSubprovider1(supportedProvider) {
        var _this = _super.call(this) || this;
        var provider = utils_1.providerUtils.standardizeOrThrow(supportedProvider);
        _this._web3Wrapper = new web3_wrapper_1.Web3Wrapper(provider);
        _this._provider = provider;
        return _this;
    }
    /**
     * This method conforms to the web3-provider-engine interface.
     * It is called internally by the ProviderEngine when it is this subproviders
     * turn to handle a JSON RPC request.
     * @param payload JSON RPC payload
     * @param next Callback to call if this subprovider decides not to handle the request
     * @param end Callback to call if subprovider handled the request and wants to pass back the request.
     */ // tslint:disable-next-line:prefer-function-over-method async-suffix
    MetamaskSubprovider1.prototype.handleRequest = function(payload, next, end) {
        return __awaiter(this, void 0, void 0, function() {
            var _a, _b, message, address, _c, nodeVersion, err_1, accounts, err_2, _d, txParams, txData, txHash, err_3, signature, err_4, messageJSON, signature, err_5;
            return __generator(this, function(_e) {
                switch(_e.label){
                    case 0:
                        _c = payload.method;
                        switch(_c){
                            case 'web3_clientVersion':
                                return [
                                    3 /*break*/ ,
                                    1
                                ];
                            case 'eth_accounts':
                                return [
                                    3 /*break*/ ,
                                    5
                                ];
                            case 'eth_sendTransaction':
                                return [
                                    3 /*break*/ ,
                                    9
                                ];
                            case 'eth_sign':
                                return [
                                    3 /*break*/ ,
                                    14
                                ];
                            case 'eth_signTypedData':
                                return [
                                    3 /*break*/ ,
                                    19
                                ];
                            case 'eth_signTypedData_v3':
                                return [
                                    3 /*break*/ ,
                                    19
                                ];
                        }
                        return [
                            3 /*break*/ ,
                            24
                        ];
                    case 1:
                        _e.trys.push([
                            1,
                            3,
                            ,
                            4
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.getNodeVersionAsync()
                        ];
                    case 2:
                        nodeVersion = _e.sent();
                        end(null, nodeVersion);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 3:
                        err_1 = _e.sent();
                        end(err_1);
                        return [
                            3 /*break*/ ,
                            4
                        ];
                    case 4:
                        return [
                            2 /*return*/ 
                        ];
                    case 5:
                        _e.trys.push([
                            5,
                            7,
                            ,
                            8
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.getAvailableAddressesAsync()
                        ];
                    case 6:
                        accounts = _e.sent();
                        end(null, accounts);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 7:
                        err_2 = _e.sent();
                        end(err_2);
                        return [
                            3 /*break*/ ,
                            8
                        ];
                    case 8:
                        return [
                            2 /*return*/ 
                        ];
                    case 9:
                        _d = __read(payload.params, 1), txParams = _d[0];
                        _e.label = 10;
                    case 10:
                        _e.trys.push([
                            10,
                            12,
                            ,
                            13
                        ]);
                        txData = web3_wrapper_1.marshaller.unmarshalTxData(txParams);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.sendTransactionAsync(txData)
                        ];
                    case 11:
                        txHash = _e.sent();
                        end(null, txHash);
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 12:
                        err_3 = _e.sent();
                        end(err_3);
                        return [
                            3 /*break*/ ,
                            13
                        ];
                    case 13:
                        return [
                            2 /*return*/ 
                        ];
                    case 14:
                        _a = __read(payload.params, 2), address = _a[0], message = _a[1];
                        _e.label = 15;
                    case 15:
                        _e.trys.push([
                            15,
                            17,
                            ,
                            18
                        ]);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.sendRawPayloadAsync({
                                method: 'personal_sign',
                                params: [
                                    message,
                                    address
                                ]
                            })
                        ];
                    case 16:
                        signature = _e.sent();
                        signature ? end(null, signature) : end(new Error('Error performing eth_sign'), null);
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 17:
                        err_4 = _e.sent();
                        end(err_4);
                        return [
                            3 /*break*/ ,
                            18
                        ];
                    case 18:
                        return [
                            2 /*return*/ 
                        ];
                    case 19:
                        _b = __read(payload.params, 2), address = _b[0], message = _b[1];
                        _e.label = 20;
                    case 20:
                        _e.trys.push([
                            20,
                            22,
                            ,
                            23
                        ]);
                        messageJSON = JSON.stringify(message);
                        return [
                            4 /*yield*/ ,
                            this._web3Wrapper.sendRawPayloadAsync({
                                method: 'eth_signTypedData_v3',
                                params: [
                                    address,
                                    messageJSON
                                ]
                            })
                        ];
                    case 21:
                        signature = _e.sent();
                        signature ? end(null, signature) : end(new Error('Error performing eth_signTypedData'), null);
                        return [
                            3 /*break*/ ,
                            23
                        ];
                    case 22:
                        err_5 = _e.sent();
                        end(err_5);
                        return [
                            3 /*break*/ ,
                            23
                        ];
                    case 23:
                        return [
                            2 /*return*/ 
                        ];
                    case 24:
                        next();
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * This method conforms to the provider sendAsync interface.
     * Allowing the MetamaskSubprovider to be used as a generic provider (outside of Web3ProviderEngine) with the
     * addition of wrapping the inconsistent Metamask behaviour
     * @param payload JSON RPC payload
     * @return The contents nested under the result key of the response body
     */ MetamaskSubprovider1.prototype.sendAsync = function(payload, callback) {
        var _this = this;
        this.handleRequest(payload, // handleRequest has decided to not handle this, so fall through to the provider
        function() {
            var sendAsync = _this._provider.sendAsync.bind(_this._provider);
            sendAsync(payload, callback);
        }, // handleRequest has called end and will handle this
        function(err, data) {
            err ? callback(err) : callback(null, __assign({}, payload, {
                result: data
            }));
        });
    };
    return MetamaskSubprovider1;
}(subprovider_1.Subprovider);
exports.MetamaskSubprovider = MetamaskSubprovider;

},{"@0x/utils":"dgW7d","@0x/web3-wrapper":"aTm4B","./subprovider":"4dgUK"}],"isfi2":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
var __extends = this && this.__extends || function() {
    var extendStatics = function(d1, b1) {
        extendStatics = Object.setPrototypeOf || ({
            __proto__: []
        }) instanceof Array && function(d, b) {
            d.__proto__ = b;
        } || function(d, b) {
            for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
        };
        return extendStatics(d1, b1);
    };
    return function(d, b) {
        extendStatics(d, b);
        function __() {
            this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
}();
var __awaiter = this && this.__awaiter || function(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function(resolve1, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve1(result.value) : new P(function(resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = this && this.__generator || function(thisArg, body) {
    var _1 = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_1)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _1.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _1.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _1.ops.pop();
                    _1.trys.pop();
                    continue;
                default:
                    if (!(t = _1.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _1 = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _1.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _1.label < t[1]) {
                        _1.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _1.label < t[2]) {
                        _1.label = t[2];
                        _1.ops.push(op);
                        break;
                    }
                    if (t[2]) _1.ops.pop();
                    _1.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _1);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
Object.defineProperty(exports, "__esModule", {
    value: true
});
var assert_1 = require("@0x/assert");
var utils_1 = require("@0x/utils");
var EthereumTx = require("ethereumjs-tx");
var _ = require("lodash");
var HDNode = require("hdkey");
var types_1 = require("../types");
var wallet_utils_1 = require("../utils/wallet_utils");
var base_wallet_subprovider_1 = require("./base_wallet_subprovider");
var PRIVATE_KEY_PATH = "44'/60'/0'/0";
var DEFAULT_NUM_ADDRESSES_TO_FETCH = 10;
var DEFAULT_ADDRESS_SEARCH_LIMIT = 1000;
var TrezorSubprovider = /** @class */ function(_super) {
    __extends(TrezorSubprovider1, _super);
    /**
     * Instantiates a TrezorSubprovider. Defaults to private key path set to `44'/60'/0'/0/`.
     * Must be initialized with trezor-connect API module https://github.com/trezor/connect.
     * @param TrezorSubprovider config object containing trezor-connect API
     * @return TrezorSubprovider instance
     */ function TrezorSubprovider1(config) {
        var _this = _super.call(this) || this;
        _this._privateKeyPath = PRIVATE_KEY_PATH;
        _this._trezorConnectClientApi = config.trezorConnectClientApi;
        _this._networkId = config.networkId;
        _this._addressSearchLimit = config.accountFetchingConfigs !== undefined && config.accountFetchingConfigs.addressSearchLimit !== undefined ? config.accountFetchingConfigs.addressSearchLimit : DEFAULT_ADDRESS_SEARCH_LIMIT;
        return _this;
    }
    /**
     * Retrieve a users Trezor account. This method is automatically called
     * when issuing a `eth_accounts` JSON RPC request via your providerEngine
     * instance.
     * @return An array of accounts
     */ TrezorSubprovider1.prototype.getAccountsAsync = function(numberOfAccounts) {
        if (numberOfAccounts === void 0) numberOfAccounts = DEFAULT_NUM_ADDRESSES_TO_FETCH;
        return __awaiter(this, void 0, void 0, function() {
            var initialDerivedKeyInfo, derivedKeyInfos, accounts;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        return [
                            4 /*yield*/ ,
                            this._initialDerivedKeyInfoAsync()
                        ];
                    case 1:
                        initialDerivedKeyInfo = _a.sent();
                        derivedKeyInfos = wallet_utils_1.walletUtils.calculateDerivedHDKeyInfos(initialDerivedKeyInfo, numberOfAccounts);
                        accounts = _.map(derivedKeyInfos, function(k) {
                            return k.address;
                        });
                        return [
                            2 /*return*/ ,
                            accounts
                        ];
                }
            });
        });
    };
    /**
     * Signs a transaction on the Trezor with the account specificed by the `from` field in txParams.
     * If you've added the TrezorSubprovider to your app's provider, you can simply send an `eth_sendTransaction`
     * JSON RPC request, and this method will be called auto-magically. If you are not using this via a ProviderEngine
     * instance, you can call it directly.
     * @param txParams Parameters of the transaction to sign
     * @return Signed transaction hex string
     */ TrezorSubprovider1.prototype.signTransactionAsync = function(txData) {
        return __awaiter(this, void 0, void 0, function() {
            var initialDerivedKeyInfo, derivedKeyInfo, fullDerivationPath, response, payload, tx, vIndex, rIndex, sIndex, payload;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (txData.from === undefined || !utils_1.addressUtils.isAddress(txData.from)) throw new Error(types_1.WalletSubproviderErrors.FromAddressMissingOrInvalid);
                        txData.value = txData.value ? txData.value : '0x0';
                        txData.data = txData.data ? txData.data : '0x';
                        txData.gas = txData.gas ? txData.gas : '0x0';
                        txData.gasPrice = txData.gasPrice ? txData.gasPrice : '0x0';
                        return [
                            4 /*yield*/ ,
                            this._initialDerivedKeyInfoAsync()
                        ];
                    case 1:
                        initialDerivedKeyInfo = _a.sent();
                        derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, txData.from);
                        fullDerivationPath = derivedKeyInfo.derivationPath;
                        return [
                            4 /*yield*/ ,
                            this._trezorConnectClientApi.ethereumSignTransaction({
                                path: fullDerivationPath,
                                transaction: {
                                    to: txData.to,
                                    value: txData.value,
                                    data: txData.data,
                                    chainId: this._networkId,
                                    nonce: txData.nonce,
                                    gasLimit: txData.gas,
                                    gasPrice: txData.gasPrice
                                }
                            })
                        ];
                    case 2:
                        response = _a.sent();
                        if (response.success) {
                            payload = response.payload;
                            tx = new EthereumTx(txData);
                            vIndex = 6;
                            tx.raw[vIndex] = Buffer.from([
                                1
                            ]); // v
                            rIndex = 7;
                            tx.raw[rIndex] = Buffer.from([]); // r
                            sIndex = 8;
                            tx.raw[sIndex] = Buffer.from([]); // s
                            // slice off leading 0x
                            tx.v = Buffer.from(payload.v.slice(2), 'hex');
                            tx.r = Buffer.from(payload.r.slice(2), 'hex');
                            tx.s = Buffer.from(payload.s.slice(2), 'hex');
                            return [
                                2 /*return*/ ,
                                "0x" + tx.serialize().toString('hex')
                            ];
                        } else {
                            payload = response.payload;
                            throw new Error(payload.error);
                        }
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * Sign a personal Ethereum signed message. The signing account will be the account
     * associated with the provided address. If you've added the TrezorSubprovider to
     * your app's provider, you can simply send an `eth_sign` or `personal_sign` JSON RPC
     * request, and this method will be called auto-magically.
     * If you are not using this via a ProviderEngine instance, you can call it directly.
     * @param data Hex string message to sign
     * @param address Address of the account to sign with
     * @return Signature hex string (order: rsv)
     */ TrezorSubprovider1.prototype.signPersonalMessageAsync = function(data, address) {
        return __awaiter(this, void 0, void 0, function() {
            var initialDerivedKeyInfo, derivedKeyInfo, fullDerivationPath, response, payload, payload;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (data === undefined) throw new Error(types_1.WalletSubproviderErrors.DataMissingForSignPersonalMessage);
                        assert_1.assert.isHexString('data', data);
                        assert_1.assert.isETHAddressHex('address', address);
                        return [
                            4 /*yield*/ ,
                            this._initialDerivedKeyInfoAsync()
                        ];
                    case 1:
                        initialDerivedKeyInfo = _a.sent();
                        derivedKeyInfo = this._findDerivedKeyInfoForAddress(initialDerivedKeyInfo, address);
                        fullDerivationPath = derivedKeyInfo.derivationPath;
                        return [
                            4 /*yield*/ ,
                            this._trezorConnectClientApi.ethereumSignMessage({
                                path: fullDerivationPath,
                                message: data,
                                hex: true
                            })
                        ];
                    case 2:
                        response = _a.sent();
                        if (response.success) {
                            payload = response.payload;
                            return [
                                2 /*return*/ ,
                                "0x" + payload.signature
                            ];
                        } else {
                            payload = response.payload;
                            throw new Error(payload.error);
                        }
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    /**
     * TODO:: eth_signTypedData is currently not supported on Trezor devices.
     * @param address Address of the account to sign with
     * @param data the typed data object
     * @return Signature hex string (order: rsv)
     */ // tslint:disable-next-line:prefer-function-over-method
    TrezorSubprovider1.prototype.signTypedDataAsync = function(address, typedData) {
        return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
                throw new Error(types_1.WalletSubproviderErrors.MethodNotSupported);
            });
        });
    };
    TrezorSubprovider1.prototype._initialDerivedKeyInfoAsync = function() {
        return __awaiter(this, void 0, void 0, function() {
            var parentKeyDerivationPath, response, payload, hdKey, address, initialDerivedKeyInfo, payload;
            return __generator(this, function(_a) {
                switch(_a.label){
                    case 0:
                        if (!this._initialDerivedKeyInfo) return [
                            3 /*break*/ ,
                            1
                        ];
                        return [
                            2 /*return*/ ,
                            this._initialDerivedKeyInfo
                        ];
                    case 1:
                        parentKeyDerivationPath = "m/" + this._privateKeyPath;
                        return [
                            4 /*yield*/ ,
                            this._trezorConnectClientApi.getPublicKey({
                                path: parentKeyDerivationPath
                            })
                        ];
                    case 2:
                        response = _a.sent();
                        if (response.success) {
                            payload = response.payload;
                            hdKey = new HDNode();
                            hdKey.publicKey = new Buffer(payload.publicKey, 'hex');
                            hdKey.chainCode = new Buffer(payload.chainCode, 'hex');
                            address = wallet_utils_1.walletUtils.addressOfHDKey(hdKey);
                            initialDerivedKeyInfo = {
                                hdKey: hdKey,
                                address: address,
                                derivationPath: parentKeyDerivationPath,
                                baseDerivationPath: this._privateKeyPath
                            };
                            this._initialDerivedKeyInfo = initialDerivedKeyInfo;
                            return [
                                2 /*return*/ ,
                                initialDerivedKeyInfo
                            ];
                        } else {
                            payload = response.payload;
                            throw new Error(payload.error);
                        }
                        _a.label = 3;
                    case 3:
                        return [
                            2 /*return*/ 
                        ];
                }
            });
        });
    };
    TrezorSubprovider1.prototype._findDerivedKeyInfoForAddress = function(initalHDKey, address) {
        var matchedDerivedKeyInfo = wallet_utils_1.walletUtils.findDerivedKeyInfoForAddressIfExists(address, initalHDKey, this._addressSearchLimit);
        if (matchedDerivedKeyInfo === undefined) throw new Error(types_1.WalletSubproviderErrors.AddressNotFound + ": " + address);
        return matchedDerivedKeyInfo;
    };
    return TrezorSubprovider1;
}(base_wallet_subprovider_1.BaseWalletSubprovider);
exports.TrezorSubprovider = TrezorSubprovider;

},{"buffer":"fCgem","@0x/assert":"5D3Nh","@0x/utils":"dgW7d","ethereumjs-tx":"k7LMy","lodash":"3qBDj","hdkey":"f0ePh","../types":"cdJML","../utils/wallet_utils":"3wHC8","./base_wallet_subprovider":"kPcM4"}],"bd3wR":[function(require,module,exports) {
const inherits = require('util').inherits;
const ethUtil = require('ethereumjs-util');
const BN = ethUtil.BN;
const clone = require('clone');
const cacheUtils = require('../util/rpc-cache-utils.js');
const Stoplight = require('../util/stoplight.js');
const Subprovider = require('./subprovider.js');
module.exports = BlockCacheProvider;
inherits(BlockCacheProvider, Subprovider);
function BlockCacheProvider(opts) {
    const self = this;
    opts = opts || {};
    // set initialization blocker
    self._ready = new Stoplight();
    self.strategies = {
        perma: new ConditionalPermaCacheStrategy({
            eth_getTransactionByHash: containsBlockhash,
            eth_getTransactionReceipt: containsBlockhash
        }),
        block: new BlockCacheStrategy(self),
        fork: new BlockCacheStrategy(self)
    };
}
// setup a block listener on 'setEngine'
BlockCacheProvider.prototype.setEngine = function(engine) {
    const self = this;
    self.engine = engine;
    // unblock initialization after first block
    engine.once('block', function(block) {
        self.currentBlock = block;
        self._ready.go();
        // from now on, empty old cache every block
        engine.on('block', clearOldCache);
    });
    function clearOldCache(newBlock) {
        var previousBlock = self.currentBlock;
        self.currentBlock = newBlock;
        if (!previousBlock) return;
        self.strategies.block.cacheRollOff(previousBlock);
        self.strategies.fork.cacheRollOff(previousBlock);
    }
};
BlockCacheProvider.prototype.handleRequest = function(payload, next, end) {
    const self = this;
    // skip cache if told to do so
    if (payload.skipCache) // console.log('CACHE SKIP - skip cache if told to do so')
    return next();
    // Ignore block polling requests.
    if (payload.method === 'eth_getBlockByNumber' && payload.params[0] === 'latest') // console.log('CACHE SKIP - Ignore block polling requests.')
    return next();
    // wait for first block
    self._ready.await(function() {
        // actually handle the request
        self._handleRequest(payload, next, end);
    });
};
BlockCacheProvider.prototype._handleRequest = function(payload, next, end) {
    const self = this;
    var type = cacheUtils.cacheTypeForPayload(payload);
    var strategy = this.strategies[type];
    // If there's no strategy in place, pass it down the chain.
    if (!strategy) return next();
    // If the strategy can't cache this request, ignore it.
    if (!strategy.canCache(payload)) return next();
    var blockTag = cacheUtils.blockTagForPayload(payload);
    if (!blockTag) blockTag = 'latest';
    var requestedBlockNumber;
    if (blockTag === 'earliest') requestedBlockNumber = '0x00';
    else if (blockTag === 'latest') requestedBlockNumber = ethUtil.bufferToHex(self.currentBlock.number);
    else // We have a hex number
    requestedBlockNumber = blockTag;
    //console.log('REQUEST at block 0x' + requestedBlockNumber.toString('hex'))
    // end on a hit, continue on a miss
    strategy.hitCheck(payload, requestedBlockNumber, end, function() {
        // miss fallthrough to provider chain, caching the result on the way back up.
        next(function(err, result, cb) {
            // err is already handled by engine
            if (err) return cb();
            strategy.cacheResult(payload, result, requestedBlockNumber, cb);
        });
    });
};
//
// Cache Strategies
//
function PermaCacheStrategy() {
    var self = this;
    self.cache = {};
    // clear cache every ten minutes
    var timeout = setInterval(function() {
        self.cache = {};
    }, 600000);
    // do not require the Node.js event loop to remain active
    if (timeout.unref) timeout.unref();
}
PermaCacheStrategy.prototype.hitCheck = function(payload, requestedBlockNumber, hit, miss) {
    var identifier = cacheUtils.cacheIdentifierForPayload(payload);
    var cached = this.cache[identifier];
    if (!cached) return miss();
    // If the block number we're requesting at is greater than or
    // equal to the block where we cached a previous response,
    // the cache is valid. If it's from earlier than the cache,
    // send it back down to the client (where it will be recached.)
    var cacheIsEarlyEnough = compareHex(requestedBlockNumber, cached.blockNumber) >= 0;
    if (cacheIsEarlyEnough) {
        var clonedValue = clone(cached.result);
        return hit(null, clonedValue);
    } else return miss();
};
PermaCacheStrategy.prototype.cacheResult = function(payload, result, requestedBlockNumber, callback) {
    var identifier = cacheUtils.cacheIdentifierForPayload(payload);
    if (result) {
        var clonedValue = clone(result);
        this.cache[identifier] = {
            blockNumber: requestedBlockNumber,
            result: clonedValue
        };
    }
    callback();
};
PermaCacheStrategy.prototype.canCache = function(payload) {
    return cacheUtils.canCache(payload);
};
//
// ConditionalPermaCacheStrategy
//
function ConditionalPermaCacheStrategy(conditionals) {
    this.strategy = new PermaCacheStrategy();
    this.conditionals = conditionals;
}
ConditionalPermaCacheStrategy.prototype.hitCheck = function(payload, requestedBlockNumber, hit, miss) {
    return this.strategy.hitCheck(payload, requestedBlockNumber, hit, miss);
};
ConditionalPermaCacheStrategy.prototype.cacheResult = function(payload, result, requestedBlockNumber, callback) {
    var conditional = this.conditionals[payload.method];
    if (conditional) {
        if (conditional(result)) this.strategy.cacheResult(payload, result, requestedBlockNumber, callback);
        else callback();
    } else // Cache all requests that don't have a conditional
    this.strategy.cacheResult(payload, result, requestedBlockNumber, callback);
};
ConditionalPermaCacheStrategy.prototype.canCache = function(payload) {
    return this.strategy.canCache(payload);
};
//
// BlockCacheStrategy
//
function BlockCacheStrategy() {
    this.cache = {};
}
BlockCacheStrategy.prototype.getBlockCacheForPayload = function(payload, blockNumberHex) {
    const blockNumber = Number.parseInt(blockNumberHex, 16);
    let blockCache = this.cache[blockNumber];
    // create new cache if necesary
    if (!blockCache) {
        const newCache = {};
        this.cache[blockNumber] = newCache;
        blockCache = newCache;
    }
    return blockCache;
};
BlockCacheStrategy.prototype.hitCheck = function(payload, requestedBlockNumber, hit, miss) {
    var blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
    if (!blockCache) return miss();
    var identifier = cacheUtils.cacheIdentifierForPayload(payload);
    var cached = blockCache[identifier];
    if (cached) return hit(null, cached);
    else return miss();
};
BlockCacheStrategy.prototype.cacheResult = function(payload, result, requestedBlockNumber, callback) {
    if (result) {
        var blockCache = this.getBlockCacheForPayload(payload, requestedBlockNumber);
        var identifier = cacheUtils.cacheIdentifierForPayload(payload);
        blockCache[identifier] = result;
    }
    callback();
};
BlockCacheStrategy.prototype.canCache = function(payload) {
    if (!cacheUtils.canCache(payload)) return false;
    var blockTag = cacheUtils.blockTagForPayload(payload);
    return blockTag !== 'pending';
};
// naively removes older block caches
BlockCacheStrategy.prototype.cacheRollOff = function(previousBlock) {
    const self = this;
    const previousHex = ethUtil.bufferToHex(previousBlock.number);
    const oldBlockNumber = Number.parseInt(previousHex, 16);
    // clear old caches
    Object.keys(self.cache).map(Number).filter((num)=>num <= oldBlockNumber
    ).forEach((num)=>delete self.cache[num]
    );
};
// util
function compareHex(hexA, hexB) {
    var numA = parseInt(hexA, 16);
    var numB = parseInt(hexB, 16);
    return numA === numB ? 0 : numA > numB ? 1 : -1;
}
function hexToBN(hex) {
    return new BN(ethUtil.toBuffer(hex));
}
function containsBlockhash(result) {
    if (!result) return false;
    if (!result.blockHash) return false;
    const hasNonZeroHash = hexToBN(result.blockHash).gt(new BN(0));
    return hasNonZeroHash;
}

},{"util":"cxohQ","ethereumjs-util":"glktw","clone":"02d7F","../util/rpc-cache-utils.js":"ihP89","../util/stoplight.js":"a4Kqs","./subprovider.js":"feL7C"}],"02d7F":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var clone = function() {
    function _instanceof(obj, type) {
        return type != null && obj instanceof type;
    }
    var nativeMap;
    try {
        nativeMap = Map;
    } catch (_) {
        // maybe a reference error because no `Map`. Give it a dummy value that no
        // value will ever be an instanceof.
        nativeMap = function() {};
    }
    var nativeSet;
    try {
        nativeSet = Set;
    } catch (_1) {
        nativeSet = function() {};
    }
    var nativePromise;
    try {
        nativePromise = Promise;
    } catch (_2) {
        nativePromise = function() {};
    }
    /**
 * Clones (copies) an Object using deep copying.
 *
 * This function supports circular references by default, but if you are certain
 * there are no circular references in your object, you can save some CPU time
 * by calling clone(obj, false).
 *
 * Caution: if `circular` is false and `parent` contains circular references,
 * your program may enter an infinite loop and crash.
 *
 * @param `parent` - the object to be cloned
 * @param `circular` - set to true if the object to be cloned may contain
 *    circular references. (optional - true by default)
 * @param `depth` - set to a number if the object is only to be cloned to
 *    a particular depth. (optional - defaults to Infinity)
 * @param `prototype` - sets the prototype to be used when cloning an object.
 *    (optional - defaults to parent prototype).
 * @param `includeNonEnumerable` - set to true if the non-enumerable properties
 *    should be cloned as well. Non-enumerable properties on the prototype
 *    chain will be ignored. (optional - false by default)
*/ function clone1(parent1, circular, depth1, prototype, includeNonEnumerable) {
        if (typeof circular === 'object') {
            depth1 = circular.depth;
            prototype = circular.prototype;
            includeNonEnumerable = circular.includeNonEnumerable;
            circular = circular.circular;
        }
        // maintain two arrays for circular references, where corresponding parents
        // and children have the same index
        var allParents = [];
        var allChildren = [];
        var useBuffer = typeof Buffer != 'undefined';
        if (typeof circular == 'undefined') circular = true;
        if (typeof depth1 == 'undefined') depth1 = Infinity;
        // recurse this function so we don't reset allParents and allChildren
        function _clone(parent, depth) {
            // cloning null always returns null
            if (parent === null) return null;
            if (depth === 0) return parent;
            var child;
            var proto;
            if (typeof parent != 'object') return parent;
            if (_instanceof(parent, nativeMap)) child = new nativeMap();
            else if (_instanceof(parent, nativeSet)) child = new nativeSet();
            else if (_instanceof(parent, nativePromise)) child = new nativePromise(function(resolve, reject) {
                parent.then(function(value) {
                    resolve(_clone(value, depth - 1));
                }, function(err) {
                    reject(_clone(err, depth - 1));
                });
            });
            else if (clone1.__isArray(parent)) child = [];
            else if (clone1.__isRegExp(parent)) {
                child = new RegExp(parent.source, __getRegExpFlags(parent));
                if (parent.lastIndex) child.lastIndex = parent.lastIndex;
            } else if (clone1.__isDate(parent)) child = new Date(parent.getTime());
            else if (useBuffer && Buffer.isBuffer(parent)) {
                if (Buffer.allocUnsafe) // Node.js >= 4.5.0
                child = Buffer.allocUnsafe(parent.length);
                else // Older Node.js versions
                child = new Buffer(parent.length);
                parent.copy(child);
                return child;
            } else if (_instanceof(parent, Error)) child = Object.create(parent);
            else if (typeof prototype == 'undefined') {
                proto = Object.getPrototypeOf(parent);
                child = Object.create(proto);
            } else {
                child = Object.create(prototype);
                proto = prototype;
            }
            if (circular) {
                var index = allParents.indexOf(parent);
                if (index != -1) return allChildren[index];
                allParents.push(parent);
                allChildren.push(child);
            }
            if (_instanceof(parent, nativeMap)) parent.forEach(function(value, key) {
                var keyChild = _clone(key, depth - 1);
                var valueChild = _clone(value, depth - 1);
                child.set(keyChild, valueChild);
            });
            if (_instanceof(parent, nativeSet)) parent.forEach(function(value) {
                var entryChild = _clone(value, depth - 1);
                child.add(entryChild);
            });
            for(var i in parent){
                var attrs;
                if (proto) attrs = Object.getOwnPropertyDescriptor(proto, i);
                if (attrs && attrs.set == null) continue;
                child[i] = _clone(parent[i], depth - 1);
            }
            if (Object.getOwnPropertySymbols) {
                var symbols = Object.getOwnPropertySymbols(parent);
                for(var i = 0; i < symbols.length; i++){
                    // Don't need to worry about cloning a symbol because it is a primitive,
                    // like a number or string.
                    var symbol = symbols[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, symbol);
                    if (descriptor && !descriptor.enumerable && !includeNonEnumerable) continue;
                    child[symbol] = _clone(parent[symbol], depth - 1);
                    if (!descriptor.enumerable) Object.defineProperty(child, symbol, {
                        enumerable: false
                    });
                }
            }
            if (includeNonEnumerable) {
                var allPropertyNames = Object.getOwnPropertyNames(parent);
                for(var i = 0; i < allPropertyNames.length; i++){
                    var propertyName = allPropertyNames[i];
                    var descriptor = Object.getOwnPropertyDescriptor(parent, propertyName);
                    if (descriptor && descriptor.enumerable) continue;
                    child[propertyName] = _clone(parent[propertyName], depth - 1);
                    Object.defineProperty(child, propertyName, {
                        enumerable: false
                    });
                }
            }
            return child;
        }
        return _clone(parent1, depth1);
    }
    /**
 * Simple flat clone using prototype, accepts only objects, usefull for property
 * override on FLAT configuration object (no nested props).
 *
 * USE WITH CAUTION! This may not behave as you wish if you do not know how this
 * works.
 */ clone1.clonePrototype = function clonePrototype(parent) {
        if (parent === null) return null;
        var c = function() {};
        c.prototype = parent;
        return new c();
    };
    // private utility functions
    function __objToStr(o) {
        return Object.prototype.toString.call(o);
    }
    clone1.__objToStr = __objToStr;
    function __isDate(o) {
        return typeof o === 'object' && __objToStr(o) === '[object Date]';
    }
    clone1.__isDate = __isDate;
    function __isArray(o) {
        return typeof o === 'object' && __objToStr(o) === '[object Array]';
    }
    clone1.__isArray = __isArray;
    function __isRegExp(o) {
        return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    }
    clone1.__isRegExp = __isRegExp;
    function __getRegExpFlags(re) {
        var flags = '';
        if (re.global) flags += 'g';
        if (re.ignoreCase) flags += 'i';
        if (re.multiline) flags += 'm';
        return flags;
    }
    clone1.__getRegExpFlags = __getRegExpFlags;
    return clone1;
}();
if (module.exports) module.exports = clone;

},{"buffer":"fCgem"}],"feL7C":[function(require,module,exports) {
const createPayload = require('../util/create-payload.js');
module.exports = SubProvider;
// this is the base class for a subprovider -- mostly helpers
function SubProvider() {}
SubProvider.prototype.setEngine = function(engine) {
    const self = this;
    self.engine = engine;
    engine.on('block', function(block) {
        self.currentBlock = block;
    });
};
SubProvider.prototype.handleRequest = function(payload, next, end) {
    throw new Error('Subproviders should override `handleRequest`.');
};
SubProvider.prototype.emitPayload = function(payload, cb) {
    const self = this;
    self.engine.sendAsync(createPayload(payload), cb);
};

},{"../util/create-payload.js":"jlx5q"}]},["2d1gD"], null, "parcelRequiredb79")

//# sourceMappingURL=ledger-connector.esm.badc7d27.js.map
